diff --git a/build/parts/drv/renesas_isr/renesas_pdev_icumx_isr_handler.c b/build/parts/drv/renesas_isr/renesas_pdev_icumx_isr_handler.c
new file mode 100644
index 0000000..4ef40e1
--- /dev/null
+++ b/build/parts/drv/renesas_isr/renesas_pdev_icumx_isr_handler.c
@@ -0,0 +1,136 @@
+/***********************************************************************************************************************
+* Copyright [2022] Renesas Electronics Corporation and/or its licensors. All Rights Reserved.
+*
+* The contents of this file (the "contents") are proprietary and confidential to Renesas Electronics Corporation
+* and/or its licensors ("Renesas") and subject to statutory and contractual protections.
+*
+* Unless otherwise expressly agreed in writing between Renesas and you: 1) you may not use, copy, modify, distribute,
+* display, or perform the contents; 2) you may not use any name or mark of Renesas for advertising or publicity
+* purposes or in connection with your use of the contents; 3) RENESAS MAKES NO WARRANTY OR REPRESENTATIONS ABOUT THE
+* SUITABILITY OF THE CONTENTS FOR ANY PURPOSE; THE CONTENTS ARE PROVIDED "AS IS" WITHOUT ANY EXPRESS OR IMPLIED
+* WARRANTY, INCLUDING THE IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, AND
+* NON-INFRINGEMENT; AND 4) RENESAS SHALL NOT BE LIABLE FOR ANY DIRECT, INDIRECT, SPECIAL, OR CONSEQUENTIAL DAMAGES,
+* INCLUDING DAMAGES RESULTING FROM LOSS OF USE, DATA, OR PROJECTS, WHETHER IN AN ACTION OF CONTRACT OR TORT, ARISING
+* OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THE CONTENTS. Third-party contents included in this file may
+* be subject to different terms.
+***********************************************************************************************************************/
+/****************************************************************************
+ISR handler function for GIC problem workaround
+****************************************************************************/
+#include "renesas_isr_common.h"
+
+void rcar_pdev_icumx_isr_handler(uint16_t iid, uintptr_t param)
+{
+
+    int32_t ret = MCOS_EOK;
+    /* Disable ICUMX_CMDREG */
+    switch(iid)
+    {
+        /* Disable ICUMX_PE2ICUSIE(interrupt No: 910 is ICUMX_PE2ICUSIE) */
+        case (878U + 32U):
+        /* Disable ICUMX_PE2ICUSIE(interrupt No: 911 is ICUMX_PE2ICUSIE) */
+        case (879U + 32U):
+        /* Disable ICUMX_PE2ICUSIE(interrupt No: 912 is ICUMX_PE2ICUSIE) */
+        case (880U + 32U):
+        /* Disable ICUMX_PE2ICUSIE(interrupt No: 913 is ICUMX_PE2ICUSIE) */
+        case (881U + 32U):
+        /* Disable ICUMX_PE2ICUSIE(interrupt No: 914 is ICUMX_PE2ICUSIE) */
+        case (882U + 32U):
+        /* Disable ICUMX_PE2ICUSIE(interrupt No: 915 is ICUMX_PE2ICUSIE) */
+        case (883U + 32U):
+        /* Disable ICUMX_PE2ICUSIE(interrupt No: 916 is ICUMX_PE2ICUSIE) */
+        case (884U + 32U):
+        /* Disable ICUMX_PE2ICUSIE(interrupt No: 917 is ICUMX_PE2ICUSIE) */
+        case (885U + 32U):
+        /* Disable ICUMX_PE2ICUSIE(interrupt No: 918 is ICUMX_PE2ICUSIE) */
+        case (886U + 32U):
+        /* Disable ICUMX_PE2ICUSIE(interrupt No: 919 is ICUMX_PE2ICUSIE) */
+        case (887U + 32U):
+            *((volatile uint32_t*)(0xffffffff00000000 + 0xE6610000 + 0x008C)) = 0x00000000;
+            break;
+
+        /* Disable ICUMX_PE2ICUSIE(interrupt No: 920 is ICUMX_PE2ICUIE0) */
+        case (888U + 32U):
+            *((volatile uint32_t*)(0xffffffff00000000 + 0xE6610000 + 0x005C)) = 0x00000000;
+            break;
+
+        /* Disable ICUMX_PE2ICUSIE(interrupt No: 921 is ICUMX_PE2ICUIE1) */
+        case (889U + 32U):
+            *((volatile uint32_t*)(0xffffffff00000000 + 0xE6610000 + 0x011C)) = 0x00000000;
+            break;
+
+        /* Disable ICUMX_PE2ICUSIE(interrupt No: 922 is ICUMX_PE2ICUIE2) */
+        case (890U + 32U):
+            *((volatile uint32_t*)(0xffffffff00000000 + 0xE6610000 + 0x014C)) = 0x00000000;
+            break;
+
+        /* Disable ICUMX_PE2ICUSIE(interrupt No: 923 is ICUMX_PE2ICUIE3) */
+        case (891U + 32U):
+            *((volatile uint32_t*)(0xffffffff00000000 + 0xE6610000 + 0x017C)) = 0x00000000;
+            break;
+
+        /* Disable ICUMX_PE2ICUSIE(interrupt No: 924 is ICUMX_PE2ICUIE4) */
+        case (892U + 32U):
+            *((volatile uint32_t*)(0xffffffff00000000 + 0xE6610000 + 0x01AC)) = 0x00000000;
+            break;
+
+        /* Disable ICUMX_PE2ICUSIE(interrupt No: 925 is ICUMX_PE2ICUIE5) */
+        case (893U + 32U):
+            *((volatile uint32_t*)(0xffffffff00000000 + 0xE6610000 + 0x01DC)) = 0x00000000;
+            break;
+
+        /* Disable ICUMX_PE2ICUSIE(interrupt No: 926 is ICUMX_PE2ICUIE6) */
+        case (894U + 32U):
+            *((volatile uint32_t*)(0xffffffff00000000 + 0xE6610000 + 0x020C)) = 0x00000000;
+            break;
+
+        /* Disable ICUMX_PE2ICUSIE(interrupt No: 927 is ICUMX_PE2ICUIE7) */
+        case (895U + 32U):
+            *((volatile uint32_t*)(0xffffffff00000000 + 0xE6610000 + 0x023C)) = 0x00000000;
+            break;
+
+        /* Disable ICUMX_PE2ICUSIE(interrupt No: 928 is ICUMX_PE2ICUIE8) */
+        case (896U + 32U):
+            *((volatile uint32_t*)(0xffffffff00000000 + 0xE6610000 + 0x026C)) = 0x00000000;
+            break;
+
+        /* Disable ICUMX_PE2ICUSIE(interrupt No: 929 is ICUMX_PE2ICUIE9) */
+        case (897U + 32U):
+            *((volatile uint32_t*)(0xffffffff00000000 + 0xE6610000 + 0x029C)) = 0x00000000;
+            break;
+
+        default:
+            ret = MCOS_ENOEXS;
+            break;
+    }
+
+    if (ret != MCOS_EOK)
+    {
+        mcos_debug_printf(
+                "interrupt %d: mcos_interrupt_disable error (%d) in %s/n",
+                iid, ret, __func__);
+    }
+    else
+    {
+        pdev_intentry_t *intentry = (pdev_intentry_t *) param;
+        struct lfs_devgetdone req;
+        req.code = DEV_DEVGETDONE;
+        req.type = GETDONE_NONBLOCK | (intentry->intno << 8);
+        req.ptr = (lfs_t**) intentry->itr_config.param;
+        if (intentry->itr_config.uring != NULL)
+        {
+            ret = uring_interrupt_notify_internal(intentry->itr_config.uring, &req, sizeof(struct lfs_devgetdone), true);
+        }
+        else
+        {
+            ret = mcos_rrmessage_send(intentry->itr_config.tid, DEV_DEVGETDONE, &req, sizeof(req), NULL, NULL, 0);
+        }
+
+        if (ret != MCOS_EOK)
+        {
+            mcos_debug_printf(
+                            "interrupt %d: mcos_rrmessage_send error in %s/n",
+                            iid, __func__);
+        }
+    }
+}
