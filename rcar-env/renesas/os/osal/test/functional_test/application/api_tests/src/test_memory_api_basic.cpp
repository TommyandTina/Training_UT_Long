/***********************************************************************************************************************
* Copyright [2021-2024] Renesas Electronics Corporation and/or its licensors. All Rights Reserved.
*
* The contents of this file (the "contents") are proprietary and confidential to Renesas Electronics Corporation
* and/or its licensors ("Renesas") and subject to statutory and contractual protections.
*
* Unless otherwise expressly agreed in writing between Renesas and you: 1) you may not use, copy, modify, distribute,
* display, or perform the contents; 2) you may not use any name or mark of Renesas for advertising or publicity
* purposes or in connection with your use of the contents; 3) RENESAS MAKES NO WARRANTY OR REPRESENTATIONS ABOUT THE
* SUITABILITY OF THE CONTENTS FOR ANY PURPOSE; THE CONTENTS ARE PROVIDED "AS IS" WITHOUT ANY EXPRESS OR IMPLIED
* WARRANTY, INCLUDING THE IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, AND
* NON-INFRINGEMENT; AND 4) RENESAS SHALL NOT BE LIABLE FOR ANY DIRECT, INDIRECT, SPECIAL, OR CONSEQUENTIAL DAMAGES,
* INCLUDING DAMAGES RESULTING FROM LOSS OF USE, DATA, OR PROJECTS, WHETHER IN AN ACTION OF CONTRACT OR TORT, ARISING
* OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THE CONTENTS. Third-party contents included in this file may
* be subject to different terms.
***********************************************************************************************************************/
/***********************************************************************************************************************
* File Name :    test_memory_api_basic.cpp
* Version :      3.7.0
* Product Name : OSAL
* Device(s) :    R-Car
* Description :  OSAL Memory Manager API Functional Test (From the perspective of OSAL API Specification)
***********************************************************************************************************************/
/***********************************************************************************************************************
 * History   Version   DD.MM.YYYY    Description
 *           2.0.0     29.10.2021    Create New
 *           2.1.0     08.11.2021    Add OSAL_RETURN_STATE Tests for each Mmngr API
 *                                   09_003_046, 09_004_040, 09_004_041, 09_004_042,
 *                                   09_004_043, 09_005_010, 09_007_014, 09_015_021
 *           2.2.0     11.11.2021    Delete DebugPrint Tests using output file
 *                                   09_015_009, 09_016_005
 *           2.2.1     15.11.2021    Update Test Name
 *                                   openClose -> openClose_TC_12_001_015
 *                                   allocateDeallocate - >allocateDeallocate_TC_12_001_018
 *                                   mmngrCfg -> mmngrCfg_TC_12_001_016
 *                                   bufferAccess -> bufferAccess_TC_12_001_021
 *                                   OsalInit -> OsalInit_TC_12_001_022
 *                                   allocSize -> allocSize_TC_12_001_019
 *           2.2.2     18.11.2021    Fix Typo
 *           2.2.3     11.03.2022    Enable disabled test on SIL
 *           3.0.0     30.03.2022    Add size and align in test case MmngrDebugMmngrPrint_TC_09_015_003
 *           3.1.0     24.06.2022    Add new test cases for new multi memory region APIs
 *           3.2.0     28.07.2022    Add new memory test cases in multi-threads
 *                                   Move InitDeinit_TC_10_001_015 and InitDeinit_TC_10_001_016 to InitDeinitApiTest
 *           3.3.0     11.11.2022    Add test cases of MmngrGetHwAddr with invalid AXI ID as below:
 *                                      - MmngrGetHwAddr_TC_09_012_009
 *                                      - MmngrGetHwAddr_TC_09_012_010
 *                                      - MmngrGetHwAddr_TC_09_012_011
 *                                      - MmngrGetHwAddr_TC_09_012_012
 *           3.4.0     10.01.2023    Disable overflow/underflow without PROT test cases:
 *                                      - MmngrCheckBuffer_TC_09_014_005
 *                                      - MmngrCheckBuffer_TC_09_014_009
 *                                      - MmngrCheckBuffer_TC_09_014_007
 *                                      - MmngrCheckBuffer_TC_09_014_011
 *           3.5.0     02.02.2023    Add new boundary test cases as below:
 *                                      - From MmngrOpen_TC_09_001_057 to MmngrOpen_TC_09_001_061
 *                                      - From MmngrAlloc_TC_09_003_047 to MmngrAlloc_TC_09_003_054
 *                                      - From MmngrOpenFromRegionIdx_TC_09_021_053 to MmngrOpenFromRegionIdx_TC_09_021_057
 *                     06.02.2023    Add new test cases based on new version of API Specification as below:
 *                                      - From MmngrClose_TC_09_002_019 to MmngrClose_TC_09_002_023
 *                                      - From MmngrAlloc_TC_09_003_055 to MmngrAlloc_TC_09_003_062
 *                                      - From MmngrDealloc_TC_09_004_044 to MmngrDealloc_TC_09_004_051
 *                                      - From MmngrGetConfig_TC_09_005_011 to MmngrGetConfig_TC_09_005_017
 *                                      - From MmngrRegisterMonitor_TC_09_007_015 to MmngrRegisterMonitor_TC_09_007_024
 *                                      - From MmngrGetCpuPtr_TC_09_008_011 to MmngrGetCpuPtr_TC_09_008_024
 *                                      - From MmngrGetConstCpuPtr_TC_09_009_011 to MmngrGetConstCpuPtr_TC_09_009_024
 *                                      - From MmngrFlush_TC_09_010_019 to MmngrFlush_TC_09_010_048
 *                                      - From MmngrInvalidate_TC_09_011_019 to MmngrInvalidate_TC_09_011_048
 *                                      - From MmngrGetHwAddr_TC_09_012_013 to MmngrGetHwAddr_TC_09_012_028
 *                                      - From MmngrGetSize_TC_09_013_013 to MmngrGetSize_TC_09_013_026
 *                                      - From MmngrCheckBuffer_TC_09_014_018 to MmngrCheckBuffer_TC_09_014_033
 *                                      - From MmngrDebugMmngrPrint_TC_09_015_022 to MmngrDebugMmngrPrint_TC_09_015_029
 *                                      - From MmngrDebugBufferPrint_TC_09_016_012 to MmngrDebugBufferPrint_TC_09_016_015
 *                                      - MmngrOpenFromRegionIdx_TC_09_021_052
 *           3.6.0     21.02.2023    Add new test cases for MmngrClose as below:
 *                                      - MmngrClose_TC_09_002_024
 *                                      - MmngrClose_TC_09_002_025
 *                                      - MmngrClose_TC_09_002_026
 *                                      - MmngrClose_TC_09_002_027
 *                     22.02.2023    Re-enable all disabled test cases of Memory on SIL
 *           3.6.1     10.04.2023    Update expected value for test case MmngrClose_TC_09_002_019
 *           3.7.0     09.01.2024    Add new test cases as below:
 *                                      - MmngrOpenFromRegionIdx_TC_09_021_058
 *                                      - From MmngrAlloc_TC_09_003_063 to MmngrAlloc_TC_09_003_079
 *                                   Update test bufferAccess_TC_12_001_021
***********************************************************************************************************************/
#include "rcar-xos/osal/r_osal.h"
#if !defined(OSAL_TEST_FRAMEWORK)
#include "gmock/gmock.h"
#include "gtest/gtest.h"
#include <numeric>
#include <iterator>
#include <array>
#include <vector>
#include "rcar-xos/utils/r_utils.hpp"
#include "rcar-xos/osal/r_osal_memory.hpp"
using ::testing::_;
using ::testing::Eq;
using ::testing::AtLeast;
using namespace std;
using namespace renesas::rcarxos::utils::literals;
using namespace renesas::rcarxos::utils;
using namespace renesas::rcarxos::osal;
#else
#include "osal_test_mock_framework.hpp"
using namespace OsalTestFrameworkMatcher;
using namespace OsalFWHelper;
using namespace OsalFWHelper::utils;
#endif
#include "rcar-xos/osal/r_osal_memory_impl.h"
#include "test_common.hpp"
#include <stdlib.h>
#include <time.h>


/* armclang will be warnig, when specified OsalApiStateTest to TEST_F */
/* W.A Derive a class and replace it by define */
class OsalApiStateTest_MEM : public OsalApiStateTest
{
    /* There is no need for member variables and member functions.
       We added them just for the sake of adding a test class. */
};
#define OsalApiStateTest OsalApiStateTest_MEM

#if !defined(TEST_SIL)
#define MmngrAlloc_TC_09_003_064 DISABLED_MmngrAlloc_TC_09_003_064
#define MmngrAlloc_TC_09_003_065 DISABLED_MmngrAlloc_TC_09_003_065
#define MmngrAlloc_TC_09_003_066 DISABLED_MmngrAlloc_TC_09_003_066
#define MmngrAlloc_TC_09_003_067 DISABLED_MmngrAlloc_TC_09_003_067
#define MmngrAlloc_TC_09_003_068 DISABLED_MmngrAlloc_TC_09_003_068
#define MmngrAlloc_TC_09_003_069 DISABLED_MmngrAlloc_TC_09_003_069
#define MmngrAlloc_TC_09_003_070 DISABLED_MmngrAlloc_TC_09_003_070
#define MmngrAlloc_TC_09_003_071 DISABLED_MmngrAlloc_TC_09_003_071
#endif

#if defined(NDEBUG)
#define MmngrDebugMmngrPrint_TC_09_015_001 MmngrDebugMmngrPrint_TC_09_015_012
#define MmngrDebugMmngrPrint_TC_09_015_002 MmngrDebugMmngrPrint_TC_09_015_013
#define MmngrDebugMmngrPrint_TC_09_015_003 MmngrDebugMmngrPrint_TC_09_015_014
#define MmngrDebugMmngrPrint_TC_09_015_004 MmngrDebugMmngrPrint_TC_09_015_015
#define MmngrDebugMmngrPrint_TC_09_015_005 MmngrDebugMmngrPrint_TC_09_015_016
#define MmngrDebugMmngrPrint_TC_09_015_009 MmngrDebugMmngrPrint_TC_09_015_017
#define MmngrDebugMmngrPrint_TC_09_015_010 MmngrDebugMmngrPrint_TC_09_015_018
#define MmngrDebugMmngrPrint_TC_09_015_011 MmngrDebugMmngrPrint_TC_09_015_019
#define MmngrDebugBufferPrint_TC_09_016_001 MmngrDebugMmngrPrint_TC_09_016_008
#define MmngrDebugBufferPrint_TC_09_016_005 MmngrDebugMmngrPrint_TC_09_016_009
#define MmngrDebugBufferPrint_TC_09_016_006 MmngrDebugMmngrPrint_TC_09_016_010
#define MmngrDebugBufferPrint_TC_09_016_007 MmngrDebugMmngrPrint_TC_09_016_011
#endif

#if !defined(OSAL_TEST_FRAMEWORK)
inline std::ostream & operator<<(std::ostream & os, const st_osal_mmngr_config_t & obj)
{
    os << "[mode: " << obj.mode << ", mem limit: " << (obj.memory_limit / 1024)
       << "KB, max # alloc: " << obj.max_allowed_allocations
       << ", max event monitors: " << obj.max_registered_monitors_cbs << "]";
    return os;
}
#endif

class OsalMemoryCApiTest : public PARENT_TEST_FW_CLASS
{
protected:
// [OsalMemoryCApiTest_SetUp]
    void SetUp() override
    {
        /* R_OSAL_Initialize is already called before test start */
        ASSERT_EQ(OSAL_RETURN_OK, R_OSAL_MmngrGetOsalMaxConfig(&mmngr_capabilities_cfg))
            << " failed to query default configuration, cannot proceed with testing";
    }
// [OsalMemoryCApiTest_SetUp]

// [OsalMemoryCApiTest_TearDown]
    void TearDown() override
    {
        /* R_OSAL_Deinitialize is called after test end */
    }
// [OsalMemoryCApiTest_TearDown]

    /* function is used by config check tests, re-implement to use specific Memory Manager */
    virtual e_osal_return_t mmngr_open(const st_osal_mmngr_config_t * const config,
                                       osal_memory_manager_handle_t * const hndl_mmngr)
    {
        auto ret    = R_OSAL_MmngrOpen(config, hndl_mmngr);
        m_mmngrHndl = *hndl_mmngr;
        return ret;
    }

    virtual e_osal_return_t mmngr_close(osal_memory_manager_handle_t hndl_mmngr)
    {
        auto ret = R_OSAL_MmngrClose(hndl_mmngr);
        if (OSAL_RETURN_OK == ret)
        {
            m_mmngrHndl = OSAL_MEMORY_MANAGER_HANDLE_INVALID;
        }
        return ret;
    }

    virtual e_osal_return_t mmngr_alloc(osal_memory_manager_handle_t hndl_mmngr, size_t size, size_t alignment,
                                        osal_memory_buffer_handle_t * const buffer_obj)
    {
        return R_OSAL_MmngrAlloc(hndl_mmngr, size, alignment, buffer_obj);
    }

    virtual e_osal_return_t mmngr_dealloc(osal_memory_manager_handle_t hndl_mmngr,
                                          osal_memory_buffer_handle_t  buffer_obj)
    {
        return R_OSAL_MmngrDealloc(hndl_mmngr, buffer_obj);
    }

    st_osal_mmngr_config_t       mmngr_capabilities_cfg; //    = renesas::rcarxos::osal::MMNGR_CONFIG_INIT_VALUE();
    osal_memory_manager_handle_t m_mmngrHndl = OSAL_MEMORY_MANAGER_HANDLE_INVALID;
};

/**
 * @page MM_API Memory API Test
 * @test
 * @test @link OsalMemoryImplCApiTest_openClose_TC_12_001_015 @endlink
 * @test @link OsalMemoryImplCApiTest_allocateDeallocate_TC_12_001_018 @endlink
 * @test @link OsalMemoryCApiTest_mmngrCfg_TC_12_001_016 @endlink
 * @test @link OsalMemoryCApiTest_bufferAccess_TC_12_001_021 @endlink
 * @test @link OsalMemoryCApiTestInit_OsalInit_TC_12_001_022 @endlink
 * @test @link OsalMemoryCApiTest_allocSize_TC_12_001_019 @endlink
 * @test @link MemoryApiTest_MmngrOpen_TC_09_001_001 @endlink
 * @test @link MemoryApiTest_MmngrOpen_TC_09_001_005 @endlink
 * @test @link MemoryApiTest_MmngrOpen_TC_09_001_006 @endlink
 * @test @link MemoryApiTest_MmngrOpen_TC_09_001_007 @endlink
 * @test @link MemoryApiTest_MmngrOpen_TC_09_001_008 @endlink
 * @test @link MemoryApiTest_MmngrOpen_TC_09_001_009 @endlink
 * @test @link MemoryApiTest_MmngrOpen_TC_09_001_010 @endlink
 * @test @link MemoryApiTest_MmngrOpen_TC_09_001_011 @endlink
 * @test @link MemoryApiTest_MmngrOpen_TC_09_001_012 @endlink
 * @test @link MemoryApiTest_MmngrOpen_TC_09_001_013 @endlink
 * @test @link MemoryApiTest_MmngrOpen_TC_09_001_014 @endlink
 * @test @link MemoryApiTest_MmngrOpen_TC_09_001_015 @endlink
 * @test @link MemoryApiTest_MmngrOpen_TC_09_001_016 @endlink
 * @test @link MemoryApiTest_MmngrOpen_TC_09_001_017 @endlink
 * @test @link OsalApiStateTest_MmngrOpen_TC_09_001_018 @endlink
 * @test @link MemoryApiTest_MmngrOpen_TC_09_001_019 @endlink
 * @test @link MemoryApiTest_MmngrOpen_TC_09_001_020 @endlink
 * @test @link MemoryApiTest_MmngrOpen_TC_09_001_021 @endlink
 * @test @link MemoryApiTest_MmngrOpen_TC_09_001_025 @endlink
 * @test @link MemoryApiTest_MmngrOpen_TC_09_001_026 @endlink
 * @test @link MemoryApiTest_MmngrOpen_TC_09_001_027 @endlink
 * @test @link MemoryApiTest_MmngrOpen_TC_09_001_028 @endlink
 * @test @link MemoryApiTest_MmngrOpen_TC_09_001_029 @endlink
 * @test @link MemoryApiTest_MmngrOpen_TC_09_001_030 @endlink
 * @test @link OsalApiStateTest_MmngrOpen_TC_09_001_031 @endlink
 * @test @link MemoryApiTest_MmngrOpen_TC_09_001_032 @endlink
 * @test @link MemoryApiTest_MmngrOpen_TC_09_001_036 @endlink
 * @test @link MemoryApiTest_MmngrOpen_TC_09_001_037 @endlink
 * @test @link MemoryApiTest_MmngrOpen_TC_09_001_038 @endlink
 * @test @link MemoryApiTest_MmngrOpen_TC_09_001_039 @endlink
 * @test @link MemoryApiTest_MmngrOpen_TC_09_001_040 @endlink
 * @test @link MemoryApiTest_MmngrOpen_TC_09_001_041 @endlink
 * @test @link OsalApiStateTest_MmngrOpen_TC_09_001_042 @endlink
 * @test @link MemoryApiTest_MmngrOpen_TC_09_001_043 @endlink
 * @test @link MemoryApiTest_MmngrOpen_TC_09_001_047 @endlink
 * @test @link MemoryApiTest_MmngrOpen_TC_09_001_048 @endlink
 * @test @link MemoryApiTest_MmngrOpen_TC_09_001_049 @endlink
 * @test @link MemoryApiTest_MmngrOpen_TC_09_001_050 @endlink
 * @test @link MemoryApiTest_MmngrOpen_TC_09_001_051 @endlink
 * @test @link MemoryApiTest_MmngrOpen_TC_09_001_052 @endlink
 * @test @link OsalApiStateTest_MmngrOpen_TC_09_001_053 @endlink
 * @test @link MemoryApiTest_MmngrOpen_TC_09_001_054 @endlink
 * @test @link MemoryApiTest_MmngrOpen_TC_09_001_055 @endlink
 * @test @link MemoryApiTest_MmngrOpen_TC_09_001_056 @endlink
 * @test @link MemoryApiTest_MmngrOpen_TC_09_001_057 @endlink
 * @test @link MemoryApiTest_MmngrOpen_TC_09_001_058 @endlink
 * @test @link MemoryApiTest_MmngrOpen_TC_09_001_059 @endlink
 * @test @link MemoryApiTest_MmngrOpen_TC_09_001_060 @endlink
 * @test @link MemoryApiTest_MmngrOpen_TC_09_001_061 @endlink
 * @test @link MemoryApiTest_MmngrClose_TC_09_002_001 @endlink
 * @test @link MemoryApiTest_MmngrClose_TC_09_002_002 @endlink
 * @test @link MemoryApiTest_MmngrClose_TC_09_002_003 @endlink
 * @test @link MemoryApiTest_MmngrClose_TC_09_002_004 @endlink
 * @test @link OsalApiStateTest_MmngrClose_TC_09_002_005 @endlink
 * @test @link MemoryApiTest_MmngrClose_TC_09_002_006 @endlink
 * @test @link MemoryApiTest_MmngrClose_TC_09_002_007 @endlink
 * @test @link MemoryApiTest_MmngrClose_TC_09_002_008 @endlink
 * @test @link MemoryApiTest_MmngrClose_TC_09_002_009 @endlink
 * @test @link MemoryApiTest_MmngrClose_TC_09_002_010 @endlink
 * @test @link MemoryApiTest_MmngrClose_TC_09_002_011 @endlink
 * @test @link MemoryApiTest_MmngrClose_TC_09_002_012 @endlink
 * @test @link MemoryApiTest_MmngrClose_TC_09_002_013 @endlink
 * @test @link MemoryApiTest_MmngrClose_TC_09_002_014 @endlink
 * @test @link MemoryApiTest_MmngrClose_TC_09_002_019 @endlink
 * @test @link MemoryApiTest_MmngrClose_TC_09_002_020 @endlink
 * @test @link MemoryApiTest_MmngrClose_TC_09_002_021 @endlink
 * @test @link MemoryApiTest_MmngrClose_TC_09_002_022 @endlink
 * @test @link MemoryApiTest_MmngrClose_TC_09_002_023 @endlink
 * @test @link MemoryApiTest_MmngrClose_TC_09_002_024 @endlink
 * @test @link MemoryApiTest_MmngrClose_TC_09_002_025 @endlink
 * @test @link MemoryApiTest_MmngrClose_TC_09_002_026 @endlink
 * @test @link MemoryApiTest_MmngrClose_TC_09_002_027 @endlink
 * @test @link MemoryApiTest_MmngrAlloc_TC_09_003_001 @endlink
 * @test @link MemoryApiTest_MmngrAlloc_TC_09_003_002 @endlink
 * @test @link MemoryApiTest_MmngrAlloc_TC_09_003_003 @endlink
 * @test @link MemoryApiTest_MmngrAlloc_TC_09_003_004 @endlink
 * @test @link MemoryApiTest_MmngrAlloc_TC_09_003_005 @endlink
 * @test @link MemoryApiTest_MmngrAlloc_TC_09_003_006 @endlink
 * @test @link MemoryApiTest_MmngrAlloc_TC_09_003_007 @endlink
 * @test @link MemoryApiTest_MmngrAlloc_TC_09_003_008 @endlink
 * @test @link MemoryApiTest_MmngrAlloc_TC_09_003_009 @endlink
 * @test @link MemoryApiTest_MmngrAlloc_TC_09_003_010 @endlink
 * @test @link MemoryApiTest_MmngrAlloc_TC_09_003_011 @endlink
 * @test @link MemoryApiTest_MmngrAlloc_TC_09_003_012 @endlink
 * @test @link MemoryApiTest_MmngrAlloc_TC_09_003_013 @endlink
 * @test @link MemoryApiTest_MmngrAlloc_TC_09_003_014 @endlink
 * @test @link MemoryApiTest_MmngrAlloc_TC_09_003_015 @endlink
 * @test @link MemoryApiTest_MmngrAlloc_TC_09_003_016 @endlink
 * @test @link MemoryApiTest_MmngrAlloc_TC_09_003_017 @endlink
 * @test @link MemoryApiTest_MmngrAlloc_TC_09_003_018 @endlink
 * @test @link MemoryApiTest_MmngrAlloc_TC_09_003_019 @endlink
 * @test @link MemoryApiTest_MmngrAlloc_TC_09_003_020 @endlink
 * @test @link MemoryApiTest_MmngrAlloc_TC_09_003_021 @endlink
 * @test @link MemoryApiTest_MmngrAlloc_TC_09_003_022 @endlink
 * @test @link MemoryApiTest_MmngrAlloc_TC_09_003_023 @endlink
 * @test @link MemoryApiTest_MmngrAlloc_TC_09_003_024 @endlink
 * @test @link MemoryApiTest_MmngrAlloc_TC_09_003_025 @endlink
 * @test @link MemoryApiTest_MmngrAlloc_TC_09_003_026 @endlink
 * @test @link MemoryApiTest_MmngrAlloc_TC_09_003_027 @endlink
 * @test @link MemoryApiTest_MmngrAlloc_TC_09_003_028 @endlink
 * @test @link MemoryApiTest_MmngrAlloc_TC_09_003_029 @endlink
 * @test @link MemoryApiTest_MmngrAlloc_TC_09_003_030 @endlink
 * @test @link MemoryApiTest_MmngrAlloc_TC_09_003_031 @endlink
 * @test @link MemoryApiTest_MmngrAlloc_TC_09_003_032 @endlink
 * @test @link MemoryApiTest_MmngrAlloc_TC_09_003_033 @endlink
 * @test @link MemoryApiTest_MmngrAlloc_TC_09_003_034 @endlink
 * @test @link MemoryApiTest_MmngrAlloc_TC_09_003_035 @endlink
 * @test @link MemoryApiTest_MmngrAlloc_TC_09_003_036 @endlink
 * @test @link MemoryApiTest_MmngrAlloc_TC_09_003_037 @endlink
 * @test @link MemoryApiTest_MmngrAlloc_TC_09_003_038 @endlink
 * @test @link MemoryApiTest_MmngrAlloc_TC_09_003_039 @endlink
 * @test @link MemoryApiTest_MmngrAlloc_TC_09_003_040 @endlink
 * @test @link MemoryApiTest_MmngrAlloc_TC_09_003_041 @endlink
 * @test @link MemoryApiTest_MmngrAlloc_TC_09_003_042 @endlink
 * @test @link MemoryApiTest_MmngrAlloc_TC_09_003_043 @endlink
 * @test @link MemoryApiTest_MmngrAlloc_TC_09_003_044 @endlink
 * @test @link MemoryApiTest_MmngrAlloc_TC_09_003_046 @endlink
 * @test @link MemoryApiTest_MmngrAlloc_TC_09_003_047 @endlink
 * @test @link MemoryApiTest_MmngrAlloc_TC_09_003_048 @endlink
 * @test @link MemoryApiTest_MmngrAlloc_TC_09_003_049 @endlink
 * @test @link MemoryApiTest_MmngrAlloc_TC_09_003_050 @endlink
 * @test @link MemoryApiTest_MmngrAlloc_TC_09_003_051 @endlink
 * @test @link MemoryApiTest_MmngrAlloc_TC_09_003_052 @endlink
 * @test @link MemoryApiTest_MmngrAlloc_TC_09_003_053 @endlink
 * @test @link MemoryApiTest_MmngrAlloc_TC_09_003_054 @endlink
 * @test @link MemoryApiTest_MmngrAlloc_TC_09_003_055 @endlink
 * @test @link MemoryApiTest_MmngrAlloc_TC_09_003_056 @endlink
 * @test @link MemoryApiTest_MmngrAlloc_TC_09_003_057 @endlink
 * @test @link MemoryApiTest_MmngrAlloc_TC_09_003_058 @endlink
 * @test @link MemoryApiTest_MmngrAlloc_TC_09_003_059 @endlink
 * @test @link MemoryApiTest_MmngrAlloc_TC_09_003_060 @endlink
 * @test @link MemoryApiTest_MmngrAlloc_TC_09_003_061 @endlink
 * @test @link MemoryApiTest_MmngrAlloc_TC_09_003_062 @endlink
 * @test @link MemoryApiTest_MmngrAlloc_TC_09_003_063 @endlink
 * @test @link MemoryApiTest_MmngrAlloc_TC_09_003_064 @endlink
 * @test @link MemoryApiTest_MmngrAlloc_TC_09_003_065 @endlink
 * @test @link MemoryApiTest_MmngrAlloc_TC_09_003_066 @endlink
 * @test @link MemoryApiTest_MmngrAlloc_TC_09_003_067 @endlink
 * @test @link MemoryApiTest_MmngrAlloc_TC_09_003_068 @endlink
 * @test @link MemoryApiTest_MmngrAlloc_TC_09_003_069 @endlink
 * @test @link MemoryApiTest_MmngrAlloc_TC_09_003_070 @endlink
 * @test @link MemoryApiTest_MmngrAlloc_TC_09_003_071 @endlink
 * @test @link MemoryApiTest_MmngrAlloc_TC_09_003_072 @endlink
 * @test @link MemoryApiTest_MmngrAlloc_TC_09_003_073 @endlink
 * @test @link MemoryApiTest_MmngrAlloc_TC_09_003_074 @endlink
 * @test @link MemoryApiTest_MmngrAlloc_TC_09_003_075 @endlink
 * @test @link MemoryApiTest_MmngrAlloc_TC_09_003_076 @endlink
 * @test @link MemoryApiTest_MmngrAlloc_TC_09_003_077 @endlink
 * @test @link MemoryApiTest_MmngrAlloc_TC_09_003_078 @endlink
 * @test @link MemoryApiTest_MmngrAlloc_TC_09_003_079 @endlink
 * @test @link MemoryApiTest_MmngrDealloc_TC_09_004_001 @endlink
 * @test @link MemoryApiTest_MmngrDealloc_TC_09_004_002 @endlink
 * @test @link MemoryApiTest_MmngrDealloc_TC_09_004_003 @endlink
 * @test @link MemoryApiTest_MmngrDealloc_TC_09_004_004 @endlink
 * @test @link MemoryApiTest_MmngrDealloc_TC_09_004_005 @endlink
 * @test @link MemoryApiTest_MmngrDealloc_TC_09_004_006 @endlink
 * @test @link MemoryApiTest_MmngrDealloc_TC_09_004_007 @endlink
 * @test @link MemoryApiTest_MmngrDealloc_TC_09_004_008 @endlink
 * @test @link OsalMemoryApiTest_MmngrDealloc_TC_09_004_009 @endlink
 * @test @link MemoryApiTest_MmngrDealloc_TC_09_004_010 @endlink
 * @test @link MemoryApiTest_MmngrDealloc_TC_09_004_011 @endlink
 * @test @link MemoryApiTest_MmngrDealloc_TC_09_004_012 @endlink
 * @test @link MemoryApiTest_MmngrDealloc_TC_09_004_013 @endlink
 * @test @link MemoryApiTest_MmngrDealloc_TC_09_004_014 @endlink
 * @test @link MemoryApiTest_MmngrDealloc_TC_09_004_015 @endlink
 * @test @link MemoryApiTest_MmngrDealloc_TC_09_004_016 @endlink
 * @test @link OsalMemoryApiTest_MmngrDealloc_TC_09_004_017 @endlink
 * @test @link MemoryApiTest_MmngrDealloc_TC_09_004_018 @endlink
 * @test @link MemoryApiTest_MmngrDealloc_TC_09_004_019 @endlink
 * @test @link MemoryApiTest_MmngrDealloc_TC_09_004_020 @endlink
 * @test @link MemoryApiTest_MmngrDealloc_TC_09_004_021 @endlink
 * @test @link MemoryApiTest_MmngrDealloc_TC_09_004_022 @endlink
 * @test @link MemoryApiTest_MmngrDealloc_TC_09_004_023 @endlink
 * @test @link MemoryApiTest_MmngrDealloc_TC_09_004_024 @endlink
 * @test @link OsalMemoryApiTest_MmngrDealloc_TC_09_004_025 @endlink
 * @test @link MemoryApiTest_MmngrDealloc_TC_09_004_026 @endlink
 * @test @link MemoryApiTest_MmngrDealloc_TC_09_004_027 @endlink
 * @test @link MemoryApiTest_MmngrDealloc_TC_09_004_028 @endlink
 * @test @link MemoryApiTest_MmngrDealloc_TC_09_004_029 @endlink
 * @test @link MemoryApiTest_MmngrDealloc_TC_09_004_030 @endlink
 * @test @link MemoryApiTest_MmngrDealloc_TC_09_004_031 @endlink
 * @test @link MemoryApiTest_MmngrDealloc_TC_09_004_032 @endlink
 * @test @link OsalMemoryApiTest_MmngrDealloc_TC_09_004_033 @endlink
 * @test @link MemoryApiTest_MmngrDealloc_TC_09_004_034 @endlink
 * @test @link MemoryApiTest_MmngrDealloc_TC_09_004_040 @endlink
 * @test @link MemoryApiTest_MmngrDealloc_TC_09_004_041 @endlink
 * @test @link MemoryApiTest_MmngrDealloc_TC_09_004_042 @endlink
 * @test @link MemoryApiTest_MmngrDealloc_TC_09_004_043 @endlink
 * @test @link MemoryApiTest_MmngrDealloc_TC_09_004_044 @endlink
 * @test @link MemoryApiTest_MmngrDealloc_TC_09_004_045 @endlink
 * @test @link MemoryApiTest_MmngrDealloc_TC_09_004_046 @endlink
 * @test @link MemoryApiTest_MmngrDealloc_TC_09_004_047 @endlink
 * @test @link MemoryApiTest_MmngrDealloc_TC_09_004_048 @endlink
 * @test @link MemoryApiTest_MmngrDealloc_TC_09_004_049 @endlink
 * @test @link MemoryApiTest_MmngrDealloc_TC_09_004_050 @endlink
 * @test @link MemoryApiTest_MmngrDealloc_TC_09_004_051 @endlink
 * @test @link MemoryApiTest_MmngrGetConfig_TC_09_005_001 @endlink
 * @test @link MemoryApiTest_MmngrGetConfig_TC_09_005_002 @endlink
 * @test @link MemoryApiTest_MmngrGetConfig_TC_09_005_003 @endlink
 * @test @link MemoryApiTest_MmngrGetConfig_TC_09_005_004 @endlink
 * @test @link MemoryApiTest_MmngrGetConfig_TC_09_005_005 @endlink
 * @test @link MemoryApiTest_MmngrGetConfig_TC_09_005_006 @endlink
 * @test @link MemoryApiTest_MmngrGetConfig_TC_09_005_007 @endlink
 * @test @link MemoryApiTest_MmngrGetConfig_TC_09_005_008 @endlink
 * @test @link MemoryApiTest_MmngrGetConfig_TC_09_005_010 @endlink
 * @test @link MemoryApiTest_MmngrGetConfig_TC_09_005_011 @endlink
 * @test @link MemoryApiTest_MmngrGetConfig_TC_09_005_012 @endlink
 * @test @link MemoryApiTest_MmngrGetConfig_TC_09_005_013 @endlink
 * @test @link MemoryApiTest_MmngrGetConfig_TC_09_005_014 @endlink
 * @test @link MemoryApiTest_MmngrGetConfig_TC_09_005_015 @endlink
 * @test @link MemoryApiTest_MmngrGetConfig_TC_09_005_016 @endlink
 * @test @link MemoryApiTest_MmngrGetConfig_TC_09_005_017 @endlink
 * @test @link MemoryApiTest_MmngrGetOsalMaxConfig_TC_09_006_001 @endlink
 * @test @link MemoryApiTest_MmngrGetOsalMaxConfig_TC_09_006_002 @endlink
 * @test @link MemoryApiTest_MmngrGetOsalMaxConfig_TC_09_006_003 @endlink
 * @test @link MemoryApiTest_MmngrRegisterMonitor_TC_09_007_001 @endlink
 * @test @link MemoryApiTest_MmngrRegisterMonitor_TC_09_007_002 @endlink
 * @test @link MemoryApiTest_MmngrRegisterMonitor_TC_09_007_003 @endlink
 * @test @link MemoryApiTest_MmngrRegisterMonitor_TC_09_007_004 @endlink
 * @test @link MemoryApiTest_MmngrRegisterMonitor_TC_09_007_005 @endlink
 * @test @link MemoryApiTest_MmngrRegisterMonitor_TC_09_007_006 @endlink
 * @test @link MemoryApiTest_MmngrRegisterMonitor_TC_09_007_007 @endlink
 * @test @link MemoryApiTest_MmngrRegisterMonitor_TC_09_007_008 @endlink
 * @test @link MemoryApiTest_MmngrRegisterMonitor_TC_09_007_009 @endlink
 * @test @link MemoryApiTest_MmngrRegisterMonitor_TC_09_007_010 @endlink
 * @test @link MemoryApiTest_MmngrRegisterMonitor_TC_09_007_011 @endlink
 * @test @link MemoryApiTest_MmngrRegisterMonitor_TC_09_007_012 @endlink
 * @test @link MemoryApiTest_MmngrRegisterMonitor_TC_09_007_014 @endlink
 * @test @link MemoryApiTest_MmngrRegisterMonitor_TC_09_007_015 @endlink
 * @test @link MemoryApiTest_MmngrRegisterMonitor_TC_09_007_016 @endlink
 * @test @link MemoryApiTest_MmngrRegisterMonitor_TC_09_007_017 @endlink
 * @test @link MemoryApiTest_MmngrRegisterMonitor_TC_09_007_018 @endlink
 * @test @link MemoryApiTest_MmngrRegisterMonitor_TC_09_007_018 @endlink
 * @test @link MemoryApiTest_MmngrRegisterMonitor_TC_09_007_020 @endlink
 * @test @link MemoryApiTest_MmngrRegisterMonitor_TC_09_007_021 @endlink
 * @test @link MemoryApiTest_MmngrRegisterMonitor_TC_09_007_022 @endlink
 * @test @link MemoryApiTest_MmngrRegisterMonitor_TC_09_007_023 @endlink
 * @test @link MemoryApiTest_MmngrRegisterMonitor_TC_09_007_024 @endlink
 * @test @link MemoryApiTest_MmngrGetCpuPtr_TC_09_008_001 @endlink
 * @test @link MemoryApiTest_MmngrGetCpuPtr_TC_09_008_002 @endlink
 * @test @link MemoryApiTest_MmngrGetCpuPtr_TC_09_008_003 @endlink
 * @test @link MemoryApiTest_MmngrGetCpuPtr_TC_09_008_004 @endlink
 * @test @link MemoryApiTest_MmngrGetCpuPtr_TC_09_008_005 @endlink
 * @test @link MemoryApiTest_MmngrGetCpuPtr_TC_09_008_006 @endlink
 * @test @link MemoryApiTest_MmngrGetCpuPtr_TC_09_008_007 @endlink
 * @test @link MemoryApiTest_MmngrGetCpuPtr_TC_09_008_008 @endlink
 * @test @link MemoryApiTest_MmngrGetCpuPtr_TC_09_008_009 @endlink
 * @test @link MemoryApiTest_MmngrGetCpuPtr_TC_09_008_010 @endlink
 * @test @link MemoryApiTest_MmngrGetCpuPtr_TC_09_008_011 @endlink
 * @test @link MemoryApiTest_MmngrGetCpuPtr_TC_09_008_012 @endlink
 * @test @link MemoryApiTest_MmngrGetCpuPtr_TC_09_008_013 @endlink
 * @test @link MemoryApiTest_MmngrGetCpuPtr_TC_09_008_014 @endlink
 * @test @link MemoryApiTest_MmngrGetCpuPtr_TC_09_008_015 @endlink
 * @test @link MemoryApiTest_MmngrGetCpuPtr_TC_09_008_016 @endlink
 * @test @link MemoryApiTest_MmngrGetCpuPtr_TC_09_008_017 @endlink
 * @test @link MemoryApiTest_MmngrGetCpuPtr_TC_09_008_018 @endlink
 * @test @link MemoryApiTest_MmngrGetCpuPtr_TC_09_008_019 @endlink
 * @test @link MemoryApiTest_MmngrGetCpuPtr_TC_09_008_020 @endlink
 * @test @link MemoryApiTest_MmngrGetCpuPtr_TC_09_008_021 @endlink
 * @test @link MemoryApiTest_MmngrGetCpuPtr_TC_09_008_022 @endlink
 * @test @link MemoryApiTest_MmngrGetCpuPtr_TC_09_008_023 @endlink
 * @test @link MemoryApiTest_MmngrGetCpuPtr_TC_09_008_024 @endlink
 * @test @link MemoryApiTest_MmngrGetConstCpuPtr_TC_09_009_001 @endlink
 * @test @link MemoryApiTest_MmngrGetConstCpuPtr_TC_09_009_002 @endlink
 * @test @link MemoryApiTest_MmngrGetConstCpuPtr_TC_09_009_003 @endlink
 * @test @link MemoryApiTest_MmngrGetConstCpuPtr_TC_09_009_004 @endlink
 * @test @link MemoryApiTest_MmngrGetConstCpuPtr_TC_09_009_005 @endlink
 * @test @link MemoryApiTest_MmngrGetConstCpuPtr_TC_09_009_006 @endlink
 * @test @link MemoryApiTest_MmngrGetConstCpuPtr_TC_09_009_007 @endlink
 * @test @link MemoryApiTest_MmngrGetConstCpuPtr_TC_09_009_008 @endlink
 * @test @link MemoryApiTest_MmngrGetConstCpuPtr_TC_09_009_009 @endlink
 * @test @link MemoryApiTest_MmngrGetConstCpuPtr_TC_09_009_010 @endlink
 * @test @link MemoryApiTest_MmngrGetConstCpuPtr_TC_09_009_011 @endlink
 * @test @link MemoryApiTest_MmngrGetConstCpuPtr_TC_09_009_012 @endlink
 * @test @link MemoryApiTest_MmngrGetConstCpuPtr_TC_09_009_013 @endlink
 * @test @link MemoryApiTest_MmngrGetConstCpuPtr_TC_09_009_014 @endlink
 * @test @link MemoryApiTest_MmngrGetConstCpuPtr_TC_09_009_015 @endlink
 * @test @link MemoryApiTest_MmngrGetConstCpuPtr_TC_09_009_016 @endlink
 * @test @link MemoryApiTest_MmngrGetConstCpuPtr_TC_09_009_017 @endlink
 * @test @link MemoryApiTest_MmngrGetConstCpuPtr_TC_09_009_018 @endlink
 * @test @link MemoryApiTest_MmngrGetConstCpuPtr_TC_09_009_019 @endlink
 * @test @link MemoryApiTest_MmngrGetConstCpuPtr_TC_09_009_020 @endlink
 * @test @link MemoryApiTest_MmngrGetConstCpuPtr_TC_09_009_021 @endlink
 * @test @link MemoryApiTest_MmngrGetConstCpuPtr_TC_09_009_022 @endlink
 * @test @link MemoryApiTest_MmngrGetConstCpuPtr_TC_09_009_023 @endlink
 * @test @link MemoryApiTest_MmngrGetConstCpuPtr_TC_09_009_024 @endlink
 * @test @link MemoryApiTest_MmngrFlush_TC_09_010_001 @endlink
 * @test @link MemoryApiTest_MmngrFlush_TC_09_010_002 @endlink
 * @test @link MemoryApiTest_MmngrFlush_TC_09_010_003 @endlink
 * @test @link MemoryApiTest_MmngrFlush_TC_09_010_004 @endlink
 * @test @link MemoryApiTest_MmngrFlush_TC_09_010_005 @endlink
 * @test @link MemoryApiTest_MmngrFlush_TC_09_010_006 @endlink
 * @test @link MemoryApiTest_MmngrFlush_TC_09_010_007 @endlink
 * @test @link MemoryApiTest_MmngrFlush_TC_09_010_008 @endlink
 * @test @link MemoryApiTest_MmngrFlush_TC_09_010_009 @endlink
 * @test @link MemoryApiTest_MmngrFlush_TC_09_010_010 @endlink
 * @test @link MemoryApiTest_MmngrFlush_TC_09_010_011 @endlink
 * @test @link MemoryApiTest_MmngrFlush_TC_09_010_012 @endlink
 * @test @link MemoryApiTest_MmngrFlush_TC_09_010_013 @endlink
 * @test @link MemoryApiTest_MmngrFlush_TC_09_010_014 @endlink
 * @test @link MemoryApiTest_MmngrFlush_TC_09_010_015 @endlink
 * @test @link MemoryApiTest_MmngrFlush_TC_09_010_016 @endlink
 * @test @link MemoryApiTest_MmngrFlush_TC_09_010_017 @endlink
 * @test @link MemoryApiTest_MmngrFlush_TC_09_010_018 @endlink
 * @test @link MemoryApiTest_MmngrFlush_TC_09_010_019 @endlink
 * @test @link MemoryApiTest_MmngrFlush_TC_09_010_020 @endlink
 * @test @link MemoryApiTest_MmngrFlush_TC_09_010_021 @endlink
 * @test @link MemoryApiTest_MmngrFlush_TC_09_010_022 @endlink
 * @test @link MemoryApiTest_MmngrFlush_TC_09_010_023 @endlink
 * @test @link MemoryApiTest_MmngrFlush_TC_09_010_024 @endlink
 * @test @link MemoryApiTest_MmngrFlush_TC_09_010_025 @endlink
 * @test @link MemoryApiTest_MmngrFlush_TC_09_010_026 @endlink
 * @test @link MemoryApiTest_MmngrFlush_TC_09_010_027 @endlink
 * @test @link MemoryApiTest_MmngrFlush_TC_09_010_028 @endlink
 * @test @link MemoryApiTest_MmngrFlush_TC_09_010_029 @endlink
 * @test @link MemoryApiTest_MmngrFlush_TC_09_010_030 @endlink
 * @test @link MemoryApiTest_MmngrFlush_TC_09_010_031 @endlink
 * @test @link MemoryApiTest_MmngrFlush_TC_09_010_032 @endlink
 * @test @link MemoryApiTest_MmngrFlush_TC_09_010_033 @endlink
 * @test @link MemoryApiTest_MmngrFlush_TC_09_010_034 @endlink
 * @test @link MemoryApiTest_MmngrFlush_TC_09_010_035 @endlink
 * @test @link MemoryApiTest_MmngrFlush_TC_09_010_036 @endlink
 * @test @link MemoryApiTest_MmngrFlush_TC_09_010_037 @endlink
 * @test @link MemoryApiTest_MmngrFlush_TC_09_010_038 @endlink
 * @test @link MemoryApiTest_MmngrFlush_TC_09_010_039 @endlink
 * @test @link MemoryApiTest_MmngrFlush_TC_09_010_040 @endlink
 * @test @link MemoryApiTest_MmngrFlush_TC_09_010_041 @endlink
 * @test @link MemoryApiTest_MmngrFlush_TC_09_010_042 @endlink
 * @test @link MemoryApiTest_MmngrFlush_TC_09_010_043 @endlink
 * @test @link MemoryApiTest_MmngrFlush_TC_09_010_044 @endlink
 * @test @link MemoryApiTest_MmngrFlush_TC_09_010_045 @endlink
 * @test @link MemoryApiTest_MmngrFlush_TC_09_010_046 @endlink
 * @test @link MemoryApiTest_MmngrFlush_TC_09_010_047 @endlink
 * @test @link MemoryApiTest_MmngrFlush_TC_09_010_048 @endlink
 * @test @link MemoryApiTest_MmngrInvalidate_TC_09_011_001 @endlink
 * @test @link MemoryApiTest_MmngrInvalidate_TC_09_011_002 @endlink
 * @test @link MemoryApiTest_MmngrInvalidate_TC_09_011_003 @endlink
 * @test @link MemoryApiTest_MmngrInvalidate_TC_09_011_004 @endlink
 * @test @link MemoryApiTest_MmngrInvalidate_TC_09_011_005 @endlink
 * @test @link MemoryApiTest_MmngrInvalidate_TC_09_011_006 @endlink
 * @test @link MemoryApiTest_MmngrInvalidate_TC_09_011_007 @endlink
 * @test @link MemoryApiTest_MmngrInvalidate_TC_09_011_008 @endlink
 * @test @link MemoryApiTest_MmngrInvalidate_TC_09_011_009 @endlink
 * @test @link MemoryApiTest_MmngrInvalidate_TC_09_011_010 @endlink
 * @test @link MemoryApiTest_MmngrInvalidate_TC_09_011_011 @endlink
 * @test @link MemoryApiTest_MmngrInvalidate_TC_09_011_012 @endlink
 * @test @link MemoryApiTest_MmngrInvalidate_TC_09_011_013 @endlink
 * @test @link MemoryApiTest_MmngrInvalidate_TC_09_011_014 @endlink
 * @test @link MemoryApiTest_MmngrInvalidate_TC_09_011_015 @endlink
 * @test @link MemoryApiTest_MmngrInvalidate_TC_09_011_016 @endlink
 * @test @link MemoryApiTest_MmngrInvalidate_TC_09_011_017 @endlink
 * @test @link MemoryApiTest_MmngrInvalidate_TC_09_011_018 @endlink
 * @test @link MemoryApiTest_MmngrInvalidate_TC_09_011_019 @endlink
 * @test @link MemoryApiTest_MmngrInvalidate_TC_09_011_020 @endlink
 * @test @link MemoryApiTest_MmngrInvalidate_TC_09_011_021 @endlink
 * @test @link MemoryApiTest_MmngrInvalidate_TC_09_011_022 @endlink
 * @test @link MemoryApiTest_MmngrInvalidate_TC_09_011_023 @endlink
 * @test @link MemoryApiTest_MmngrInvalidate_TC_09_011_024 @endlink
 * @test @link MemoryApiTest_MmngrInvalidate_TC_09_011_025 @endlink
 * @test @link MemoryApiTest_MmngrInvalidate_TC_09_011_026 @endlink
 * @test @link MemoryApiTest_MmngrInvalidate_TC_09_011_027 @endlink
 * @test @link MemoryApiTest_MmngrInvalidate_TC_09_011_028 @endlink
 * @test @link MemoryApiTest_MmngrInvalidate_TC_09_011_029 @endlink
 * @test @link MemoryApiTest_MmngrInvalidate_TC_09_011_030 @endlink
 * @test @link MemoryApiTest_MmngrInvalidate_TC_09_011_031 @endlink
 * @test @link MemoryApiTest_MmngrInvalidate_TC_09_011_032 @endlink
 * @test @link MemoryApiTest_MmngrInvalidate_TC_09_011_033 @endlink
 * @test @link MemoryApiTest_MmngrInvalidate_TC_09_011_034 @endlink
 * @test @link MemoryApiTest_MmngrInvalidate_TC_09_011_035 @endlink
 * @test @link MemoryApiTest_MmngrInvalidate_TC_09_011_036 @endlink
 * @test @link MemoryApiTest_MmngrInvalidate_TC_09_011_037 @endlink
 * @test @link MemoryApiTest_MmngrInvalidate_TC_09_011_038 @endlink
 * @test @link MemoryApiTest_MmngrInvalidate_TC_09_011_039 @endlink
 * @test @link MemoryApiTest_MmngrInvalidate_TC_09_011_040 @endlink
 * @test @link MemoryApiTest_MmngrInvalidate_TC_09_011_041 @endlink
 * @test @link MemoryApiTest_MmngrInvalidate_TC_09_011_042 @endlink
 * @test @link MemoryApiTest_MmngrInvalidate_TC_09_011_043 @endlink
 * @test @link MemoryApiTest_MmngrInvalidate_TC_09_011_044 @endlink
 * @test @link MemoryApiTest_MmngrInvalidate_TC_09_011_045 @endlink
 * @test @link MemoryApiTest_MmngrInvalidate_TC_09_011_046 @endlink
 * @test @link MemoryApiTest_MmngrInvalidate_TC_09_011_047 @endlink
 * @test @link MemoryApiTest_MmngrInvalidate_TC_09_011_048 @endlink
 * @test @link MemoryApiTest_MmngrGetHwAddr_TC_09_012_001 @endlink
 * @test @link MemoryApiTest_MmngrGetHwAddr_TC_09_012_002 @endlink
 * @test @link MemoryApiTest_MmngrGetHwAddr_TC_09_012_003 @endlink
 * @test @link MemoryApiTest_MmngrGetHwAddr_TC_09_012_004 @endlink
 * @test @link MemoryApiTest_MmngrGetHwAddr_TC_09_012_005 @endlink
 * @test @link MemoryApiTest_MmngrGetHwAddr_TC_09_012_006 @endlink
 * @test @link MemoryApiTest_MmngrGetHwAddr_TC_09_012_007 @endlink
 * @test @link MemoryApiTest_MmngrGetHwAddr_TC_09_012_008 @endlink
 * @test @link MemoryApiTest_MmngrGetHwAddr_TC_09_012_009 @endlink
 * @test @link MemoryApiTest_MmngrGetHwAddr_TC_09_012_010 @endlink
 * @test @link MemoryApiTest_MmngrGetHwAddr_TC_09_012_011 @endlink
 * @test @link MemoryApiTest_MmngrGetHwAddr_TC_09_012_012 @endlink
 * @test @link MemoryApiTest_MmngrGetHwAddr_TC_09_012_013 @endlink
 * @test @link MemoryApiTest_MmngrGetHwAddr_TC_09_012_014 @endlink
 * @test @link MemoryApiTest_MmngrGetHwAddr_TC_09_012_015 @endlink
 * @test @link MemoryApiTest_MmngrGetHwAddr_TC_09_012_016 @endlink
 * @test @link MemoryApiTest_MmngrGetHwAddr_TC_09_012_017 @endlink
 * @test @link MemoryApiTest_MmngrGetHwAddr_TC_09_012_018 @endlink
 * @test @link MemoryApiTest_MmngrGetHwAddr_TC_09_012_019 @endlink
 * @test @link MemoryApiTest_MmngrGetHwAddr_TC_09_012_020 @endlink
 * @test @link MemoryApiTest_MmngrGetHwAddr_TC_09_012_021 @endlink
 * @test @link MemoryApiTest_MmngrGetHwAddr_TC_09_012_022 @endlink
 * @test @link MemoryApiTest_MmngrGetHwAddr_TC_09_012_023 @endlink
 * @test @link MemoryApiTest_MmngrGetHwAddr_TC_09_012_024 @endlink
 * @test @link MemoryApiTest_MmngrGetHwAddr_TC_09_012_025 @endlink
 * @test @link MemoryApiTest_MmngrGetHwAddr_TC_09_012_026 @endlink
 * @test @link MemoryApiTest_MmngrGetHwAddr_TC_09_012_027 @endlink
 * @test @link MemoryApiTest_MmngrGetHwAddr_TC_09_012_028 @endlink
 * @test @link MemoryApiTest_MmngrGetSize_TC_09_013_001 @endlink
 * @test @link MemoryApiTest_MmngrGetSize_TC_09_013_002 @endlink
 * @test @link MemoryApiTest_MmngrGetSize_TC_09_013_003 @endlink
 * @test @link MemoryApiTest_MmngrGetSize_TC_09_013_004 @endlink
 * @test @link MemoryApiTest_MmngrGetSize_TC_09_013_005 @endlink
 * @test @link MemoryApiTest_MmngrGetSize_TC_09_013_006 @endlink
 * @test @link MemoryApiTest_MmngrGetSize_TC_09_013_007 @endlink
 * @test @link MemoryApiTest_MmngrGetSize_TC_09_013_008 @endlink
 * @test @link MemoryApiTest_MmngrGetSize_TC_09_013_009 @endlink
 * @test @link MemoryApiTest_MmngrGetSize_TC_09_013_010 @endlink
 * @test @link MemoryApiTest_MmngrGetSize_TC_09_013_011 @endlink
 * @test @link MemoryApiTest_MmngrGetSize_TC_09_013_012 @endlink
 * @test @link MemoryApiTest_MmngrGetSize_TC_09_013_013 @endlink
 * @test @link MemoryApiTest_MmngrGetSize_TC_09_013_014 @endlink
 * @test @link MemoryApiTest_MmngrGetSize_TC_09_013_015 @endlink
 * @test @link MemoryApiTest_MmngrGetSize_TC_09_013_016 @endlink
 * @test @link MemoryApiTest_MmngrGetSize_TC_09_013_017 @endlink
 * @test @link MemoryApiTest_MmngrGetSize_TC_09_013_018 @endlink
 * @test @link MemoryApiTest_MmngrGetSize_TC_09_013_019 @endlink
 * @test @link MemoryApiTest_MmngrGetSize_TC_09_013_020 @endlink
 * @test @link MemoryApiTest_MmngrGetSize_TC_09_013_021 @endlink
 * @test @link MemoryApiTest_MmngrGetSize_TC_09_013_022 @endlink
 * @test @link MemoryApiTest_MmngrGetSize_TC_09_013_023 @endlink
 * @test @link MemoryApiTest_MmngrGetSize_TC_09_013_024 @endlink
 * @test @link MemoryApiTest_MmngrGetSize_TC_09_013_025 @endlink
 * @test @link MemoryApiTest_MmngrGetSize_TC_09_013_026 @endlink
 * @test @link MemoryApiTest_MmngrCheckBuffer_TC_09_014_001 @endlink
 * @test @link MemoryApiTest_MmngrCheckBuffer_TC_09_014_002 @endlink
 * @test @link MemoryApiTest_MmngrCheckBuffer_TC_09_014_003 @endlink
 * @test @link MemoryApiTest_MmngrCheckBuffer_TC_09_014_004 @endlink
 * @test @link MemoryApiTest_MmngrCheckBuffer_TC_09_014_006 @endlink
 * @test @link MemoryApiTest_MmngrCheckBuffer_TC_09_014_008 @endlink
 * @test @link MemoryApiTest_MmngrCheckBuffer_TC_09_014_010 @endlink
 * @test @link MemoryApiTest_MmngrCheckBuffer_TC_09_014_012 @endlink
 * @test @link MemoryApiTest_MmngrCheckBuffer_TC_09_014_013 @endlink
 * @test @link MemoryApiTest_MmngrCheckBuffer_TC_09_014_014 @endlink
 * @test @link MemoryApiTest_MmngrCheckBuffer_TC_09_014_015 @endlink
 * @test @link MemoryApiTest_MmngrCheckBuffer_TC_09_014_016 @endlink
 * @test @link MemoryApiTest_MmngrCheckBuffer_TC_09_014_017 @endlink
 * @test @link MemoryApiTest_MmngrCheckBuffer_TC_09_014_018 @endlink
 * @test @link MemoryApiTest_MmngrCheckBuffer_TC_09_014_019 @endlink
 * @test @link MemoryApiTest_MmngrCheckBuffer_TC_09_014_020 @endlink
 * @test @link MemoryApiTest_MmngrCheckBuffer_TC_09_014_021 @endlink
 * @test @link MemoryApiTest_MmngrCheckBuffer_TC_09_014_022 @endlink
 * @test @link MemoryApiTest_MmngrCheckBuffer_TC_09_014_023 @endlink
 * @test @link MemoryApiTest_MmngrCheckBuffer_TC_09_014_024 @endlink
 * @test @link MemoryApiTest_MmngrCheckBuffer_TC_09_014_025 @endlink
 * @test @link MemoryApiTest_MmngrCheckBuffer_TC_09_014_026 @endlink
 * @test @link MemoryApiTest_MmngrCheckBuffer_TC_09_014_027 @endlink
 * @test @link MemoryApiTest_MmngrCheckBuffer_TC_09_014_028 @endlink
 * @test @link MemoryApiTest_MmngrCheckBuffer_TC_09_014_029 @endlink
 * @test @link MemoryApiTest_MmngrCheckBuffer_TC_09_014_030 @endlink
 * @test @link MemoryApiTest_MmngrCheckBuffer_TC_09_014_031 @endlink
 * @test @link MemoryApiTest_MmngrCheckBuffer_TC_09_014_032 @endlink
 * @test @link MemoryApiTest_MmngrCheckBuffer_TC_09_014_033 @endlink
 * @test @link MemoryApiTest_MmngrDebugMmngrPrint_TC_09_015_001 @endlink
 * @test @link MemoryApiTest_MmngrDebugMmngrPrint_TC_09_015_002 @endlink
 * @test @link MemoryApiTest_MmngrDebugMmngrPrint_TC_09_015_003 @endlink
 * @test @link MemoryApiTest_MmngrDebugMmngrPrint_TC_09_015_004 @endlink
 * @test @link MemoryApiTest_MmngrDebugMmngrPrint_TC_09_015_005 @endlink
 * @test @link MemoryApiTest_MmngrDebugMmngrPrint_TC_09_015_006 @endlink
 * @test @link MemoryApiTest_MmngrDebugMmngrPrint_TC_09_015_007 @endlink
 * @test @link MemoryApiTest_MmngrDebugMmngrPrint_TC_09_015_008 @endlink
 * @test @link MemoryApiTest_MmngrDebugMmngrPrint_TC_09_015_010 @endlink
 * @test @link MemoryApiTest_MmngrDebugMmngrPrint_TC_09_015_011 @endlink
 * @test @link MemoryApiTest_MmngrDebugMmngrPrint_TC_09_015_021 @endlink
 * @test @link MemoryApiTest_MmngrDebugMmngrPrint_TC_09_015_022 @endlink
 * @test @link MemoryApiTest_MmngrDebugMmngrPrint_TC_09_015_023 @endlink
 * @test @link MemoryApiTest_MmngrDebugMmngrPrint_TC_09_015_024 @endlink
 * @test @link MemoryApiTest_MmngrDebugMmngrPrint_TC_09_015_025 @endlink
 * @test @link MemoryApiTest_MmngrDebugMmngrPrint_TC_09_015_026 @endlink
 * @test @link MemoryApiTest_MmngrDebugMmngrPrint_TC_09_015_027 @endlink
 * @test @link MemoryApiTest_MmngrDebugMmngrPrint_TC_09_015_028 @endlink
 * @test @link MemoryApiTest_MmngrDebugMmngrPrint_TC_09_015_029 @endlink
 * @test @link MemoryApiTest_MmngrDebugBufferPrint_TC_09_016_001 @endlink
 * @test @link MemoryApiTest_MmngrDebugBufferPrint_TC_09_016_002 @endlink
 * @test @link MemoryApiTest_MmngrDebugBufferPrint_TC_09_016_003 @endlink
 * @test @link MemoryApiTest_MmngrDebugBufferPrint_TC_09_016_004 @endlink
 * @test @link MemoryApiTest_MmngrDebugBufferPrint_TC_09_016_006 @endlink
 * @test @link MemoryApiTest_MmngrDebugBufferPrint_TC_09_016_007 @endlink
 * @test @link MemoryApiTest_MmngrDebugBufferPrint_TC_09_016_012 @endlink
 * @test @link MemoryApiTest_MmngrDebugBufferPrint_TC_09_016_013 @endlink
 * @test @link MemoryApiTest_MmngrDebugBufferPrint_TC_09_016_014 @endlink
 * @test @link MemoryApiTest_MmngrDebugBufferPrint_TC_09_016_015 @endlink
 * @test @link MemoryApiTest_MmngrInitializeMemoryBufferObj_TC_09_017_001 @endlink
 * @test @link MemoryApiTest_MmngrInitializeMemoryBufferObj_TC_09_017_002 @endlink
 * @test @link MemoryApiTest_MmngrInitializeMemoryManagerObj_TC_09_018_001 @endlink
 * @test @link MemoryApiTest_MmngrInitializeMemoryManagerObj_TC_09_018_002 @endlink
 * @test @link MemoryApiTest_MmngrInitializeMmngrConfigSt_TC_09_019_001 @endlink
 * @test @link MemoryApiTest_MmngrInitializeMmngrConfigSt_TC_09_019_002 @endlink
 * @test @link MemoryApiTest_MmngrInitializeMmngrConfigSt_TC_09_019_003 @endlink
 * @test @link MemoryApiTest_MmngrOpenFromRegionIdx_TC_09_021_001 @endlink
 * @test @link MemoryApiTest_MmngrOpenFromRegionIdx_TC_09_021_002 @endlink
 * @test @link MemoryApiTest_MmngrOpenFromRegionIdx_TC_09_021_003 @endlink
 * @test @link MemoryApiTest_MmngrOpenFromRegionIdx_TC_09_021_004 @endlink
 * @test @link MemoryApiTest_MmngrOpenFromRegionIdx_TC_09_021_005 @endlink
 * @test @link MemoryApiTest_MmngrOpenFromRegionIdx_TC_09_021_006 @endlink
 * @test @link MemoryApiTest_MmngrOpenFromRegionIdx_TC_09_021_007 @endlink
 * @test @link MemoryApiTest_MmngrOpenFromRegionIdx_TC_09_021_008 @endlink
 * @test @link MemoryApiTest_MmngrOpenFromRegionIdx_TC_09_021_009 @endlink
 * @test @link MemoryApiTest_MmngrOpenFromRegionIdx_TC_09_021_010 @endlink
 * @test @link MemoryApiTest_MmngrOpenFromRegionIdx_TC_09_021_011 @endlink
 * @test @link MemoryApiTest_MmngrOpenFromRegionIdx_TC_09_021_012 @endlink
 * @test @link MemoryApiTest_MmngrOpenFromRegionIdx_TC_09_021_013 @endlink
 * @test @link MemoryApiTest_MmngrOpenFromRegionIdx_TC_09_021_014 @endlink
 * @test @link OsalApiStateTest_MmngrOpenFromRegionIdx_TC_09_021_015 @endlink
 * @test @link MemoryApiTest_MmngrOpenFromRegionIdx_TC_09_021_016 @endlink
 * @test @link MemoryApiTest_MmngrOpenFromRegionIdx_TC_09_021_017 @endlink
 * @test @link MemoryApiTest_MmngrOpenFromRegionIdx_TC_09_021_018 @endlink
 * @test @link MemoryApiTest_MmngrOpenFromRegionIdx_TC_09_021_019 @endlink
 * @test @link MemoryApiTest_MmngrOpenFromRegionIdx_TC_09_021_020 @endlink
 * @test @link MemoryApiTest_MmngrOpenFromRegionIdx_TC_09_021_021 @endlink
 * @test @link MemoryApiTest_MmngrOpenFromRegionIdx_TC_09_021_022 @endlink
 * @test @link MemoryApiTest_MmngrOpenFromRegionIdx_TC_09_021_023 @endlink
 * @test @link MemoryApiTest_MmngrOpenFromRegionIdx_TC_09_021_024 @endlink
 * @test @link OsalApiStateTest_MmngrOpenFromRegionIdx_TC_09_021_025 @endlink
 * @test @link MemoryApiTest_MmngrOpenFromRegionIdx_TC_09_021_026 @endlink
 * @test @link MemoryApiTest_MmngrOpenFromRegionIdx_TC_09_021_027 @endlink
 * @test @link MemoryApiTest_MmngrOpenFromRegionIdx_TC_09_021_028 @endlink
 * @test @link MemoryApiTest_MmngrOpenFromRegionIdx_TC_09_021_029 @endlink
 * @test @link MemoryApiTest_MmngrOpenFromRegionIdx_TC_09_021_030 @endlink
 * @test @link MemoryApiTest_MmngrOpenFromRegionIdx_TC_09_021_031 @endlink
 * @test @link MemoryApiTest_MmngrOpenFromRegionIdx_TC_09_021_032 @endlink
 * @test @link OsalApiStateTest_MmngrOpenFromRegionIdx_TC_09_021_033 @endlink
 * @test @link MemoryApiTest_MmngrOpenFromRegionIdx_TC_09_021_034 @endlink
 * @test @link MemoryApiTest_MmngrOpenFromRegionIdx_TC_09_021_035 @endlink
 * @test @link MemoryApiTest_MmngrOpenFromRegionIdx_TC_09_021_036 @endlink
 * @test @link MemoryApiTest_MmngrOpenFromRegionIdx_TC_09_021_037 @endlink
 * @test @link MemoryApiTest_MmngrOpenFromRegionIdx_TC_09_021_038 @endlink
 * @test @link MemoryApiTest_MmngrOpenFromRegionIdx_TC_09_021_039 @endlink
 * @test @link MemoryApiTest_MmngrOpenFromRegionIdx_TC_09_021_040 @endlink
 * @test @link OsalApiStateTest_MmngrOpenFromRegionIdx_TC_09_021_041 @endlink
 * @test @link MemoryApiTest_MmngrOpenFromRegionIdx_TC_09_021_042 @endlink
 * @test @link MemoryApiTest_MmngrOpenFromRegionIdx_TC_09_021_043 @endlink
 * @test @link MemoryApiTest_MmngrOpenFromRegionIdx_TC_09_021_044 @endlink
 * @test @link MemoryApiTest_MmngrOpenFromRegionIdx_TC_09_021_045 @endlink
 * @test @link MemoryApiTest_MmngrOpenFromRegionIdx_TC_09_021_046 @endlink
 * @test @link MemoryApiTest_MmngrOpenFromRegionIdx_TC_09_021_047 @endlink
 * @test @link MemoryApiTest_MmngrOpenFromRegionIdx_TC_09_021_048 @endlink
 * @test @link MemoryApiTest_MmngrOpenFromRegionIdx_TC_09_021_049 @endlink
 * @test @link MemoryApiTest_MmngrOpenFromRegionIdx_TC_09_021_050 @endlink
 * @test @link MemoryApiTest_MmngrOpenFromRegionIdx_TC_09_021_051 @endlink
 * @test @link MemoryApiTest_MmngrOpenFromRegionIdx_TC_09_021_052 @endlink
 * @test @link MemoryApiTest_MmngrOpenFromRegionIdx_TC_09_021_053 @endlink
 * @test @link MemoryApiTest_MmngrOpenFromRegionIdx_TC_09_021_054 @endlink
 * @test @link MemoryApiTest_MmngrOpenFromRegionIdx_TC_09_021_055 @endlink
 * @test @link MemoryApiTest_MmngrOpenFromRegionIdx_TC_09_021_056 @endlink
 * @test @link MemoryApiTest_MmngrOpenFromRegionIdx_TC_09_021_057 @endlink
 * @test @link MemoryApiTest_MmngrOpenFromRegionIdx_TC_09_021_058 @endlink
 * @test @link MemoryApiTest_MmngrGetOsalMaxConfigFromRegionIdx_TC_09_022_001 @endlink
 * @test @link MemoryApiTest_MmngrGetOsalMaxConfigFromRegionIdx_TC_09_022_002 @endlink
 * @test @link MemoryApiTest_MmngrGetOsalMaxConfigFromRegionIdx_TC_09_022_003 @endlink
 * @test @link MemoryApiTest_MmngrGetOsalMaxConfigFromRegionIdx_TC_09_022_004 @endlink
 * @section OsalMemoryCApiTest OsalMemoryCApiTest function
 * @subsection OsalMemoryCApiTest_SetUp OsalMemoryCApiTest Setup
 * Common to Test Suit of OsalMemoryCApiTest, prepare process to be executed before executing the test. <br>
 * For example:
 * @snippet test_memory_api_basic.cpp OsalMemoryCApiTest_SetUp
 * @subsection OsalMemoryCApiTest_TearDown OsalMemoryCApiTest TearDown
 * Common to Test Suit of OsalMemoryCApiTest, prepare process to be executed after executing the test. <br>
 * For example:
 * @snippet test_memory_api_basic.cpp OsalMemoryCApiTest_TearDown
 * @section OsalMemoryImplCApiTest OsalMemoryImplCApiTest function
 * @subsection OsalMemoryImplCApiTest_SetUp OsalMemoryImplCApiTest Setup
 * Common to Test Suit of OsalMemoryImplCApiTest, prepare process to be executed before executing the test. <br>
 * For example:
 * @snippet test_memory_api_basic.cpp OsalMemoryImplCApiTest_SetUp
 * @subsection OsalMemoryImplCApiTest_TearDown OsalMemoryImplCApiTest TearDown
 * Common to Test Suit of OsalMemoryImplCApiTest, prepare process to be executed after executing the test. <br>
 * For example:
 * @snippet test_memory_api_basic.cpp OsalMemoryCApiTest_TearDown
 * @section MemoryApiTest MemoryApiTest function
 * @subsection MemoryApiTest_SetUp MemoryApiTest Setup
 * Common to Test Suit of MemoryApiTest, prepare process to be executed before executing the test. <br>
 * For example:
 * @snippet test_memory_api_basic.cpp MemoryApiTest_SetUp
 * @subsection MemoryApiTest_TearDown MemoryApiTest TearDown
 * Common to Test Suit of MemoryApiTest, prepare process to be executed after executing the test. <br>
 * For example:
 * @snippet test_memory_api_basic.cpp MemoryApiTest_TearDown
 * @section OsalApiStateTest_MemoryApiTest OsalApiStateTest of MemoryApiTest function
 * @subsection OsalApiStateTest_MemoryApiTest_SetUp OsalApiStateTest of MemoryApiTest Setup
 * Common to Test Suit of OsalApiStateTest MemoryApiTest, prepare process to be executed before executing the test. <br>
 * For example:
 * @snippet test_common.hpp OsalApiStateTest_SetUp
 * @subsection OsalApiStateTest_MemoryApiTest_TearDown OsalApiStateTest of MemoryApiTest TearDown
 * Common to Test Suit of OsalApiStateTest MemoryApiTest, prepare process to be executed after executing the test. <br>
 * For example:
 * @snippet test_common.hpp OsalApiStateTest_TearDown
 */
class OsalMemoryImplCApiTest : public OsalMemoryCApiTest
{
protected:
// [OsalMemoryImplCApiTest_SetUp]
    void SetUp() override
    {
        OsalMemoryCApiTest::SetUp();
    }
// [OsalMemoryImplCApiTest_SetUp]
};

#ifndef SKIP_OSALMEMORY
/**
 * @page MM_API Memory API Test
 * @section OsalMemoryImplCApiTest_openClose_TC_12_001_015 OsalMemoryImplCApiTest.openClose_TC_12_001_015
 * @subsection openclose_tsi Test Suite ID
 * OsalMemoryImplCApiTest
 * @subsection openclose_tci Test Case ID
 * openClose_S3_N_TC_12_001_015
 * @subsection openclose_rr Related Requirement(s)
 * \#276402, \#276408, \#276409, \#276732, \#276744
 * @subsection openclose_pp Prerequisite/Precondition
 * OSAL is initialized and get Mmngr max config with R_OSAL_MmngrGetOsalMaxConfig
 * @subsection openclose_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrOpen and R_OSAL_MmngrClose function
 * @subsection openclose_tpts Test Procedure/Test Steps
 * -# Open Mmngr using R_OSAL_MmngrOpen with valid config.
 * -# Close Mmngr using R_OSAL_MmngrClose.
 * -# Open Mmngr using R_OSAL_MmngrOpen with NULL config.
 * -# Open Mmngr using R_OSAL_MmngrOpen with NULL handle.
 * -# Open Mmngr using R_OSAL_MmngrOpen with both NULL config and NULL handle.
 * -# Close Mmngr with parameter OSAL_MEMORY_MANAGER_HANDLE_INVALID.
 * @subsection openclose_ereb Expected Result/Behavior
 * -# The return of R_OSAL_MmngrOpen is OSAL_RETURN_OK. <br>
 * the return handle is not OSAL_MEMORY_MANAGER_HANDLE_INVALID
 * -# The return of R_OSAL_MmngrClose is OSAL_RETURN_OK.
 * -# The return of R_OSAL_MmngrOpen is not OSAL_RETURN_OK <br>
 * the return handle is OSAL_MEMORY_MANAGER_HANDLE_INVALID.
 * -# The return of R_OSAL_MmngrOpen is not OSAL_RETURN_OK.
 * -# The return of R_OSAL_MmngrOpen is not OSAL_RETURN_OK.
 * -# The return of the last R_OSAL_MmngrClose is not OSAL_RETURN_OK.
 * @subsection openclose_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp openClose_TC_12_001_015
 */
// [openClose_TC_12_001_015]
TEST_F(OsalMemoryImplCApiTest, openClose_TC_12_001_015)
{
    osal_memory_manager_handle_t mmngr     = OSAL_MEMORY_MANAGER_HANDLE_INVALID;
    st_osal_mmngr_config_t       mmngr_cfg = {OSAL_MMNGR_ALLOC_MODE_INVALID, 4_KB, 1, 1};

    /* we do not know OSAL implementation allocation mode capabilities so for testing we use value provided earlier*/
    mmngr_cfg.mode = mmngr_capabilities_cfg.mode;
    EXPECT_EQ(OSAL_RETURN_OK, R_OSAL_MmngrOpen(&mmngr_cfg, &mmngr));
    EXPECT_NE(mmngr, OSAL_MEMORY_MANAGER_HANDLE_INVALID);
    EXPECT_EQ(OSAL_RETURN_OK, R_OSAL_MmngrClose(mmngr));

    mmngr = OSAL_MEMORY_MANAGER_HANDLE_INVALID;
    EXPECT_NE(OSAL_RETURN_OK, R_OSAL_MmngrOpen(NULL_PTR, &mmngr));
    EXPECT_EQ(mmngr, OSAL_MEMORY_MANAGER_HANDLE_INVALID) << " previous call un-expect changed mmngr value";
    EXPECT_NE(OSAL_RETURN_OK, R_OSAL_MmngrOpen(&mmngr_cfg, NULL_PTR));
    EXPECT_NE(OSAL_RETURN_OK, R_OSAL_MmngrOpen(NULL_PTR, NULL_PTR));
    EXPECT_NE(OSAL_RETURN_OK, R_OSAL_MmngrClose(OSAL_MEMORY_MANAGER_HANDLE_INVALID));
}
// [openClose_TC_12_001_015]

/**
 * @page MM_API Memory API Test
 * @section OsalMemoryImplCApiTest_allocateDeallocate_TC_12_001_018 OsalMemoryImplCApiTest.allocateDeallocate_TC_12_001_018
 * @subsection allocateDeallocate_tsi Test Suite ID
 * OsalMemoryImplCApiTest
 * @subsection allocateDeallocate_tci Test Case ID
 * allocateDeallocate_S3_N_TC_12_001_018
 * @subsection allocateDeallocate_rr Related Requirement(s)
 * \#276402, \#276410, \#276412, \#276732
 * @subsection allocateDeallocate_pp Prerequisite/Precondition
 * OSAL is initialized and get Mmngr max config with R_OSAL_MmngrGetOsalMaxConfig
 * @subsection allocateDeallocate_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrAlloc and R_OSAL_MmngrDealloc function.
 * @subsection allocateDeallocate_tpts Test Procedure/Test Steps
 * -# Loop with each valid config in array test_mmngr_cfgs[4]: <br>
 * Call R_OSAL_MmngrOpen to open Mmngr. <br>
 * Call R_OSAL_MmngrAlloc to allocate memory buffer with size is cfg.memory_limit of each config and alignment is 64. <br>
 * Call R_OSAL_MmngrDealloc to deallocate memory buffer. <br>
 * Call R_OSAL_MmngrAlloc to allocate memory buffer with size is cfg.memory_limit of each config and alignment is 64. <br>
 * Call R_OSAL_MmngrDealloc to deallocate memory buffer. <br>
 * Call R_OSAL_MmngrClose to close Mmngr.
 * @subsection allocateDeallocate_ereb Expected Result/Behavior
 * -# The result of each loop: <br>
 * The function R_OSAL_MmngrOpen return OSAL_RETURN_OK and the return Mmngr handle is not OSAL_MEMORY_MANAGER_HANDLE_INVALID <br>
 * The return of the first R_OSAL_MmngrAlloc is OSAL_RETURN_OK and the return buffer object is not OSAL_MEMORY_BUFFER_HANDLE_INVALID <br>
 * The return of the first R_OSAL_MmngrDealloc is OSAL_RETURN_OK. <br>
 * The return of the second R_OSAL_MmngrAlloc is OSAL_RETURN_OK and the return buffer object is not OSAL_MEMORY_BUFFER_HANDLE_INVALID <br>
 * The return of the second R_OSAL_MmngrDealloc is OSAL_RETURN_OK. <br>
 * The function R_OSAL_MmngrClose return OSAL_RETURN_OK.
 * @subsection allocateDeallocate_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp allocateDeallocate_TC_12_001_018
 */
// [allocateDeallocate_TC_12_001_018]
TEST_F(OsalMemoryImplCApiTest, allocateDeallocate_TC_12_001_018)
{
    osal_memory_manager_handle_t          mmngr                              = OSAL_MEMORY_MANAGER_HANDLE_INVALID;
    constexpr static size_t          TEST_MEMORY_UPPER_LIMIT            = 2_GB;
    constexpr static size_t          TEST_ALLOCATION_NUMBER_UPPER_LIMIT = 4096;
    st_osal_mmngr_config_t test_mmngr_cfgs[4];

    for(size_t i = 0; i < 4; i++)
    {
        test_mmngr_cfgs[i] = mmngr_capabilities_cfg;
    }
    /* [0] work with reported limits by the manager */
    // test_mmngr_cfgs[0].memory_limit = saturate<size_t,
    // size_t>(test_mmngr_cfgs[0].memory_limit, 4_KB, TEST_MEMORY_UPPER_LIMIT); /* limit range capabilities, in
    // case unlimited memory */ test_mmngr_cfgs[0].max_allowed_allocations =
    // saturate<size_t, size_t>(test_mmngr_cfgs[0].max_allowed_allocations, 1,
    // TEST_ALLOCATION_NUMBER_UPPER_LIMIT); /* limit range capabilities, in case unlimited allocations */

    /* [1] Artificially limit memory availability */
    test_mmngr_cfgs[1].memory_limit = saturate<size_t, size_t>(
        test_mmngr_cfgs[1].memory_limit / 2, 4_KB,
        TEST_MEMORY_UPPER_LIMIT); /* limit range capabilities, in case unlimited memory */
    /* [2] Artificially number of memory allocation availability */
    test_mmngr_cfgs[2].max_allowed_allocations = saturate<size_t, size_t>(
        test_mmngr_cfgs[1].max_allowed_allocations / 2, 1,
        TEST_ALLOCATION_NUMBER_UPPER_LIMIT); /* limit range capabilities, in case unlimited allocations */
    /* [3] Artificially number of memory allocation  AND memory availability */
    test_mmngr_cfgs[3].memory_limit            = test_mmngr_cfgs[1].memory_limit;
    test_mmngr_cfgs[3].max_allowed_allocations = test_mmngr_cfgs[2].max_allowed_allocations;

    for (auto cfg : test_mmngr_cfgs)
    {
        osal_memory_buffer_handle_t buffer = OSAL_MEMORY_BUFFER_HANDLE_INVALID;
        ASSERT_EQ(OSAL_RETURN_OK, mmngr_open(&cfg, &mmngr))
            << " failed to open mmngr. Test cannot proceed. Test Cfg: " << cfg;
        ASSERT_NE(mmngr, OSAL_MEMORY_MANAGER_HANDLE_INVALID)
            << " failed to open mmngr. Valid handle is required for test to proceed. Test Cfg: " << cfg;
        /* check limits and test allocation functions */

        /* [x.0] one large block, check ceiling functionality, in range allocation */
        EXPECT_EQ(OSAL_RETURN_OK,
                  mmngr_alloc(
                      mmngr, saturate<size_t, size_t>(cfg.memory_limit, 4_KB, TEST_MEMORY_UPPER_LIMIT),
                      64, &buffer))
            << "Test Cfg: " << cfg;
        ASSERT_NE(buffer, OSAL_MEMORY_BUFFER_HANDLE_INVALID) << "Test Cfg : " << cfg;
        EXPECT_EQ(OSAL_RETURN_OK, mmngr_dealloc(mmngr, buffer));
        buffer = OSAL_MEMORY_BUFFER_HANDLE_INVALID;

        /* [x.0.1] one large block, check ceiling functionality, in range allocation, repeat */
        EXPECT_EQ(OSAL_RETURN_OK,
                  mmngr_alloc(
                      mmngr, saturate<size_t, size_t>(cfg.memory_limit, 4_KB, TEST_MEMORY_UPPER_LIMIT),
                      64, &buffer))
            << "Test Cfg: " << cfg;
        ASSERT_NE(buffer, OSAL_MEMORY_BUFFER_HANDLE_INVALID) << "Test Cfg : " << cfg;
        EXPECT_EQ(OSAL_RETURN_OK, mmngr_dealloc(mmngr, buffer)) << "Test Cfg : " << cfg;
        buffer = OSAL_MEMORY_BUFFER_HANDLE_INVALID;

        /* [x.5] max out allocation limit and memory limit, in range of allocations */
        /* [x.6] max out allocation limit and memory limit, out of range of allocations */
        ASSERT_EQ(OSAL_RETURN_OK, mmngr_close(mmngr))
            << " failed to open mmngr. Test cannot proceed. Test Cfg: " << cfg;
    }
}
// [allocateDeallocate_TC_12_001_018]

/**
 * @page MM_API Memory API Test
 * @section OsalMemoryCApiTest_mmngrCfg_TC_12_001_016 OsalMemoryCApiTest.mmngrCfg_TC_12_001_016
 * @subsection mmngrCfg_tsi Test Suite ID
 * OsalMemoryCApiTest
 * @subsection mmngrCfg_tci Test Case ID
 * mmngrCfg_S1_TC001
 * @subsection mmngrCfg_rr Related Requirement(s)
 * \#276547
 * @subsection mmngrCfg_pp Prerequisite/Precondition
 * OSAL is initialized and get Mmngr max config with R_OSAL_MmngrGetOsalMaxConfig
 * @subsection mmngrCfg_tcs Test Case Summary
 * This test shall verify the config range of R_OSAL_MmngrOpen.
 * @subsection mmngrCfg_tpts Test Procedure/Test Steps
 * -# Call R_OSAL_MmngrInitializeMmngrConfigSt with NULL_PTR input parameter.
 * -# Call R_OSAL_MmngrInitializeMmngrConfigSt with not NULL_PTR input parameter
 * -# Call R_OSAL_MmngrOpen with config: <br>
 * Get mmngr_cfg by function R_OSAL_MmngrGetOsalMaxConfig. <br>
 * mmngr_cfg.max_allowed_allocations is OSAL_MEMORY_MANAGER_CFG_UNLIMITED + 1.
 * -# Call R_OSAL_MmngrOpen with config: <br>
 * Get mmngr_cfg by function R_OSAL_MmngrGetOsalMaxConfig. <br>
 * mmngr_cfg.max_allowed_allocations is 0.
 * -# Call R_OSAL_MmngrOpen with config: <br>
 * Get mmngr_cfg by function R_OSAL_MmngrGetOsalMaxConfig. <br>
 * mmngr_cfg.memory_limit is 0.
 * -# Call R_OSAL_MmngrOpen with config: <br>
 * Get mmngr_cfg by function R_OSAL_MmngrGetOsalMaxConfig. <br>
 * mmngr_cfg.memory_limit is 4KB - 1.
 * -# Call R_OSAL_MmngrOpen with config: <br>
 * Get mmngr_cfg by function R_OSAL_MmngrGetOsalMaxConfig. <br>
 * mmngr_cfg.memory_limit is osal_internal_mem_get_maximum_memory_size() + 1.
 * -# Call R_OSAL_MmngrOpen with config: <br>
 * Get mmngr_cfg by function R_OSAL_MmngrGetOsalMaxConfig. <br>
 * mmngr_cfg.max_allowed_allocations is 0.
 * -# Call R_OSAL_MmngrOpen with config: <br>
 * Get mmngr_cfg by function R_OSAL_MmngrGetOsalMaxConfig. <br>
 * mmngr_cfg.max_allowed_allocations is OSAL_MEMORY_MANAGER_CFG_UNLIMITED + 1.
 * -# Call R_OSAL_MmngrOpen with config: <br>
 * Get mmngr_cfg by function R_OSAL_MmngrGetOsalMaxConfig. <br>
 * mmngr_cfg.max_registered_monitors_cbs is OSAL_MEMORY_MANAGER_CFG_UNLIMITED + 1.
 * @subsection mmngrCfg_ereb Expected Result/Behavior
 * -# The first R_OSAL_MmngrInitializeMmngrConfigSt return OSAL_RETURN_PAR.
 * -# The second R_OSAL_MmngrInitializeMmngrConfigSt return OSAL_RETURN_OK.
 * -# The first R_OSAL_MmngrOpen return OSAL_RETURN_CONF. <br>
 * the return handle is OSAL_MEMORY_MANAGER_HANDLE_INVALID
 * -# The second R_OSAL_MmngrOpen return OSAL_RETURN_CONF. <br>
 * the return handle is OSAL_MEMORY_MANAGER_HANDLE_INVALID
 * -# The third R_OSAL_MmngrOpen return OSAL_RETURN_CONF. <br>
 * the return handle is OSAL_MEMORY_MANAGER_HANDLE_INVALID
 * -# The forth R_OSAL_MmngrOpen return OSAL_RETURN_CONF. <br>
 * the return handle is OSAL_MEMORY_MANAGER_HANDLE_INVALID
 * -# The firth R_OSAL_MmngrOpen return OSAL_RETURN_CONF. <br>
 * the return handle is OSAL_MEMORY_MANAGER_HANDLE_INVALID
 * -# The sixth R_OSAL_MmngrOpen return OSAL_RETURN_CONF. <br>
 * the return handle is OSAL_MEMORY_MANAGER_HANDLE_INVALID
 * -# The seventh R_OSAL_MmngrOpen return OSAL_RETURN_CONF. <br>
 * the return handle is OSAL_MEMORY_MANAGER_HANDLE_INVALID
 * -# The eighth R_OSAL_MmngrOpen return OSAL_RETURN_CONF. <br>
 * the return handle is OSAL_MEMORY_MANAGER_HANDLE_INVALID
 * @subsection mmngrCfg_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp mmngrCfg_TC_12_001_016
 */
// [mmngrCfg_TC_12_001_016]
TEST_F(OsalMemoryCApiTest, mmngrCfg_TC_12_001_016)
{
    osal_memory_manager_handle_t mmngr     = OSAL_MEMORY_MANAGER_HANDLE_INVALID;
    st_osal_mmngr_config_t       mmngr_cfg = MMNGR_CONFIG_INIT_VALUE();

    /* Config initialization function */
    EXPECT_EQ(OSAL_RETURN_PAR, R_OSAL_MmngrInitializeMmngrConfigSt(NULL_PTR));
    EXPECT_EQ(OSAL_RETURN_OK, R_OSAL_MmngrInitializeMmngrConfigSt(&mmngr_cfg));

    /* check range check configuration */

    /* max allocations */
    mmngr_cfg                         = mmngr_capabilities_cfg;
    mmngr_cfg.max_allowed_allocations = mmngr_capabilities_cfg.max_allowed_allocations + 1;
    mmngr                             = OSAL_MEMORY_MANAGER_HANDLE_INVALID;
    EXPECT_EQ(OSAL_RETURN_CONF, mmngr_open(&mmngr_cfg, &mmngr));
    EXPECT_EQ(mmngr, OSAL_MEMORY_MANAGER_HANDLE_INVALID) << " previous call un-expect changed mmngr value";

    /* invalid min allocations */
    mmngr_cfg                         = mmngr_capabilities_cfg;
    mmngr_cfg.max_allowed_allocations = 0;
    mmngr                             = OSAL_MEMORY_MANAGER_HANDLE_INVALID;
    EXPECT_EQ(OSAL_RETURN_CONF, mmngr_open(&mmngr_cfg, &mmngr));
    EXPECT_EQ(mmngr, OSAL_MEMORY_MANAGER_HANDLE_INVALID) << " previous call un-expect changed mmngr value";

    /* memory limit */
    mmngr_cfg              = mmngr_capabilities_cfg;
    mmngr_cfg.memory_limit = 0;
    mmngr                  = OSAL_MEMORY_MANAGER_HANDLE_INVALID;
    EXPECT_EQ(OSAL_RETURN_CONF, mmngr_open(&mmngr_cfg, &mmngr));
    EXPECT_EQ(mmngr, OSAL_MEMORY_MANAGER_HANDLE_INVALID) << " previous call un-expect changed mmngr value";

    mmngr_cfg              = mmngr_capabilities_cfg;
    mmngr_cfg.memory_limit = 4_KB - 1;
    mmngr                  = OSAL_MEMORY_MANAGER_HANDLE_INVALID;
    EXPECT_EQ(OSAL_RETURN_CONF, mmngr_open(&mmngr_cfg, &mmngr));
    EXPECT_EQ(mmngr, OSAL_MEMORY_MANAGER_HANDLE_INVALID) << " previous call un-expect changed mmngr value";

    mmngr_cfg              = mmngr_capabilities_cfg;
    mmngr_cfg.memory_limit = mmngr_capabilities_cfg.memory_limit + 1;
    mmngr                  = OSAL_MEMORY_MANAGER_HANDLE_INVALID;
    EXPECT_EQ(OSAL_RETURN_CONF, mmngr_open(&mmngr_cfg, &mmngr));
    EXPECT_EQ(mmngr, OSAL_MEMORY_MANAGER_HANDLE_INVALID) << " previous call un-expect changed mmngr value";

    /* max allowed allocations */
    mmngr_cfg                         = mmngr_capabilities_cfg;
    mmngr_cfg.max_allowed_allocations = 0;
    mmngr                             = OSAL_MEMORY_MANAGER_HANDLE_INVALID;
    EXPECT_EQ(OSAL_RETURN_CONF, mmngr_open(&mmngr_cfg, &mmngr));
    EXPECT_EQ(mmngr, OSAL_MEMORY_MANAGER_HANDLE_INVALID) << " previous call un-expect changed mmngr value";

    mmngr_cfg                         = mmngr_capabilities_cfg;
    mmngr_cfg.max_allowed_allocations = mmngr_capabilities_cfg.max_allowed_allocations + 1;
    mmngr                             = OSAL_MEMORY_MANAGER_HANDLE_INVALID;
    EXPECT_EQ(OSAL_RETURN_CONF, mmngr_open(&mmngr_cfg, &mmngr));
    EXPECT_EQ(mmngr, OSAL_MEMORY_MANAGER_HANDLE_INVALID) << " previous call un-expect changed mmngr value";

    /* Max registered monitor cbs */
    mmngr_cfg                             = mmngr_capabilities_cfg;
    mmngr_cfg.max_registered_monitors_cbs = mmngr_capabilities_cfg.max_registered_monitors_cbs + 1;
    mmngr                                 = OSAL_MEMORY_MANAGER_HANDLE_INVALID;
    EXPECT_EQ(OSAL_RETURN_CONF, mmngr_open(&mmngr_cfg, &mmngr));
    EXPECT_EQ(mmngr, OSAL_MEMORY_MANAGER_HANDLE_INVALID) << " previous call un-expect changed mmngr value";
}
// [mmngrCfg_TC_12_001_016]

/**
 * @page MM_API Memory API Test
 * @section OsalMemoryCApiTest_bufferAccess_TC_12_001_021 OsalMemoryCApiTest.bufferAccess_TC_12_001_021
 * @subsection bufferAccess_tsi Test Suite ID
 * OsalMemoryCApiTest
 * @subsection bufferAccess_tci Test Case ID
 * bufferAccess_S3_N_TC_12_001_021
 * @subsection bufferAccess_rr Related Requirement(s)
 * \#276553, \#276554, \#276560, \#276561
 * @subsection bufferAccess_pp Prerequisite/Precondition
 * OSAL is initialized and get Mmngr max config with R_OSAL_MmngrGetOsalMaxConfig
 * @subsection bufferAccess_tcs Test Case Summary
 * This test shall verify the functionality of function using buffer handle from R_OSAL_MmngrAlloc
 * @subsection bufferAccess_tpts Test Procedure/Test Steps
 * -# Call R_OSAL_MmngrInitializeMmngrConfigSt to get initialize config value. <br>
 * Set config is the value got from R_OSAL_MmngrGetOsalMaxConfig.
 * -# Call R_OSAL_MmngrOpen to open Mmngr.
 * -# Call R_OSAL_MmngrAlloc to allocate a buffer with size is 1MB, alignment is 2MB
 * -# Call R_OSAL_MmngrGetSize to get allocated buffer size.
 * -# Get Const CPU Pointer by calling function R_OSAL_MmngrGetConstCpuPtr.
 * -# Get CPU Pointer by calling function R_OSAL_MmngrGetCpuPtr.
 * -# Get HW Address by calling function R_OSAL_MmngrGetHwAddr with axi_id parameter is OSAL_AXI_BUS_ID_IPA_MAIN_MEMORY.
 * -# Deallocate buffer by calling function R_OSAL_MmngrDealloc
 * -# Close Mmngr by calling function R_OSAL_MmngrClose
 * @subsection bufferAccess_ereb Expected Result/Behavior
 * -# The R_OSAL_MmngrInitializeMmngrConfigSt return OSAL_RETURN_OK.
 * -# Function R_OSAL_MmngrOpen return OSAL_RETURN_OK. <br>
 * The mmngr handle opened by R_OSAL_MmngrOpen is not OSAL_MEMORY_MANAGER_HANDLE_INVALID.
 * -# Function R_OSAL_MmngrAlloc return OSAL_RETURN_OK. <br>
 * The buffer handle allocated by R_OSAL_MmngrAlloc is not OSAL_MEMORY_BUFFER_HANDLE_INVALID.
 * -# Function R_OSAL_MmngrGetSize return OSAL_RETURN_OK. <br>
 * The returned size from R_OSAL_MmngrGetSize is the same as allocated buffer size from R_OSAL_MmngrAlloc.
 * -# Function R_OSAL_MmngrGetConstCpuPtr return OSAL_RETURN_OK. <br>
 * The CPU ptr return from R_OSAL_MmngrGetConstCpuPtr is not NULL_PTR. <br>
 * the return const_cpu_ptr must be 4KB alignment.
 * -# Function R_OSAL_MmngrGetCpuPtr return OSAL_RETURN_OK. <br>
 * The CPU ptr return from R_OSAL_MmngrGetCpuPtr is not NULL_PTR. <br>
 * the return cpu_ptr must be 4KB alignment.
 * -# Function R_OSAL_MmngrGetHwAddr return OSAL_RETURN_OK. <br>
 * The hw_addr return from R_OSAL_MmngrGetHwAddr is not 0. <br>
 * The hw_addr must be 2MB alignment.
 * -# Function R_OSAL_MmngrDealloc return OSAL_RETURN_OK.
 * -# Function R_OSAL_MmngrClose return OSAL_RETURN_OK.
 * @subsection bufferAccess_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp bufferAccess_TC_12_001_021
 */
// [bufferAccess_TC_12_001_021]
TEST_F(OsalMemoryCApiTest, bufferAccess_TC_12_001_021)
{
    osal_memory_manager_handle_t mmngr  = OSAL_MEMORY_MANAGER_HANDLE_INVALID;
    osal_memory_buffer_handle_t  buffer = OSAL_MEMORY_BUFFER_HANDLE_INVALID;
    st_osal_mmngr_config_t       cfg    = MMNGR_CONFIG_INIT_VALUE();

    /* Config initialization function */
    EXPECT_EQ(OSAL_RETURN_OK, R_OSAL_MmngrInitializeMmngrConfigSt(&cfg));

    cfg   = mmngr_capabilities_cfg;
    mmngr = OSAL_MEMORY_MANAGER_HANDLE_INVALID;
    ASSERT_EQ(OSAL_RETURN_OK, mmngr_open(&cfg, &mmngr));
    ASSERT_NE(mmngr, OSAL_MEMORY_MANAGER_HANDLE_INVALID) << " previous call un-expect changed mmngr value";

    /* Allocate a buffer */
    EXPECT_EQ(
        OSAL_RETURN_OK,
        mmngr_alloc(mmngr, saturate<size_t, size_t>(1_MB, 4_KB, cfg.memory_limit), 2_MB, &buffer))
        << "Mmngr Cfg: " << cfg;
    ASSERT_NE(buffer, OSAL_MEMORY_BUFFER_HANDLE_INVALID);

    /* check size */
    size_t buffer_size = 0;
    EXPECT_EQ(OSAL_RETURN_OK, R_OSAL_MmngrGetSize(buffer, &buffer_size));
    size_t expected_buffer_size = saturate<size_t, size_t>(1_MB, 4_KB, cfg.memory_limit);
    EXPECT_EQ(buffer_size, expected_buffer_size);

    /* Get Const CPU Pointer */
    const void * const_cpu_ptr = NULL_PTR;
    EXPECT_EQ(OSAL_RETURN_OK, R_OSAL_MmngrGetConstCpuPtr(buffer, &const_cpu_ptr));
    EXPECT_NE(const_cpu_ptr, NULL_PTR);

    // check alignment, const cpu_ptr alignment must match the alignment requested for the buffer. In this case buffer was allocated with an 4K alignment.
    EXPECT_EQ(reinterpret_cast<uintptr_t>(const_cpu_ptr) % 4_KB, 0) << "Alignment mismatch";

    /* Get Cpu Pointer */
    void * cpu_ptr = NULL_PTR;
    EXPECT_EQ(OSAL_RETURN_OK, R_OSAL_MmngrGetCpuPtr(buffer, &cpu_ptr));
    EXPECT_NE(cpu_ptr, NULL_PTR);

    // check alignment, cpu_ptr alignment must match the alignment requested for the buffer. In this case buffer was allocated with an 4K alignment.
    EXPECT_EQ(reinterpret_cast<uintptr_t>(cpu_ptr) % 4_KB, 0) << "Alignment mismatch";

    /* HW Addr */
    srand(time(NULL));
    uintptr_t min = 1;
    uintptr_t max = UINTPTR_MAX;
    uintptr_t random_hw_addr = (rand() % (max - min + 1)) + min; // random value from 1 to UINTPTR_MAX
    uintptr_t hw_addr = random_hw_addr;
    EXPECT_EQ(OSAL_RETURN_OK, R_OSAL_MmngrGetHwAddr(buffer, OSAL_AXI_BUS_ID_IPA_MAIN_MEMORY, &hw_addr));
    EXPECT_NE(hw_addr, random_hw_addr);

    // check alignment
    EXPECT_EQ(hw_addr % 2_MB, 0) << "Alignment mismatch";

    /* Deallocate buffer */
    EXPECT_EQ(OSAL_RETURN_OK, mmngr_dealloc(mmngr, buffer));

    /* close manager */
    EXPECT_EQ(OSAL_RETURN_OK, mmngr_close(mmngr));
}
// [bufferAccess_TC_12_001_021]

/**
 * @page MM_API Memory API Test
 * @section OsalMemoryCApiTestInit_OsalInit_TC_12_001_022 OsalMemoryCApiTestInit.OsalInit_TC_12_001_022
 * @subsection OsalInit_tsi Test Suite ID
 * OsalMemoryCApiTestInit
 * @subsection OsalInitt_tci Test Case ID
 * OsalInit_S3_N_TC_12_001_022
 * @subsection OsalInit_rr Related Requirement(s)
 * \#199120, \#260098
 * @subsection OsalInit_pp Prerequisite/Precondition
 * R_OSAL_Initialize is already called
 * @subsection OsalInit_tcs Test Case Summary
 * This test shall verify the functionality of R_OSAL_Initialize and R_OSAL_Deinitialize function.
 * @subsection OsalInit_tpts Test Procedure/Test Steps
 * -# Repeat call R_OSAL_Initialize then R_OSAL_Deinitialize 3 times.
 * -# Call R_OSAL_Initialize 2 times then R_OSAL_Deinitialize.
 * -# Call R_OSAL_Initialize then R_OSAL_Deinitialize 2 times.
 * -# Call R_OSAL_Initialize 2 times then R_OSAL_Deinitialize 2 times.
 * @subsection OsalInit_ereb Expected Result/Behavior
 * -# The return of the first 3 time R_OSAL_Initialize and R_OSAL_Deinitialize is OSAL_RETURN_OK.
 * -# The return of calling R_OSAL_Initialize 2 times and R_OSAL_Deinitialize 1 times:
 *      - The first R_OSAL_Initialize is OSAL_RETURN_OK.
 *      - The second R_OSAL_Initialize is OSAL_RETURN_STATE.
 *      - The function R_OSAL_Deinitialize is OSAL_RETURN_OK.
 * -# The return of calling R_OSAL_Initialize 1 times and R_OSAL_Deinitialize 2 times:
 *      - The function R_OSAL_Initialize is OSAL_RETURN_OK.
 *      - The first R_OSAL_Deinitialize is OSAL_RETURN_OK.
 *      - The second R_OSAL_Deinitialize is OSAL_RETURN_STATE.
 * -# The return of calling R_OSAL_Initialize 2 times and R_OSAL_Deinitialize 2 times:
 *      - The first R_OSAL_Initialize is OSAL_RETURN_OK.
 *      - The second R_OSAL_Initialize is OSAL_RETURN_STATE.
 *      - The first R_OSAL_Deinitialize is OSAL_RETURN_OK.
 *      - The second R_OSAL_Deinitialize is OSAL_RETURN_STATE.
 * @subsection OsalInit_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp OsalInit_TC_12_001_022
 */
// [OsalInit_TC_12_001_022]
TEST(OsalMemoryCApiTestInit, OsalInit_TC_12_001_022)
{
    // pre-process of testing
    EXPECT_EQ(OSAL_RETURN_OK, R_OSAL_Deinitialize());

    ASSERT_EQ(OSAL_RETURN_OK, R_OSAL_Initialize());
    ASSERT_EQ(OSAL_RETURN_OK, R_OSAL_Deinitialize());

    /* repeat */
    ASSERT_EQ(OSAL_RETURN_OK, R_OSAL_Initialize());
    ASSERT_EQ(OSAL_RETURN_OK, R_OSAL_Deinitialize());

    /* repeat */
    ASSERT_EQ(OSAL_RETURN_OK, R_OSAL_Initialize());
    ASSERT_EQ(OSAL_RETURN_OK, R_OSAL_Deinitialize());

    /* negative checks */

    /* calling init twice */
    ASSERT_EQ(OSAL_RETURN_OK, R_OSAL_Initialize());
    EXPECT_EQ(OSAL_RETURN_STATE, R_OSAL_Initialize()); /* expect to fail */
    ASSERT_EQ(OSAL_RETURN_OK, R_OSAL_Deinitialize());

    /* calling deinit twice */
    ASSERT_EQ(OSAL_RETURN_OK, R_OSAL_Initialize());
    ASSERT_EQ(OSAL_RETURN_OK, R_OSAL_Deinitialize());
    EXPECT_EQ(OSAL_RETURN_STATE, R_OSAL_Deinitialize()); /* expect to fail */

    /* calling init & deinit twice */
    ASSERT_EQ(OSAL_RETURN_OK, R_OSAL_Initialize());
    EXPECT_EQ(OSAL_RETURN_STATE, R_OSAL_Initialize()); /* expect to fail */
    ASSERT_EQ(OSAL_RETURN_OK, R_OSAL_Deinitialize());
    EXPECT_EQ(OSAL_RETURN_STATE, R_OSAL_Deinitialize()); /* expect to fail */

    // post-process of testing
    EXPECT_EQ(OSAL_RETURN_OK, R_OSAL_Initialize());
}
// [OsalInit_TC_12_001_022]

/**
 * @page MM_API Memory API Test
 * @section OsalMemoryCApiTest_allocSize_TC_12_001_019 OsalMemoryCApiTest.allocSize_allocSize_TC_12_001_019
 * @subsection allocSize_tsi Test Suite ID
 * OsalMemoryCApiTest
 * @subsection allocSize_tci Test Case ID
 * allocSize_S1_TC001
 * @subsection allocSize_rr Related Requirement(s)
 * \#276410, \#276561
 * @subsection allocSize_pp Prerequisite/Precondition
 * OSAL is initialized
 * @subsection allocSize_tcs Test Case Summary
 * This test shall verify the functionality of R_OSAL_MmngrAlloc and R_OSAL_MmngrDealloc function.
 * @subsection allocSize_tpts Test Procedure/Test Steps
 * -# Open a Memory Manager by using R_OSAL_MmngrOpen
 * -# Use nested for loop to define the "size" and "alignment" for R_OSAL_MmngrAlloc.<br>
 * First "for" loop: start from i = 0, loop until i < 64.<br>
 * Second "for" loop: start from j = 0, loop until j < 64.<br>
 *      - In case (i * j) is a number which is a multiple of 64
 *          -# Allocate a buffer which size is (i * j), the aliment is 64 by using R_OSAL_MmngrAlloc
 *          -# Get the size of the allocated buffer by using R_OSAL_MmngrGetSize
 *          -# Deallocate allocated buffer by using R_OSAL_MmngrDealloc
 *          -# In case (i * j) is a number which is a power of 2
 *              - Allocate buffer which "size" and "alignment" are (i * j) by using R_OSAL_MmngrAlloc
 *              - Get the size of the allocated buffer by using R_OSAL_MmngrGetSize
 *              - Deallocate allocated buffer by using R_OSAL_MmngrDealloc
 *              - Allocate buffer which "size" is 64 and "alignment" is (i * j) by using R_OSAL_MmngrAlloc
 *              - Get the size of the allocated buffer by using R_OSAL_MmngrGetSize
 *              - Deallocate allocated buffer by using R_OSAL_MmngrDealloc
 *          -# In case (i * j) is a number which is not a power of 2
 *              - Allocate buffer which "size" and "alignment" are (i * j) by using R_OSAL_MmngrAlloc
 *              - Allocate buffer which "size" is "i" and "alignment" is (i * j) by using R_OSAL_MmngrAlloc
 *      - In case (i * j) is a number which is not a multiple of 64
 *          -# Allocate buffer which "size" is (i * j) and "alignment" is "i" by using R_OSAL_MmngrAlloc
 *          -# Allocate buffer which "size" is "i" and "alignment" is (i * j) by using R_OSAL_MmngrAlloc
 *          -# Allocate buffer which "size" is (i * j) and "alignment" is (i * j) by using R_OSAL_MmngrAlloc
 * -# Close Memory Manager by using R_OSAL_MmngrClose
 * @subsection allocSize_ereb Expected Result/Behavior
 * -# R_OSAL_MmngrOpen return OSAL_RETURN_OK.<br>
 * Value of "m_mmngrHndl" is not OSAL_MEMORY_MANAGER_HANDLE_INVALID
 * -# In case (i * j) is a number which is a multiple of 64.<br>
 *      - R_OSAL_MmngrAlloc return OSAL_RETURN_OK.<br>
 *      Value of "buffer" is not OSAL_MEMORY_BUFFER_HANDLE_INVALID
 *      - R_OSAL_MmngrGetSize return OSAL_RETURN_OK.<br>
 *      Value of "size" is equal to (i * j)
 *      - R_OSAL_MmngrDealloc return OSAL_RETURN_OK
 *      - In case (i * j) is a number which is a power of 2:
 *          -# R_OSAL_MmngrAlloc return OSAL_RETURN_OK.<br>
 *          Value of "buffer" is not OSAL_MEMORY_BUFFER_HANDLE_INVALID
 *          -# R_OSAL_MmngrGetSize return OSAL_RETURN_OK.<br>
 *          Value of "size" is equal to (i * j)
 *          -# R_OSAL_MmngrDealloc return OSAL_RETURN_OK
 *          -# R_OSAL_MmngrAlloc return OSAL_RETURN_OK.<br>
 *          Value of "buffer" is not OSAL_MEMORY_BUFFER_HANDLE_INVALID
 *          -# R_OSAL_MmngrGetSize return OSAL_RETURN_OK.<br>
 *          Value of "size" is equal to 64
 *          -# R_OSAL_MmngrDealloc return OSAL_RETURN_OK
 *      - In case (i * j) is a number which is not a power of 2
 *          -# R_OSAL_MmngrAlloc return OSAL_RETURN_CONF.<br>
 *          Value of "buffer" is equal to OSAL_MEMORY_BUFFER_HANDLE_INVALID
 *          -# R_OSAL_MmngrAlloc return OSAL_RETURN_CONF.<br>
 *          Value of "buffer" is equal to OSAL_MEMORY_BUFFER_HANDLE_INVALID
 * -# In case (i * j) is a number which is not a multiple of 64
 *      - R_OSAL_MmngrAlloc return OSAL_RETURN_CONF.<br>
 *      Value of "buffer" is equal to OSAL_MEMORY_BUFFER_HANDLE_INVALID
 *      - R_OSAL_MmngrAlloc return OSAL_RETURN_CONF.<br>
 *      Value of "buffer" is equal to OSAL_MEMORY_BUFFER_HANDLE_INVALID
 *      - R_OSAL_MmngrAlloc return OSAL_RETURN_CONF.<br>
 *      Value of "buffer" is equal to OSAL_MEMORY_BUFFER_HANDLE_INVALID
 * -# R_OSAL_MmngrClose return OSAL_RETURN_OK.
 * @subsection allocSize_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp allocSize_allocSize_TC_12_001_019
 */
// [allocSize_allocSize_TC_12_001_019]
TEST_F(OsalMemoryCApiTest, allocSize_allocSize_TC_12_001_019)
{
    ASSERT_EQ(mmngr_open(&mmngr_capabilities_cfg, &m_mmngrHndl), OSAL_RETURN_OK);
    ASSERT_NE(m_mmngrHndl, OSAL_MEMORY_MANAGER_HANDLE_INVALID);
    osal_memory_buffer_handle_t buffer = OSAL_MEMORY_BUFFER_HANDLE_INVALID;
    size_t size;

    for (size_t j = 0; j < 64; j++)
    {
        for(size_t i = 0 ; i < 64 ; i++)
        {
            if ((i*j) % 64 == 0 && (i*j) != 0)  //i*j is a multiple of 64 (correct size)
            {
                //positive: correct alignment, correct size, alignment = 64
                EXPECT_EQ(mmngr_alloc(m_mmngrHndl, i*j , 64, &buffer ), OSAL_RETURN_OK);
                EXPECT_NE(buffer, OSAL_MEMORY_BUFFER_HANDLE_INVALID);
                EXPECT_EQ(R_OSAL_MmngrGetSize(buffer, &size), OSAL_RETURN_OK);
                EXPECT_EQ(size, i*j);
                EXPECT_EQ(mmngr_dealloc(m_mmngrHndl, buffer), OSAL_RETURN_OK);
                buffer = OSAL_MEMORY_BUFFER_HANDLE_INVALID;
                if (((i*j) & ((i*j)-1)) == 0) //i*j is a power of 2 (correct alignment)
                {                
                    //positive: correct alignment, correct size, alignment = size
                    EXPECT_EQ(mmngr_alloc(m_mmngrHndl, i*j , i*j, &buffer ), OSAL_RETURN_OK);
                    EXPECT_NE(buffer, OSAL_MEMORY_BUFFER_HANDLE_INVALID);
                    EXPECT_EQ(R_OSAL_MmngrGetSize(buffer, &size), OSAL_RETURN_OK);
                    EXPECT_EQ(size, i*j);
                    EXPECT_EQ(mmngr_dealloc(m_mmngrHndl, buffer), OSAL_RETURN_OK);

                    //positive: correct alignment, correct size, size = 64
                    EXPECT_EQ(mmngr_alloc(m_mmngrHndl, 64 , i*j, &buffer ), OSAL_RETURN_OK);
                    EXPECT_EQ(R_OSAL_MmngrGetSize(buffer, &size), OSAL_RETURN_OK);
                    EXPECT_EQ(size, 64);
                    EXPECT_NE(buffer, OSAL_MEMORY_BUFFER_HANDLE_INVALID);
                    EXPECT_EQ(mmngr_dealloc(m_mmngrHndl, buffer), OSAL_RETURN_OK);
                    buffer = OSAL_MEMORY_BUFFER_HANDLE_INVALID;
                }else
                {
                    //negative: wrong alignment, correct size, size = alignment
                    EXPECT_EQ(mmngr_alloc(m_mmngrHndl, i*j , i*j, &buffer ), OSAL_RETURN_CONF);
                    EXPECT_EQ(buffer, OSAL_MEMORY_BUFFER_HANDLE_INVALID);

                    //negative: wrong alignment, variable size
                    EXPECT_EQ(mmngr_alloc(m_mmngrHndl, i , i*j, &buffer ), OSAL_RETURN_CONF);
                    EXPECT_EQ(buffer, OSAL_MEMORY_BUFFER_HANDLE_INVALID);
                }
            }else
            {
                //negative : variable alignment, wrong size
                EXPECT_EQ(mmngr_alloc(m_mmngrHndl, i*j , i, &buffer ), OSAL_RETURN_CONF);
                EXPECT_EQ(buffer, OSAL_MEMORY_BUFFER_HANDLE_INVALID);

                //negative: wrong alignment, variable size
                EXPECT_EQ(mmngr_alloc(m_mmngrHndl, i , i*j, &buffer ), OSAL_RETURN_CONF);
                EXPECT_EQ(buffer, OSAL_MEMORY_BUFFER_HANDLE_INVALID);

                //negative: wrong alignment, wrong size
                EXPECT_EQ(mmngr_alloc(m_mmngrHndl, i*j , i*j, &buffer ), OSAL_RETURN_CONF);
                EXPECT_EQ(buffer, OSAL_MEMORY_BUFFER_HANDLE_INVALID);
            }
        } 
    }
    ASSERT_EQ(mmngr_close(m_mmngrHndl), OSAL_RETURN_OK);
}
// [allocSize_allocSize_TC_12_001_019]
#endif

class MonitorHelper
{
public:
    virtual void NormalmonitorCb(e_osal_mmngr_event_t event, e_osal_return_t error, osal_memory_buffer_handle_t buffer_hndl)
    {
        /* just a mock up */
        (void)event;
        (void)error;
        (void)buffer_hndl;
    }

    virtual void AbnormalmonitorCb(e_osal_mmngr_event_t event, e_osal_return_t error, osal_memory_buffer_handle_t buffer_hndl)
    {
        /* just a mock up */
        (void)event;
        (void)error;
        (void)buffer_hndl;
    }

    virtual void FreelistmonitorCb(e_osal_mmngr_event_t event, e_osal_return_t error, osal_memory_buffer_handle_t buffer_hndl)
    {
        /* just a mock up */
        (void)event;
        (void)error;
        (void)buffer_hndl;
    }
};

class MockMonitorHelper : public MonitorHelper
{
public:
    MOCK_METHOD(void, NormalmonitorCb,
                (e_osal_mmngr_event_t event, e_osal_return_t error, osal_memory_buffer_handle_t buffer_hndl),
                (override));

    MOCK_METHOD(void, AbnormalmonitorCb,
                (e_osal_mmngr_event_t event, e_osal_return_t error, osal_memory_buffer_handle_t buffer_hndl),
                (override));

    MOCK_METHOD(void, FreelistmonitorCb,
                (e_osal_mmngr_event_t event, e_osal_return_t error, osal_memory_buffer_handle_t buffer_hndl),
                (override));
};

class MemoryApiTest : public OSALTESTS
{
protected:
    /* RVC implementation for Linux OSAL IT*/
    st_osal_mmngr_config_t       config;
    osal_memory_manager_handle_t hndl_mmngr = OSAL_MEMORY_MANAGER_HANDLE_INVALID;
    static osal_memory_manager_handle_t dummy_hndl_mmngr;;
    osal_memory_buffer_handle_t  buffer_obj = OSAL_MEMORY_BUFFER_HANDLE_INVALID;
    size_t size;
    size_t offset;
    size_t alignment;
    static osal_mq_handle_t sync_mq;

// [underflow_test]
    void underflow_test(e_osal_mmngr_allocator_mode_t mode, e_osal_return_t  return_value, int called_function_number, char* Test_name)
    {
        MockMonitorHelper  allocationEventMonitor;
        auto AbnormalmonitorCb = cb_wrapper<decltype(
        &MonitorHelper::AbnormalmonitorCb)>::make_cb<&MonitorHelper::AbnormalmonitorCb>();
        void* cpuPtr = NULL;
        int8_t known_data = 29;
        osal_memory_buffer_handle_t  buffer_obj1 = OSAL_MEMORY_BUFFER_HANDLE_INVALID;

        config.memory_limit                = 10 * 1024 * 1024;
        config.max_allowed_allocations     = 2;
        config.max_registered_monitors_cbs = 2;
        config.mode = mode;

        EXPECT_EQ(R_OSAL_MmngrOpen(&config, &hndl_mmngr), OSAL_RETURN_OK) << Test_name;
        EXPECT_CALL(allocationEventMonitor, AbnormalmonitorCb(OSAL_MMNGR_EVENT_UNDERFLOW_DETECTED, _, _)).Times(AtLeast(called_function_number));
        size = 64;
        alignment = 64;
        EXPECT_EQ(R_OSAL_MmngrAlloc(hndl_mmngr, size, alignment, &buffer_obj), OSAL_RETURN_OK) << Test_name;
        EXPECT_EQ(R_OSAL_MmngrAlloc(hndl_mmngr, size, alignment, &buffer_obj1), OSAL_RETURN_OK) << Test_name;
        EXPECT_EQ(R_OSAL_MmngrRegisterMonitor(hndl_mmngr, OSAL_MMNGR_EVENT_UNDERFLOW_DETECTED, AbnormalmonitorCb, &allocationEventMonitor), OSAL_RETURN_OK) << Test_name;
        EXPECT_EQ(R_OSAL_MmngrGetCpuPtr(buffer_obj1, &cpuPtr), OSAL_RETURN_OK) << Test_name;
        EXPECT_NE(cpuPtr, NULL_PTR) << Test_name;
        size = 0;
        EXPECT_EQ(R_OSAL_MmngrGetSize(buffer_obj1, &size), OSAL_RETURN_OK) << Test_name;
        EXPECT_NE(size, 0);
        cpuPtr = (char *)cpuPtr - sizeof(long);
        (void)memset(cpuPtr, known_data, size);
        EXPECT_EQ(R_OSAL_MmngrCheckBuffer(buffer_obj1), return_value) << Test_name;
        EXPECT_EQ(R_OSAL_MmngrDealloc(hndl_mmngr, buffer_obj1), OSAL_RETURN_OK) << Test_name;
        EXPECT_EQ(R_OSAL_MmngrDealloc(hndl_mmngr, buffer_obj), OSAL_RETURN_OK) << Test_name;
        buffer_obj = OSAL_MEMORY_BUFFER_HANDLE_INVALID;

        EXPECT_EQ(R_OSAL_MmngrClose(hndl_mmngr), OSAL_RETURN_OK) << Test_name;
        hndl_mmngr = OSAL_MEMORY_MANAGER_HANDLE_INVALID;
    }
// [underflow_test]

// [overflow_test]
    void overflow_test(e_osal_mmngr_allocator_mode_t mode, e_osal_return_t return_value, int called_function_number, char* Test_name)
    {
        MockMonitorHelper  allocationEventMonitor;
        auto AbnormalmonitorCb = cb_wrapper<decltype(
        &MonitorHelper::AbnormalmonitorCb)>::make_cb<&MonitorHelper::AbnormalmonitorCb>();
        void* cpuPtr = NULL;
        int8_t known_data = 29;

        config.memory_limit                = 4096;
        config.max_allowed_allocations     = 1;
        config.max_registered_monitors_cbs = 2;
        config.mode = mode;

        EXPECT_EQ(R_OSAL_MmngrOpen(&config, &hndl_mmngr), OSAL_RETURN_OK) << Test_name;
        EXPECT_CALL(allocationEventMonitor, AbnormalmonitorCb(OSAL_MMNGR_EVENT_OVERFLOW_DETECTED, _, _)).Times(AtLeast(called_function_number));
        size = 64;
        alignment = 64;
        EXPECT_EQ(R_OSAL_MmngrAlloc(hndl_mmngr, size, alignment, &buffer_obj), OSAL_RETURN_OK) << Test_name;
        EXPECT_EQ(R_OSAL_MmngrRegisterMonitor(hndl_mmngr, OSAL_MMNGR_EVENT_OVERFLOW_DETECTED, AbnormalmonitorCb, &allocationEventMonitor), OSAL_RETURN_OK) << Test_name;
        EXPECT_EQ(R_OSAL_MmngrGetCpuPtr(buffer_obj, &cpuPtr), OSAL_RETURN_OK) << Test_name;
        EXPECT_NE(cpuPtr, NULL_PTR) << Test_name;
        size = 0;
        EXPECT_EQ(R_OSAL_MmngrGetSize(buffer_obj, &size), OSAL_RETURN_OK) << Test_name;
        EXPECT_NE(size, 0);
        (void)memset(cpuPtr, known_data, size + 1);
        EXPECT_EQ(R_OSAL_MmngrCheckBuffer(buffer_obj), return_value) << Test_name;
        EXPECT_EQ(R_OSAL_MmngrDealloc(hndl_mmngr, buffer_obj), OSAL_RETURN_OK) << Test_name;
        buffer_obj = OSAL_MEMORY_BUFFER_HANDLE_INVALID;

        EXPECT_EQ(R_OSAL_MmngrClose(hndl_mmngr), OSAL_RETURN_OK) << Test_name;
        hndl_mmngr = OSAL_MEMORY_MANAGER_HANDLE_INVALID;
    }
// [overflow_test]

// [MemoryApiTest_SetUp]
    static void SetUpTestSuite()
    {
        st_osal_mmngr_config_t tmp_config;
        osal_memory_manager_handle_t orig_hndl_mmngr;
        st_osal_mq_config mq_config = {10, 4};

        EXPECT_EQ(R_OSAL_MmngrGetOsalMaxConfig(&tmp_config), OSAL_RETURN_OK);
        EXPECT_EQ(R_OSAL_MmngrOpen(&tmp_config, &orig_hndl_mmngr), OSAL_RETURN_OK);
        EXPECT_NE(orig_hndl_mmngr, OSAL_MEMORY_MANAGER_HANDLE_INVALID);

        //copy the handle into the dummy handle
        dummy_hndl_mmngr = (osal_memory_manager_handle_t)malloc (sizeof(st_osal_memory_manager_obj));
        EXPECT_NE(dummy_hndl_mmngr, NULL_PTR);
        memcpy(dummy_hndl_mmngr, orig_hndl_mmngr, sizeof(st_osal_memory_manager_obj));
        EXPECT_EQ(R_OSAL_MmngrClose(orig_hndl_mmngr), OSAL_RETURN_OK);
        orig_hndl_mmngr = OSAL_MEMORY_MANAGER_HANDLE_INVALID;

        // Create message queue to sync thread.
        EXPECT_EQ(R_OSAL_MqCreate(&mq_config, SYNC_MQ_ID, &sync_mq), OSAL_RETURN_OK);
        EXPECT_NE(sync_mq, OSAL_MQ_HANDLE_INVALID);
    }
// [MemoryApiTest_SetUp]

// [MemoryApiTest_TearDown]
    static void TearDownTestSuite()
    {
        free(dummy_hndl_mmngr);
        EXPECT_EQ(R_OSAL_MqDelete(sync_mq), OSAL_RETURN_OK);
    }
// [MemoryApiTest_TearDown]
};

struct memory_test_allocate_multiple_buffer_arg
{
    memory_test_allocate_multiple_buffer_arg(osal_memory_manager_handle_t * mmngr_hndl, osal_thread_id_t tid, const char* test_case_name)
    : mm_handle(mmngr_hndl), uid(tid), test_name(test_case_name)
    {
    }
    osal_memory_manager_handle_t *mm_handle;
    osal_thread_id_t uid;
    const char* test_name;
};

struct memory_test_operation_region_arg
{
    memory_test_operation_region_arg(osal_memory_manager_handle_t * mmngr_hndl, osal_memory_buffer_handle_t * buffer_obj,
    osal_thread_id_t tid, fp_osal_memory_mngr_cb_t * monitor_hndl, MockMonitorHelper * allocaEventMonitor, const char* test_case_name)
    : mm_handle(mmngr_hndl), buffer_obj_region(buffer_obj), uid(tid), NormalmonitorCb(monitor_hndl), allocationEventMonitor(allocaEventMonitor), test_name(test_case_name)
    {
    }
    osal_memory_manager_handle_t * mm_handle;
    osal_memory_buffer_handle_t * buffer_obj_region;
    fp_osal_memory_mngr_cb_t * NormalmonitorCb;
    MockMonitorHelper * allocationEventMonitor;
    osal_thread_id_t uid;
    osal_mq_handle_t mq;
    const char* test_name;
};

struct memory_test_allocate_multiple_buffer_with_multiple_region_arg
{
    memory_test_allocate_multiple_buffer_with_multiple_region_arg(osal_memory_manager_handle_t * mmngr_hndl, osal_thread_id_t tid, osal_memory_region_idx_t region_idx)
    : mm_handle(mmngr_hndl), uid(tid), region_index(region_idx)
    {
    }
    osal_memory_manager_handle_t *mm_handle;
    osal_thread_id_t uid;
    osal_memory_region_idx_t region_index;
};

osal_memory_manager_handle_t MemoryApiTest::dummy_hndl_mmngr = OSAL_MEMORY_MANAGER_HANDLE_INVALID;
osal_memory_buffer_handle_t buffer_arr[TEST_NUM_OF_MULTI_BUFFERS];
osal_memory_buffer_handle_t buffer_arr_multi_region[TEST_NUM_OF_MEMORY_REGION][TEST_NUM_OF_MULTI_BUFFERS];
osal_mq_handle_t MemoryApiTest::sync_mq = OSAL_MQ_HANDLE_INVALID;

// [memory_test_allocate_multiple_buffer_child_thread]
int64_t memory_test_allocate_multiple_buffer_child_thread(void * arg)
{
    memory_test_allocate_multiple_buffer_arg *testStruct = (memory_test_allocate_multiple_buffer_arg *)arg;
    e_osal_return_t osal_ret        = OSAL_RETURN_OK;
    char failure_log[100];

    strcat(failure_log, testStruct->test_name);
    strcat(failure_log, "failed");
    if(testStruct->uid == TEST_THREAD_ID2)
    {
        for (size_t i = 0; i < (TEST_NUM_OF_MULTI_BUFFERS / 2); i++)
        {
            EXPECT_EQ(R_OSAL_MmngrAlloc(*(testStruct->mm_handle), TEST_MULTI_THREADS_BUFFER_SIZE, TEST_MULTI_THREADS_BUFFER_ALIGN, &buffer_arr[i]), OSAL_RETURN_OK) << failure_log << " at buffer No." << i;
        }
    }
    else if(testStruct->uid == TEST_THREAD_ID3)
    {
        for (size_t i = (TEST_NUM_OF_MULTI_BUFFERS / 2); i < TEST_NUM_OF_MULTI_BUFFERS; i++)
        {
            EXPECT_EQ(R_OSAL_MmngrAlloc(*(testStruct->mm_handle), TEST_MULTI_THREADS_BUFFER_SIZE, TEST_MULTI_THREADS_BUFFER_ALIGN, &buffer_arr[i]), OSAL_RETURN_OK) << failure_log << " at buffer No." << i;
        }
    }
    else
    {
        /* Do nothing */
    }

    return (int64_t) osal_ret;
}
// [memory_test_allocate_multiple_buffer_child_thread]

// [test_memory_operation_thread]
int64_t test_memory_operation_thread(void * arg)
{
    memory_test_operation_region_arg *testStruct = (memory_test_operation_region_arg *)arg;
    void*               cpu_ptr = NULL_PTR;
    uint32_t            value = 0;
    uintptr_t           hw_addr;
    size_t              offset = 0;
    st_osal_mq_config   local_mq_config;
    uint32_t            send_msg = TEST_SYNC_MQ_MSG;
    char failure_log[100];

    strcat(failure_log, testStruct->test_name);
    strcat(failure_log, "failed");
    if(testStruct->uid == TEST_THREAD_ID2)
    {
        EXPECT_EQ(R_OSAL_MmngrRegisterMonitor(*(testStruct->mm_handle), OSAL_MMNGR_EVENT_ALLOCATE, testStruct->NormalmonitorCb, testStruct->allocationEventMonitor), OSAL_RETURN_OK) << failure_log;
        EXPECT_EQ(R_OSAL_MmngrRegisterMonitor(*(testStruct->mm_handle), OSAL_MMNGR_EVENT_DEALLOCATE, testStruct->NormalmonitorCb, testStruct->allocationEventMonitor), OSAL_RETURN_OK) << failure_log;
        EXPECT_EQ(R_OSAL_MmngrRegisterMonitor(*(testStruct->mm_handle), OSAL_MMNGR_EVENT_OVERFLOW_DETECTED, testStruct->NormalmonitorCb, testStruct->allocationEventMonitor), OSAL_RETURN_OK) << failure_log;
        EXPECT_EQ(R_OSAL_MmngrRegisterMonitor(*(testStruct->mm_handle), OSAL_MMNGR_EVENT_UNDERFLOW_DETECTED, testStruct->NormalmonitorCb, testStruct->allocationEventMonitor), OSAL_RETURN_OK) << failure_log;
        // Allocate buffer for memory region index
        EXPECT_EQ(R_OSAL_MqGetConfig(testStruct->mq, &local_mq_config), OSAL_RETURN_OK) << failure_log;
        EXPECT_EQ(R_OSAL_MmngrAlloc(*(testStruct->mm_handle), TEST_MULTI_THREADS_BUFFER_SIZE, TEST_MULTI_THREADS_BUFFER_ALIGN, testStruct->buffer_obj_region), OSAL_RETURN_OK) << failure_log;
        EXPECT_NE(*(testStruct->buffer_obj_region), OSAL_MEMORY_BUFFER_HANDLE_INVALID) << failure_log;
        EXPECT_EQ(R_OSAL_MqSendForTimePeriod(testStruct->mq, SYNC_MQ_TIME, &send_msg, local_mq_config.msg_size), OSAL_RETURN_OK);
    }
    else if(testStruct->uid == TEST_THREAD_ID3)
    {
        // GetcpuPtr for region index
        EXPECT_EQ(R_OSAL_MmngrGetCpuPtr(*(testStruct->buffer_obj_region), &cpu_ptr), OSAL_RETURN_OK) << failure_log;
        EXPECT_NE(cpu_ptr,NULL_PTR) << failure_log;
        (void)memset(cpu_ptr, TEST_KNOWN_DATA, sizeof(uint32_t));
        value = *((uint32_t*)(cpu_ptr));

        // Check value of cpu_ptr, re-check with write value
        EXPECT_TRUE(value == (((uint32_t)TEST_KNOWN_DATA << 24) |
                                ((uint32_t)TEST_KNOWN_DATA << 16) |
                                    ((uint32_t)TEST_KNOWN_DATA << 8) |
                                        ((uint32_t)TEST_KNOWN_DATA)))  << failure_log;

        // Flush, get hardware address, invalidate
        EXPECT_EQ(R_OSAL_MmngrFlush(*(testStruct->buffer_obj_region), offset , TEST_MULTI_THREADS_BUFFER_SIZE), OSAL_RETURN_OK) << failure_log;
        EXPECT_EQ(R_OSAL_MmngrGetHwAddr(*(testStruct->buffer_obj_region), OSAL_AXI_BUS_ID_IPA_MAIN_MEMORY, &hw_addr), OSAL_RETURN_OK) << failure_log;
        EXPECT_EQ(R_OSAL_MmngrInvalidate(*(testStruct->buffer_obj_region), offset, TEST_MULTI_THREADS_BUFFER_SIZE), OSAL_RETURN_OK) << failure_log;

        // Deallocate the allocated buffer
        EXPECT_EQ(R_OSAL_MmngrDealloc(*(testStruct->mm_handle), *(testStruct->buffer_obj_region)), OSAL_RETURN_OK) << failure_log;
    }
    else
    {
        //Do nothing
    }
    return (int64_t) 0;
}
// [test_memory_operation_thread]

// [memory_test_allocate_multiple_buffer_with_multiple_region_child_thread]
int64_t memory_test_allocate_multiple_buffer_with_multiple_region_child_thread(void * arg)
{
    memory_test_allocate_multiple_buffer_with_multiple_region_arg *testStruct = (memory_test_allocate_multiple_buffer_with_multiple_region_arg *)arg;
    e_osal_return_t osal_ret        = OSAL_RETURN_OK;

    if(testStruct->uid == TEST_THREAD_ID2)
    {
        for (size_t i = 0; i < (TEST_NUM_OF_MULTI_BUFFERS / 2); i++)
        {
            EXPECT_EQ(R_OSAL_MmngrAlloc(*(testStruct->mm_handle), TEST_MULTI_THREADS_BUFFER_SIZE, TEST_MULTI_THREADS_BUFFER_ALIGN,
                                        &buffer_arr_multi_region[testStruct->region_index][i]), OSAL_RETURN_OK)
                                        << "Test09_021_050 failed at region index: " << testStruct->region_index << " and buffer No." << i;
        }
    }
    else if(testStruct->uid == TEST_THREAD_ID3)
    {
        for (size_t i = (TEST_NUM_OF_MULTI_BUFFERS / 2); i < TEST_NUM_OF_MULTI_BUFFERS; i++)
        {
            EXPECT_EQ(R_OSAL_MmngrAlloc(*(testStruct->mm_handle), TEST_MULTI_THREADS_BUFFER_SIZE, TEST_MULTI_THREADS_BUFFER_ALIGN,
                                        &buffer_arr_multi_region[testStruct->region_index][i]), OSAL_RETURN_OK)
                                        << "Test09_021_050 failed at region index: " << testStruct->region_index << " and buffer No." << i;
        }
    }
    else
    {
        /* Do nothing */
    }

    return (int64_t) osal_ret;
}
// [memory_test_allocate_multiple_buffer_with_multiple_region_child_thread]

#ifndef SKIP_MEMORY_OPEN
/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrOpen_TC_09_001_001 MemoryApiTest.MmngrOpen_TC_09_001_001
 * @subsection MmngrOpen_TC_09_001_001_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrOpen_TC_09_001_001_tci Test Case ID
 * MmngrOpen_S1_N_TC_09_001_001
 * @subsection MmngrOpen_TC_09_001_001_rr Related Requirement(s)
 * \#276408, \#276732, \#276736, \#276742, \#276744
 * @subsection MmngrOpen_TC_09_001_001_pp Prerequisite/Precondition
 * OSAL is initialized.
 * @subsection MmngrOpen_TC_09_001_001_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrOpen with normal condition in OSAL_MMNGR_ALLOC_MODE_STACK mode.
 * - Test09_001_001: R_OSAL_MmngrOpen with all valid input parameter.
 * @subsection MmngrOpen_TC_09_001_001_tpts Test Procedure/Test Steps
 * -# Get the maximum memory configuration by using R_OSAL_MmngrGetOsalMaxConfig
 * -# Open Mmngr using R_OSAL_MmngrOpen with valid config.
 * -# Calling R_OSAL_MmngrClose to close the opened Mmngr for the next test cases.
 * @subsection MmngrOpen_TC_09_001_001_ereb Expected Result/Behavior
 * -# The return of R_OSAL_MmngrGetOsalMaxConfig is OSAL_RETURN_OK.
 * -# The return of R_OSAL_MmngrOpen is OSAL_RETURN_OK.<br>
 * the return handle is not OSAL_MEMORY_MANAGER_HANDLE_INVALID.
 * -# The return value of R_OSAL_MmngrClose is OSAL_RETURN_OK.
 * @subsection MmngrOpen_TC_09_001_001_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrOpen_TC_09_001_001
 */
// [MmngrOpen_TC_09_001_001]
TEST_F(MemoryApiTest, MmngrOpen_TC_09_001_001)
{
    // Test09_001_001
    // @brief: normal case: all input/output param is valid
    EXPECT_EQ(R_OSAL_MmngrGetOsalMaxConfig(&config), OSAL_RETURN_OK);
    config.max_allowed_allocations     = 1;
    config.max_registered_monitors_cbs = 0;
    config.memory_limit = 10 * 1024 * 1024;
    config.mode = OSAL_MMNGR_ALLOC_MODE_STACK;
    EXPECT_EQ(R_OSAL_MmngrOpen(&config, &hndl_mmngr), OSAL_RETURN_OK) << "Test09_001_001 failed";
    EXPECT_NE(hndl_mmngr, OSAL_MEMORY_MANAGER_HANDLE_INVALID) << "Test09_001_001 failed";
    EXPECT_EQ(R_OSAL_MmngrClose(hndl_mmngr), OSAL_RETURN_OK);
    hndl_mmngr = OSAL_MEMORY_MANAGER_HANDLE_INVALID;
}
// [MmngrOpen_TC_09_001_001]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrOpen_TC_09_001_005 MemoryApiTest.MmngrOpen_TC_09_001_005
 * @subsection MmngrOpen_TC_09_001_005_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrOpen_TC_09_001_005_tci Test Case ID
 * MmngrOpen_S1_N_TC_09_001_005
 * @subsection MmngrOpen_TC_09_001_005_rr Related Requirement(s)
 * \#276408, \#276732, \#276736, \#276742, \#276744
 * @subsection MmngrOpen_TC_09_001_005_pp Prerequisite/Precondition
 * OSAL is initialized.
 * @subsection MmngrOpen_TC_09_001_005_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrOpen with normal condition in OSAL_MMNGR_ALLOC_MODE_STACK_PROT mode.
 * - Test09_001_005: R_OSAL_MmngrOpen with all valid input parameter.
 * @subsection MmngrOpen_TC_09_001_005_tpts Test Procedure/Test Steps
 * -# Get the maximum memory configuration by using R_OSAL_MmngrGetOsalMaxConfig
 * -# Open Mmngr using R_OSAL_MmngrOpen with valid config.
 * -# Calling R_OSAL_MmngrClose to close the opened Mmngr for the next test cases.
 * @subsection MmngrOpen_TC_09_001_005_ereb Expected Result/Behavior
 * -# The return of R_OSAL_MmngrGetOsalMaxConfig is OSAL_RETURN_OK.
 * -# The return of R_OSAL_MmngrOpen is OSAL_RETURN_OK.<br>
 * the return handle is not OSAL_MEMORY_MANAGER_HANDLE_INVALID.
 * -# The return value of R_OSAL_MmngrClose is OSAL_RETURN_OK.
 * @subsection MmngrOpen_TC_09_001_005_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrOpen_TC_09_001_005
 */
// [MmngrOpen_TC_09_001_005]
TEST_F(MemoryApiTest, MmngrOpen_TC_09_001_005)
{
    // Test09_001_005
    // @brief: normal case: all input/output param is valid
    EXPECT_EQ(R_OSAL_MmngrGetOsalMaxConfig(&config), OSAL_RETURN_OK);
    config.max_allowed_allocations     = 1;
    config.max_registered_monitors_cbs = 0;
    config.memory_limit = 10 * 1024 * 1024;
    config.mode = OSAL_MMNGR_ALLOC_MODE_STACK_PROT;
    EXPECT_EQ(R_OSAL_MmngrOpen(&config, &hndl_mmngr), OSAL_RETURN_OK) << "Test09_001_005 failed";
    EXPECT_NE(hndl_mmngr, OSAL_MEMORY_MANAGER_HANDLE_INVALID) << "Test09_001_005 failed";
    EXPECT_EQ(R_OSAL_MmngrClose(hndl_mmngr), OSAL_RETURN_OK);
    hndl_mmngr = OSAL_MEMORY_MANAGER_HANDLE_INVALID;
}
// [MmngrOpen_TC_09_001_005]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrOpen_TC_09_001_006 MemoryApiTest.MmngrOpen_TC_09_001_006
 * @subsection MmngrOpen_TC_09_001_006_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrOpen_TC_09_001_006_tci Test Case ID
 * MmngrOpen_S1_N_TC_09_001_006
 * @subsection MmngrOpen_TC_09_001_006_rr Related Requirement(s)
 * \#276408, \#276732, \#276736, \#276742, \#276744
 * @subsection MmngrOpen_TC_09_001_006_pp Prerequisite/Precondition
 * OSAL is initialized.
 * @subsection MmngrOpen_TC_09_001_006_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrOpen with normal condition in OSAL_MMNGR_ALLOC_MODE_FREE_LIST mode.
 * - Test09_001_006: R_OSAL_MmngrOpen with all valid input parameter.
 * @subsection MmngrOpen_TC_09_001_006_tpts Test Procedure/Test Steps
 * -# Get the maximum memory configuration by using R_OSAL_MmngrGetOsalMaxConfig
 * -# Open Mmngr using R_OSAL_MmngrOpen with valid config.
 * -# Calling R_OSAL_MmngrClose to close the opened Mmngr for the next test cases.
 * @subsection MmngrOpen_TC_09_001_006_ereb Expected Result/Behavior
 * -# The return of R_OSAL_MmngrGetOsalMaxConfig is OSAL_RETURN_OK.
 * -# The return of R_OSAL_MmngrOpen is OSAL_RETURN_OK.<br>
 * the return handle is not OSAL_MEMORY_MANAGER_HANDLE_INVALID.
 * -# The return value of R_OSAL_MmngrClose is OSAL_RETURN_OK.
 * @subsection MmngrOpen_TC_09_001_006_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrOpen_TC_09_001_006
 */
// [MmngrOpen_TC_09_001_006]
TEST_F(MemoryApiTest, MmngrOpen_TC_09_001_006)
{
    // Test09_001_006
    // @brief: normal case: all input/output param is valid
    EXPECT_EQ(R_OSAL_MmngrGetOsalMaxConfig(&config), OSAL_RETURN_OK);
    config.max_allowed_allocations     = 1;
    config.max_registered_monitors_cbs = 0;
    config.memory_limit = 10 * 1024 * 1024;
    config.mode = OSAL_MMNGR_ALLOC_MODE_FREE_LIST;
    EXPECT_EQ(R_OSAL_MmngrOpen(&config, &hndl_mmngr), OSAL_RETURN_OK) << "Test09_001_006 failed";
    EXPECT_NE(hndl_mmngr, OSAL_MEMORY_MANAGER_HANDLE_INVALID) << "Test09_001_006 failed";
    EXPECT_EQ(R_OSAL_MmngrClose(hndl_mmngr), OSAL_RETURN_OK);
    hndl_mmngr = OSAL_MEMORY_MANAGER_HANDLE_INVALID;
}
// [MmngrOpen_TC_09_001_006]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrOpen_TC_09_001_007 MemoryApiTest.MmngrOpen_TC_09_001_007
 * @subsection MmngrOpen_TC_09_001_007_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrOpen_TC_09_001_007_tci Test Case ID
 * MmngrOpen_S1_N_TC_09_001_007
 * @subsection MmngrOpen_TC_09_001_007_rr Related Requirement(s)
 * \#276408, \#276732, \#276736, \#276742, \#276744
 * @subsection MmngrOpen_TC_09_001_007_pp Prerequisite/Precondition
 * OSAL is initialized.
 * @subsection MmngrOpen_TC_09_001_007_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrOpen with normal condition in OSAL_MMNGR_ALLOC_MODE_FREE_LIST_PROT mode.
 * - Test09_001_007: R_OSAL_MmngrOpen with all valid input parameter.
 * @subsection MmngrOpen_TC_09_001_007_tpts Test Procedure/Test Steps
 * -# Get the maximum memory configuration by using R_OSAL_MmngrGetOsalMaxConfig
 * -# Open Mmngr using R_OSAL_MmngrOpen with valid config.
 * -# Calling R_OSAL_MmngrClose to close the opened Mmngr for the next test cases.
 * @subsection MmngrOpen_TC_09_001_007_ereb Expected Result/Behavior
 * -# The return of R_OSAL_MmngrGetOsalMaxConfig is OSAL_RETURN_OK.
 * -# The return of R_OSAL_MmngrOpen is OSAL_RETURN_OK.<br>
 * the return handle is not OSAL_MEMORY_MANAGER_HANDLE_INVALID.
 * -# The return value of R_OSAL_MmngrClose is OSAL_RETURN_OK.
 * @subsection MmngrOpen_TC_09_001_007_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrOpen_TC_09_001_007
 */
// [MmngrOpen_TC_09_001_007]
TEST_F(MemoryApiTest, MmngrOpen_TC_09_001_007)
{
    // Test09_001_007
    // @brief: normal case: all input/output param is valid
    EXPECT_EQ(R_OSAL_MmngrGetOsalMaxConfig(&config), OSAL_RETURN_OK);
    config.max_allowed_allocations     = 1;
    config.max_registered_monitors_cbs = 0;
    config.memory_limit = 10 * 1024 * 1024;
    config.mode = OSAL_MMNGR_ALLOC_MODE_FREE_LIST_PROT;
    EXPECT_EQ(R_OSAL_MmngrOpen(&config, &hndl_mmngr), OSAL_RETURN_OK) << "Test09_001_007 failed";
    EXPECT_NE(hndl_mmngr, OSAL_MEMORY_MANAGER_HANDLE_INVALID) << "Test09_001_007 failed";
    EXPECT_EQ(R_OSAL_MmngrClose(hndl_mmngr), OSAL_RETURN_OK);
    hndl_mmngr = OSAL_MEMORY_MANAGER_HANDLE_INVALID;
}
// [MmngrOpen_TC_09_001_007]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrOpen_TC_09_001_008 MemoryApiTest.MmngrOpen_TC_09_001_008
 * @subsection MmngrOpen_TC_09_001_008_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrOpen_TC_09_001_008_tci Test Case ID
 * MmngrOpen_S0_BA_TC_09_001_008
 * @subsection MmngrOpen_TC_09_001_008_rr Related Requirement(s)
 * \#276408
 * @subsection MmngrOpen_TC_09_001_008_pp Prerequisite/Precondition
 * OSAL is initialized.
 * @subsection MmngrOpen_TC_09_001_008_tcs Test Case Summary
 * - Test09_001_008: "config.mode" is OSAL_MMNGR_ALLOC_MODE_UNSPECIFIED.
 * @subsection MmngrOpen_TC_09_001_008_tpts Test Procedure/Test Steps
 * -# Calling function R_OSAL_MmngrOpen with OSAL_MMNGR_ALLOC_MODE_UNSPECIFIED mode.
 * @subsection MmngrOpen_TC_09_001_008_ereb Expected Result/Behavior
 * -# The return value of R_OSAL_MmngrOpen is OSAL_RETURN_CONF_UNSUPPORTED.<br>
 * The return handle is OSAL_MEMORY_MANAGER_HANDLE_INVALID.
 * @subsection MmngrOpen_TC_09_001_008_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrOpen_TC_09_001_008
 */
// [MmngrOpen_TC_09_001_008]
TEST_F(MemoryApiTest, MmngrOpen_TC_09_001_008)
{
    // Test09_001_008
    // @brief: abnormal case: config.mode = OSAL_MMNGR_ALLOC_MODE_UNSPECIFIED
    EXPECT_EQ(R_OSAL_MmngrGetOsalMaxConfig(&config), OSAL_RETURN_OK);
    config.mode = OSAL_MMNGR_ALLOC_MODE_UNSPECIFIED;
    EXPECT_EQ(R_OSAL_MmngrOpen(&config, &hndl_mmngr), OSAL_RETURN_CONF_UNSUPPORTED) << "Test09_001_008 failed";
    EXPECT_EQ(hndl_mmngr, OSAL_MEMORY_MANAGER_HANDLE_INVALID) << "Test09_001_008 failed";
}
// [MmngrOpen_TC_09_001_008]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrOpen_TC_09_001_009 MemoryApiTest.MmngrOpen_TC_09_001_009
 * @subsection MmngrOpen_TC_09_001_009_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrOpen_TC_09_001_009_tci Test Case ID
 * MmngrOpen_S0_BA_TC_09_001_009
 * @subsection MmngrOpen_TC_09_001_009_rr Related Requirement(s)
 * \#276408
 * @subsection MmngrOpen_TC_09_001_009_pp Prerequisite/Precondition
 * OSAL is initialized.
 * @subsection MmngrOpen_TC_09_001_009_tcs Test Case Summary
 * - Test09_001_009: "config.mode" is OSAL_MMNGR_ALLOC_MODE_UNSPECIFIED_PROT.
 * @subsection MmngrOpen_TC_09_001_009_tpts Test Procedure/Test Steps
 * -# Calling function R_OSAL_MmngrOpen with OSAL_MMNGR_ALLOC_MODE_UNSPECIFIED_PROT mode.
 * @subsection MmngrOpen_TC_09_001_009_ereb Expected Result/Behavior
 * -# The return value of R_OSAL_MmngrOpen is OSAL_RETURN_CONF_UNSUPPORTED.<br>
 * The return handle is OSAL_MEMORY_MANAGER_HANDLE_INVALID.
 * @subsection MmngrOpen_TC_09_001_009_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrOpen_TC_09_001_009
 */
// [MmngrOpen_TC_09_001_009]
TEST_F(MemoryApiTest, MmngrOpen_TC_09_001_009)
{
    // Test09_001_009
    // @brief: abnormal case: config.mode = OSAL_MMNGR_ALLOC_MODE_UNSPECIFIED_PROT
    EXPECT_EQ(R_OSAL_MmngrGetOsalMaxConfig(&config), OSAL_RETURN_OK);
    config.mode = OSAL_MMNGR_ALLOC_MODE_UNSPECIFIED_PROT;
    EXPECT_EQ(R_OSAL_MmngrOpen(&config, &hndl_mmngr), OSAL_RETURN_CONF_UNSUPPORTED) << "Test09_001_009 failed";
    EXPECT_EQ(hndl_mmngr, OSAL_MEMORY_MANAGER_HANDLE_INVALID) << "Test09_001_009 failed";
}
// [MmngrOpen_TC_09_001_009]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrOpen_TC_09_001_010 MemoryApiTest.MmngrOpen_TC_09_001_010
 * @subsection MmngrOpen_TC_09_001_010_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrOpen_TC_09_001_010_tci Test Case ID
 * MmngrOpen_S0_BA_TC_09_001_010
 * @subsection MmngrOpen_TC_09_001_010_rr Related Requirement(s)
 * \#276408
 * @subsection MmngrOpen_TC_09_001_010_pp Prerequisite/Precondition
 * OSAL is initialized.
 * @subsection MmngrOpen_TC_09_001_010_tcs Test Case Summary
 * - Test09_001_010: "config.mode" is OSAL_MMNGR_ALLOC_MODE_INVALID.
 * @subsection MmngrOpen_TC_09_001_010_tpts Test Procedure/Test Steps
 * -# Calling function R_OSAL_MmngrOpen with OSAL_MMNGR_ALLOC_MODE_INVALID mode.
 * @subsection MmngrOpen_TC_09_001_010_ereb Expected Result/Behavior
 * -# The return value of R_OSAL_MmngrOpen is OSAL_RETURN_CONF.<br>
 * The return handle is OSAL_MEMORY_MANAGER_HANDLE_INVALID.
 * @subsection MmngrOpen_TC_09_001_010_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrOpen_TC_09_001_010
 */
// [MmngrOpen_TC_09_001_010]
TEST_F(MemoryApiTest, MmngrOpen_TC_09_001_010)
{
    // Test09_001_010
    // @brief: abnormal case: config.mode = OSAL_MMNGR_ALLOC_MODE_INVALID
    EXPECT_EQ(R_OSAL_MmngrGetOsalMaxConfig(&config), OSAL_RETURN_OK);
    config.mode = OSAL_MMNGR_ALLOC_MODE_INVALID;
    EXPECT_EQ(R_OSAL_MmngrOpen(&config, &hndl_mmngr), OSAL_RETURN_CONF) << "Test09_001_010 failed";
    EXPECT_EQ(hndl_mmngr, OSAL_MEMORY_MANAGER_HANDLE_INVALID) << "Test09_001_010 failed";
}
// [MmngrOpen_TC_09_001_010]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrOpen_TC_09_001_011 MemoryApiTest.MmngrOpen_TC_09_001_011
 * @subsection MmngrOpen_TC_09_001_011_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrOpen_TC_09_001_011_tci Test Case ID
 * MmngrOpen_S0_BA_TC_09_001_011
 * @subsection MmngrOpen_TC_09_001_011_rr Related Requirement(s)
 * \#276408
 * @subsection MmngrOpen_TC_09_001_011_pp Prerequisite/Precondition
 * OSAL is initialized.
 * @subsection MmngrOpen_TC_09_001_011_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrOpen with abnormal condition in OSAL_MMNGR_ALLOC_MODE_STACK mode.
 * - Test09_001_011: "config.max_allowed_allocations" is OSAL_MEMORY_MANAGER_CFG_UNLIMITED plus 1.
 * @subsection MmngrOpen_TC_09_001_011_tpts Test Procedure/Test Steps
 * -# Calling function R_OSAL_MmngrOpen with config.max_allowed_allocations is the maximum limitation value plus 1.
 * @subsection MmngrOpen_TC_09_001_011_ereb Expected Result/Behavior
 * -# The return value of R_OSAL_MmngrOpen is OSAL_RETURN_CONF.<br>
 * The return handle is OSAL_MEMORY_MANAGER_HANDLE_INVALID.
 * @subsection MmngrOpen_TC_09_001_011_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrOpen_TC_09_001_011
 */
// [MmngrOpen_TC_09_001_011]
TEST_F(MemoryApiTest, MmngrOpen_TC_09_001_011)
{
    // Test09_001_011
    // @brief: abnormal case: config.max_allowed_allocations = maximum value + 1;
    EXPECT_EQ(R_OSAL_MmngrGetOsalMaxConfig(&config), OSAL_RETURN_OK);
    config.mode = OSAL_MMNGR_ALLOC_MODE_STACK;
    config.max_allowed_allocations += 1;
    EXPECT_EQ(R_OSAL_MmngrOpen(&config, &hndl_mmngr), OSAL_RETURN_CONF) << "Test09_001_011 failed";
    EXPECT_EQ(hndl_mmngr, OSAL_MEMORY_MANAGER_HANDLE_INVALID) << "Test09_001_011 failed";
}
// [MmngrOpen_TC_09_001_011]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrOpen_TC_09_001_012 MemoryApiTest.MmngrOpen_TC_09_001_012
 * @subsection MmngrOpen_TC_09_001_012_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrOpen_TC_09_001_012_tci Test Case ID
 * MmngrOpen_S0_BA_TC_09_001_012
 * @subsection MmngrOpen_TC_09_001_012_rr Related Requirement(s)
 * \#276408
 * @subsection MmngrOpen_TC_09_001_012_pp Prerequisite/Precondition
 * OSAL is initialized.
 * @subsection MmngrOpen_TC_09_001_012_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrOpen with abnormal condition in OSAL_MMNGR_ALLOC_MODE_STACK mode.
 * - Test09_001_012: "config.max_allowed_allocations" is 0.
 * @subsection MmngrOpen_TC_09_001_012_tpts Test Procedure/Test Steps
 * -# Calling function R_OSAL_MmngrOpen with config.max_allowed_allocations is 0.
 * @subsection MmngrOpen_TC_09_001_012_ereb Expected Result/Behavior
 * -# The return value of R_OSAL_MmngrOpen is OSAL_RETURN_CONF.<br>
 * The return handle is OSAL_MEMORY_MANAGER_HANDLE_INVALID.
 * @subsection MmngrOpen_TC_09_001_012_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrOpen_TC_09_001_012
 */
// [MmngrOpen_TC_09_001_012]
TEST_F(MemoryApiTest, MmngrOpen_TC_09_001_012)
{
    // Test09_001_012
    // @brief: abnormal case: config.max_allowed_allocations = 0;
    EXPECT_EQ(R_OSAL_MmngrGetOsalMaxConfig(&config), OSAL_RETURN_OK);
    config.mode = OSAL_MMNGR_ALLOC_MODE_STACK;
    config.max_allowed_allocations = 0;
    EXPECT_EQ(R_OSAL_MmngrOpen(&config, &hndl_mmngr), OSAL_RETURN_CONF) << "Test09_001_012 failed";
    EXPECT_EQ(hndl_mmngr, OSAL_MEMORY_MANAGER_HANDLE_INVALID) << "Test09_001_012 failed";
}
// [MmngrOpen_TC_09_001_012]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrOpen_TC_09_001_013 MemoryApiTest.MmngrOpen_TC_09_001_013
 * @subsection MmngrOpen_TC_09_001_013_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrOpen_TC_09_001_013_tci Test Case ID
 * MmngrOpen_S0_BA_TC_09_001_013
 * @subsection MmngrOpen_TC_09_001_013_rr Related Requirement(s)
 * \#276408
 * @subsection MmngrOpen_TC_09_001_013_pp Prerequisite/Precondition
 * OSAL is initialized.
 * @subsection MmngrOpen_TC_09_001_013_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrOpen with abnormal condition in OSAL_MMNGR_ALLOC_MODE_STACK mode.
 * - Test09_001_013: "config.max_registered_monitors_cbs" is OSAL_MEMORY_MANAGER_CFG_UNLIMITED plus 1.
 * @subsection MmngrOpen_TC_09_001_013_tpts Test Procedure/Test Steps
 * -# Calling function R_OSAL_MmngrOpen with config.max_registered_monitors_cbs is the maximum limitation value plus 1.
 * @subsection MmngrOpen_TC_09_001_013_ereb Expected Result/Behavior
 * -# The return value of R_OSAL_MmngrOpen is OSAL_RETURN_CONF.<br>
 * The return handle is OSAL_MEMORY_MANAGER_HANDLE_INVALID.
 * @subsection MmngrOpen_TC_09_001_013_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrOpen_TC_09_001_013
 */
// [MmngrOpen_TC_09_001_013]
TEST_F(MemoryApiTest, MmngrOpen_TC_09_001_013)
{
    // Test09_001_013
    // @brief: abnormal case: config.max_registered_monitors_cbs = maximum value + 1;
    EXPECT_EQ(R_OSAL_MmngrGetOsalMaxConfig(&config), OSAL_RETURN_OK);
    config.max_registered_monitors_cbs += 1;
    config.mode = OSAL_MMNGR_ALLOC_MODE_STACK;
    EXPECT_EQ(R_OSAL_MmngrOpen(&config, &hndl_mmngr), OSAL_RETURN_CONF) << "Test09_001_013 failed";
    EXPECT_EQ(hndl_mmngr, OSAL_MEMORY_MANAGER_HANDLE_INVALID) << "Test09_001_013 failed";
}
// [MmngrOpen_TC_09_001_013]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrOpen_TC_09_001_014 MemoryApiTest.MmngrOpen_TC_09_001_014
 * @subsection MmngrOpen_TC_09_001_014_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrOpen_TC_09_001_014_tci Test Case ID
 * MmngrOpen_S0_BA_TC_09_001_014
 * @subsection MmngrOpen_TC_09_001_014_rr Related Requirement(s)
 * \#276408
 * @subsection MmngrOpen_TC_09_001_014_pp Prerequisite/Precondition
 * OSAL is initialized.
 * @subsection MmngrOpen_TC_09_001_014_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrOpen with abnormal condition in OSAL_MMNGR_ALLOC_MODE_STACK mode.
 * - Test09_001_014: "config.memory_limit" is 3KB.
 * @subsection MmngrOpen_TC_09_001_014_tpts Test Procedure/Test Steps
 * -# Calling function R_OSAL_MmngrOpen with config.memory_limit is 3KB.
 * @subsection MmngrOpen_TC_09_001_014_ereb Expected Result/Behavior
 * -# The return value of R_OSAL_MmngrOpen is OSAL_RETURN_CONF.<br>
 * The return handle is OSAL_MEMORY_MANAGER_HANDLE_INVALID.
 * @subsection MmngrOpen_TC_09_001_014_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrOpen_TC_09_001_014
 */
// [MmngrOpen_TC_09_001_014]
TEST_F(MemoryApiTest, MmngrOpen_TC_09_001_014)
{
    // Test09_001_014
    // @brief: abnormal case: config.memory_limit is 3KB;
    EXPECT_EQ(R_OSAL_MmngrGetOsalMaxConfig(&config), OSAL_RETURN_OK);
    config.mode = OSAL_MMNGR_ALLOC_MODE_STACK;
    config.memory_limit = 3*1024;
    EXPECT_EQ(R_OSAL_MmngrOpen(&config, &hndl_mmngr), OSAL_RETURN_CONF) << "Test09_001_014 failed";
    EXPECT_EQ(hndl_mmngr, OSAL_MEMORY_MANAGER_HANDLE_INVALID) << "Test09_001_014 failed";
}
// [MmngrOpen_TC_09_001_014]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrOpen_TC_09_001_015 MemoryApiTest.MmngrOpen_TC_09_001_015
 * @subsection MmngrOpen_TC_09_001_015_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrOpen_TC_09_001_015_tci Test Case ID
 * MmngrOpen_S0_A_TC_09_001_015
 * @subsection MmngrOpen_TC_09_001_015_rr Related Requirement(s)
 * \#276408
 * @subsection MmngrOpen_TC_09_001_015_pp Prerequisite/Precondition
 * OSAL is initialized.
 * @subsection MmngrOpen_TC_09_001_015_tcs Test Case Summary
 * - Test09_001_015: Open Memory manager with the "config" address is NULL
 * @subsection MmngrOpen_TC_09_001_015_tpts Test Procedure/Test Steps
 * -# Calling function R_OSAL_MmngrOpen with the argument as below:
 *      - NULL
 *      - Address of "hndl_mmngr"
 * @subsection MmngrOpen_TC_09_001_015_ereb Expected Result/Behavior
 * -# The return value of R_OSAL_MmngrOpen is OSAL_RETURN_PAR.<br>
 * The return handle is OSAL_MEMORY_MANAGER_HANDLE_INVALID.
 * @subsection MmngrOpen_TC_09_001_015_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrOpen_TC_09_001_015
 */
// [MmngrOpen_TC_09_001_015]
TEST_F(MemoryApiTest, MmngrOpen_TC_09_001_015)
{
    st_osal_mmngr_config_t* p_config = NULL;

    // Test09_001_015
    // @brief: abnormal case: config = NULL;
    EXPECT_EQ(R_OSAL_MmngrOpen(p_config, &hndl_mmngr), OSAL_RETURN_PAR) << "Test09_001_015 failed";
    EXPECT_EQ(hndl_mmngr, OSAL_MEMORY_MANAGER_HANDLE_INVALID) << "Test09_001_015 failed";
}
// [MmngrOpen_TC_09_001_015]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrOpen_TC_09_001_016 MemoryApiTest.MmngrOpen_TC_09_001_016
 * @subsection MmngrOpen_TC_09_001_016_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrOpen_TC_09_001_016_tci Test Case ID
 * MmngrOpen_S0_A_TC_09_001_016
 * @subsection MmngrOpen_TC_09_001_016_rr Related Requirement(s)
 * \#276408
 * @subsection MmngrOpen_TC_09_001_016_pp Prerequisite/Precondition
 * OSAL is initialized.
 * @subsection MmngrOpen_TC_09_001_016_tcs Test Case Summary
 * - Test09_001_016: "config.mode" is out of range.
 * @subsection MmngrOpen_TC_09_001_016_tpts Test Procedure/Test Steps
 * -# Calling function R_OSAL_MmngrOpen with config.mode is out-of-range (0xFF).
 * @subsection MmngrOpen_TC_09_001_016_ereb Expected Result/Behavior
 * -# The return value of R_OSAL_MmngrOpen is OSAL_RETURN_CONF.<br> 
 * The return handle is OSAL_MEMORY_MANAGER_HANDLE_INVALID.
 * @subsection MmngrOpen_TC_09_001_016_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrOpen_TC_09_001_016
 */
// [MmngrOpen_TC_09_001_016]
TEST_F(MemoryApiTest, MmngrOpen_TC_09_001_016)
{
    // Test09_001_016
    // @brief: abnormal case: config.mode is out-of-range.
    EXPECT_EQ(R_OSAL_MmngrGetOsalMaxConfig(&config), OSAL_RETURN_OK);
    config.mode = (e_osal_mmngr_allocator_mode_t)0xFF;
    EXPECT_EQ(R_OSAL_MmngrOpen(&config, &hndl_mmngr), OSAL_RETURN_CONF) << "Test09_001_016 failed";
    EXPECT_EQ(hndl_mmngr, OSAL_MEMORY_MANAGER_HANDLE_INVALID) << "Test09_001_016 failed";
}
// [MmngrOpen_TC_09_001_016]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrOpen_TC_09_001_017 MemoryApiTest.MmngrOpen_TC_09_001_017
 * @subsection MmngrOpen_TC_09_001_017_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrOpen_TC_09_001_017_tci Test Case ID
 * MmngrOpen_S2_A_TC_09_001_017
 * @subsection MmngrOpen_TC_09_001_017_rr Related Requirement(s)
 * \#276408
 * @subsection MmngrOpen_TC_09_001_017_pp Prerequisite/Precondition
 * OSAL is initialized.
 * @subsection MmngrOpen_TC_09_001_017_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrOpen with abnormal condition in OSAL_MMNGR_ALLOC_MODE_STACK mode.
 * - Test09_001_017: Open an opened Memory handle
 * @subsection MmngrOpen_TC_09_001_017_tpts Test Procedure/Test Steps
 * -# Calling function R_OSAL_MmngrOpen with max configuration.
 * -# Calling function R_OSAL_MmngrOpen again with the same configuration as above.
 * -# Calling R_OSAL_MmngrClose to close the opened Mmngr for the next test cases.
 * @subsection MmngrOpen_TC_09_001_017_ereb Expected Result/Behavior
 * -# The return value of the first R_OSAL_MmngrOpen is OSAL_RETURN_OK.<br>
 * The return handle is not OSAL_MEMORY_MANAGER_HANDLE_INVALID. <br>
 * -# The return value of the second R_OSAL_MmngrOpen is OSAL_RETURN_STATE.
 * -# The return value of R_OSAL_MmngrClose is OSAL_RETURN_OK.
 * @subsection MmngrOpen_TC_09_001_017_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrOpen_TC_09_001_017
 */
// [MmngrOpen_TC_09_001_017]
TEST_F(MemoryApiTest, MmngrOpen_TC_09_001_017)
{
    // Test09_001_017
    // @brief: abnormal case: state error
    EXPECT_EQ(R_OSAL_MmngrGetOsalMaxConfig(&config), OSAL_RETURN_OK);
    config.mode = OSAL_MMNGR_ALLOC_MODE_STACK;
    EXPECT_EQ(R_OSAL_MmngrOpen(&config, &hndl_mmngr), OSAL_RETURN_OK);
    EXPECT_NE(hndl_mmngr, OSAL_MEMORY_MANAGER_HANDLE_INVALID);
    EXPECT_EQ(R_OSAL_MmngrOpen(&config, &hndl_mmngr), OSAL_RETURN_STATE) << "Test09_001_017 failed";
    EXPECT_EQ(R_OSAL_MmngrClose(hndl_mmngr), OSAL_RETURN_OK);
    hndl_mmngr = OSAL_MEMORY_MANAGER_HANDLE_INVALID;
}
// [MmngrOpen_TC_09_001_017]

/**
 * @page MM_API Memory API Test
 * @section OsalApiStateTest_MmngrOpen_TC_09_001_018 OsalApiStateTest.MmngrOpen_TC_09_001_018
 * @subsection MmngrOpen_TC_09_001_018_tsi Test Suite ID
 * OsalApiStateTest
 * @subsection MmngrOpen_TC_09_001_018_tci Test Case ID
 * MmngrOpen_S2_A_TC_09_001_018
 * @subsection MmngrOpen_TC_09_001_018_rr Related Requirement(s)
 * \#276408, \#276409
 * @subsection MmngrOpen_TC_09_001_018_pp Prerequisite/Precondition
 * - R_OSAL_Deinitialize has already been called
 * @subsection MmngrOpen_TC_09_001_018_tcs Test Case Summary
 * This test shall verify the functionality of the Memory APIs in invalid state transition.
 * - Test09_001_018: Confirm state transition check for R_OSAL_MmngrOpen in OSAL_MMNGR_ALLOC_MODE_STACK mode
 * @subsection MmngrOpen_TC_09_001_018_tpts Test Procedure/Test Steps
 * -# Get the max memory config by using R_OSAL_MmngrGetOsalMaxConfig
 * -# Confirm state transition check for R_OSAL_MmngrOpen
 * @subsection MmngrOpen_TC_09_001_018_ereb Expected Result/Behavior
 * -# R_OSAL_MmngrGetOsalMaxConfig return OSAL_RETURN_OK
 * -# R_OSAL_MmngrOpen return OSAL_RETURN_STATE
 * @subsection MmngrOpen_TC_09_001_018_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrOpen_TC_09_001_018
 */
// [MmngrOpen_TC_09_001_018]
TEST_F(OsalApiStateTest, MmngrOpen_TC_09_001_018)
{
    st_osal_mmngr_config_t config;
    osal_memory_manager_handle_t hndl_mmngr = OSAL_MEMORY_MANAGER_HANDLE_INVALID;

    // Test09_001_018
    // @brief: abnormal case: Call R_OSAL_MmngrOpen after Deinitialize
    EXPECT_EQ(R_OSAL_MmngrGetOsalMaxConfig(&config), OSAL_RETURN_OK) << "Test09_001_018 failed";
    config.mode = OSAL_MMNGR_ALLOC_MODE_STACK;
    EXPECT_EQ(R_OSAL_MmngrOpen(&config, &hndl_mmngr), OSAL_RETURN_STATE) << "Test09_001_018 failed";
}
// [MmngrOpen_TC_09_001_018]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrOpen_TC_09_001_019 MemoryApiTest.MmngrOpen_TC_09_001_019
 * @subsection MmngrOpen_TC_09_001_019_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrOpen_TC_09_001_019_tci Test Case ID
 * MmngrOpen_S0_BA_TC_09_001_019
 * @subsection MmngrOpen_TC_09_001_019_rr Related Requirement(s)
 * \#276408
 * @subsection MmngrOpen_TC_09_001_019_pp Prerequisite/Precondition
 * OSAL is initialized.
 * @subsection MmngrOpen_TC_09_001_019_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrOpen with abnormal condition in OSAL_MMNGR_ALLOC_MODE_STACK mode.
 * - Test09_001_019: memory_limit in config is bigger than max memory limit.
 * @subsection MmngrOpen_TC_09_001_019_tpts Test Procedure/Test Steps
 * -# Calling function R_OSAL_MmngrGetOsalMaxConfig to get max config.
 *      - Addition memory_limit in the max config with 1KB (1*1024).
 * -# Calling function R_OSAL_MmngrOpen with above max config.
 * @subsection MmngrOpen_TC_09_001_019_ereb Expected Result/Behavior
 * -# The return value of R_OSAL_MmngrGetOsalMaxConfig is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrOpen is OSAL_RETURN_CONF.
 * @subsection MmngrOpen_TC_09_001_019_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrOpen_TC_09_001_019
 */
// [MmngrOpen_TC_09_001_019]
TEST_F(MemoryApiTest, MmngrOpen_TC_09_001_019)
{
    // Test09_001_019
    // @brief: abnormal case: memory_limit = Max memory_limit + 1KB
    EXPECT_EQ(R_OSAL_MmngrGetOsalMaxConfig(&config), OSAL_RETURN_OK);
    config.mode = OSAL_MMNGR_ALLOC_MODE_STACK;
    config.memory_limit += 1*1024;
    EXPECT_EQ(R_OSAL_MmngrOpen(&config, &hndl_mmngr), OSAL_RETURN_CONF) << "Test09_001_019 failed";
}
// [MmngrOpen_TC_09_001_019]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrOpen_TC_09_001_020 MemoryApiTest.MmngrOpen_TC_09_001_020
 * @subsection MmngrOpen_TC_09_001_020_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrOpen_TC_09_001_020_tci Test Case ID
 * MmngrOpen_S0_BA_TC_09_001_020
 * @subsection MmngrOpen_TC_09_001_020_rr Related Requirement(s)
 * \#276402, \#276408
 * @subsection MmngrOpen_TC_09_001_020_pp Prerequisite/Precondition
 * OSAL is initialized.
 * @subsection MmngrOpen_TC_09_001_020_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrOpen with abnormal condition in OSAL_MMNGR_ALLOC_MODE_STACK mode.
 * - Test09_001_020: Open Memory manager with the memory handle is NULL
 * @subsection MmngrOpen_TC_09_001_020_tpts Test Procedure/Test Steps
 * -# Calling function R_OSAL_MmngrOpen with the argument as below:
 *      - Address of the max configuration "config"
 *      - NULL
 * @subsection MmngrOpen_TC_09_001_020_ereb Expected Result/Behavior
 * -# The return value of R_OSAL_MmngrOpen is OSAL_RETURN_PAR.<br>
 * The return handle is OSAL_MEMORY_MANAGER_HANDLE_INVALID.
 * @subsection MmngrOpen_TC_09_001_020_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrOpen_TC_09_001_020
 */
// [MmngrOpen_TC_09_001_020]
TEST_F(MemoryApiTest, MmngrOpen_TC_09_001_020)
{
    osal_memory_manager_handle_t* p_handle = NULL;

    // Test09_001_020
    // @brief: abnormal case: handle = NULL
    EXPECT_EQ(R_OSAL_MmngrGetOsalMaxConfig(&config), OSAL_RETURN_OK) << "Test09_001_020 failed";
    config.mode = OSAL_MMNGR_ALLOC_MODE_STACK;
    EXPECT_EQ(R_OSAL_MmngrOpen(&config, p_handle), OSAL_RETURN_PAR) << "Test09_001_020 failed";
}
// [MmngrOpen_TC_09_001_020]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrOpen_TC_09_001_021 MemoryApiTest.MmngrOpen_TC_09_001_021
 * @subsection MmngrOpen_TC_09_001_021_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrOpen_TC_09_001_021_tci Test Case ID
 * MmngrOpen_S1_BN_TC_09_001_021
 * @subsection MmngrOpen_TC_09_001_021_rr Related Requirement(s)
 * \#276408, \#276732, \#276736, \#276742, \#276744
 * @subsection MmngrOpen_TC_09_001_021_pp Prerequisite/Precondition
 * OSAL is initialized.
 * @subsection MmngrOpen_TC_09_001_021_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrOpen with normal condition in OSAL_MMNGR_ALLOC_MODE_STACK mode.
 * - Test09_001_021: R_OSAL_MmngrOpen with allocation mode is STACK. Other config is obtained from R_OSAL_MmngrGetOsalMaxConfig
 * @subsection MmngrOpen_TC_09_001_021_tpts Test Procedure/Test Steps
 * -# Get the maximum memory configuration by using R_OSAL_MmngrGetOsalMaxConfig.
 * -# Calling function R_OSAL_MmngrOpen with the maximum config above
 * -# Calling R_OSAL_MmngrClose to close the opened Mmngr for the next test cases.
 * @subsection MmngrOpen_TC_09_001_021_ereb Expected Result/Behavior
 * -# The return value of R_OSAL_MmngrGetOsalMaxConfig is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrOpen is OSAL_RETURN_OK.<br>
 * The return handle is not OSAL_MEMORY_MANAGER_HANDLE_INVALID.
 * -# The return value of R_OSAL_MmngrClose is OSAL_RETURN_OK.
 * @subsection MmngrOpen_TC_09_001_021_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrOpen_TC_09_001_021
 */
// [MmngrOpen_TC_09_001_021]
TEST_F(MemoryApiTest, MmngrOpen_TC_09_001_021)
{
    // Test09_001_021
    // @brief: normal case: allocation mode is OSAL_MMNGR_ALLOC_MODE_STACK
    EXPECT_EQ(R_OSAL_MmngrGetOsalMaxConfig(&config), OSAL_RETURN_OK) << "Test09_001_021 failed";
    config.mode = OSAL_MMNGR_ALLOC_MODE_STACK;
    EXPECT_EQ(R_OSAL_MmngrOpen(&config, &hndl_mmngr), OSAL_RETURN_OK) << "Test09_001_021 failed";
    EXPECT_NE(hndl_mmngr, OSAL_MEMORY_MANAGER_HANDLE_INVALID) << "Test09_001_021 failed";
    EXPECT_EQ(R_OSAL_MmngrClose(hndl_mmngr), OSAL_RETURN_OK) << "Test09_001_021 failed";
    hndl_mmngr = OSAL_MEMORY_MANAGER_HANDLE_INVALID;
}
// [MmngrOpen_TC_09_001_021]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrOpen_TC_09_001_025 MemoryApiTest.MmngrOpen_TC_09_001_025
 * @subsection MmngrOpen_TC_09_001_025_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrOpen_TC_09_001_025_tci Test Case ID
 * MmngrOpen_S1_BN_TC_09_001_025
 * @subsection MmngrOpen_TC_09_001_025_rr Related Requirement(s)
 * \#276408, \#276732, \#276736, \#276742, \#276744
 * @subsection MmngrOpen_TC_09_001_025_pp Prerequisite/Precondition
 * OSAL is initialized.
 * @subsection MmngrOpen_TC_09_001_025_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrOpen with normal condition in OSAL_MMNGR_ALLOC_MODE_STACK_PROT mode.
 * - Test09_001_025: R_OSAL_MmngrOpen with allocation mode is STACK_PROT. Other config is obtained from R_OSAL_MmngrGetOsalMaxConfig
 * @subsection MmngrOpen_TC_09_001_025_tpts Test Procedure/Test Steps
 * -# Get the maximum memory configuration by using R_OSAL_MmngrGetOsalMaxConfig.
 * -# Calling function R_OSAL_MmngrOpen with the maximum config above
 * -# Calling R_OSAL_MmngrClose to close the opened Mmngr for the next test cases.
 * @subsection MmngrOpen_TC_09_001_025_ereb Expected Result/Behavior
 * -# The return of R_OSAL_MmngrGetOsalMaxConfig is OSAL_RETURN_OK.
 * -# The return of R_OSAL_MmngrOpen is OSAL_RETURN_OK.<br>
 * the return handle is not OSAL_MEMORY_MANAGER_HANDLE_INVALID.
 * -# The return value of R_OSAL_MmngrClose is OSAL_RETURN_OK.
 * @subsection MmngrOpen_TC_09_001_025_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrOpen_TC_09_001_025
 */
// [MmngrOpen_TC_09_001_025]
TEST_F(MemoryApiTest, MmngrOpen_TC_09_001_025)
{
    // Test09_001_025
    // @brief: normal case: allocation mode is OSAL_MMNGR_ALLOC_MODE_STACK_PROT
    EXPECT_EQ(R_OSAL_MmngrGetOsalMaxConfig(&config), OSAL_RETURN_OK) << "Test09_001_025 failed";
    config.mode = OSAL_MMNGR_ALLOC_MODE_STACK_PROT;
    EXPECT_EQ(R_OSAL_MmngrOpen(&config, &hndl_mmngr), OSAL_RETURN_OK) << "Test09_001_025 failed";
    EXPECT_NE(hndl_mmngr, OSAL_MEMORY_MANAGER_HANDLE_INVALID) << "Test09_001_025 failed";
    EXPECT_EQ(R_OSAL_MmngrClose(hndl_mmngr), OSAL_RETURN_OK) << "Test09_001_025 failed";
    hndl_mmngr = OSAL_MEMORY_MANAGER_HANDLE_INVALID;
}
// [MmngrOpen_TC_09_001_025]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrOpen_TC_09_001_026 MemoryApiTest.MmngrOpen_TC_09_001_026
 * @subsection MmngrOpen_TC_09_001_026_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrOpen_TC_09_001_026_tci Test Case ID
 * MmngrOpen_S0_BA_TC_09_001_026_
 * @subsection MmngrOpen_TC_09_001_026_rr Related Requirement(s)
 * \#276408
 * @subsection MmngrOpen_TC_09_001_026_pp Prerequisite/Precondition
 * OSAL is initialized.
 * @subsection MmngrOpen_TC_09_001_026_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrOpen with abnormal condition in OSAL_MMNGR_ALLOC_MODE_STACK_PROT mode.
 * - Test09_001_026: "config.max_allowed_allocations" is OSAL_MEMORY_MANAGER_CFG_UNLIMITED plus 1.
 * @subsection MmngrOpen_TC_09_001_026_tpts Test Procedure/Test Steps
 * -# Calling function R_OSAL_MmngrOpen with config.max_allowed_allocations is the maximum limitation value plus 1.
 * @subsection MmngrOpen_TC_09_001_026_ereb Expected Result/Behavior
 * -# The return value of R_OSAL_MmngrOpen is OSAL_RETURN_CONF.<br>
 * The return handle is OSAL_MEMORY_MANAGER_HANDLE_INVALID.
 * @subsection MmngrOpen_TC_09_001_026_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrOpen_TC_09_001_026
 */
// [MmngrOpen_TC_09_001_026]
TEST_F(MemoryApiTest, MmngrOpen_TC_09_001_026)
{
    // Test09_001_026
    // @brief: abnormal case: config.max_allowed_allocations = maximum value + 1;
    EXPECT_EQ(R_OSAL_MmngrGetOsalMaxConfig(&config), OSAL_RETURN_OK);
    config.mode = OSAL_MMNGR_ALLOC_MODE_STACK_PROT;
    config.max_allowed_allocations += 1;
    EXPECT_EQ(R_OSAL_MmngrOpen(&config, &hndl_mmngr), OSAL_RETURN_CONF) << "Test09_001_026 failed";
    EXPECT_EQ(hndl_mmngr, OSAL_MEMORY_MANAGER_HANDLE_INVALID) << "Test09_001_026 failed";
}
// [MmngrOpen_TC_09_001_026]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrOpen_TC_09_001_027 MemoryApiTest.MmngrOpen_TC_09_001_027
 * @subsection MmngrOpen_TC_09_001_027_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrOpen_TC_09_001_027_tci Test Case ID
 * MmngrOpen_S0_BA_TC_09_001_027
 * @subsection MmngrOpen_TC_09_001_027_rr Related Requirement(s)
 * \#276408
 * @subsection MmngrOpen_TC_09_001_027_pp Prerequisite/Precondition
 * OSAL is initialized.
 * @subsection MmngrOpen_TC_09_001_027_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrOpen with abnormal condition in OSAL_MMNGR_ALLOC_MODE_STACK_PROT mode.
 * - Test09_001_027: "config.max_allowed_allocations" is 0.
 * @subsection MmngrOpen_TC_09_001_027_tpts Test Procedure/Test Steps
 * -# Calling function R_OSAL_MmngrOpen with config.max_allowed_allocations is 0.
 * @subsection MmngrOpen_TC_09_001_027_ereb Expected Result/Behavior
 * -# The return value of R_OSAL_MmngrOpen is OSAL_RETURN_CONF.<br>
 * The return handle is OSAL_MEMORY_MANAGER_HANDLE_INVALID.
 * @subsection MmngrOpen_TC_09_001_027_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrOpen_TC_09_001_027
 */
// [MmngrOpen_TC_09_001_027]
TEST_F(MemoryApiTest, MmngrOpen_TC_09_001_027)
{
    // Test09_001_027
    // @brief: abnormal case: config.max_allowed_allocations = 0;
    EXPECT_EQ(R_OSAL_MmngrGetOsalMaxConfig(&config), OSAL_RETURN_OK);
    config.mode = OSAL_MMNGR_ALLOC_MODE_STACK_PROT;
    config.max_allowed_allocations = 0;
    EXPECT_EQ(R_OSAL_MmngrOpen(&config, &hndl_mmngr), OSAL_RETURN_CONF) << "Test09_001_027 failed";
    EXPECT_EQ(hndl_mmngr, OSAL_MEMORY_MANAGER_HANDLE_INVALID) << "Test09_001_027 failed";
}
// [MmngrOpen_TC_09_001_027]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrOpen_TC_09_001_028 MemoryApiTest.MmngrOpen_TC_09_001_028
 * @subsection MmngrOpen_TC_09_001_028_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrOpen_TC_09_001_028_tci Test Case ID
 * MmngrOpen_S0_BA_TC_09_001_028
 * @subsection MmngrOpen_TC_09_001_028_rr Related Requirement(s)
 * \#276408
 * @subsection MmngrOpen_TC_09_001_028_pp Prerequisite/Precondition
 * OSAL is initialized.
 * @subsection MmngrOpen_TC_09_001_028_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrOpen with abnormal condition in OSAL_MMNGR_ALLOC_MODE_STACK_PROT mode.
 * - Test09_001_028: "config.max_registered_monitors_cbs" is OSAL_MEMORY_MANAGER_CFG_UNLIMITED plus 1.
 * @subsection MmngrOpen_TC_09_001_028_tpts Test Procedure/Test Steps
 * -# Calling function R_OSAL_MmngrOpen with config.max_registered_monitors_cbs is the maximum limitation value plus 1.
 * @subsection MmngrOpen_TC_09_001_028_ereb Expected Result/Behavior
 * -# The return value of R_OSAL_MmngrOpen is OSAL_RETURN_CONF.<br>
 * The return handle is OSAL_MEMORY_MANAGER_HANDLE_INVALID.
 * @subsection MmngrOpen_TC_09_001_028_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrOpen_TC_09_001_028
 */
// [MmngrOpen_TC_09_001_028]
TEST_F(MemoryApiTest, MmngrOpen_TC_09_001_028)
{
    // Test09_001_028
    // @brief: abnormal case: config.max_registered_monitors_cbs = maximum value + 1;
    EXPECT_EQ(R_OSAL_MmngrGetOsalMaxConfig(&config), OSAL_RETURN_OK);
    config.mode = OSAL_MMNGR_ALLOC_MODE_STACK_PROT;
    config.max_registered_monitors_cbs += 1;
    EXPECT_EQ(R_OSAL_MmngrOpen(&config, &hndl_mmngr), OSAL_RETURN_CONF) << "Test09_001_028 failed";
    EXPECT_EQ(hndl_mmngr, OSAL_MEMORY_MANAGER_HANDLE_INVALID) << "Test09_001_028 failed";
}
// [MmngrOpen_TC_09_001_028]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrOpen_TC_09_001_029 MemoryApiTest.MmngrOpen_TC_09_001_029
 * @subsection MmngrOpen_TC_09_001_029_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrOpen_TC_09_001_029_tci Test Case ID
 * MmngrOpen_S0_BA_TC_09_001_029
 * @subsection MmngrOpen_TC_09_001_029_rr Related Requirement(s)
 * \#276408
 * @subsection MmngrOpen_TC_09_001_029_pp Prerequisite/Precondition
 * OSAL is initialized.
 * @subsection MmngrOpen_TC_09_001_029_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrOpen with abnormal condition in OSAL_MMNGR_ALLOC_MODE_STACK_PROT mode.
 * - Test09_001_029: "config.memory_limit" is 3KB.
 * @subsection MmngrOpen_TC_09_001_029_tpts Test Procedure/Test Steps
 * -# Calling function R_OSAL_MmngrOpen with config.memory_limit is 3KB.
 * @subsection MmngrOpen_TC_09_001_029_ereb Expected Result/Behavior
 * -# The return value of R_OSAL_MmngrOpen is OSAL_RETURN_CONF.<br>
 * The return handle is OSAL_MEMORY_MANAGER_HANDLE_INVALID.
 * @subsection MmngrOpen_TC_09_001_029_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrOpen_TC_09_001_029
 */
// [MmngrOpen_TC_09_001_029]
TEST_F(MemoryApiTest, MmngrOpen_TC_09_001_029)
{
    // Test09_001_029
    // @brief: abnormal case: config.memory_limit is 3KB;
    EXPECT_EQ(R_OSAL_MmngrGetOsalMaxConfig(&config), OSAL_RETURN_OK);
    config.mode = OSAL_MMNGR_ALLOC_MODE_STACK_PROT;
    config.memory_limit = 3*1024;
    EXPECT_EQ(R_OSAL_MmngrOpen(&config, &hndl_mmngr), OSAL_RETURN_CONF) << "Test09_001_029 failed";
    EXPECT_EQ(hndl_mmngr, OSAL_MEMORY_MANAGER_HANDLE_INVALID) << "Test09_001_029 failed";
}
// [MmngrOpen_TC_09_001_029]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrOpen_TC_09_001_030 MemoryApiTest.MmngrOpen_TC_09_001_030
 * @subsection MmngrOpen_TC_09_001_030_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrOpen_TC_09_001_030_tci Test Case ID
 * MmngrOpen_S1_A_TC_09_001_030
 * @subsection MmngrOpen_TC_09_001_030_rr Related Requirement(s)
 * \#276408
 * @subsection MmngrOpen_TC_09_001_030_pp Prerequisite/Precondition
 * OSAL is initialized.
 * @subsection MmngrOpen_TC_09_001_030_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrOpen with abnormal condition in OSAL_MMNGR_ALLOC_MODE_STACK_PROT mode.
 * - Test09_001_030: Open an opened Memory handle
 * @subsection MmngrOpen_TC_09_001_030_tpts Test Procedure/Test Steps
 * -# Get the Memory max configuration by using R_OSAL_MmngrGetOsalMaxConfig
 * -# Calling function R_OSAL_MmngrOpen with valid parameter.
 * -# Calling function R_OSAL_MmngrOpen again with the same configuration as previous step.
 * -# Calling R_OSAL_MmngrClose to close the opened Mmngr for the next test cases.
 * @subsection MmngrOpen_TC_09_001_030_ereb Expected Result/Behavior
 * -# R_OSAL_MmngrGetOsalMaxConfig return OSAL_RETURN_OK
 * -# The return value of the first R_OSAL_MmngrOpen is OSAL_RETURN_OK.<br>
 * The return handle is not OSAL_MEMORY_MANAGER_HANDLE_INVALID. <br>
 * -# The return value of the second R_OSAL_MmngrOpen is OSAL_RETURN_STATE.
 * -# The return value of R_OSAL_MmngrClose is OSAL_RETURN_OK.
 * @subsection MmngrOpen_TC_09_001_030_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrOpen_TC_09_001_030
 */
// [MmngrOpen_TC_09_001_030]
TEST_F(MemoryApiTest, MmngrOpen_TC_09_001_030)
{
    // Test09_001_030
    // @brief: abnormal case: state error
    EXPECT_EQ(R_OSAL_MmngrGetOsalMaxConfig(&config), OSAL_RETURN_OK);
    config.mode = OSAL_MMNGR_ALLOC_MODE_STACK_PROT;
    EXPECT_EQ(R_OSAL_MmngrOpen(&config, &hndl_mmngr), OSAL_RETURN_OK);
    EXPECT_NE(hndl_mmngr, OSAL_MEMORY_MANAGER_HANDLE_INVALID);
    EXPECT_EQ(R_OSAL_MmngrOpen(&config, &hndl_mmngr), OSAL_RETURN_STATE) << "Test09_001_030 failed";
    EXPECT_EQ(R_OSAL_MmngrClose(hndl_mmngr), OSAL_RETURN_OK);
    hndl_mmngr = OSAL_MEMORY_MANAGER_HANDLE_INVALID;
}
// [MmngrOpen_TC_09_001_030]

/**
 * @page MM_API Memory API Test
 * @section OsalApiStateTest_MmngrOpen_TC_09_001_031 OsalApiStateTest.MmngrOpen_TC_09_001_031
 * @subsection MmngrOpen_TC_09_001_031_tsi Test Suite ID
 * OsalApiStateTest
 * @subsection MmngrOpen_TC_09_001_031_tci Test Case ID
 * MmngrOpen_S2_A_TC_09_001_031
 * @subsection MmngrOpen_TC_09_001_031_rr Related Requirement(s)
 * \#276408
 * @subsection MmngrOpen_TC_09_001_031_pp Prerequisite/Precondition
 * - R_OSAL_Deinitialize has already been called
 * @subsection MmngrOpen_TC_09_001_031_tcs Test Case Summary
 * This test shall verify the functionality of the Memory APIs in invalid state transition.
 * - Test09_001_031: Confirm state transition check for R_OSAL_MmngrOpen in OSAL_MMNGR_ALLOC_MODE_STACK_PROT mode
 * @subsection MmngrOpen_TC_09_001_031_tpts Test Procedure/Test Steps
 * -# Get the max memory config by using R_OSAL_MmngrGetOsalMaxConfig
 * -# Confirm state transition check for R_OSAL_MmngrOpen
 * @subsection MmngrOpen_TC_09_001_031_ereb Expected Result/Behavior
 * -# R_OSAL_MmngrGetOsalMaxConfig return OSAL_RETURN_OK
 * -# R_OSAL_MmngrOpen return OSAL_RETURN_STATE
 * @subsection MmngrOpen_TC_09_001_031_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrOpen_TC_09_001_031
 */
// [MmngrOpen_TC_09_001_031]
TEST_F(OsalApiStateTest, MmngrOpen_TC_09_001_031)
{
    st_osal_mmngr_config_t config;
    osal_memory_manager_handle_t hndl_mmngr = OSAL_MEMORY_MANAGER_HANDLE_INVALID;

    // Test09_001_031
    // @brief: abnormal case: Call R_OSAL_MmngrOpen after Deinitialize
    EXPECT_EQ(R_OSAL_MmngrGetOsalMaxConfig(&config), OSAL_RETURN_OK) << "Test09_001_031 failed";
    config.mode = OSAL_MMNGR_ALLOC_MODE_STACK_PROT;
    EXPECT_EQ(R_OSAL_MmngrOpen(&config, &hndl_mmngr), OSAL_RETURN_STATE) << "Test09_001_031 failed";
}
// [MmngrOpen_TC_09_001_031]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrOpen_TC_09_001_032 MemoryApiTest.MmngrOpen_TC_09_001_032
 * @subsection MmngrOpen_TC_09_001_032_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrOpen_TC_09_001_032_tci Test Case ID
 * MmngrOpen_S0_BA_TC_09_001_032
 * @subsection MmngrOpen_TC_09_001_032_rr Related Requirement(s)
 * \#276408
 * @subsection MmngrOpen_TC_09_001_032_pp Prerequisite/Precondition
 * OSAL is initialized.
 * @subsection MmngrOpen_TC_09_001_032_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrOpen with abnormal condition in OSAL_MMNGR_ALLOC_MODE_STACK_PROT mode.
 * - Test09_001_032: memory_limit in config is bigger than max memory limit.
 * @subsection MmngrOpen_TC_09_001_032_tpts Test Procedure/Test Steps
 * -# Calling function R_OSAL_MmngrGetOsalMaxConfig to get max config.
 *      - Addition memory_limit in the max config with 1KB (1*1024).
 * -# Calling function R_OSAL_MmngrOpen with above max config.
 * @subsection MmngrOpen_TC_09_001_032_ereb Expected Result/Behavior
 * -# The return value of R_OSAL_MmngrGetOsalMaxConfig is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrOpen is OSAL_RETURN_CONF.
 * @subsection MmngrOpen_TC_09_001_032_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrOpen_TC_09_001_032
 */
// [MmngrOpen_TC_09_001_032]
TEST_F(MemoryApiTest, MmngrOpen_TC_09_001_032)
{
    // Test09_001_032
    // @brief: abnormal case: memory_limit = Max memory_limit + 1KB
    EXPECT_EQ(R_OSAL_MmngrGetOsalMaxConfig(&config), OSAL_RETURN_OK);
    config.mode = OSAL_MMNGR_ALLOC_MODE_STACK_PROT;
    config.memory_limit += 1*1024;
    EXPECT_EQ(R_OSAL_MmngrOpen(&config, &hndl_mmngr), OSAL_RETURN_CONF) << "Test09_001_032 failed";
}
// [MmngrOpen_TC_09_001_032]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrOpen_TC_09_001_036 MemoryApiTest.MmngrOpen_TC_09_001_036
 * @subsection MmngrOpen_TC_09_001_036_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrOpen_TC_09_001_036_tci Test Case ID
 * MmngrOpen_S1_BA_TC_09_001_036
 * @subsection MmngrOpen_TC_09_001_036_rr Related Requirement(s)
 * \#276408, \#276732, \#276736, \#276742, \#276744
 * @subsection MmngrOpen_TC_09_001_036_pp Prerequisite/Precondition
 * OSAL is initialized.
 * @subsection MmngrOpen_TC_09_001_036_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrOpen with normal condition in OSAL_MMNGR_ALLOC_MODE_FREE_LIST mode.
 * - Test09_001_036: R_OSAL_MmngrOpen with allocation mode is FREE_LIST. Other config is obtained from R_OSAL_MmngrGetOsalMaxConfig
 * @subsection MmngrOpen_TC_09_001_036_tpts Test Procedure/Test Steps
 * -# Get the maximum memory configuration by using R_OSAL_MmngrGetOsalMaxConfig.
 * -# Calling function R_OSAL_MmngrOpen with the maximum config above
 * -# Calling R_OSAL_MmngrClose to close the opened Mmngr for the next test cases.
 * @subsection MmngrOpen_TC_09_001_036_ereb Expected Result/Behavior
 * -# The return value of R_OSAL_MmngrGetOsalMaxConfig is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrOpen is OSAL_RETURN_OK.<br>
 * The return handle is not OSAL_MEMORY_MANAGER_HANDLE_INVALID.
 * -# The return value of R_OSAL_MmngrClose is OSAL_RETURN_OK.
 * @subsection MmngrOpen_TC_09_001_036_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrOpen_TC_09_001_036
 */
// [MmngrOpen_TC_09_001_036]
TEST_F(MemoryApiTest, MmngrOpen_TC_09_001_036)
{
    // Test09_001_036
    // @brief: normal case: allocation mode is OSAL_MMNGR_ALLOC_MODE_FREE_LIST
    EXPECT_EQ(R_OSAL_MmngrGetOsalMaxConfig(&config), OSAL_RETURN_OK) << "Test09_001_036 failed";
    config.mode = OSAL_MMNGR_ALLOC_MODE_FREE_LIST;
    EXPECT_EQ(R_OSAL_MmngrOpen(&config, &hndl_mmngr), OSAL_RETURN_OK) << "Test09_001_036 failed";
    EXPECT_NE(hndl_mmngr, OSAL_MEMORY_MANAGER_HANDLE_INVALID) << "Test09_001_036 failed";
    EXPECT_EQ(R_OSAL_MmngrClose(hndl_mmngr), OSAL_RETURN_OK) << "Test09_001_036 failed";
    hndl_mmngr = OSAL_MEMORY_MANAGER_HANDLE_INVALID;
}
// [MmngrOpen_TC_09_001_036]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrOpen_TC_09_001_037 MemoryApiTest.MmngrOpen_TC_09_001_037
 * @subsection MmngrOpen_TC_09_001_037_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrOpen_TC_09_001_037_tci Test Case ID
 * MmngrOpen_S0_BA_TC_09_001_037
 * @subsection MmngrOpen_TC_09_001_037_rr Related Requirement(s)
 * \#276408
 * @subsection MmngrOpen_TC_09_001_037_pp Prerequisite/Precondition
 * OSAL is initialized.
 * @subsection MmngrOpen_TC_09_001_037_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrOpen with abnormal condition in OSAL_MMNGR_ALLOC_MODE_FREE_LIST mode.
 * - Test09_001_037: "config.max_allowed_allocations" is OSAL_MEMORY_MANAGER_CFG_UNLIMITED plus 1.
 * @subsection MmngrOpen_TC_09_001_037_tpts Test Procedure/Test Steps
 * -# Calling function R_OSAL_MmngrOpen with config.max_allowed_allocations is the maximum limitation value plus 1.
 * @subsection MmngrOpen_TC_09_001_037_ereb Expected Result/Behavior
 * -# The return value of R_OSAL_MmngrOpen is OSAL_RETURN_CONF.<br>
 * The return handle is OSAL_MEMORY_MANAGER_HANDLE_INVALID.
 * @subsection MmngrOpen_TC_09_001_037_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrOpen_TC_09_001_037
 */
// [MmngrOpen_TC_09_001_037]
TEST_F(MemoryApiTest, MmngrOpen_TC_09_001_037)
{
    // Test09_001_037
    // @brief: abnormal case: config.max_allowed_allocations = maximum value + 1;
    EXPECT_EQ(R_OSAL_MmngrGetOsalMaxConfig(&config), OSAL_RETURN_OK);
    config.mode = OSAL_MMNGR_ALLOC_MODE_FREE_LIST;
    config.max_allowed_allocations += 1;
    EXPECT_EQ(R_OSAL_MmngrOpen(&config, &hndl_mmngr), OSAL_RETURN_CONF) << "Test09_001_037 failed";
    EXPECT_EQ(hndl_mmngr, OSAL_MEMORY_MANAGER_HANDLE_INVALID) << "Test09_001_037 failed";
}
// [MmngrOpen_TC_09_001_037]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrOpen_TC_09_001_038 MemoryApiTest.MmngrOpen_TC_09_001_038
 * @subsection MmngrOpen_TC_09_001_038_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrOpen_TC_09_001_038_tci Test Case ID
 * MmngrOpen_S0_BA_TC_09_001_038
 * @subsection MmngrOpen_TC_09_001_038_rr Related Requirement(s)
 * \#276408
 * @subsection MmngrOpen_TC_09_001_038_pp Prerequisite/Precondition
 * OSAL is initialized.
 * @subsection MmngrOpen_TC_09_001_038_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrOpen with abnormal condition in OSAL_MMNGR_ALLOC_MODE_FREE_LIST mode.
 * - Test09_001_038: "config.max_allowed_allocations" is 0.
 * @subsection MmngrOpen_TC_09_001_038_tpts Test Procedure/Test Steps
 * -# Calling function R_OSAL_MmngrOpen with config.max_allowed_allocations is 0.
 * @subsection MmngrOpen_TC_09_001_038_ereb Expected Result/Behavior
 * -# The return value of R_OSAL_MmngrOpen is OSAL_RETURN_CONF.<br>
 * The return handle is OSAL_MEMORY_MANAGER_HANDLE_INVALID.
 * @subsection MmngrOpen_TC_09_001_038_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrOpen_TC_09_001_038
 */
// [MmngrOpen_TC_09_001_038]
TEST_F(MemoryApiTest, MmngrOpen_TC_09_001_038)
{
    // Test09_001_038
    // @brief: abnormal case: config.max_allowed_allocations = 0;
    EXPECT_EQ(R_OSAL_MmngrGetOsalMaxConfig(&config), OSAL_RETURN_OK);
    config.mode = OSAL_MMNGR_ALLOC_MODE_FREE_LIST;
    config.max_allowed_allocations = 0;
    EXPECT_EQ(R_OSAL_MmngrOpen(&config, &hndl_mmngr), OSAL_RETURN_CONF) << "Test09_001_038 failed";
    EXPECT_EQ(hndl_mmngr, OSAL_MEMORY_MANAGER_HANDLE_INVALID) << "Test09_001_038 failed";
}
// [MmngrOpen_TC_09_001_038]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrOpen_TC_09_001_039 MemoryApiTest.MmngrOpen_TC_09_001_039
 * @subsection MmngrOpen_TC_09_001_039_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrOpen_TC_09_001_039_tci Test Case ID
 * MmngrOpen_S0_BA_TC_09_001_039
 * @subsection MmngrOpen_TC_09_001_039_rr Related Requirement(s)
 * \#276408
 * @subsection MmngrOpen_TC_09_001_039_pp Prerequisite/Precondition
 * OSAL is initialized.
 * @subsection MmngrOpen_TC_09_001_039_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrOpen with abnormal condition in OSAL_MMNGR_ALLOC_MODE_FREE_LIST mode.
 * - Test09_001_039: "config.max_registered_monitors_cbs" is OSAL_MEMORY_MANAGER_CFG_UNLIMITED plus 1.
 * @subsection MmngrOpen_TC_09_001_039_tpts Test Procedure/Test Steps
 * -# Calling function R_OSAL_MmngrOpen with config.max_registered_monitors_cbs is the maximum limitation value plus 1.
 * @subsection MmngrOpen_TC_09_001_039_ereb Expected Result/Behavior
 * -# The return value of R_OSAL_MmngrOpen is OSAL_RETURN_CONF.<br>
 * The return handle is OSAL_MEMORY_MANAGER_HANDLE_INVALID.
 * @subsection MmngrOpen_TC_09_001_039_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrOpen_TC_09_001_039
 */
// [MmngrOpen_TC_09_001_039]
TEST_F(MemoryApiTest, MmngrOpen_TC_09_001_039)
{
    // Test09_001_039
    // @brief: abnormal case: config.max_registered_monitors_cbs = maximum value + 1;
    EXPECT_EQ(R_OSAL_MmngrGetOsalMaxConfig(&config), OSAL_RETURN_OK);
    config.mode = OSAL_MMNGR_ALLOC_MODE_FREE_LIST;
    config.max_registered_monitors_cbs += 1;
    EXPECT_EQ(R_OSAL_MmngrOpen(&config, &hndl_mmngr), OSAL_RETURN_CONF) << "Test09_001_039 failed";
    EXPECT_EQ(hndl_mmngr, OSAL_MEMORY_MANAGER_HANDLE_INVALID) << "Test09_001_039 failed";
}
// [MmngrOpen_TC_09_001_039]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrOpen_TC_09_001_040 MemoryApiTest.MmngrOpen_TC_09_001_040
 * @subsection MmngrOpen_TC_09_001_040_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrOpen_TC_09_001_040_tci Test Case ID
 * MmngrOpen_S0_BA_TC_09_001_040
 * @subsection MmngrOpen_TC_09_001_040_rr Related Requirement(s)
 * \#276408
 * @subsection MmngrOpen_TC_09_001_040_pp Prerequisite/Precondition
 * OSAL is initialized.
 * @subsection MmngrOpen_TC_09_001_040_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrOpen with abnormal condition in OSAL_MMNGR_ALLOC_MODE_FREE_LIST mode.
 * - Test09_001_040: "config.memory_limit" is 3KB.
 * @subsection MmngrOpen_TC_09_001_040_tpts Test Procedure/Test Steps
 * -# Calling function R_OSAL_MmngrOpen with config.memory_limit is 3KB.
 * @subsection MmngrOpen_TC_09_001_040_ereb Expected Result/Behavior
 * -# The return value of R_OSAL_MmngrOpen is OSAL_RETURN_CONF.<br>
 * The return handle is OSAL_MEMORY_MANAGER_HANDLE_INVALID.
 * @subsection MmngrOpen_TC_09_001_040_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrOpen_TC_09_001_040
 */
// [MmngrOpen_TC_09_001_040]
TEST_F(MemoryApiTest, MmngrOpen_TC_09_001_040)
{
    // Test09_001_040
    // @brief: abnormal case: config.memory_limit is 3KB;
    EXPECT_EQ(R_OSAL_MmngrGetOsalMaxConfig(&config), OSAL_RETURN_OK);
    config.mode = OSAL_MMNGR_ALLOC_MODE_FREE_LIST;
    config.memory_limit = 3*1024;
    EXPECT_EQ(R_OSAL_MmngrOpen(&config, &hndl_mmngr), OSAL_RETURN_CONF) << "Test09_001_040 failed";
    EXPECT_EQ(hndl_mmngr, OSAL_MEMORY_MANAGER_HANDLE_INVALID) << "Test09_001_040 failed";
}
// [MmngrOpen_TC_09_001_040]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrOpen_TC_09_001_041 MemoryApiTest.MmngrOpen_TC_09_001_041
 * @subsection MmngrOpen_TC_09_001_041_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrOpen_TC_09_001_041_tci Test Case ID
 * MmngrOpen_S1_A_TC_09_001_041
 * @subsection MmngrOpen_TC_09_001_041_rr Related Requirement(s)
 * \#276408
 * @subsection MmngrOpen_TC_09_001_041_pp Prerequisite/Precondition
 * OSAL is initialized.
 * @subsection MmngrOpen_TC_09_001_041_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrOpen with abnormal condition in OSAL_MMNGR_ALLOC_MODE_FREE_LIST mode.
 * - Test09_001_041: Open an opened Memory handle
 * @subsection MmngrOpen_TC_09_001_041_tpts Test Procedure/Test Steps
 * -# Get the Memory max configuration by using R_OSAL_MmngrGetOsalMaxConfig
 * -# Calling function R_OSAL_MmngrOpen with valid parameter.
 * -# Calling function R_OSAL_MmngrOpen again with the same configuration as above.
 * -# Calling R_OSAL_MmngrClose to close the opened Mmngr for the next test cases.
 * @subsection MmngrOpen_TC_09_001_041_ereb Expected Result/Behavior
 * -# R_OSAL_MmngrGetOsalMaxConfig return OSAL_RETURN_OK
 * -# The return value of the first R_OSAL_MmngrOpen is OSAL_RETURN_OK.<br>
 * The return handle is not OSAL_MEMORY_MANAGER_HANDLE_INVALID. <br>
 * -# The return value of the second R_OSAL_MmngrOpen is OSAL_RETURN_STATE.
 * -# The return value of R_OSAL_MmngrClose is OSAL_RETURN_OK.
 * @subsection MmngrOpen_TC_09_001_041_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrOpen_TC_09_001_041
 */
// [MmngrOpen_TC_09_001_041]
TEST_F(MemoryApiTest, MmngrOpen_TC_09_001_041)
{
    // Test09_001_041
    // @brief: abnormal case: state error
    EXPECT_EQ(R_OSAL_MmngrGetOsalMaxConfig(&config), OSAL_RETURN_OK);
    config.mode = OSAL_MMNGR_ALLOC_MODE_FREE_LIST;
    EXPECT_EQ(R_OSAL_MmngrOpen(&config, &hndl_mmngr), OSAL_RETURN_OK);
    EXPECT_NE(hndl_mmngr, OSAL_MEMORY_MANAGER_HANDLE_INVALID);
    EXPECT_EQ(R_OSAL_MmngrOpen(&config, &hndl_mmngr), OSAL_RETURN_STATE) << "Test09_001_041 failed";
    EXPECT_EQ(R_OSAL_MmngrClose(hndl_mmngr), OSAL_RETURN_OK);
    hndl_mmngr = OSAL_MEMORY_MANAGER_HANDLE_INVALID;
}
// [MmngrOpen_TC_09_001_041]

/**
 * @page MM_API Memory API Test
 * @section OsalApiStateTest_MmngrOpen_TC_09_001_042 OsalApiStateTest.MmngrOpen_TC_09_001_042
 * @subsection MmngrOpen_TC_09_001_042_tsi Test Suite ID
 * OsalApiStateTest
 * @subsection MmngrOpen_TC_09_001_042_tci Test Case ID
 * MmngrOpen_S2_A_TC_09_001_042
 * @subsection MmngrOpen_TC_09_001_042_rr Related Requirement(s)
 * \#276408
 * @subsection MmngrOpen_TC_09_001_042_pp Prerequisite/Precondition
 * - R_OSAL_Deinitialize has already been called
 * @subsection MmngrOpen_TC_09_001_042_tcs Test Case Summary
 * This test shall verify the functionality of the Memory APIs in invalid state transition.
 * - Test09_001_042: Confirm state transition check for R_OSAL_MmngrOpen in OSAL_MMNGR_ALLOC_MODE_FREE_LIST mode
 * @subsection MmngrOpen_TC_09_001_042_tpts Test Procedure/Test Steps
 * -# Get the max memory config by using R_OSAL_MmngrGetOsalMaxConfig
 * -# Confirm state transition check for R_OSAL_MmngrOpen
 * @subsection MmngrOpen_TC_09_001_042_ereb Expected Result/Behavior
 * -# R_OSAL_MmngrGetOsalMaxConfig return OSAL_RETURN_OK
 * -# R_OSAL_MmngrOpen return OSAL_RETURN_STATE
 * @subsection MmngrOpen_TC_09_001_042_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrOpen_TC_09_001_042
 */
// [MmngrOpen_TC_09_001_042]
TEST_F(OsalApiStateTest, MmngrOpen_TC_09_001_042)
{
    st_osal_mmngr_config_t config;
    osal_memory_manager_handle_t hndl_mmngr = OSAL_MEMORY_MANAGER_HANDLE_INVALID;

    // Test09_001_042
    // @brief: abnormal case: Call R_OSAL_MmngrOpen after Deinitialize
    EXPECT_EQ(R_OSAL_MmngrGetOsalMaxConfig(&config), OSAL_RETURN_OK) << "Test09_001_042 failed";
    config.mode = OSAL_MMNGR_ALLOC_MODE_FREE_LIST;
    EXPECT_EQ(R_OSAL_MmngrOpen(&config, &hndl_mmngr), OSAL_RETURN_STATE) << "Test09_001_042 failed";
}
// [MmngrOpen_TC_09_001_042]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrOpen_TC_09_001_043 MemoryApiTest.MmngrOpen_TC_09_001_043
 * @subsection MmngrOpen_TC_09_001_043_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrOpen_TC_09_001_043_tci Test Case ID
 * MmngrOpen_S0_BA_TC_09_001_043
 * @subsection MmngrOpen_TC_09_001_043_rr Related Requirement(s)
 * \#276408
 * @subsection MmngrOpen_TC_09_001_043_pp Prerequisite/Precondition
 * OSAL is initialized.
 * @subsection MmngrOpen_TC_09_001_043_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrOpen with abnormal condition in OSAL_MMNGR_ALLOC_MODE_FREE_LIST mode.
 * - Test09_001_043: memory_limit in config is bigger than max memory limit.
 * @subsection MmngrOpen_TC_09_001_043_tpts Test Procedure/Test Steps
 * -# Calling function R_OSAL_MmngrGetOsalMaxConfig to get max config.
 *      - Addition memory_limit in the max config with 1KB (1*1024).
 * -# Calling function R_OSAL_MmngrOpen with above max config.
 * @subsection MmngrOpen_TC_09_001_043_ereb Expected Result/Behavior
 * -# The return value of R_OSAL_MmngrGetOsalMaxConfig is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrOpen is OSAL_RETURN_CONF.
 * @subsection MmngrOpen_TC_09_001_043_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrOpen_TC_09_001_043
 */
// [MmngrOpen_TC_09_001_043]
TEST_F(MemoryApiTest, MmngrOpen_TC_09_001_043)
{
    // Test09_001_043
    // @brief: abnormal case: memory_limit = Max memory_limit + 1KB
    EXPECT_EQ(R_OSAL_MmngrGetOsalMaxConfig(&config), OSAL_RETURN_OK);
    config.mode = OSAL_MMNGR_ALLOC_MODE_FREE_LIST;
    config.memory_limit += 1*1024;
    EXPECT_EQ(R_OSAL_MmngrOpen(&config, &hndl_mmngr), OSAL_RETURN_CONF) << "Test09_001_043 failed";
}
// [MmngrOpen_TC_09_001_043]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrOpen_TC_09_001_047 MemoryApiTest.MmngrOpen_TC_09_001_047
 * @subsection MmngrOpen_TC_09_001_047_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrOpen_TC_09_001_047_tci Test Case ID
 * MmngrOpen_S1_BA_TC_09_001_047
 * @subsection MmngrOpen_TC_09_001_047_rr Related Requirement(s)
 * \#276408, \#276732, \#276736, \#276742, \#276744
 * @subsection MmngrOpen_TC_09_001_047_pp Prerequisite/Precondition
 * OSAL is initialized.
 * @subsection MmngrOpen_TC_09_001_047_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrOpen with normal condition in OSAL_MMNGR_ALLOC_MODE_FREE_LIST_PROT mode.
 * - Test09_001_047: R_OSAL_MmngrOpen with allocation mode is FREE_LIST_PROT. Other config is obtained from R_OSAL_MmngrGetOsalMaxConfig
 * @subsection MmngrOpen_TC_09_001_047_tpts Test Procedure/Test Steps
 * -# Get the maximum memory configuration by using R_OSAL_MmngrGetOsalMaxConfig.
 * -# Calling function R_OSAL_MmngrOpen with the maximum config above
 * -# Calling R_OSAL_MmngrClose to close the opened Mmngr for the next test cases.
 * @subsection MmngrOpen_TC_09_001_047_ereb Expected Result/Behavior
 * -# The return value of R_OSAL_MmngrGetOsalMaxConfig is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrOpen is OSAL_RETURN_OK.<br>
 * The return handle is not OSAL_MEMORY_MANAGER_HANDLE_INVALID.
 * -# The return value of R_OSAL_MmngrClose is OSAL_RETURN_OK.
 * @subsection MmngrOpen_TC_09_001_047_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrOpen_TC_09_001_047
 */
// [MmngrOpen_TC_09_001_047]
TEST_F(MemoryApiTest, MmngrOpen_TC_09_001_047)
{
    // Test09_001_047
    // @brief: normal case: allocation mode is OSAL_MMNGR_ALLOC_MODE_FREE_LIST_PROT
    EXPECT_EQ(R_OSAL_MmngrGetOsalMaxConfig(&config), OSAL_RETURN_OK) << "Test09_001_047 failed";
    config.mode = OSAL_MMNGR_ALLOC_MODE_FREE_LIST_PROT;
    EXPECT_EQ(R_OSAL_MmngrOpen(&config, &hndl_mmngr), OSAL_RETURN_OK) << "Test09_001_047 failed";
    EXPECT_NE(hndl_mmngr, OSAL_MEMORY_MANAGER_HANDLE_INVALID) << "Test09_001_047 failed";
    EXPECT_EQ(R_OSAL_MmngrClose(hndl_mmngr), OSAL_RETURN_OK) << "Test09_001_047 failed";
    hndl_mmngr = OSAL_MEMORY_MANAGER_HANDLE_INVALID;
}
// [MmngrOpen_TC_09_001_047]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrOpen_TC_09_001_048 MemoryApiTest.MmngrOpen_TC_09_001_048
 * @subsection MmngrOpen_TC_09_001_048_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrOpen_TC_09_001_048_tci Test Case ID
 * MmngrOpen_S0_BA_TC_09_001_048
 * @subsection MmngrOpen_TC_09_001_048_rr Related Requirement(s)
 * \#276408
 * @subsection MmngrOpen_TC_09_001_048_pp Prerequisite/Precondition
 * OSAL is initialized.
 * @subsection MmngrOpen_TC_09_001_048_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrOpen with abnormal condition in OSAL_MMNGR_ALLOC_MODE_FREE_LIST_PROT mode.
 * - Test09_001_048: "config.max_allowed_allocations" is OSAL_MEMORY_MANAGER_CFG_UNLIMITED plus 1.
 * @subsection MmngrOpen_TC_09_001_048_tpts Test Procedure/Test Steps
 * -# Calling function R_OSAL_MmngrOpen with config.max_allowed_allocations is the maximum limitation value plus 1.
 * @subsection MmngrOpen_TC_09_001_048_ereb Expected Result/Behavior
 * -# The return value of R_OSAL_MmngrOpen is OSAL_RETURN_CONF.<br>
 * The return handle is OSAL_MEMORY_MANAGER_HANDLE_INVALID.
 * @subsection MmngrOpen_TC_09_001_048_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrOpen_TC_09_001_048
 */
// [MmngrOpen_TC_09_001_048]
TEST_F(MemoryApiTest, MmngrOpen_TC_09_001_048)
{
    // Test09_001_048
    // @brief: abnormal case: config.max_allowed_allocations = maximum value + 1;
    EXPECT_EQ(R_OSAL_MmngrGetOsalMaxConfig(&config), OSAL_RETURN_OK);
    config.mode = OSAL_MMNGR_ALLOC_MODE_FREE_LIST_PROT;
    config.max_allowed_allocations += 1;
    EXPECT_EQ(R_OSAL_MmngrOpen(&config, &hndl_mmngr), OSAL_RETURN_CONF) << "Test09_001_048 failed";
    EXPECT_EQ(hndl_mmngr, OSAL_MEMORY_MANAGER_HANDLE_INVALID) << "Test09_001_048 failed";
}
// [MmngrOpen_TC_09_001_048]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrOpen_TC_09_001_049 MemoryApiTest.MmngrOpen_TC_09_001_049
 * @subsection MmngrOpen_TC_09_001_049_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrOpen_TC_09_001_049_tci Test Case ID
 * MmngrOpen_S0_BA_TC_09_001_049
 * @subsection MmngrOpen_TC_09_001_049_rr Related Requirement(s)
 * \#276408
 * @subsection MmngrOpen_TC_09_001_049_pp Prerequisite/Precondition
 * OSAL is initialized.
 * @subsection MmngrOpen_TC_09_001_049_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrOpen with abnormal condition in OSAL_MMNGR_ALLOC_MODE_FREE_LIST_PROT mode.
 * - Test09_001_049: "config.max_allowed_allocations" is 0.
 * @subsection MmngrOpen_TC_09_001_049_tpts Test Procedure/Test Steps
 * -# Calling function R_OSAL_MmngrOpen with config.max_allowed_allocations is 0.
 * @subsection MmngrOpen_TC_09_001_049_ereb Expected Result/Behavior
 * -# The return value of R_OSAL_MmngrOpen is OSAL_RETURN_CONF.<br>
 * The return handle is OSAL_MEMORY_MANAGER_HANDLE_INVALID.
 * @subsection MmngrOpen_TC_09_001_049_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrOpen_TC_09_001_049
 */
// [MmngrOpen_TC_09_001_049]
TEST_F(MemoryApiTest, MmngrOpen_TC_09_001_049)
{
    // Test09_001_049
    // @brief: abnormal case: config.max_allowed_allocations = 0;
    EXPECT_EQ(R_OSAL_MmngrGetOsalMaxConfig(&config), OSAL_RETURN_OK);
    config.mode = OSAL_MMNGR_ALLOC_MODE_FREE_LIST_PROT;
    config.max_allowed_allocations = 0;
    EXPECT_EQ(R_OSAL_MmngrOpen(&config, &hndl_mmngr), OSAL_RETURN_CONF) << "Test09_001_049 failed";
    EXPECT_EQ(hndl_mmngr, OSAL_MEMORY_MANAGER_HANDLE_INVALID) << "Test09_001_049 failed";
}
// [MmngrOpen_TC_09_001_049]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrOpen_TC_09_001_050 MemoryApiTest.MmngrOpen_TC_09_001_050
 * @subsection MmngrOpen_TC_09_001_050_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrOpen_TC_09_001_050_tci Test Case ID
 * MmngrOpen_S0_BA_TC_09_001_050
 * @subsection MmngrOpen_TC_09_001_050_rr Related Requirement(s)
 * \#276408
 * @subsection MmngrOpen_TC_09_001_050_pp Prerequisite/Precondition
 * OSAL is initialized.
 * @subsection MmngrOpen_TC_09_001_050_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrOpen with abnormal condition in OSAL_MMNGR_ALLOC_MODE_FREE_LIST_PROT mode.
 * - Test09_001_050: "config.max_registered_monitors_cbs" is OSAL_MEMORY_MANAGER_CFG_UNLIMITED plus 1.
 * @subsection MmngrOpen_TC_09_001_050_tpts Test Procedure/Test Steps
 * -# Calling function R_OSAL_MmngrOpen with config.max_registered_monitors_cbs is the maximum limitation value plus 1.
 * @subsection MmngrOpen_TC_09_001_050_ereb Expected Result/Behavior
 * -# The return value of R_OSAL_MmngrOpen is OSAL_RETURN_CONF.<br>
 * The return handle is OSAL_MEMORY_MANAGER_HANDLE_INVALID.
 * @subsection MmngrOpen_TC_09_001_050_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrOpen_TC_09_001_050
 */
// [MmngrOpen_TC_09_001_050]
TEST_F(MemoryApiTest, MmngrOpen_TC_09_001_050)
{
    // Test09_001_050
    // @brief: abnormal case: config.max_registered_monitors_cbs = maximum value + 1;
    EXPECT_EQ(R_OSAL_MmngrGetOsalMaxConfig(&config), OSAL_RETURN_OK);
    config.mode = OSAL_MMNGR_ALLOC_MODE_FREE_LIST_PROT;
    config.max_registered_monitors_cbs += 1;
    EXPECT_EQ(R_OSAL_MmngrOpen(&config, &hndl_mmngr), OSAL_RETURN_CONF) << "Test09_001_050 failed";
    EXPECT_EQ(hndl_mmngr, OSAL_MEMORY_MANAGER_HANDLE_INVALID) << "Test09_001_050 failed";
}
// [MmngrOpen_TC_09_001_050]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrOpen_TC_09_001_051 MemoryApiTest.MmngrOpen_TC_09_001_051
 * @subsection MmngrOpen_TC_09_001_051_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrOpen_TC_09_001_051_tci Test Case ID
 * MmngrOpen_S0_BA_TC_09_001_051
 * @subsection MmngrOpen_TC_09_001_051_rr Related Requirement(s)
 * \#276408
 * @subsection MmngrOpen_TC_09_001_051_pp Prerequisite/Precondition
 * OSAL is initialized.
 * @subsection MmngrOpen_TC_09_001_051_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrOpen with abnormal condition in OSAL_MMNGR_ALLOC_MODE_FREE_LIST_PROT mode.
 * - Test09_001_051: "config.memory_limit" is 3KB.
 * @subsection MmngrOpen_TC_09_001_051_tpts Test Procedure/Test Steps
 * -# Calling function R_OSAL_MmngrOpen with config.memory_limit is 3KB.
 * @subsection MmngrOpen_TC_09_001_051_ereb Expected Result/Behavior
 * -# The return value of R_OSAL_MmngrOpen is OSAL_RETURN_CONF.<br>
 * The return handle is OSAL_MEMORY_MANAGER_HANDLE_INVALID.
 * @subsection MmngrOpen_TC_09_001_051_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrOpen_TC_09_001_051
 */
// [MmngrOpen_TC_09_001_051]
TEST_F(MemoryApiTest, MmngrOpen_TC_09_001_051)
{
    // Test09_001_051
    // @brief: abnormal case: config.memory_limit is 3KB;
    EXPECT_EQ(R_OSAL_MmngrGetOsalMaxConfig(&config), OSAL_RETURN_OK);
    config.mode = OSAL_MMNGR_ALLOC_MODE_FREE_LIST_PROT;
    config.memory_limit = 3*1024;
    EXPECT_EQ(R_OSAL_MmngrOpen(&config, &hndl_mmngr), OSAL_RETURN_CONF) << "Test09_001_051 failed";
    EXPECT_EQ(hndl_mmngr, OSAL_MEMORY_MANAGER_HANDLE_INVALID) << "Test09_001_051 failed";
}
// [MmngrOpen_TC_09_001_051]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrOpen_TC_09_001_052 MemoryApiTest.MmngrOpen_TC_09_001_052
 * @subsection MmngrOpen_TC_09_001_052_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrOpen_TC_09_001_052_tci Test Case ID
 * MmngrOpen_S1_A_TC_09_001_052
 * @subsection MmngrOpen_TC_09_001_052_rr Related Requirement(s)
 * \#276408
 * @subsection MmngrOpen_TC_09_001_052_pp Prerequisite/Precondition
 * OSAL is initialized.
 * @subsection MmngrOpen_TC_09_001_052_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrOpen with abnormal condition in OSAL_MMNGR_ALLOC_MODE_FREE_LIST_PROT mode.
 * - Test09_001_052: Open an opened Memory handle
 * @subsection MmngrOpen_TC_09_001_052_tpts Test Procedure/Test Steps
 * -# Get the Memory max configuration by using R_OSAL_MmngrGetOsalMaxConfig
 * -# Calling function R_OSAL_MmngrOpen with max configuration.
 * -# Calling function R_OSAL_MmngrOpen again with the same configuration as above.
 * -# Calling R_OSAL_MmngrClose to close the opened Mmngr for the next test cases.
 * @subsection MmngrOpen_TC_09_001_052_ereb Expected Result/Behavior
 * -# R_OSAL_MmngrGetOsalMaxConfig return OSAL_RETURN_OK
 * -# The return value of the first R_OSAL_MmngrOpen is OSAL_RETURN_OK.<br>
 * The return handle is not OSAL_MEMORY_MANAGER_HANDLE_INVALID. <br>
 * -# The return value of the second R_OSAL_MmngrOpen is OSAL_RETURN_STATE.
 * -# The return value of R_OSAL_MmngrClose is OSAL_RETURN_OK.
 * @subsection MmngrOpen_TC_09_001_052_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrOpen_TC_09_001_052
 */
// [MmngrOpen_TC_09_001_052]
TEST_F(MemoryApiTest, MmngrOpen_TC_09_001_052)
{
    // Test09_001_052
    // @brief: abnormal case: state error
    EXPECT_EQ(R_OSAL_MmngrGetOsalMaxConfig(&config), OSAL_RETURN_OK);
    config.mode = OSAL_MMNGR_ALLOC_MODE_FREE_LIST_PROT;
    EXPECT_EQ(R_OSAL_MmngrOpen(&config, &hndl_mmngr), OSAL_RETURN_OK);
    EXPECT_NE(hndl_mmngr, OSAL_MEMORY_MANAGER_HANDLE_INVALID);
    EXPECT_EQ(R_OSAL_MmngrOpen(&config, &hndl_mmngr), OSAL_RETURN_STATE) << "Test09_001_052 failed";
    EXPECT_EQ(R_OSAL_MmngrClose(hndl_mmngr), OSAL_RETURN_OK);
    hndl_mmngr = OSAL_MEMORY_MANAGER_HANDLE_INVALID;
}
// [MmngrOpen_TC_09_001_052]

/**
 * @page MM_API Memory API Test
 * @section OsalApiStateTest_MmngrOpen_TC_09_001_053 OsalApiStateTest.MmngrOpen_TC_09_001_053
 * @subsection MmngrOpen_TC_09_001_053_tsi Test Suite ID
 * OsalApiStateTest
 * @subsection MmngrOpen_TC_09_001_053_tci Test Case ID
 * MmngrOpen_S2_A_TC_09_001_053
 * @subsection MmngrOpen_TC_09_001_053_rr Related Requirement(s)
 * \#276408
 * @subsection MmngrOpen_TC_09_001_053_pp Prerequisite/Precondition
 * - R_OSAL_Deinitialize has already been called
 * @subsection MmngrOpen_TC_09_001_053_tcs Test Case Summary
 * This test shall verify the functionality of the Memory APIs in invalid state transition.
 * - Test09_001_053: Confirm state transition check for R_OSAL_MmngrOpen in OSAL_MMNGR_ALLOC_MODE_FREE_LIST_PROT mode
 * @subsection MmngrOpen_TC_09_001_053_tpts Test Procedure/Test Steps
 * -# Get the max memory config by using R_OSAL_MmngrGetOsalMaxConfig
 * -# Confirm state transition check for R_OSAL_MmngrOpen
 * @subsection MmngrOpen_TC_09_001_053_ereb Expected Result/Behavior
 * -# R_OSAL_MmngrGetOsalMaxConfig return OSAL_RETURN_OK
 * -# R_OSAL_MmngrOpen return OSAL_RETURN_STATE
 * @subsection MmngrOpen_TC_09_001_053_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrOpen_TC_09_001_053
 */
// [MmngrOpen_TC_09_001_053]
TEST_F(OsalApiStateTest, MmngrOpen_TC_09_001_053)
{
    st_osal_mmngr_config_t config;
    osal_memory_manager_handle_t hndl_mmngr = OSAL_MEMORY_MANAGER_HANDLE_INVALID;

    // Test09_001_053
    // @brief: abnormal case: Call R_OSAL_MmngrOpen after Deinitialize
    EXPECT_EQ(R_OSAL_MmngrGetOsalMaxConfig(&config), OSAL_RETURN_OK) << "Test09_001_053 failed";
    config.mode = OSAL_MMNGR_ALLOC_MODE_FREE_LIST_PROT;
    EXPECT_EQ(R_OSAL_MmngrOpen(&config, &hndl_mmngr), OSAL_RETURN_STATE) << "Test09_001_053 failed";
}
// [MmngrOpen_TC_09_001_053]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrOpen_TC_09_001_054 MemoryApiTest.MmngrOpen_TC_09_001_054
 * @subsection MmngrOpen_TC_09_001_054_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrOpen_TC_09_001_054_tci Test Case ID
 * MmngrOpen_S0_BA_TC_09_001_054
 * @subsection MmngrOpen_TC_09_001_054_rr Related Requirement(s)
 * \#276408
 * @subsection MmngrOpen_TC_09_001_054_pp Prerequisite/Precondition
 * OSAL is initialized.
 * @subsection MmngrOpen_TC_09_001_054_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrOpen with abnormal condition in OSAL_MMNGR_ALLOC_MODE_FREE_LIST_PROT mode.
 * - Test09_001_054: memory_limit in config is bigger than max memory limit.
 * @subsection MmngrOpen_TC_09_001_054_tpts Test Procedure/Test Steps
 * -# Calling function R_OSAL_MmngrGetOsalMaxConfig to get max config.
 *      - Addition memory_limit in the max config with 1KB (1*1024).
 * -# Calling function R_OSAL_MmngrOpen with above max config.
 * @subsection MmngrOpen_TC_09_001_054_ereb Expected Result/Behavior
 * -# The return value of R_OSAL_MmngrGetOsalMaxConfig is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrOpen is OSAL_RETURN_CONF.
 * @subsection MmngrOpen_TC_09_001_054_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrOpen_TC_09_001_054
 */
// [MmngrOpen_TC_09_001_054]
TEST_F(MemoryApiTest, MmngrOpen_TC_09_001_054)
{
    // Test09_001_054
    // @brief: abnormal case: memory_limit = Max memory_limit + 1KB
    EXPECT_EQ(R_OSAL_MmngrGetOsalMaxConfig(&config), OSAL_RETURN_OK);
    config.mode = OSAL_MMNGR_ALLOC_MODE_FREE_LIST_PROT;
    config.memory_limit += 1*1024;
    EXPECT_EQ(R_OSAL_MmngrOpen(&config, &hndl_mmngr), OSAL_RETURN_CONF) << "Test09_001_054 failed";
}
// [MmngrOpen_TC_09_001_054]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrOpen_TC_09_001_055 MemoryApiTest.MmngrOpen_TC_09_001_055
 * @subsection MmngrOpen_TC_09_001_055_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrOpen_TC_09_001_055_tci Test Case ID
 * MmngrOpen_S3_N_TC_09_001_055
 * @subsection MmngrOpen_TC_09_001_055_rr Related Requirement(s)
 * \#356350
 * @subsection MmngrOpen_TC_09_001_055_pp Prerequisite/Precondition
 * - OSAL is initialized.
 * @subsection MmngrOpen_TC_09_001_055_tcs Test Case Summary
 * This test shall verify the operation of memory APIs in multi-threads:
 * - Test09_001_055: Allocate multi-buffers in multi-threads using memory handle opened by R_OSAL_MmngrOpen.
 * @subsection MmngrOpen_TC_09_001_055_tpts Test Procedure/Test Steps
 * -# Get the maximum memory configuration by using R_OSAL_MmngrGetOsalMaxConfig
 * -# Set config.mode to OSAL_MMNGR_ALLOC_MODE_FREE_LIST
 * -# Open new memory manager by using R_OSAL_MmngrOpen
 * -# Create first thread using R_OSAL_ThreadCreate with the argument as below:
 *  - p_config: must be configured with following specified values
 *      -# priority is OSAL_THREAD_PRIORITY_TYPE3
 *      -# task_name is "Allocate multiple buffers using handle opened by R_OSAL_MmngrOpen"
 *      -# func is "memory_test_allocate_multiple_buffer_child_thread" function with functionality:
 *          - Allocate multiple memory buffers which size is TEST_MULTI_THREADS_BUFFER_SIZE and alignment is TEST_MULTI_THREADS_BUFFER_ALIGN by using R_OSAL_MmngrAlloc
 *      -# userarg includes memory handle, thread ID and test name.
 *      -# thread ID is TEST_THREAD_ID2
 *      -# stack_size is THREAD_STACK_SIZE
 * -# Create second thread using R_OSAL_ThreadCreate with the argument as below:
 *      - p_config: use the same configuration as first child thread except thread ID is TEST_THREAD_ID3
 *          -# func is "memory_test_allocate_multiple_buffer_child_thread" function with functionality:
 *              - Allocate multiple memory buffers which size is TEST_MULTI_THREADS_BUFFER_SIZE and alignment is TEST_MULTI_THREADS_BUFFER_ALIGN by using R_OSAL_MmngrAlloc
 * -# Join first thread by using R_OSAL_ThreadJoin.
 * -# Join second thread by using R_OSAL_ThreadJoin.
 * -# Deallocate the allocated buffers by using R_OSAL_MmngrDealloc
 * -# Close the opened memory manager by using R_OSAL_MmngrClose
 * @subsection MmngrOpen_TC_09_001_055_ereb Expected Result/Behavior
 * -# R_OSAL_MmngrGetOsalMaxConfig return OSAL_RETURN_OK.
 * -# R_OSAL_MmngrOpen return OSAL_RETURN_OK.<br>
 * Value of "hndl_mmngr" is not OSAL_MEMORY_MANAGER_HANDLE_INVALID.
 * -# R_OSAL_ThreadCreate return OSAL_RETURN_OK with first thread.<br>
 * "thread_handle1" is not NULL_PTR.<br>
 * In memory_test_allocate_multiple_buffer_child_thread function:
 *  - R_OSAL_MmngrAlloc return OSAL_RETURN_OK.
 * -# R_OSAL_ThreadCreate return OSAL_RETURN_OK with second thread.<br>
 * "thread_handle2" is not NULL_PTR.<br>
 * In memory_test_allocate_multiple_buffer_child_thread function:
 *  - R_OSAL_MmngrAlloc return OSAL_RETURN_OK.
 * -# R_OSAL_ThreadJoin return OSAL_RETURN_OK with first thread.<br>
 * Value of "result" is equal to OSAL_RETURN_OK.
 * -# R_OSAL_ThreadJoin return OSAL_RETURN_OK with second thread.<br>
 * Value of "result" is equal to OSAL_RETURN_OK.
 * -# R_OSAL_MmngrDealloc return OSAL_RETURN_OK.
 * -# R_OSAL_MmngrClose return OSAL_RETURN_OK.
 * @subsection MmngrOpen_TC_09_001_055_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrOpen_TC_09_001_055
 * @snippet test_memory_api_basic.cpp memory_test_allocate_multiple_buffer_child_thread
 */
// [MmngrOpen_TC_09_001_055]
TEST_F(MemoryApiTest, MmngrOpen_TC_09_001_055)
{
    st_osal_thread_config_t         config_thread;
    int64_t                         result          = 0;
    osal_thread_handle_t            thread_handle1  = OSAL_THREAD_HANDLE_INVALID;
    osal_thread_handle_t            thread_handle2  = OSAL_THREAD_HANDLE_INVALID;
    const char*                     test_name = "Test09_001_055";

    // Test09_001_055
    // @brief: normal case: allocate multiple buffer of memory handle in multiple thread.
    // The first child thread will allocate buffer from 0 to TEST_NUM_OF_MULTI_BUFFERS/2, the second child thread will allocate buffer from TEST_NUM_OF_MULTI_BUFFERS/2 to TEST_NUM_OF_MULTI_BUFFERS.

    // Get max config and open memory manager.
    EXPECT_EQ(R_OSAL_MmngrGetOsalMaxConfig(&config), OSAL_RETURN_OK) << "Test09_001_055 failed";
    config.mode = OSAL_MMNGR_ALLOC_MODE_FREE_LIST;
    EXPECT_EQ(R_OSAL_MmngrOpen(&config, &hndl_mmngr), OSAL_RETURN_OK) << "Test09_001_055 failed";
    EXPECT_NE(hndl_mmngr, OSAL_MEMORY_MANAGER_HANDLE_INVALID) << "Test09_001_055 failed";

    // Create thread_handle1 to allocate multiple buffer from 0 to TEST_NUM_OF_MULTI_BUFFERS/2.
    memory_test_allocate_multiple_buffer_arg user_arg1(&hndl_mmngr, TEST_THREAD_ID2, test_name);
    config_thread.userarg       = &user_arg1;
    config_thread.priority      = OSAL_THREAD_PRIORITY_TYPE3;
    config_thread.task_name     = (char *)"Allocate multiple buffers using handle opened by R_OSAL_MmngrOpen";
    config_thread.func          = memory_test_allocate_multiple_buffer_child_thread;
    config_thread.stack_size    = THREAD_STACK_SIZE;
    EXPECT_EQ(R_OSAL_ThreadCreate(&config_thread, TEST_THREAD_ID2, &thread_handle1), OSAL_RETURN_OK) << "Test09_001_055 failed";
    EXPECT_NE(thread_handle1, NULL_PTR);

    // Create thread_handle2 to allocate multiple buffer from TEST_NUM_OF_MULTI_BUFFERS/2 to TEST_NUM_OF_MULTI_BUFFERS.
    memory_test_allocate_multiple_buffer_arg user_arg2(&hndl_mmngr, TEST_THREAD_ID3, test_name);
    config_thread.userarg       = &user_arg2;
    EXPECT_EQ(R_OSAL_ThreadCreate(&config_thread, TEST_THREAD_ID3, &thread_handle2), OSAL_RETURN_OK) << "Test09_001_055 failed";
    EXPECT_NE(thread_handle2, NULL_PTR);

    EXPECT_EQ(R_OSAL_ThreadJoin(thread_handle1, &result),OSAL_RETURN_OK) << "Test09_001_055 failed";
    EXPECT_EQ(result, (int64_t)OSAL_RETURN_OK);
    EXPECT_EQ(R_OSAL_ThreadJoin(thread_handle2, &result),OSAL_RETURN_OK) << "Test09_001_055 failed";
    EXPECT_EQ(result, (int64_t)OSAL_RETURN_OK);

    // Deallocate all buffers allocated and close memory handle.
    for(size_t i = 0; i < TEST_NUM_OF_MULTI_BUFFERS; i++)
    {
        EXPECT_EQ(R_OSAL_MmngrDealloc(hndl_mmngr, buffer_arr[i]), OSAL_RETURN_OK) << "Test09_001_055 failed";
    }

    EXPECT_EQ(R_OSAL_MmngrClose(hndl_mmngr), OSAL_RETURN_OK) << "Test09_001_055 failed";
    hndl_mmngr = OSAL_MEMORY_MANAGER_HANDLE_INVALID;
}
// [MmngrOpen_TC_09_001_055]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrOpen_TC_09_001_056 MemoryApiTest.MmngrOpen_TC_09_001_056
 * @subsection MmngrOpen_TC_09_001_056_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrOpen_TC_09_001_056_tci Test Case ID
 * MmngrOpen_S3_N_TC_09_001_056
 * @subsection MmngrOpen_TC_09_001_056_rr Related Requirement(s)
 * \#356350
 * @subsection MmngrOpen_TC_09_001_056_pp Prerequisite/Precondition
 * - OSAL is initialized.
 * - The synchronization queue was created
 * @subsection MmngrOpen_TC_09_001_056_tcs Test Case Summary
 * This test shall verify the operation of memory APIs in multi-threads:
 * - Test09_001_056: Confirm Memory operation in multi-threads using memory handle opened by R_OSAL_MmngrOpen.
 * @subsection MmngrOpen_TC_09_001_056_tpts Test Procedure/Test Steps
 * -# Get the maximum memory configuration by using R_OSAL_MmngrGetOsalMaxConfig
 * -# Open new memory manager by using R_OSAL_MmngrOpen
 * -# Create first thread using R_OSAL_ThreadCreate with the argument as below:
 *  - p_config: must be configured with following specified values
 *      -# priority is OSAL_THREAD_PRIORITY_TYPE3
 *      -# task_name is "Simple testing memory workerfunction"
 *      -# func is "test_memory_operation_thread" function with functionality:
 *          - Register callback function for event OSAL_MMNGR_EVENT_ALLOCATE by using R_OSAL_MmngrRegisterMonitor
 *          - Register callback function for event OSAL_MMNGR_EVENT_DEALLOCATE by using R_OSAL_MmngrRegisterMonitor
 *          - Register callback function for event OSAL_MMNGR_EVENT_OVERFLOW_DETECTED by using R_OSAL_MmngrRegisterMonitor
 *          - Register callback function for event OSAL_MMNGR_EVENT_UNDERFLOW_DETECTED by using R_OSAL_MmngrRegisterMonitor
 *          - Get config of synchronization queue by using R_OSAL_MqGetConfig
 *          - Allocate memory buffer which size is 64 and alignment is 64 by using R_OSAL_MmngrAlloc
 *          - Send a message to synchronization queue by using R_OSAL_MqSendForTimePeriod
 *      -# userarg includes memory handle, buffer handle, thread ID, NormalmonitorCb, allocationEvenMonitor and test name.
 *      -# thread ID is TEST_THREAD_ID2
 *      -# stack_size is THREAD_STACK_SIZE
 * -# Get config of synchronization queue by using R_OSAL_MqGetConfig
 * -# Receive message from synchronization queue by using R_OSAL_MqReceiveForTimePeriod
 * -# Create second thread using R_OSAL_ThreadCreate with the argument as below:
 *  - p_config: use the same configuration as first child thread except thread ID is TEST_THREAD_ID3
 *      -# func is "test_memory_operation_thread" function with functionality:
 *          - Get the pointer of allocated buffer by using R_OSAL_MmngrGetCpuPtr
 *          - Modify the data of allocated buffer by known value using memset
 *          - Call R_OSAL_MmngrFlush with offset is 0 and size is 64
 *          - Get hardware address by using R_OSAL_MmngrGetHwAddr
 *          - Call R_OSAL_MmngrInvalidate with offset is 0 and size is 64
 *          - Deallocate allocated buffer by using R_OSAL_MmngrDealloc
 * -# Join first thread by using R_OSAL_ThreadJoin.
 * -# Join second thread by using R_OSAL_ThreadJoin.
 * -# Close the opened memory manager by using R_OSAL_MmngrClose
 * -# Reset synchronization queue by using R_OSAL_MqReset
 * @subsection MmngrOpen_TC_09_001_056_ereb Expected Result/Behavior
 * -# R_OSAL_MmngrGetOsalMaxConfig return OSAL_RETURN_OK.
 * -# R_OSAL_MmngrOpen return OSAL_RETURN_OK.<br>
 * Value of "hndl_mmngr" is not OSAL_MEMORY_MANAGER_HANDLE_INVALID.
 * -# R_OSAL_ThreadCreate return OSAL_RETURN_OK with first thread.<br>
 * "thread_handle1" is not NULL_PTR.<br>
 * In test_memory_operation_thread function:
 *  - R_OSAL_MmngrRegisterMonitor return OSAL_RETURN_OK
 *  - R_OSAL_MmngrRegisterMonitor return OSAL_RETURN_OK
 *  - R_OSAL_MmngrRegisterMonitor return OSAL_RETURN_OK
 *  - R_OSAL_MmngrRegisterMonitor return OSAL_RETURN_OK
 *  - R_OSAL_MqGetConfig return OSAL_RETURN_OK
 *  - R_OSAL_MmngrAlloc return OSAL_RETURN_OK.<br>
 * Value of "buffer_obj_region" is not OSAL_MEMORY_BUFFER_HANDLE_INVALID
 *  - R_OSAL_MqSendForTimePeriod return OSAL_RETURN_OK
 * -# R_OSAL_MqGetConfig return OSAL_RETURN_OK
 * -# R_OSAL_MqReceiveForTimePeriod return OSAL_RETURN_OK
 * -# R_OSAL_ThreadCreate return OSAL_RETURN_OK with second thread.<br>
 * "thread_handle2" is not NULL_PTR.<br>
 * In test_memory_operation_thread function:
 *  - R_OSAL_MmngrGetCpuPtr return OSAL_RETURN_OK.<br>
 * Value of "cpu_ptr" is not NULL_PTR
 *  - memset run successfully
 *  - R_OSAL_MmngrFlush return OSAL_RETURN_OK
 *  - R_OSAL_MmngrGetHwAddr return OSAL_RETURN_OK
 *  - R_OSAL_MmngrInvalidate return OSAL_RETURN_OK
 *  - R_OSAL_MmngrDealloc return OSAL_RETURN_OK
 * -# R_OSAL_ThreadJoin return OSAL_RETURN_OK with first thread.<br>
 * Value of "result" is equal to OSAL_RETURN_OK.
 * -# R_OSAL_ThreadJoin return OSAL_RETURN_OK with second thread.<br>
 * Value of "result" is equal to OSAL_RETURN_OK.
 * -# R_OSAL_MmngrClose return OSAL_RETURN_OK.
 * -# R_OSAL_MqReset return OSAL_RETURN_OK.
 * @subsection MmngrOpen_TC_09_001_056_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrOpen_TC_09_001_056
 * @snippet test_memory_api_basic.cpp test_memory_operation_thread
 */
// [MmngrOpen_TC_09_001_056]
TEST_F(MemoryApiTest, MmngrOpen_TC_09_001_056)
{
    st_osal_thread_config_t         config_thread;
    int64_t                         result          = 0;
    osal_thread_handle_t            thread_handle1  = OSAL_THREAD_HANDLE_INVALID;
    osal_thread_handle_t            thread_handle2  = OSAL_THREAD_HANDLE_INVALID;
    // Message to sync thread
    int                             receive_msg     = 0;
    st_osal_mq_config_t             local_mq_config;
    const char*                     test_name = "Test09_001_056";

    MockMonitorHelper  allocationEventMonitor;
    auto NormalmonitorCb = cb_wrapper<decltype(
        &MonitorHelper::NormalmonitorCb)>::make_cb<&MonitorHelper::NormalmonitorCb>();

    // Test09_001_056
    // @brief: normal case: test operation of memory manager opened by R_OSAL_MmngrOpen in multiple thread.
    // The first child thread will allocate buffer for memory manager.
    // The second child thread will test operation of buffer.

    EXPECT_CALL(allocationEventMonitor, NormalmonitorCb(OSAL_MMNGR_EVENT_ALLOCATE, _, _)).Times(1);
    EXPECT_CALL(allocationEventMonitor, NormalmonitorCb(OSAL_MMNGR_EVENT_DEALLOCATE, _, _)).Times(1);
    EXPECT_CALL(allocationEventMonitor, NormalmonitorCb(OSAL_MMNGR_EVENT_OVERFLOW_DETECTED, _, _)).Times(0);
    EXPECT_CALL(allocationEventMonitor, NormalmonitorCb(OSAL_MMNGR_EVENT_UNDERFLOW_DETECTED, _, _)).Times(0);

    // Get max config and open memory manager.
    EXPECT_EQ(R_OSAL_MmngrGetOsalMaxConfig(&config), OSAL_RETURN_OK);
    EXPECT_EQ(R_OSAL_MmngrOpen(&config, &hndl_mmngr), OSAL_RETURN_OK);
    EXPECT_NE(hndl_mmngr, OSAL_MEMORY_MANAGER_HANDLE_INVALID);

    // Thread 1: Allocate buffer for memory manager, test it's operation and deallocate buffer.
    memory_test_operation_region_arg user_arg1(&hndl_mmngr, &buffer_obj, TEST_THREAD_ID2, NormalmonitorCb, &allocationEventMonitor, test_name);
    user_arg1.mq               = sync_mq;
    config_thread.userarg       = &user_arg1;
    config_thread.priority      = OSAL_THREAD_PRIORITY_TYPE3;
    config_thread.task_name     = (char *)"Simple testing memory workerfunction";
    config_thread.func          = test_memory_operation_thread;
    config_thread.stack_size    = THREAD_STACK_SIZE;
    EXPECT_EQ(R_OSAL_ThreadCreate(&config_thread, TEST_THREAD_ID2, &thread_handle1), OSAL_RETURN_OK);
    EXPECT_NE(thread_handle1, NULL_PTR);
    EXPECT_EQ(R_OSAL_MqGetConfig(sync_mq, &local_mq_config), OSAL_RETURN_OK) << "Test09_001_056 failed";
    EXPECT_EQ(R_OSAL_MqReceiveForTimePeriod(sync_mq, SYNC_MQ_TIME, &receive_msg, local_mq_config.msg_size), OSAL_RETURN_OK) << "Test09_001_056 failed";
    EXPECT_EQ(receive_msg, TEST_SYNC_MQ_MSG) << "Test09_001_056 failed";

    // Thread 2: Re-allocate buffer for memory manager and test it's operation.
    memory_test_operation_region_arg user_arg2(&hndl_mmngr, &buffer_obj, TEST_THREAD_ID3, NormalmonitorCb, &allocationEventMonitor, test_name);
    config_thread.userarg       = &user_arg2;
    EXPECT_EQ(R_OSAL_ThreadCreate(&config_thread, TEST_THREAD_ID3, &thread_handle2), OSAL_RETURN_OK);
    EXPECT_NE(thread_handle2, NULL_PTR);

    EXPECT_EQ(R_OSAL_ThreadJoin(thread_handle1, &result),OSAL_RETURN_OK) << "Test09_001_056 failed";
    EXPECT_EQ(result, (int64_t)OSAL_RETURN_OK);
    EXPECT_EQ(R_OSAL_ThreadJoin(thread_handle2, &result),OSAL_RETURN_OK) << "Test09_001_056 failed";
    EXPECT_EQ(result, (int64_t)OSAL_RETURN_OK);

    // reset mq
    EXPECT_EQ(R_OSAL_MqReset(sync_mq), OSAL_RETURN_OK) << "Test09_001_056 failed";
    // Close memory manager.
    EXPECT_EQ(R_OSAL_MmngrClose(hndl_mmngr), OSAL_RETURN_OK) << "Test09_001_056 failed";
    hndl_mmngr = OSAL_MEMORY_MANAGER_HANDLE_INVALID;
}
// [MmngrOpen_TC_09_001_056]
#endif

#ifndef SKIP_MEMORY_CLOSE
/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrOpen_TC_09_001_057 MemoryApiTest.MmngrOpen_TC_09_001_057
 * @subsection MmngrOpen_TC_09_001_057_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrOpen_TC_09_001_057_tci Test Case ID
 * MmngrOpen_S0_BN_TC_09_001_057
 * @subsection MmngrOpen_TC_09_001_057_rr Related Requirement(s)
 * \#276408
 * @subsection MmngrOpen_TC_09_001_057_pp Prerequisite/Precondition
 * OSAL is initialized.
 * @subsection MmngrOpen_TC_09_001_057_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrOpen with normal condition in OSAL_MMNGR_ALLOC_MODE_STACK mode.
 * - Test09_001_057: config.memory_limit is 4KB.
 * @subsection MmngrOpen_TC_09_001_057_tpts Test Procedure/Test Steps
 * -# Get the max configuration of memory manager by using R_OSAL_MmngrGetOsalMaxConfig
 * -# Calling function R_OSAL_MmngrOpen with config.memory_limit is 4KB
 * -# Close opened memory manager by using R_OSAL_MmngrClose
 * @subsection MmngrOpen_TC_09_001_057_ereb Expected Result/Behavior
 * -# R_OSAL_MmngrGetOsalMaxConfig return OSAL_RETURN_OK
 * -# The return value of R_OSAL_MmngrOpen is OSAL_RETURN_OK.<br>
 * The "hndl_mmngr" is not OSAL_MEMORY_MANAGER_HANDLE_INVALID.
 * -# R_OSAL_MmngrClose return OSAL_RETURN_OK
 * @subsection MmngrOpen_TC_09_001_057_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrOpen_TC_09_001_057
 */
// [MmngrOpen_TC_09_001_057]
TEST_F(MemoryApiTest, MmngrOpen_TC_09_001_057)
{
    // Test09_001_057
    // @brief: boundary normal case: config.memory_limit is 4KB
    EXPECT_EQ(R_OSAL_MmngrGetOsalMaxConfig(&config), OSAL_RETURN_OK);
    config.mode = OSAL_MMNGR_ALLOC_MODE_STACK;
    config.memory_limit = 4 * 1024;
    EXPECT_EQ(R_OSAL_MmngrOpen(&config, &hndl_mmngr), OSAL_RETURN_OK) << "Test09_001_057 failed";
    EXPECT_NE(hndl_mmngr, OSAL_MEMORY_MANAGER_HANDLE_INVALID) << "Test09_001_057 failed";
    EXPECT_EQ(R_OSAL_MmngrClose(hndl_mmngr), OSAL_RETURN_OK) << "Test09_001_057 failed";
}
// [MmngrOpen_TC_09_001_057]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrOpen_TC_09_001_058 MemoryApiTest.MmngrOpen_TC_09_001_058
 * @subsection MmngrOpen_TC_09_001_058_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrOpen_TC_09_001_058_tci Test Case ID
 * MmngrOpen_S0_BN_TC_09_001_058
 * @subsection MmngrOpen_TC_09_001_058_rr Related Requirement(s)
 * \#276408
 * @subsection MmngrOpen_TC_09_001_058_pp Prerequisite/Precondition
 * OSAL is initialized.
 * @subsection MmngrOpen_TC_09_001_058_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrOpen with normal condition in OSAL_MMNGR_ALLOC_MODE_STACK_PROT mode.
 * - Test09_001_058: config.memory_limit is 4KB.
 * @subsection MmngrOpen_TC_09_001_058_tpts Test Procedure/Test Steps
 * -# Get the max configuration of memory manager by using R_OSAL_MmngrGetOsalMaxConfig
 * -# Calling function R_OSAL_MmngrOpen with config.memory_limit is 4KB
 * -# Close opened memory manager by using R_OSAL_MmngrClose
 * @subsection MmngrOpen_TC_09_001_058_ereb Expected Result/Behavior
 * -# R_OSAL_MmngrGetOsalMaxConfig return OSAL_RETURN_OK
 * -# The return value of R_OSAL_MmngrOpen is OSAL_RETURN_OK.<br>
 * The "hndl_mmngr" is not OSAL_MEMORY_MANAGER_HANDLE_INVALID.
 * -# R_OSAL_MmngrClose return OSAL_RETURN_OK
 * @subsection MmngrOpen_TC_09_001_058_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrOpen_TC_09_001_058
 */
// [MmngrOpen_TC_09_001_058]
TEST_F(MemoryApiTest, MmngrOpen_TC_09_001_058)
{
    // Test09_001_058
    // @brief: boundary normal case: config.memory_limit is 4KB
    EXPECT_EQ(R_OSAL_MmngrGetOsalMaxConfig(&config), OSAL_RETURN_OK);
    config.mode = OSAL_MMNGR_ALLOC_MODE_STACK_PROT;
    config.memory_limit = 4 * 1024;
    EXPECT_EQ(R_OSAL_MmngrOpen(&config, &hndl_mmngr), OSAL_RETURN_OK) << "Test09_001_058 failed";
    EXPECT_NE(hndl_mmngr, OSAL_MEMORY_MANAGER_HANDLE_INVALID) << "Test09_001_058 failed";
    EXPECT_EQ(R_OSAL_MmngrClose(hndl_mmngr), OSAL_RETURN_OK) << "Test09_001_058 failed";
}
// [MmngrOpen_TC_09_001_058]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrOpen_TC_09_001_059 MemoryApiTest.MmngrOpen_TC_09_001_059
 * @subsection MmngrOpen_TC_09_001_059_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrOpen_TC_09_001_059_tci Test Case ID
 * MmngrOpen_S0_BN_TC_09_001_059
 * @subsection MmngrOpen_TC_09_001_059_rr Related Requirement(s)
 * \#276408
 * @subsection MmngrOpen_TC_09_001_059_pp Prerequisite/Precondition
 * OSAL is initialized.
 * @subsection MmngrOpen_TC_09_001_059_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrOpen with normal condition in OSAL_MMNGR_ALLOC_MODE_FREE_LIST mode.
 * - Test09_001_059: config.memory_limit is 4KB.
 * @subsection MmngrOpen_TC_09_001_059_tpts Test Procedure/Test Steps
 * -# Get the max configuration of memory manager by using R_OSAL_MmngrGetOsalMaxConfig
 * -# Calling function R_OSAL_MmngrOpen with config.memory_limit is 4KB
 * -# Close opened memory manager by using R_OSAL_MmngrClose
 * @subsection MmngrOpen_TC_09_001_059_ereb Expected Result/Behavior
 * -# R_OSAL_MmngrGetOsalMaxConfig return OSAL_RETURN_OK
 * -# The return value of R_OSAL_MmngrOpen is OSAL_RETURN_OK.<br>
 * The "hndl_mmngr" is not OSAL_MEMORY_MANAGER_HANDLE_INVALID.
 * -# R_OSAL_MmngrClose return OSAL_RETURN_OK
 * @subsection MmngrOpen_TC_09_001_059_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrOpen_TC_09_001_059
 */
// [MmngrOpen_TC_09_001_059]
TEST_F(MemoryApiTest, MmngrOpen_TC_09_001_059)
{
    // Test09_001_059
    // @brief: boundary normal case: config.memory_limit is 4KB
    EXPECT_EQ(R_OSAL_MmngrGetOsalMaxConfig(&config), OSAL_RETURN_OK);
    config.mode = OSAL_MMNGR_ALLOC_MODE_FREE_LIST;
    config.memory_limit = 4 * 1024;
    EXPECT_EQ(R_OSAL_MmngrOpen(&config, &hndl_mmngr), OSAL_RETURN_OK) << "Test09_001_059 failed";
    EXPECT_NE(hndl_mmngr, OSAL_MEMORY_MANAGER_HANDLE_INVALID) << "Test09_001_059 failed";
    EXPECT_EQ(R_OSAL_MmngrClose(hndl_mmngr), OSAL_RETURN_OK) << "Test09_001_059 failed";
}
// [MmngrOpen_TC_09_001_059]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrOpen_TC_09_001_060 MemoryApiTest.MmngrOpen_TC_09_001_060
 * @subsection MmngrOpen_TC_09_001_060_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrOpen_TC_09_001_060_tci Test Case ID
 * MmngrOpen_S0_BN_TC_09_001_060
 * @subsection MmngrOpen_TC_09_001_060_rr Related Requirement(s)
 * \#276408
 * @subsection MmngrOpen_TC_09_001_060_pp Prerequisite/Precondition
 * OSAL is initialized.
 * @subsection MmngrOpen_TC_09_001_060_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrOpen with normal condition in OSAL_MMNGR_ALLOC_MODE_FREE_LIST_PROT mode.
 * - Test09_001_060: config.memory_limit is 4KB.
 * @subsection MmngrOpen_TC_09_001_060_tpts Test Procedure/Test Steps
 * -# Get the max configuration of memory manager by using R_OSAL_MmngrGetOsalMaxConfig
 * -# Calling function R_OSAL_MmngrOpen with config.memory_limit is 4KB
 * -# Close opened memory manager by using R_OSAL_MmngrClose
 * @subsection MmngrOpen_TC_09_001_060_ereb Expected Result/Behavior
 * -# R_OSAL_MmngrGetOsalMaxConfig return OSAL_RETURN_OK
 * -# The return value of R_OSAL_MmngrOpen is OSAL_RETURN_OK.<br>
 * The "hndl_mmngr" is not OSAL_MEMORY_MANAGER_HANDLE_INVALID.
 * -# R_OSAL_MmngrClose return OSAL_RETURN_OK
 * @subsection MmngrOpen_TC_09_001_060_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrOpen_TC_09_001_060
 */
// [MmngrOpen_TC_09_001_060]
TEST_F(MemoryApiTest, MmngrOpen_TC_09_001_060)
{
    // Test09_001_060
    // @brief: boundary normal case: config.memory_limit is 4KB
    EXPECT_EQ(R_OSAL_MmngrGetOsalMaxConfig(&config), OSAL_RETURN_OK);
    config.mode = OSAL_MMNGR_ALLOC_MODE_FREE_LIST_PROT;
    config.memory_limit = 4 * 1024;
    EXPECT_EQ(R_OSAL_MmngrOpen(&config, &hndl_mmngr), OSAL_RETURN_OK) << "Test09_001_060 failed";
    EXPECT_NE(hndl_mmngr, OSAL_MEMORY_MANAGER_HANDLE_INVALID) << "Test09_001_060 failed";
    EXPECT_EQ(R_OSAL_MmngrClose(hndl_mmngr), OSAL_RETURN_OK) << "Test09_001_060 failed";
}
// [MmngrOpen_TC_09_001_060]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrOpen_TC_09_001_061 MemoryApiTest.MmngrOpen_TC_09_001_061
 * @subsection MmngrOpen_TC_09_001_061_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrOpen_TC_09_001_061_tci Test Case ID
 * MmngrOpen_S0_BA_TC_09_001_061
 * @subsection MmngrOpen_TC_09_001_061_rr Related Requirement(s)
 * \#276408
 * @subsection MmngrOpen_TC_09_001_061_pp Prerequisite/Precondition
 * OSAL is initialized.
 * @subsection MmngrOpen_TC_09_001_061_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrOpen with abnormal condition.
 * - Test09_001_061: config.mode is (OSAL_MMNGR_ALLOC_MODE_INVALID - 1)
 * @subsection MmngrOpen_TC_09_001_061_tpts Test Procedure/Test Steps
 * -# Get the max configuration of memory manager by using R_OSAL_MmngrGetOsalMaxConfig
 * -# Calling function R_OSAL_MmngrOpen with config.mode is (OSAL_MMNGR_ALLOC_MODE_INVALID - 1)
 * @subsection MmngrOpen_TC_09_001_061_ereb Expected Result/Behavior
 * -# R_OSAL_MmngrGetOsalMaxConfig return OSAL_RETURN_OK
 * -# The return value of R_OSAL_MmngrOpen is OSAL_RETURN_CONF
 * @subsection MmngrOpen_TC_09_001_061_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrOpen_TC_09_001_061
 */
// [MmngrOpen_TC_09_001_061]
TEST_F(MemoryApiTest, MmngrOpen_TC_09_001_061)
{
    // Test09_001_061
    // @brief: boundary abnormal case: config.mode is (OSAL_MMNGR_ALLOC_MODE_INVALID - 1)
    EXPECT_EQ(R_OSAL_MmngrGetOsalMaxConfig(&config), OSAL_RETURN_OK);
    config.mode = (e_osal_mmngr_allocator_mode_t)(OSAL_MMNGR_ALLOC_MODE_INVALID - 1);
    EXPECT_EQ(R_OSAL_MmngrOpen(&config, &hndl_mmngr), OSAL_RETURN_CONF) << "Test09_001_061 failed";
}
// [MmngrOpen_TC_09_001_061]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrClose_TC_09_002_001 MemoryApiTest.MmngrClose_TC_09_002_001
 * @subsection MmngrClose_TC_09_002_001_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrClose_TC_09_002_001_tci Test Case ID
 * MmngrClose_S1_N_TC_09_002_001
 * @subsection MmngrClose_TC_09_002_001_rr Related Requirement(s)
 * \#276402, \#276409
 * @subsection MmngrClose_TC_09_002_001_pp Prerequisite/Precondition
 * OSAL is initialized.
 * @subsection MmngrClose_TC_09_002_001_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrClose with normal condition in OSAL_MMNGR_ALLOC_MODE_STACK mode.
 * - Test09_002_001: R_OSAL_MmngrClose with all valid input parameter.
 * @subsection MmngrClose_TC_09_002_001_tpts Test Procedure/Test Steps
 * -# Open Mmngr using R_OSAL_MmngrOpen with valid config.
 * -# Call R_OSAL_MmngrClose to close the opened memory handle.
 * @subsection MmngrClose_TC_09_002_001_ereb Expected Result/Behavior
 * -# The return of R_OSAL_MmngrOpen is OSAL_RETURN_OK.<br>
 * The return handle is not OSAL_MEMORY_MANAGER_HANDLE_INVALID.
 * -# The return value of R_OSAL_MmngrClose is OSAL_RETURN_OK.
 * @subsection MmngrClose_TC_09_002_001_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrClose_TC_09_002_001
 */
// [MmngrClose_TC_09_002_001]
TEST_F(MemoryApiTest, MmngrClose_TC_09_002_001)
{
    // Test09_002_001
    // @brief: normal case: all valid handle
    config.max_allowed_allocations     = 1;
    config.max_registered_monitors_cbs = 0;
    config.memory_limit = 10 * 1024 * 1024;
    config.mode = OSAL_MMNGR_ALLOC_MODE_STACK;
    hndl_mmngr = OSAL_MEMORY_MANAGER_HANDLE_INVALID;

    EXPECT_EQ(R_OSAL_MmngrOpen(&config, &hndl_mmngr), OSAL_RETURN_OK);
    EXPECT_NE(hndl_mmngr, OSAL_MEMORY_MANAGER_HANDLE_INVALID);
    EXPECT_EQ(R_OSAL_MmngrClose(hndl_mmngr), OSAL_RETURN_OK) << "Test09_002_001 failed";
    hndl_mmngr = OSAL_MEMORY_MANAGER_HANDLE_INVALID;
}
// [MmngrClose_TC_09_002_001]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrClose_TC_09_002_002 MemoryApiTest.MmngrClose_TC_09_002_002
 * @subsection MmngrClose_TC_09_002_002_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrClose_TC_09_002_002_tci Test Case ID
 * MmngrClose_S0_A_TC_09_002_002
 * @subsection MmngrClose_TC_09_002_002_rr Related Requirement(s)
 * \#276402, \#276409
 * @subsection MmngrClose_TC_09_002_002_pp Prerequisite/Precondition
 * OSAL is initialized.
 * @subsection MmngrClose_TC_09_002_002_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrClose with abnormal condition in OSAL_MMNGR_ALLOC_MODE_STACK mode.
 * - Test09_002_002: Memory handle is NULL.
 * @subsection MmngrClose_TC_09_002_002_tpts Test Procedure/Test Steps
 * -# Get memory max config by using R_OSAL_MmngrGetOsalMaxConfig
 * -# Call Mmngr using R_OSAL_MmngrOpen with the config above
 * -# Close Mmngr using R_OSAL_MmngrClose with the argument as below:
 *      - Memory handle is NULL.
 * -# Close opened memory handle by using R_OSAL_MmngrClose:
 * @subsection MmngrClose_TC_09_002_002_ereb Expected Result/Behavior
 * -# R_OSAL_MmngrGetOsalMaxConfig return OSAL_RETURN_OK
 * -# The return value of R_OSAL_MmngrOpen is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrClose is OSAL_RETURN_HANDLE.
 * -# The return value of R_OSAL_MmngrClose is OSAL_RETURN_OK.
 * @subsection MmngrClose_TC_09_002_002_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrClose_TC_09_002_002
 */
// [MmngrClose_TC_09_002_002]
TEST_F(MemoryApiTest, MmngrClose_TC_09_002_002)
{
    // Test09_002_002
    // @brief: abnormal case: hndl_mmngr is NULL
    EXPECT_EQ(R_OSAL_MmngrGetOsalMaxConfig(&config), OSAL_RETURN_OK);
    config.mode = OSAL_MMNGR_ALLOC_MODE_STACK;
    EXPECT_EQ(R_OSAL_MmngrOpen(&config, &hndl_mmngr), OSAL_RETURN_OK);
    EXPECT_EQ(R_OSAL_MmngrClose(OSAL_MEMORY_MANAGER_HANDLE_INVALID), OSAL_RETURN_HANDLE) << "Test09_002_002 failed";
    EXPECT_EQ(R_OSAL_MmngrClose(hndl_mmngr), OSAL_RETURN_OK);
}
// [MmngrClose_TC_09_002_002]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrClose_TC_09_002_003 MemoryApiTest.MmngrClose_TC_09_002_003
 * @subsection MmngrClose_TC_09_002_003_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrClose_TC_09_002_003_tci Test Case ID
 * MmngrClose_S2_A_TC_09_002_003
 * @subsection MmngrClose_TC_09_002_003_rr Related Requirement(s)
 * \#276409
 * @subsection MmngrClose_TC_09_002_003_pp Prerequisite/Precondition
 * OSAL is initialized.
 * @subsection MmngrClose_TC_09_002_003_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrClose with abnormal condition in OSAL_MMNGR_ALLOC_MODE_STACK mode.
 * - Test09_002_003: Memory handle has already been closed.
 * @subsection MmngrClose_TC_09_002_003_tpts Test Procedure/Test Steps
 * -# Get the max configuration by using R_OSAL_MmngrGetOsalMaxConfig
 * -# Call R_OSAL_MmngrOpen with the configuration above.
 * -# Close opened memory handle by using R_OSAL_MmngrClose.
 * -# Close opened memory handle at step 4 again by calling R_OSAL_MmngrClose.
 * @subsection MmngrClose_TC_09_002_003_ereb Expected Result/Behavior
 * -# The return of R_OSAL_MmngrGetOsalMaxConfig is OSAL_RETURN_OK.
 * -# The return of R_OSAL_MmngrOpen is OSAL_RETURN_OK.<br>
 * The return handle is not OSAL_MEMORY_MANAGER_HANDLE_INVALID.
 * -# The return value of the first call R_OSAL_MmngrClose is OSAL_RETURN_OK.
 * -# The return value of the second call R_OSAL_MmngrClose is OSAL_RETURN_STATE.
 * @subsection MmngrClose_TC_09_002_003_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrClose_TC_09_002_003
 */
// [MmngrClose_TC_09_002_003]
TEST_F(MemoryApiTest, MmngrClose_TC_09_002_003)
{
    // Test09_002_003
    // @brief: abnormal case: hndl_mmngr has already closed.
    EXPECT_EQ(R_OSAL_MmngrGetOsalMaxConfig(&config), OSAL_RETURN_OK);
    config.mode = OSAL_MMNGR_ALLOC_MODE_STACK;
    EXPECT_EQ(R_OSAL_MmngrOpen(&config, &hndl_mmngr), OSAL_RETURN_OK);
    EXPECT_EQ(R_OSAL_MmngrClose(hndl_mmngr), OSAL_RETURN_OK);
    EXPECT_EQ(R_OSAL_MmngrClose(hndl_mmngr), OSAL_RETURN_STATE) << "Test09_002_003 failed";
    hndl_mmngr = OSAL_MEMORY_MANAGER_HANDLE_INVALID;
}
// [MmngrClose_TC_09_002_003]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrClose_TC_09_002_004 MemoryApiTest.MmngrClose_TC_09_002_004
 * @subsection MmngrClose_TC_09_002_004_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrClose_TC_09_002_004_tci Test Case ID
 * MmngrClose_S2_A_TC_09_002_004
 * @subsection MmngrClose_TC_09_002_004_rr Related Requirement(s)
 * \#276409
 * @subsection MmngrClose_TC_09_002_004_pp Prerequisite/Precondition
 * OSAL is initialized.
 * @subsection MmngrClose_TC_09_002_004_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrClose with abnormal condition in OSAL_MMNGR_ALLOC_MODE_STACK mode.
 * - Test09_002_004: "hndl_mmngr" is not Memory Manager Handler type.
 * @subsection MmngrClose_TC_09_002_004_tpts Test Procedure/Test Steps
 * -# Call R_OSAL_MmngrOpen with valid parameter.
 * -# Call R_OSAL_MmngrClose with memory handle which is not Memory Manager handle type
 *      - Memory handle with p_ptr_self value changed to p_ptr_self_ng
 *      - "p_ptr_self_ng" is allocated by malloc function.
 * -# Close opened memory handle by using R_OSAL_MmngrClose.
 *      - Memory handle with valid p_ptr_self value
 * @subsection MmngrClose_TC_09_002_004_ereb Expected Result/Behavior
 * -# The return value of R_OSAL_MmngrOpen is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrClose is OSAL_RETURN_HANDLE.
 * -# The return value of R_OSAL_MmngrClose is OSAL_RETURN_OK.
 * @subsection MmngrClose_TC_09_002_004_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrClose_TC_09_002_004
 */
// [MmngrClose_TC_09_002_004]
TEST_F(MemoryApiTest, MmngrClose_TC_09_002_004)
{
    void* ptr_self_bak;
    void* ptr_self_ng;

    // Test09_002_004
    // @brief: abnormal case: hndl_mmngr is not Memory Manager Handler type
    EXPECT_EQ(R_OSAL_MmngrGetOsalMaxConfig(&config), OSAL_RETURN_OK);
    config.mode = OSAL_MMNGR_ALLOC_MODE_STACK;
    EXPECT_EQ(R_OSAL_MmngrOpen(&config, &hndl_mmngr), OSAL_RETURN_OK);
    ptr_self_bak = hndl_mmngr->p_ptr_self;
    ptr_self_ng = malloc(0x100);
    hndl_mmngr->p_ptr_self = ptr_self_ng;
    EXPECT_EQ(R_OSAL_MmngrClose(hndl_mmngr), OSAL_RETURN_HANDLE) << "Test09_002_004 failed";
    free(ptr_self_ng);
    hndl_mmngr->p_ptr_self = ptr_self_bak;
    EXPECT_EQ(R_OSAL_MmngrClose(hndl_mmngr), OSAL_RETURN_OK) << "Test09_002_004 failed";
    hndl_mmngr = OSAL_MEMORY_MANAGER_HANDLE_INVALID;
}
// [MmngrClose_TC_09_002_004]

/**
 * @page MM_API Memory API Test
 * @section OsalApiStateTest_MmngrClose_TC_09_002_005 OsalApiStateTest.MmngrClose_TC_09_002_005
 * @subsection MmngrClose_TC_09_002_005_tsi Test Suite ID
 * OsalApiStateTest
 * @subsection MmngrClose_TC_09_002_005_tci Test Case ID
 * MmngrClose_S2_A_TC_09_002_005
 * @subsection MmngrClose_TC_09_002_005_rr Related Requirement(s)
 * \#276409
 * @subsection MmngrClose_TC_09_002_005_pp Prerequisite/Precondition
 * - R_OSAL_Deinitialize has already been called
 * @subsection MmngrClose_TC_09_002_005_tcs Test Case Summary
 * This test shall verify the functionality of the Memory APIs in invalid state transition.
 * - Test09_002_005: Confirm state transition check for R_OSAL_MmngrClose
 * @subsection MmngrClose_TC_09_002_005_tpts Test Procedure/Test Steps
 * -# Call R_OSAL_MmngrClose when OSAL APIs is not intialized yet.
 * @subsection MmngrClose_TC_09_002_005_ereb Expected Result/Behavior
 * -# R_OSAL_MmngrClose return OSAL_RETURN_STATE
 * @subsection MmngrClose_TC_09_002_005_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrClose_TC_09_002_005
 */
// [MmngrClose_TC_09_002_005]
TEST_F(OsalApiStateTest, MmngrClose_TC_09_002_005)
{
    osal_memory_manager_handle_t hndl_mmngr = OSAL_MEMORY_MANAGER_HANDLE_INVALID;
    
    // Test09_002_005
    // @brief: abnormal case: Call R_OSAL_MmngrClose after R_OSAL_Deinitialize
    EXPECT_EQ(R_OSAL_MmngrClose(hndl_mmngr), OSAL_RETURN_STATE) << "Test09_002_005 failed";
}
// [MmngrClose_TC_09_002_005]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrClose_TC_09_002_006 MemoryApiTest.MmngrClose_TC_09_002_006
 * @subsection MmngrClose_TC_09_002_006_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrClose_TC_09_002_006_tci Test Case ID
 * MmngrClose_S1_N_TC_09_002_006
 * @subsection MmngrClose_TC_09_002_006_rr Related Requirement(s)
 * \#276402, \#276409
 * @subsection MmngrClose_TC_09_002_006_pp Prerequisite/Precondition
 * OSAL is initialized.
 * @subsection MmngrClose_TC_09_002_006_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrClose with normal condition in OSAL_MMNGR_ALLOC_MODE_STACK_PROT mode.
 * - Test09_002_006: R_OSAL_MmngrClose with all valid input parameter.
 * @subsection MmngrClose_TC_09_002_006_tpts Test Procedure/Test Steps
 * -# Open Mmngr using R_OSAL_MmngrOpen with valid config.
 * -# Call R_OSAL_MmngrClose to close the opened memory handle.
 * @subsection MmngrClose_TC_09_002_006_ereb Expected Result/Behavior
 * -# The return of R_OSAL_MmngrOpen is OSAL_RETURN_OK.<br>
 * The return handle is not OSAL_MEMORY_MANAGER_HANDLE_INVALID.
 * -# The return value of R_OSAL_MmngrClose is OSAL_RETURN_OK.
 * @subsection MmngrClose_TC_09_002_006_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrClose_TC_09_002_006
 */
// [MmngrClose_TC_09_002_006]
TEST_F(MemoryApiTest, MmngrClose_TC_09_002_006)
{
    // Test09_002_006
    // @brief: normal case: all valid handle
    config.max_allowed_allocations     = 1;
    config.max_registered_monitors_cbs = 0;
    config.memory_limit = 10 * 1024 * 1024;
    config.mode = OSAL_MMNGR_ALLOC_MODE_STACK_PROT;
    hndl_mmngr = OSAL_MEMORY_MANAGER_HANDLE_INVALID;

    EXPECT_EQ(R_OSAL_MmngrOpen(&config, &hndl_mmngr), OSAL_RETURN_OK);
    EXPECT_NE(hndl_mmngr, OSAL_MEMORY_MANAGER_HANDLE_INVALID);
    EXPECT_EQ(R_OSAL_MmngrClose(hndl_mmngr), OSAL_RETURN_OK) << "Test09_002_006 failed";
    hndl_mmngr = OSAL_MEMORY_MANAGER_HANDLE_INVALID;
}
// [MmngrClose_TC_09_002_006]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrClose_TC_09_002_007 MemoryApiTest.MmngrClose_TC_09_002_007
 * @subsection MmngrClose_TC_09_002_007_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrClose_TC_09_002_007_tci Test Case ID
 * MmngrClose_S2_A_TC_09_002_007
 * @subsection MmngrClose_TC_09_002_007_rr Related Requirement(s)
 * \#276409
 * @subsection MmngrClose_TC_09_002_007_pp Prerequisite/Precondition
 * OSAL is initialized.
 * @subsection MmngrClose_TC_09_002_007_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrClose with abnormal condition in OSAL_MMNGR_ALLOC_MODE_STACK_PROT mode.
 * - Test09_002_007: Memory handle has already been closed.
 * @subsection MmngrClose_TC_09_002_007_tpts Test Procedure/Test Steps
 * -# Get memory max config by using R_OSAL_MmngrGetOsalMaxConfig
 * -# Call R_OSAL_MmngrOpen with valid parameter.
 * -# Close opened memory handle by using R_OSAL_MmngrClose.
 * -# Close opened memory handle at step 4 again by calling R_OSAL_MmngrClose.
 * @subsection MmngrClose_TC_09_002_007_ereb Expected Result/Behavior
 * -# R_OSAL_MmngrGetOsalMaxConfig return OSAL_RETURN_OK
 * -# The return of R_OSAL_MmngrOpen is OSAL_RETURN_OK.<br>
 * The return handle is not OSAL_MEMORY_MANAGER_HANDLE_INVALID.
 * -# The return value of the first call R_OSAL_MmngrClose is OSAL_RETURN_OK.
 * -# The return value of the second call R_OSAL_MmngrClose is OSAL_RETURN_STATE.
 * @subsection MmngrClose_TC_09_002_007_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrClose_TC_09_002_007
 */
// [MmngrClose_TC_09_002_007]
TEST_F(MemoryApiTest, MmngrClose_TC_09_002_007)
{
    // Test09_002_007
    // @brief: abnormal case: hndl_mmngr has already closed.
    EXPECT_EQ(R_OSAL_MmngrGetOsalMaxConfig(&config), OSAL_RETURN_OK);
    config.mode = OSAL_MMNGR_ALLOC_MODE_STACK_PROT;
    EXPECT_EQ(R_OSAL_MmngrOpen(&config, &hndl_mmngr), OSAL_RETURN_OK);
    EXPECT_EQ(R_OSAL_MmngrClose(hndl_mmngr), OSAL_RETURN_OK);
    EXPECT_EQ(R_OSAL_MmngrClose(hndl_mmngr), OSAL_RETURN_STATE) << "Test09_002_007 failed";
    hndl_mmngr = OSAL_MEMORY_MANAGER_HANDLE_INVALID;
}
// [MmngrClose_TC_09_002_007]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrClose_TC_09_002_008 MemoryApiTest.MmngrClose_TC_09_002_008
 * @subsection MmngrClose_TC_09_002_008_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrClose_TC_09_002_008_tci Test Case ID
 * MmngrClose_S2_A_TC_09_002_008
 * @subsection MmngrClose_TC_09_002_008_rr Related Requirement(s)
 * \#276409
 * @subsection MmngrClose_TC_09_002_008_pp Prerequisite/Precondition
 * OSAL is initialized.
 * @subsection MmngrClose_TC_09_002_008_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrClose with abnormal condition in OSAL_MMNGR_ALLOC_MODE_STACK_PROT mode.
 * - Test09_002_008: "hndl_mmngr" is not Memory Manager Handler type.
 * @subsection MmngrClose_TC_09_002_008_tpts Test Procedure/Test Steps
 * -# Call R_OSAL_MmngrOpen with valid parameter.
 * -# Call R_OSAL_MmngrClose with memory handle which is not Memory Manager handle type
 *      - Memory handle with p_ptr_self value changed to p_ptr_self_ng
 *      - "p_ptr_self_ng" is allocated by malloc function.
 * -# Close opened memory handle by using R_OSAL_MmngrClose.
 *      - Memory handle with valid p_ptr_self value
 * @subsection MmngrClose_TC_09_002_008_ereb Expected Result/Behavior
 * -# The return value of R_OSAL_MmngrOpen is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrClose is OSAL_RETURN_HANDLE.
 * -# The return value of R_OSAL_MmngrClose is OSAL_RETURN_OK.
 * @subsection MmngrClose_TC_09_002_008_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrClose_TC_09_002_008
 */
// [MmngrClose_TC_09_002_008]
TEST_F(MemoryApiTest, MmngrClose_TC_09_002_008)
{
    void* ptr_self_bak;
    void* ptr_self_ng;

    // Test09_002_008
    // @brief: abnormal case: hndl_mmngr is not Memory Manager Handler type
    EXPECT_EQ(R_OSAL_MmngrGetOsalMaxConfig(&config), OSAL_RETURN_OK);
    config.mode = OSAL_MMNGR_ALLOC_MODE_STACK_PROT;
    EXPECT_EQ(R_OSAL_MmngrOpen(&config, &hndl_mmngr), OSAL_RETURN_OK);
    ptr_self_bak = hndl_mmngr->p_ptr_self;
    ptr_self_ng = malloc(0x100);
    hndl_mmngr->p_ptr_self = ptr_self_ng;
    EXPECT_EQ(R_OSAL_MmngrClose(hndl_mmngr), OSAL_RETURN_HANDLE) << "Test09_002_008 failed";
    free(ptr_self_ng);
    hndl_mmngr->p_ptr_self = ptr_self_bak;
    EXPECT_EQ(R_OSAL_MmngrClose(hndl_mmngr), OSAL_RETURN_OK) << "Test09_002_008 failed";
    hndl_mmngr = OSAL_MEMORY_MANAGER_HANDLE_INVALID;
}
// [MmngrClose_TC_09_002_008]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrClose_TC_09_002_009 MemoryApiTest.MmngrClose_TC_09_002_009
 * @subsection MmngrClose_TC_09_002_009_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrClose_TC_09_002_009_tci Test Case ID
 * MmngrClose_S1_N_TC_09_002_009
 * @subsection MmngrClose_TC_09_002_009_rr Related Requirement(s)
 * \#276402, \#276409
 * @subsection MmngrClose_TC_09_002_009_pp Prerequisite/Precondition
 * OSAL is initialized.
 * @subsection MmngrClose_TC_09_002_009_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrClose with normal condition in OSAL_MMNGR_ALLOC_MODE_FREE_LIST mode.
 * - Test09_002_009: Close the memory handle which opened in OSAL_MMNGR_ALLOC_MODE_FREE_LIST mode
 * @subsection MmngrClose_TC_09_002_009_tpts Test Procedure/Test Steps
 * -# Open Mmngr using R_OSAL_MmngrOpen with "config.mode" is OSAL_MMNGR_ALLOC_MODE_FREE_LIST.
 * -# Call R_OSAL_MmngrClose to close the opened memory handle at previous step.
 * @subsection MmngrClose_TC_09_002_009_ereb Expected Result/Behavior
 * -# The return of R_OSAL_MmngrOpen is OSAL_RETURN_OK.<br>
 * The return handle is not OSAL_MEMORY_MANAGER_HANDLE_INVALID.
 * -# The return value of R_OSAL_MmngrClose is OSAL_RETURN_OK.
 * @subsection MmngrClose_TC_09_002_009_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrClose_TC_09_002_009
 */
// [MmngrClose_TC_09_002_009]
TEST_F(MemoryApiTest, MmngrClose_TC_09_002_009)
{
    // Test09_002_009
    // @brief: normal case: confirm with OSAL_MMNGR_ALLOC_MODE_FREE_LIST mode
    config.max_allowed_allocations     = 1;
    config.max_registered_monitors_cbs = 0;
    config.memory_limit = 10 * 1024 * 1024;
    config.mode = OSAL_MMNGR_ALLOC_MODE_FREE_LIST;
    hndl_mmngr = OSAL_MEMORY_MANAGER_HANDLE_INVALID;

    EXPECT_EQ(R_OSAL_MmngrOpen(&config, &hndl_mmngr), OSAL_RETURN_OK);
    EXPECT_NE(hndl_mmngr, OSAL_MEMORY_MANAGER_HANDLE_INVALID);
    EXPECT_EQ(R_OSAL_MmngrClose(hndl_mmngr), OSAL_RETURN_OK) << "Test09_002_009 failed";
}
// [MmngrClose_TC_09_002_009]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrClose_TC_09_002_010 MemoryApiTest.MmngrClose_TC_09_002_010
 * @subsection MmngrClose_TC_09_002_010_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrClose_TC_09_002_010_tci Test Case ID
 * MmngrClose_S2_A_TC_09_002_010
 * @subsection MmngrClose_TC_09_002_010_rr Related Requirement(s)
 * \#276409
 * @subsection MmngrClose_TC_09_002_010_pp Prerequisite/Precondition
 * OSAL is initialized.
 * @subsection MmngrClose_TC_09_002_010_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrClose with abnormal condition in OSAL_MMNGR_ALLOC_MODE_FREE_LIST mode.
 * - Test09_002_010: Memory handle has already been closed.
 * @subsection MmngrClose_TC_09_002_010_tpts Test Procedure/Test Steps
 * -# Get memory max config by using R_OSAL_MmngrGetOsalMaxConfig
 * -# Call R_OSAL_MmngrOpen with valid parameter.
 * -# Close opened memory handle by using R_OSAL_MmngrClose.
 * -# Close opened memory handle at step 4 again by calling R_OSAL_MmngrClose.
 * @subsection MmngrClose_TC_09_002_010_ereb Expected Result/Behavior
 * -# R_OSAL_MmngrGetOsalMaxConfig return OSAL_RETURN_OK
 * -# The return of R_OSAL_MmngrOpen is OSAL_RETURN_OK.<br>
 * The return handle is not OSAL_MEMORY_MANAGER_HANDLE_INVALID.
 * -# The return value of the first call R_OSAL_MmngrClose is OSAL_RETURN_OK.
 * -# The return value of the second call R_OSAL_MmngrClose is OSAL_RETURN_STATE.
 * @subsection MmngrClose_TC_09_002_010_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrClose_TC_09_002_010
 */
// [MmngrClose_TC_09_002_010]
TEST_F(MemoryApiTest, MmngrClose_TC_09_002_010)
{
    // Test09_002_010
    // @brief: abnormal case: hndl_mmngr has already closed.
    EXPECT_EQ(R_OSAL_MmngrGetOsalMaxConfig(&config), OSAL_RETURN_OK);
    config.mode = OSAL_MMNGR_ALLOC_MODE_FREE_LIST;
    EXPECT_EQ(R_OSAL_MmngrOpen(&config, &hndl_mmngr), OSAL_RETURN_OK);
    EXPECT_EQ(R_OSAL_MmngrClose(hndl_mmngr), OSAL_RETURN_OK);
    EXPECT_EQ(R_OSAL_MmngrClose(hndl_mmngr), OSAL_RETURN_STATE) << "Test09_002_010 failed";
    hndl_mmngr = OSAL_MEMORY_MANAGER_HANDLE_INVALID;
}
// [MmngrClose_TC_09_002_010]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrClose_TC_09_002_011 MemoryApiTest.MmngrClose_TC_09_002_011
 * @subsection MmngrClose_TC_09_002_011_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrClose_TC_09_002_011_tci Test Case ID
 * MmngrClose_S2_A_TC_09_002_011
 * @subsection MmngrClose_TC_09_002_011_rr Related Requirement(s)
 * \#276409
 * @subsection MmngrClose_TC_09_002_011_pp Prerequisite/Precondition
 * OSAL is initialized.
 * @subsection MmngrClose_TC_09_002_011_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrClose with abnormal condition in OSAL_MMNGR_ALLOC_MODE_FREE_LIST mode.
 * - Test09_002_011: "hndl_mmngr" is not Memory Manager Handler type.
 * @subsection MmngrClose_TC_09_002_011_tpts Test Procedure/Test Steps
 * -# Call R_OSAL_MmngrOpen with valid parameter.
 * -# Call R_OSAL_MmngrClose with memory handle which is not Memory Manager handle type
 *      - Memory handle with p_ptr_self value changed to p_ptr_self_ng
 *      - "p_ptr_self_ng" is allocated by malloc function.
 * -# Close opened memory handle by using R_OSAL_MmngrClose.
 *      - Memory handle with valid p_ptr_self value
 * @subsection MmngrClose_TC_09_002_011_ereb Expected Result/Behavior
 * -# The return value of R_OSAL_MmngrOpen is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrClose is OSAL_RETURN_HANDLE.
 * -# The return value of R_OSAL_MmngrClose is OSAL_RETURN_OK.
 * @subsection MmngrClose_TC_09_002_011_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrClose_TC_09_002_011
 */
// [MmngrClose_TC_09_002_011]
TEST_F(MemoryApiTest, MmngrClose_TC_09_002_011)
{
    void* ptr_self_bak;
    void* ptr_self_ng;

    // Test09_002_011
    // @brief: abnormal case: hndl_mmngr is not Memory Manager Handler type
    EXPECT_EQ(R_OSAL_MmngrGetOsalMaxConfig(&config), OSAL_RETURN_OK);
    config.mode = OSAL_MMNGR_ALLOC_MODE_FREE_LIST;
    EXPECT_EQ(R_OSAL_MmngrOpen(&config, &hndl_mmngr), OSAL_RETURN_OK);
    ptr_self_bak = hndl_mmngr->p_ptr_self;
    ptr_self_ng = malloc(0x100);
    hndl_mmngr->p_ptr_self = ptr_self_ng;
    EXPECT_EQ(R_OSAL_MmngrClose(hndl_mmngr), OSAL_RETURN_HANDLE) << "Test09_002_011 failed";
    free(ptr_self_ng);
    hndl_mmngr->p_ptr_self = ptr_self_bak;
    EXPECT_EQ(R_OSAL_MmngrClose(hndl_mmngr), OSAL_RETURN_OK) << "Test09_002_011 failed";
    hndl_mmngr = OSAL_MEMORY_MANAGER_HANDLE_INVALID;
}
// [MmngrClose_TC_09_002_011]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrClose_TC_09_002_012 MemoryApiTest.MmngrClose_TC_09_002_012
 * @subsection MmngrClose_TC_09_002_012_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrClose_TC_09_002_012_tci Test Case ID
 * MmngrClose_S1_N_TC_09_002_012
 * @subsection MmngrClose_TC_09_002_012_rr Related Requirement(s)
 * \#276402, \#276409
 * @subsection MmngrClose_TC_09_002_012_pp Prerequisite/Precondition
 * OSAL is initialized.
 * @subsection MmngrClose_TC_09_002_012_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrClose with normal condition in OSAL_MMNGR_ALLOC_MODE_FREE_LIST_PROT mode.
 * - Test09_002_012: Close the memory handle which opened in OSAL_MMNGR_ALLOC_MODE_FREE_LIST_PROT mode
 * @subsection MmngrClose_TC_09_002_012_tpts Test Procedure/Test Steps
 * -# Open Mmngr using R_OSAL_MmngrOpen with "config.mode" is OSAL_MMNGR_ALLOC_MODE_FREE_LIST_PROT.
 * -# Call R_OSAL_MmngrClose to close the opened memory handle at previous step.
 * @subsection MmngrClose_TC_09_002_012_ereb Expected Result/Behavior
 * -# The return of R_OSAL_MmngrOpen is OSAL_RETURN_OK.<br>
 * The return handle is not OSAL_MEMORY_MANAGER_HANDLE_INVALID.
 * -# The return value of R_OSAL_MmngrClose is OSAL_RETURN_OK.
 * @subsection MmngrClose_TC_09_002_012_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrClose_TC_09_002_012
 */
// [MmngrClose_TC_09_002_012]
TEST_F(MemoryApiTest, MmngrClose_TC_09_002_012)
{
    // Test09_002_012
    // @brief: normal case: confirm with OSAL_MMNGR_ALLOC_MODE_FREE_LIST_PROT mode
    config.max_allowed_allocations     = 1;
    config.max_registered_monitors_cbs = 0;
    config.memory_limit = 10 * 1024 * 1024;
    config.mode = OSAL_MMNGR_ALLOC_MODE_FREE_LIST_PROT;
    hndl_mmngr = OSAL_MEMORY_MANAGER_HANDLE_INVALID;

    EXPECT_EQ(R_OSAL_MmngrOpen(&config, &hndl_mmngr), OSAL_RETURN_OK);
    EXPECT_NE(hndl_mmngr, OSAL_MEMORY_MANAGER_HANDLE_INVALID);
    EXPECT_EQ(R_OSAL_MmngrClose(hndl_mmngr), OSAL_RETURN_OK) << "Test09_002_012 failed";
}
// [MmngrClose_TC_09_002_012]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrClose_TC_09_002_013 MemoryApiTest.MmngrClose_TC_09_002_013
 * @subsection MmngrClose_TC_09_002_013_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrClose_TC_09_002_013_tci Test Case ID
 * MmngrClose_S2_A_TC_09_002_013
 * @subsection MmngrClose_TC_09_002_013_rr Related Requirement(s)
 * \#276409
 * @subsection MmngrClose_TC_09_002_013_pp Prerequisite/Precondition
 * OSAL is initialized.
 * @subsection MmngrClose_TC_09_002_013_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrClose with abnormal condition in OSAL_MMNGR_ALLOC_MODE_FREE_LIST_PROT mode.
 * - Test09_002_013: Memory handle has already been closed.
 * @subsection MmngrClose_TC_09_002_013_tpts Test Procedure/Test Steps
 * -# Get memory max config by using R_OSAL_MmngrGetOsalMaxConfig
 * -# Call R_OSAL_MmngrOpen with valid parameter.
 * -# Close opened memory handle by using R_OSAL_MmngrClose.
 * -# Close opened memory handle at step 4 again by calling R_OSAL_MmngrClose.
 * @subsection MmngrClose_TC_09_002_013_ereb Expected Result/Behavior
 * -# R_OSAL_MmngrGetOsalMaxConfig return OSAL_RETURN_OK
 * -# The return of R_OSAL_MmngrOpen is OSAL_RETURN_OK.<br>
 * The return handle is not OSAL_MEMORY_MANAGER_HANDLE_INVALID.
 * -# The return value of the first call R_OSAL_MmngrClose is OSAL_RETURN_OK.
 * -# The return value of the second call R_OSAL_MmngrClose is OSAL_RETURN_STATE.
 * @subsection MmngrClose_TC_09_002_013_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrClose_TC_09_002_013
 */
// [MmngrClose_TC_09_002_013]
TEST_F(MemoryApiTest, MmngrClose_TC_09_002_013)
{
    // Test09_002_013
    // @brief: abnormal case: hndl_mmngr has already closed.
    EXPECT_EQ(R_OSAL_MmngrGetOsalMaxConfig(&config), OSAL_RETURN_OK);
    config.mode = OSAL_MMNGR_ALLOC_MODE_FREE_LIST_PROT;
    EXPECT_EQ(R_OSAL_MmngrOpen(&config, &hndl_mmngr), OSAL_RETURN_OK);
    EXPECT_EQ(R_OSAL_MmngrClose(hndl_mmngr), OSAL_RETURN_OK);
    EXPECT_EQ(R_OSAL_MmngrClose(hndl_mmngr), OSAL_RETURN_STATE) << "Test09_002_013 failed";
    hndl_mmngr = OSAL_MEMORY_MANAGER_HANDLE_INVALID;
}
// [MmngrClose_TC_09_002_013]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrClose_TC_09_002_014 MemoryApiTest.MmngrClose_TC_09_002_014
 * @subsection MmngrClose_TC_09_002_014_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrClose_TC_09_002_014_tci Test Case ID
 * MmngrClose_S2_A_TC_09_002_014
 * @subsection MmngrClose_TC_09_002_014_rr Related Requirement(s)
 * \#276409
 * @subsection MmngrClose_TC_09_002_014_pp Prerequisite/Precondition
 * OSAL is initialized.
 * @subsection MmngrClose_TC_09_002_014_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrClose with abnormal condition in OSAL_MMNGR_ALLOC_MODE_FREE_LIST_PROT mode.
 * - Test09_002_013: Memory handle has already been closed.
 * @subsection MmngrClose_TC_09_002_014_tpts Test Procedure/Test Steps
 * -# Get memory max config by using R_OSAL_MmngrGetOsalMaxConfig
 * -# Call R_OSAL_MmngrOpen with valid parameter.
 * -# Close opened memory handle by using R_OSAL_MmngrClose.
 * -# Close opened memory handle at step 4 again by calling R_OSAL_MmngrClose.
 * @subsection MmngrClose_TC_09_002_014_ereb Expected Result/Behavior
 * -# R_OSAL_MmngrGetOsalMaxConfig return OSAL_RETURN_OK
 * -# The return of R_OSAL_MmngrOpen is OSAL_RETURN_OK.<br>
 * The return handle is not OSAL_MEMORY_MANAGER_HANDLE_INVALID.
 * -# The return value of the first call R_OSAL_MmngrClose is OSAL_RETURN_OK.
 * -# The return value of the second call R_OSAL_MmngrClose is OSAL_RETURN_STATE.
 * @subsection MmngrClose_TC_09_002_014_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrClose_TC_09_002_014
 */
// [MmngrClose_TC_09_002_014]
TEST_F(MemoryApiTest, MmngrClose_TC_09_002_014)
{
    void* ptr_self_bak;
    void* ptr_self_ng;

    // Test09_002_014
    // @brief: abnormal case: hndl_mmngr is not Memory Manager Handler type
    EXPECT_EQ(R_OSAL_MmngrGetOsalMaxConfig(&config), OSAL_RETURN_OK);
    config.mode = OSAL_MMNGR_ALLOC_MODE_FREE_LIST_PROT;
    EXPECT_EQ(R_OSAL_MmngrOpen(&config, &hndl_mmngr), OSAL_RETURN_OK);
    ptr_self_bak = hndl_mmngr->p_ptr_self;
    ptr_self_ng = malloc(0x100);
    hndl_mmngr->p_ptr_self = ptr_self_ng;
    EXPECT_EQ(R_OSAL_MmngrClose(hndl_mmngr), OSAL_RETURN_HANDLE) << "Test09_002_014 failed";
    free(ptr_self_ng);
    hndl_mmngr->p_ptr_self = ptr_self_bak;
    EXPECT_EQ(R_OSAL_MmngrClose(hndl_mmngr), OSAL_RETURN_OK) << "Test09_002_014 failed";
    hndl_mmngr = OSAL_MEMORY_MANAGER_HANDLE_INVALID;
}
// [MmngrClose_TC_09_002_014]
#endif

#ifndef SKIP_MEMORY_ALLOC
/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrClose_TC_09_002_019 MemoryApiTest.MmngrClose_TC_09_002_019
 * @subsection MmngrClose_TC_09_002_019_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrClose_TC_09_002_019_tci Test Case ID
 * MmngrClose_S2_A_TC_09_002_019
 * @subsection MmngrClose_TC_09_002_019_rr Related Requirement(s)
 * \#276409
 * @subsection MmngrClose_TC_09_002_019_pp Prerequisite/Precondition
 * - A dummy handle is created by copy the data from a valid handle in SetUpTestSuite()
 * - The dummy handle will be free after all test cases was executed.
 * - OSAL is initialized.
 * @subsection MmngrClose_TC_09_002_019_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrClose with abnormal condition
 * - Test09_002_013: hndl_mmngr has not been opened by R_OSAL_MmngrOpen/R_OSAL_MmngrOpenFromRegionIdx yet
 * @subsection MmngrClose_TC_09_002_019_tpts Test Procedure/Test Steps
 * -# Close the "dummy_hndl_mmngr" by using R_OSAL_MmngrClose
 * @subsection MmngrClose_TC_09_002_019_ereb Expected Result/Behavior
 * -# The return code of R_OSAL_MmngrClose is TEST_MMNGR_NOT_OPEN_EXPECT
 * @subsection MmngrClose_TC_09_002_019_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrClose_TC_09_002_019
 */
// [MmngrClose_TC_09_002_019]
TEST_F(MemoryApiTest, MmngrClose_TC_09_002_019)
{
    void* ptr_self_bak;
    void* ptr_self_ng;

    // Test09_002_019
    // @brief: abnormal case: hndl_mmngr has not been opened by R_OSAL_MmngrOpen/R_OSAL_MmngrOpenFromRegionIdx yet
    EXPECT_EQ(R_OSAL_MmngrClose(dummy_hndl_mmngr), TEST_MMNGR_NOT_OPEN_EXPECT) << "Test09_002_019 failed";
}
// [MmngrClose_TC_09_002_019]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrClose_TC_09_002_020 MemoryApiTest.MmngrClose_TC_09_002_020
 * @subsection MmngrClose_TC_09_002_020_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrClose_TC_09_002_020_tci Test Case ID
 * MmngrClose_S4_A_TC_09_002_020
 * @subsection MmngrClose_TC_09_002_020_rr Related Requirement(s)
 * \#276409
 * @subsection MmngrClose_TC_09_002_020_pp Prerequisite/Precondition
 * OSAL is initialized.
 * @subsection MmngrClose_TC_09_002_020_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrClose with abnormal condition in OSAL_MMNGR_ALLOC_MODE_STACK mode.
 * - Test09_002_013: buffer_obj->p_ptr_self is invalid (NULL). buffer_obj manages the buffer allocated by using hndl_mmngr
 * @subsection MmngrClose_TC_09_002_020_tpts Test Procedure/Test Steps
 * -# Get memory max config by using R_OSAL_MmngrGetOsalMaxConfig
 * -# Call R_OSAL_MmngrOpen with valid parameter.
 * -# Allocate buffer which size and alignment are 64 by using R_OSAL_MmngrAlloc
 * -# Close opened memory handle by using R_OSAL_MmngrClose.
 * -# De-allocate the buffer by using  R_OSAL_MmngrDealloc
 * -# Close opened memory handle again by calling R_OSAL_MmngrClose.
 * @subsection MmngrClose_TC_09_002_020_ereb Expected Result/Behavior
 * -# R_OSAL_MmngrGetOsalMaxConfig return OSAL_RETURN_OK
 * -# The return of R_OSAL_MmngrOpen is OSAL_RETURN_OK.<br>
 * The return handle is not OSAL_MEMORY_MANAGER_HANDLE_INVALID.
 * -# R_OSAL_MmngrAlloc return OSAL_RETURN_OK.<br>
 * "buffer_obj" is not equal to OSAL_MEMORY_BUFFER_HANDLE_INVALID
 * -# The return value of the first call R_OSAL_MmngrClose is OSAL_RETURN_HANDLE.
 * -# R_OSAL_MmngrDealloc return OSAL_RETURN_OK
 * -# The return value of the second call R_OSAL_MmngrClose is OSAL_RETURN_OK.
 * @subsection MmngrClose_TC_09_002_020_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrClose_TC_09_002_020
 */
// [MmngrClose_TC_09_002_020]
TEST_F(MemoryApiTest, MmngrClose_TC_09_002_020)
{
    void* ptr_self_bak;

    // Test09_002_020
    // @brief: abnormal case: buffer_obj->p_ptr_self is invalid (NULL). buffer_obj manages the buffer allocated by using hndl_mmngr
    EXPECT_EQ(R_OSAL_MmngrGetOsalMaxConfig(&config), OSAL_RETURN_OK) << "Test09_002_020 failed";
    config.mode = OSAL_MMNGR_ALLOC_MODE_STACK;
    EXPECT_EQ(R_OSAL_MmngrOpen(&config, &hndl_mmngr), OSAL_RETURN_OK) << "Test09_002_020 failed";
    EXPECT_NE(hndl_mmngr, OSAL_MEMORY_MANAGER_HANDLE_INVALID) << "Test09_002_020 failed";
    size = 64;
    alignment = 64;
    EXPECT_EQ(R_OSAL_MmngrAlloc(hndl_mmngr, size, alignment, &buffer_obj), OSAL_RETURN_OK) << "Test09_002_020 failed";
    EXPECT_NE(buffer_obj, OSAL_MEMORY_BUFFER_HANDLE_INVALID) << "Test09_002_020 failed";
    ptr_self_bak = buffer_obj->p_ptr_self;
    buffer_obj->p_ptr_self = NULL;
    EXPECT_EQ(R_OSAL_MmngrClose(hndl_mmngr), OSAL_RETURN_HANDLE) << "Test09_002_020 failed";
    buffer_obj->p_ptr_self = ptr_self_bak;
    EXPECT_EQ(R_OSAL_MmngrDealloc(hndl_mmngr, buffer_obj), OSAL_RETURN_OK) << "Test09_002_020 failed";
    EXPECT_EQ(R_OSAL_MmngrClose(hndl_mmngr), OSAL_RETURN_OK) << "Test09_002_020 failed";
    hndl_mmngr = OSAL_MEMORY_MANAGER_HANDLE_INVALID;
    buffer_obj = OSAL_MEMORY_BUFFER_HANDLE_INVALID;
}
// [MmngrClose_TC_09_002_020]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrClose_TC_09_002_021 MemoryApiTest.MmngrClose_TC_09_002_021
 * @subsection MmngrClose_TC_09_002_021_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrClose_TC_09_002_021_tci Test Case ID
 * MmngrClose_S4_A_TC_09_002_021
 * @subsection MmngrClose_TC_09_002_021_rr Related Requirement(s)
 * \#276409
 * @subsection MmngrClose_TC_09_002_021_pp Prerequisite/Precondition
 * OSAL is initialized.
 * @subsection MmngrClose_TC_09_002_021_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrClose with abnormal condition in OSAL_MMNGR_ALLOC_MODE_STACK_PROT mode.
 * - Test09_002_013: buffer_obj->p_ptr_self is invalid (NULL). buffer_obj manages the buffer allocated by using hndl_mmngr
 * @subsection MmngrClose_TC_09_002_021_tpts Test Procedure/Test Steps
 * -# Get memory max config by using R_OSAL_MmngrGetOsalMaxConfig
 * -# Call R_OSAL_MmngrOpen with valid parameter.
 * -# Allocate buffer which size and alignment are 64 by using R_OSAL_MmngrAlloc
 * -# Close opened memory handle by using R_OSAL_MmngrClose.
 * -# De-allocate the buffer by using  R_OSAL_MmngrDealloc
 * -# Close opened memory handle again by calling R_OSAL_MmngrClose.
 * @subsection MmngrClose_TC_09_002_021_ereb Expected Result/Behavior
 * -# R_OSAL_MmngrGetOsalMaxConfig return OSAL_RETURN_OK
 * -# The return of R_OSAL_MmngrOpen is OSAL_RETURN_OK.<br>
 * The return handle is not OSAL_MEMORY_MANAGER_HANDLE_INVALID.
 * -# R_OSAL_MmngrAlloc return OSAL_RETURN_OK.<br>
 * "buffer_obj" is not equal to OSAL_MEMORY_BUFFER_HANDLE_INVALID
 * -# The return value of the first call R_OSAL_MmngrClose is OSAL_RETURN_HANDLE.
 * -# R_OSAL_MmngrDealloc return OSAL_RETURN_OK
 * -# The return value of the second call R_OSAL_MmngrClose is OSAL_RETURN_OK.
 * @subsection MmngrClose_TC_09_002_021_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrClose_TC_09_002_021
 */
// [MmngrClose_TC_09_002_021]
TEST_F(MemoryApiTest, MmngrClose_TC_09_002_021)
{
    void* ptr_self_bak;

    // Test09_002_021
    // @brief: abnormal case: buffer_obj->p_ptr_self is invalid (NULL). buffer_obj manages the buffer allocated by using hndl_mmngr
    EXPECT_EQ(R_OSAL_MmngrGetOsalMaxConfig(&config), OSAL_RETURN_OK) << "Test09_002_021 failed";
    config.mode = OSAL_MMNGR_ALLOC_MODE_STACK_PROT;
    EXPECT_EQ(R_OSAL_MmngrOpen(&config, &hndl_mmngr), OSAL_RETURN_OK) << "Test09_002_021 failed";
    EXPECT_NE(hndl_mmngr, OSAL_MEMORY_MANAGER_HANDLE_INVALID) << "Test09_002_021 failed";
    size = 64;
    alignment = 64;
    EXPECT_EQ(R_OSAL_MmngrAlloc(hndl_mmngr, size, alignment, &buffer_obj), OSAL_RETURN_OK) << "Test09_002_021 failed";
    EXPECT_NE(buffer_obj, OSAL_MEMORY_BUFFER_HANDLE_INVALID) << "Test09_002_021 failed";
    ptr_self_bak = buffer_obj->p_ptr_self;
    buffer_obj->p_ptr_self = NULL;
    EXPECT_EQ(R_OSAL_MmngrClose(hndl_mmngr), OSAL_RETURN_HANDLE) << "Test09_002_021 failed";
    buffer_obj->p_ptr_self = ptr_self_bak;
    EXPECT_EQ(R_OSAL_MmngrDealloc(hndl_mmngr, buffer_obj), OSAL_RETURN_OK) << "Test09_002_021 failed";
    EXPECT_EQ(R_OSAL_MmngrClose(hndl_mmngr), OSAL_RETURN_OK) << "Test09_002_021 failed";
    hndl_mmngr = OSAL_MEMORY_MANAGER_HANDLE_INVALID;
    buffer_obj = OSAL_MEMORY_BUFFER_HANDLE_INVALID;
}
// [MmngrClose_TC_09_002_021]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrClose_TC_09_002_022 MemoryApiTest.MmngrClose_TC_09_002_022
 * @subsection MmngrClose_TC_09_002_022_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrClose_TC_09_002_022_tci Test Case ID
 * MmngrClose_S4_A_TC_09_002_022
 * @subsection MmngrClose_TC_09_002_022_rr Related Requirement(s)
 * \#276409
 * @subsection MmngrClose_TC_09_002_022_pp Prerequisite/Precondition
 * OSAL is initialized.
 * @subsection MmngrClose_TC_09_002_022_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrClose with abnormal condition in OSAL_MMNGR_ALLOC_MODE_FREE_LIST mode.
 * - Test09_002_013: buffer_obj->p_ptr_self is invalid (NULL). buffer_obj manages the buffer allocated by using hndl_mmngr
 * @subsection MmngrClose_TC_09_002_022_tpts Test Procedure/Test Steps
 * -# Get memory max config by using R_OSAL_MmngrGetOsalMaxConfig
 * -# Call R_OSAL_MmngrOpen with valid parameter.
 * -# Allocate buffer which size and alignment are 64 by using R_OSAL_MmngrAlloc
 * -# Close opened memory handle by using R_OSAL_MmngrClose.
 * -# De-allocate the buffer by using  R_OSAL_MmngrDealloc
 * -# Close opened memory handle again by calling R_OSAL_MmngrClose.
 * @subsection MmngrClose_TC_09_002_022_ereb Expected Result/Behavior
 * -# R_OSAL_MmngrGetOsalMaxConfig return OSAL_RETURN_OK
 * -# The return of R_OSAL_MmngrOpen is OSAL_RETURN_OK.<br>
 * The return handle is not OSAL_MEMORY_MANAGER_HANDLE_INVALID.
 * -# R_OSAL_MmngrAlloc return OSAL_RETURN_OK.<br>
 * "buffer_obj" is not equal to OSAL_MEMORY_BUFFER_HANDLE_INVALID
 * -# The return value of the first call R_OSAL_MmngrClose is OSAL_RETURN_HANDLE.
 * -# R_OSAL_MmngrDealloc return OSAL_RETURN_OK
 * -# The return value of the second call R_OSAL_MmngrClose is OSAL_RETURN_OK.
 * @subsection MmngrClose_TC_09_002_022_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrClose_TC_09_002_022
 */
// [MmngrClose_TC_09_002_022]
TEST_F(MemoryApiTest, MmngrClose_TC_09_002_022)
{
    void* ptr_self_bak;

    // Test09_002_022
    // @brief: abnormal case: buffer_obj->p_ptr_self is invalid (NULL). buffer_obj manages the buffer allocated by using hndl_mmngr
    EXPECT_EQ(R_OSAL_MmngrGetOsalMaxConfig(&config), OSAL_RETURN_OK) << "Test09_002_022 failed";
    config.mode = OSAL_MMNGR_ALLOC_MODE_FREE_LIST;
    EXPECT_EQ(R_OSAL_MmngrOpen(&config, &hndl_mmngr), OSAL_RETURN_OK) << "Test09_002_022 failed";
    EXPECT_NE(hndl_mmngr, OSAL_MEMORY_MANAGER_HANDLE_INVALID) << "Test09_002_022 failed";
    size = 64;
    alignment = 64;
    EXPECT_EQ(R_OSAL_MmngrAlloc(hndl_mmngr, size, alignment, &buffer_obj), OSAL_RETURN_OK) << "Test09_002_022 failed";
    EXPECT_NE(buffer_obj, OSAL_MEMORY_BUFFER_HANDLE_INVALID) << "Test09_002_022 failed";
    ptr_self_bak = buffer_obj->p_ptr_self;
    buffer_obj->p_ptr_self = NULL;
    EXPECT_EQ(R_OSAL_MmngrClose(hndl_mmngr), OSAL_RETURN_HANDLE) << "Test09_002_022 failed";
    buffer_obj->p_ptr_self = ptr_self_bak;
    EXPECT_EQ(R_OSAL_MmngrDealloc(hndl_mmngr, buffer_obj), OSAL_RETURN_OK) << "Test09_002_022 failed";
    EXPECT_EQ(R_OSAL_MmngrClose(hndl_mmngr), OSAL_RETURN_OK) << "Test09_002_022 failed";
    hndl_mmngr = OSAL_MEMORY_MANAGER_HANDLE_INVALID;
    buffer_obj = OSAL_MEMORY_BUFFER_HANDLE_INVALID;
}
// [MmngrClose_TC_09_002_022]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrClose_TC_09_002_023 MemoryApiTest.MmngrClose_TC_09_002_023
 * @subsection MmngrClose_TC_09_002_023_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrClose_TC_09_002_023_tci Test Case ID
 * MmngrClose_S4_A_TC_09_002_023
 * @subsection MmngrClose_TC_09_002_023_rr Related Requirement(s)
 * \#276409
 * @subsection MmngrClose_TC_09_002_023_pp Prerequisite/Precondition
 * OSAL is initialized.
 * @subsection MmngrClose_TC_09_002_023_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrClose with abnormal condition in OSAL_MMNGR_ALLOC_MODE_FREE_LIST_PROT mode.
 * - Test09_002_013: buffer_obj->p_ptr_self is invalid (NULL). buffer_obj manages the buffer allocated by using hndl_mmngr
 * @subsection MmngrClose_TC_09_002_023_tpts Test Procedure/Test Steps
 * -# Get memory max config by using R_OSAL_MmngrGetOsalMaxConfig
 * -# Call R_OSAL_MmngrOpen with valid parameter.
 * -# Allocate buffer which size and alignment are 64 by using R_OSAL_MmngrAlloc
 * -# Close opened memory handle by using R_OSAL_MmngrClose.
 * -# De-allocate the buffer by using  R_OSAL_MmngrDealloc
 * -# Close opened memory handle again by calling R_OSAL_MmngrClose.
 * @subsection MmngrClose_TC_09_002_023_ereb Expected Result/Behavior
 * -# R_OSAL_MmngrGetOsalMaxConfig return OSAL_RETURN_OK
 * -# The return of R_OSAL_MmngrOpen is OSAL_RETURN_OK.<br>
 * The return handle is not OSAL_MEMORY_MANAGER_HANDLE_INVALID.
 * -# R_OSAL_MmngrAlloc return OSAL_RETURN_OK.<br>
 * "buffer_obj" is not equal to OSAL_MEMORY_BUFFER_HANDLE_INVALID
 * -# The return value of the first call R_OSAL_MmngrClose is OSAL_RETURN_HANDLE.
 * -# R_OSAL_MmngrDealloc return OSAL_RETURN_OK
 * -# The return value of the second call R_OSAL_MmngrClose is OSAL_RETURN_OK.
 * @subsection MmngrClose_TC_09_002_023_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrClose_TC_09_002_023
 */
// [MmngrClose_TC_09_002_023]
TEST_F(MemoryApiTest, MmngrClose_TC_09_002_023)
{
    void* ptr_self_bak;

    // Test09_002_023
    // @brief: abnormal case: buffer_obj->p_ptr_self is invalid (NULL). buffer_obj manages the buffer allocated by using hndl_mmngr
    EXPECT_EQ(R_OSAL_MmngrGetOsalMaxConfig(&config), OSAL_RETURN_OK) << "Test09_002_023 failed";
    config.mode = OSAL_MMNGR_ALLOC_MODE_FREE_LIST_PROT;
    EXPECT_EQ(R_OSAL_MmngrOpen(&config, &hndl_mmngr), OSAL_RETURN_OK) << "Test09_002_023 failed";
    EXPECT_NE(hndl_mmngr, OSAL_MEMORY_MANAGER_HANDLE_INVALID) << "Test09_002_023 failed";
    size = 64;
    alignment = 64;
    EXPECT_EQ(R_OSAL_MmngrAlloc(hndl_mmngr, size, alignment, &buffer_obj), OSAL_RETURN_OK) << "Test09_002_023 failed";
    EXPECT_NE(buffer_obj, OSAL_MEMORY_BUFFER_HANDLE_INVALID) << "Test09_002_023 failed";
    ptr_self_bak = buffer_obj->p_ptr_self;
    buffer_obj->p_ptr_self = NULL;
    EXPECT_EQ(R_OSAL_MmngrClose(hndl_mmngr), OSAL_RETURN_HANDLE) << "Test09_002_023 failed";
    buffer_obj->p_ptr_self = ptr_self_bak;
    EXPECT_EQ(R_OSAL_MmngrDealloc(hndl_mmngr, buffer_obj), OSAL_RETURN_OK) << "Test09_002_023 failed";
    EXPECT_EQ(R_OSAL_MmngrClose(hndl_mmngr), OSAL_RETURN_OK) << "Test09_002_023 failed";
    hndl_mmngr = OSAL_MEMORY_MANAGER_HANDLE_INVALID;
    buffer_obj = OSAL_MEMORY_BUFFER_HANDLE_INVALID;
}
// [MmngrClose_TC_09_002_023]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrClose_TC_09_002_024 MemoryApiTest.MmngrClose_TC_09_002_024
 * @subsection MmngrClose_TC_09_002_024_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrClose_TC_09_002_024_tci Test Case ID
 * MmngrClose_S4_A_TC_09_002_024
 * @subsection MmngrClose_TC_09_002_024_rr Related Requirement(s)
 * \#276409
 * @subsection MmngrClose_TC_09_002_024_pp Prerequisite/Precondition
 * OSAL is initialized.
 * @subsection MmngrClose_TC_09_002_024_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrClose with abnormal condition in OSAL_MMNGR_ALLOC_MODE_STACK mode.
 * - Test09_002_024: hndl_mmngr->p_ptr_self is invalid (NULL)
 * @subsection MmngrClose_TC_09_002_024_tpts Test Procedure/Test Steps
 * -# Get memory max config by using R_OSAL_MmngrGetOsalMaxConfig
 * -# Call R_OSAL_MmngrOpen with the configuration above.
 * -# Close opened memory handle by using R_OSAL_MmngrClose with hndl_mmngr->p_ptr_self is invalid (NULL)
 * -# Close opened memory handle again by calling R_OSAL_MmngrClose.
 * @subsection MmngrClose_TC_09_002_024_ereb Expected Result/Behavior
 * -# R_OSAL_MmngrGetOsalMaxConfig return OSAL_RETURN_OK
 * -# The return of R_OSAL_MmngrOpen is OSAL_RETURN_OK.<br>
 * The return handle is not OSAL_MEMORY_MANAGER_HANDLE_INVALID.
 * -# The return value of the first call R_OSAL_MmngrClose is OSAL_RETURN_HANDLE.
 * -# The return value of the second call R_OSAL_MmngrClose is OSAL_RETURN_OK.
 * @subsection MmngrClose_TC_09_002_024_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrClose_TC_09_002_024
 */
// [MmngrClose_TC_09_002_024]
TEST_F(MemoryApiTest, MmngrClose_TC_09_002_024)
{
    void* ptr_self_bak;

    // Test09_002_024
    // @brief: abnormal case: hndl_mmngr->p_ptr_self is invalid (NULL)
    EXPECT_EQ(R_OSAL_MmngrGetOsalMaxConfig(&config), OSAL_RETURN_OK) << "Test09_002_024 failed";
    config.mode = OSAL_MMNGR_ALLOC_MODE_STACK;
    EXPECT_EQ(R_OSAL_MmngrOpen(&config, &hndl_mmngr), OSAL_RETURN_OK) << "Test09_002_024 failed";
    EXPECT_NE(hndl_mmngr, OSAL_MEMORY_MANAGER_HANDLE_INVALID) << "Test09_002_024 failed";
    ptr_self_bak = hndl_mmngr->p_ptr_self;
    hndl_mmngr->p_ptr_self = NULL;
    EXPECT_EQ(R_OSAL_MmngrClose(hndl_mmngr), OSAL_RETURN_HANDLE) << "Test09_002_024 failed";
    hndl_mmngr->p_ptr_self = ptr_self_bak;
    EXPECT_EQ(R_OSAL_MmngrClose(hndl_mmngr), OSAL_RETURN_OK) << "Test09_002_024 failed";
    hndl_mmngr = OSAL_MEMORY_MANAGER_HANDLE_INVALID;
}
// [MmngrClose_TC_09_002_024]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrClose_TC_09_002_025 MemoryApiTest.MmngrClose_TC_09_002_025
 * @subsection MmngrClose_TC_09_002_025_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrClose_TC_09_002_025_tci Test Case ID
 * MmngrClose_S4_A_TC_09_002_025
 * @subsection MmngrClose_TC_09_002_025_rr Related Requirement(s)
 * \#276409
 * @subsection MmngrClose_TC_09_002_025_pp Prerequisite/Precondition
 * OSAL is initialized.
 * @subsection MmngrClose_TC_09_002_025_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrClose with abnormal condition in OSAL_MMNGR_ALLOC_MODE_STACK_PROT mode.
 * - Test09_002_025: hndl_mmngr->p_ptr_self is invalid (NULL)
 * @subsection MmngrClose_TC_09_002_025_tpts Test Procedure/Test Steps
 * -# Get memory max config by using R_OSAL_MmngrGetOsalMaxConfig
 * -# Call R_OSAL_MmngrOpen with the configuration above.
 * -# Close opened memory handle by using R_OSAL_MmngrClose with hndl_mmngr->p_ptr_self is invalid (NULL)
 * -# Close opened memory handle again by calling R_OSAL_MmngrClose.
 * @subsection MmngrClose_TC_09_002_025_ereb Expected Result/Behavior
 * -# R_OSAL_MmngrGetOsalMaxConfig return OSAL_RETURN_OK
 * -# The return of R_OSAL_MmngrOpen is OSAL_RETURN_OK.<br>
 * The return handle is not OSAL_MEMORY_MANAGER_HANDLE_INVALID.
 * -# The return value of the first call R_OSAL_MmngrClose is OSAL_RETURN_HANDLE.
 * -# The return value of the second call R_OSAL_MmngrClose is OSAL_RETURN_OK.
 * @subsection MmngrClose_TC_09_002_025_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrClose_TC_09_002_025
 */
// [MmngrClose_TC_09_002_025]
TEST_F(MemoryApiTest, MmngrClose_TC_09_002_025)
{
    void* ptr_self_bak;

    // Test09_002_025
    // @brief: abnormal case: hndl_mmngr->p_ptr_self is invalid (NULL)
    EXPECT_EQ(R_OSAL_MmngrGetOsalMaxConfig(&config), OSAL_RETURN_OK) << "Test09_002_025 failed";
    config.mode = OSAL_MMNGR_ALLOC_MODE_STACK_PROT;
    EXPECT_EQ(R_OSAL_MmngrOpen(&config, &hndl_mmngr), OSAL_RETURN_OK) << "Test09_002_025 failed";
    EXPECT_NE(hndl_mmngr, OSAL_MEMORY_MANAGER_HANDLE_INVALID) << "Test09_002_025 failed";
    ptr_self_bak = hndl_mmngr->p_ptr_self;
    hndl_mmngr->p_ptr_self = NULL;
    EXPECT_EQ(R_OSAL_MmngrClose(hndl_mmngr), OSAL_RETURN_HANDLE) << "Test09_002_025 failed";
    hndl_mmngr->p_ptr_self = ptr_self_bak;
    EXPECT_EQ(R_OSAL_MmngrClose(hndl_mmngr), OSAL_RETURN_OK) << "Test09_002_025 failed";
    hndl_mmngr = OSAL_MEMORY_MANAGER_HANDLE_INVALID;
}
// [MmngrClose_TC_09_002_025]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrClose_TC_09_002_026 MemoryApiTest.MmngrClose_TC_09_002_026
 * @subsection MmngrClose_TC_09_002_026_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrClose_TC_09_002_026_tci Test Case ID
 * MmngrClose_S4_A_TC_09_002_026
 * @subsection MmngrClose_TC_09_002_026_rr Related Requirement(s)
 * \#276409
 * @subsection MmngrClose_TC_09_002_026_pp Prerequisite/Precondition
 * OSAL is initialized.
 * @subsection MmngrClose_TC_09_002_026_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrClose with abnormal condition in OSAL_MMNGR_ALLOC_MODE_FREE_LIST mode.
 * - Test09_002_026: hndl_mmngr->p_ptr_self is invalid (NULL)
 * @subsection MmngrClose_TC_09_002_026_tpts Test Procedure/Test Steps
 * -# Get memory max config by using R_OSAL_MmngrGetOsalMaxConfig
 * -# Call R_OSAL_MmngrOpen with the configuration above.
 * -# Close opened memory handle by using R_OSAL_MmngrClose with hndl_mmngr->p_ptr_self is invalid (NULL)
 * -# Close opened memory handle again by calling R_OSAL_MmngrClose.
 * @subsection MmngrClose_TC_09_002_026_ereb Expected Result/Behavior
 * -# R_OSAL_MmngrGetOsalMaxConfig return OSAL_RETURN_OK
 * -# The return of R_OSAL_MmngrOpen is OSAL_RETURN_OK.<br>
 * The return handle is not OSAL_MEMORY_MANAGER_HANDLE_INVALID.
 * -# The return value of the first call R_OSAL_MmngrClose is OSAL_RETURN_HANDLE.
 * -# The return value of the second call R_OSAL_MmngrClose is OSAL_RETURN_OK.
 * @subsection MmngrClose_TC_09_002_026_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrClose_TC_09_002_026
 */
// [MmngrClose_TC_09_002_026]
TEST_F(MemoryApiTest, MmngrClose_TC_09_002_026)
{
    void* ptr_self_bak;

    // Test09_002_026
    // @brief: abnormal case: hndl_mmngr->p_ptr_self is invalid (NULL)
    EXPECT_EQ(R_OSAL_MmngrGetOsalMaxConfig(&config), OSAL_RETURN_OK) << "Test09_002_026 failed";
    config.mode = OSAL_MMNGR_ALLOC_MODE_FREE_LIST;
    EXPECT_EQ(R_OSAL_MmngrOpen(&config, &hndl_mmngr), OSAL_RETURN_OK) << "Test09_002_026 failed";
    EXPECT_NE(hndl_mmngr, OSAL_MEMORY_MANAGER_HANDLE_INVALID) << "Test09_002_026 failed";
    ptr_self_bak = hndl_mmngr->p_ptr_self;
    hndl_mmngr->p_ptr_self = NULL;
    EXPECT_EQ(R_OSAL_MmngrClose(hndl_mmngr), OSAL_RETURN_HANDLE) << "Test09_002_026 failed";
    hndl_mmngr->p_ptr_self = ptr_self_bak;
    EXPECT_EQ(R_OSAL_MmngrClose(hndl_mmngr), OSAL_RETURN_OK) << "Test09_002_026 failed";
    hndl_mmngr = OSAL_MEMORY_MANAGER_HANDLE_INVALID;
}
// [MmngrClose_TC_09_002_026]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrClose_TC_09_002_027 MemoryApiTest.MmngrClose_TC_09_002_027
 * @subsection MmngrClose_TC_09_002_027_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrClose_TC_09_002_027_tci Test Case ID
 * MmngrClose_S4_A_TC_09_002_027
 * @subsection MmngrClose_TC_09_002_027_rr Related Requirement(s)
 * \#276409
 * @subsection MmngrClose_TC_09_002_027_pp Prerequisite/Precondition
 * OSAL is initialized.
 * @subsection MmngrClose_TC_09_002_027_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrClose with abnormal condition in OSAL_MMNGR_ALLOC_MODE_FREE_LIST_PROT mode.
 * - Test09_002_027: hndl_mmngr->p_ptr_self is invalid (NULL)
 * @subsection MmngrClose_TC_09_002_027_tpts Test Procedure/Test Steps
 * -# Get memory max config by using R_OSAL_MmngrGetOsalMaxConfig
 * -# Call R_OSAL_MmngrOpen with the configuration above.
 * -# Close opened memory handle by using R_OSAL_MmngrClose with hndl_mmngr->p_ptr_self is invalid (NULL)
 * -# Close opened memory handle again by calling R_OSAL_MmngrClose.
 * @subsection MmngrClose_TC_09_002_027_ereb Expected Result/Behavior
 * -# R_OSAL_MmngrGetOsalMaxConfig return OSAL_RETURN_OK
 * -# The return of R_OSAL_MmngrOpen is OSAL_RETURN_OK.<br>
 * The return handle is not OSAL_MEMORY_MANAGER_HANDLE_INVALID.
 * -# The return value of the first call R_OSAL_MmngrClose is OSAL_RETURN_HANDLE.
 * -# The return value of the second call R_OSAL_MmngrClose is OSAL_RETURN_OK.
 * @subsection MmngrClose_TC_09_002_027_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrClose_TC_09_002_027
 */
// [MmngrClose_TC_09_002_027]
TEST_F(MemoryApiTest, MmngrClose_TC_09_002_027)
{
    void* ptr_self_bak;

    // Test09_002_027
    // @brief: abnormal case: hndl_mmngr->p_ptr_self is invalid (NULL)
    EXPECT_EQ(R_OSAL_MmngrGetOsalMaxConfig(&config), OSAL_RETURN_OK) << "Test09_002_027 failed";
    config.mode = OSAL_MMNGR_ALLOC_MODE_FREE_LIST_PROT;
    EXPECT_EQ(R_OSAL_MmngrOpen(&config, &hndl_mmngr), OSAL_RETURN_OK) << "Test09_002_027 failed";
    EXPECT_NE(hndl_mmngr, OSAL_MEMORY_MANAGER_HANDLE_INVALID) << "Test09_002_027 failed";
    ptr_self_bak = hndl_mmngr->p_ptr_self;
    hndl_mmngr->p_ptr_self = NULL;
    EXPECT_EQ(R_OSAL_MmngrClose(hndl_mmngr), OSAL_RETURN_HANDLE) << "Test09_002_027 failed";
    hndl_mmngr->p_ptr_self = ptr_self_bak;
    EXPECT_EQ(R_OSAL_MmngrClose(hndl_mmngr), OSAL_RETURN_OK) << "Test09_002_027 failed";
    hndl_mmngr = OSAL_MEMORY_MANAGER_HANDLE_INVALID;
}
// [MmngrClose_TC_09_002_027]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrAlloc_TC_09_003_001 MemoryApiTest.MmngrAlloc_TC_09_003_001
 * @subsection MmngrAlloc_TC_09_003_001_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrAlloc_TC_09_003_001_tci Test Case ID
 * MmngrAlloc_S3_N_TC_09_003_001
 * @subsection MmngrAlloc_TC_09_003_001_rr Related Requirement(s)
 * \#276402, \#276410, \#276732
 * @subsection MmngrAlloc_TC_09_003_001_pp Prerequisite/Precondition
 * OSAL is initialized.
 * @subsection MmngrAlloc_TC_09_003_001_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrAlloc and R_OSAL_MmngrDealloc with normal condition in OSAL_MMNGR_ALLOC_MODE_STACK mode.
 * - pre-process: Open new memory manager
 * - Test09_003_001: alloc with all valid parameters.
 * - post-process: close memory manager
 * @subsection MmngrAlloc_TC_09_003_001_tpts Test Procedure/Test Steps
 * -# Open the handle using R_OSAL_MmngrOpen with config:
 *      - config.max_allowed_allocations = 4
 *      - config.max_registered_monitors_cbs = 0
 *      - config.memory_limit = 10MB
 *      - config.mode = OSAL_MMNGR_ALLOC_MODE_STACK
 * -# Call R_OSAL_MmngrAlloc with "size" is 128 byte and the "alignment" is 128 byte.
 * -# Call R_OSAL_MmngrDealloc to deallocate the buffer.
 * -# Call R_OSAL_MmngrClose to close the handle.
 * @subsection MmngrAlloc_TC_09_003_001_ereb Expected Result/Behavior
 * -# The return of R_OSAL_MmngrOpen is OSAL_RETURN_OK.<br>
 * The return handle is not OSAL_MEMORY_MANAGER_HANDLE_INVALID.
 * -# The return value of R_OSAL_MmngrAlloc is OSAL_RETURN_OK.<br>
 * The return buffer is not OSAL_MEMORY_BUFFER_HANDLE_INVALID.
 * -# The return value of R_OSAL_MmngrDealloc is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrClose is OSAL_RETURN_OK.
 * @subsection MmngrAlloc_TC_09_003_001_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrAlloc_TC_09_003_001
 */
// [MmngrAlloc_TC_09_003_001]
TEST_F(MemoryApiTest, MmngrAlloc_TC_09_003_001)
{
    //pre-process: open new memory manager
    config.max_allowed_allocations     = 4;
    config.max_registered_monitors_cbs = 0;
    config.memory_limit = 10 * 1024 * 1024;
    config.mode = OSAL_MMNGR_ALLOC_MODE_STACK;
    EXPECT_EQ(R_OSAL_MmngrOpen(&config, &hndl_mmngr), OSAL_RETURN_OK) << "pre-process failed";
    EXPECT_NE(hndl_mmngr, OSAL_MEMORY_MANAGER_HANDLE_INVALID) << "pre-process failed";

    // @brief: normal case: alloc/dealloc with all valid argument
    // Test09_003_001
    size = 128;
    alignment = 128;
    EXPECT_EQ(R_OSAL_MmngrAlloc(hndl_mmngr, size, alignment, &buffer_obj), OSAL_RETURN_OK) << "Test09_003_001 failed";
    EXPECT_NE(buffer_obj, OSAL_MEMORY_BUFFER_HANDLE_INVALID) << "Test09_003_001 failed";
    EXPECT_EQ(R_OSAL_MmngrDealloc(hndl_mmngr, buffer_obj), OSAL_RETURN_OK) << "Test09_003_001 failed";

    //post-process: close memory manager
    EXPECT_EQ(R_OSAL_MmngrClose(hndl_mmngr), OSAL_RETURN_OK) << "post-process failed";
}
// [MmngrAlloc_TC_09_003_001]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrAlloc_TC_09_003_002 MemoryApiTest.MmngrAlloc_TC_09_003_002
 * @subsection MmngrAlloc_TC_09_003_002_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrAlloc_TC_09_003_002_tci Test Case ID
 * MmngrAlloc_S3_BN_TC_09_003_002
 * @subsection MmngrAlloc_TC_09_003_002_rr Related Requirement(s)
 * \#276410, \#276732
 * @subsection MmngrAlloc_TC_09_003_002_pp Prerequisite/Precondition
 * OSAL is initialized.
 * @subsection MmngrAlloc_TC_09_003_002_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrAlloc and R_OSAL_MmngrDealloc with normal condition in OSAL_MMNGR_ALLOC_MODE_STACK mode.
 * - pre-process: Open new memory manager
 * - Test09_003_002: size is equal to memory_limit(10MB).
 * - post-process: close memory manager
 * @subsection MmngrAlloc_TC_09_003_002_tpts Test Procedure/Test Steps
 * -# Open the handle using R_OSAL_MmngrOpen with config:
 *      - config.max_allowed_allocations = 4
 *      - config.max_registered_monitors_cbs = 0
 *      - config.memory_limit = 10MB
 *      - config.mode = OSAL_MMNGR_ALLOC_MODE_STACK
 * -# Call R_OSAL_MmngrAlloc with "size" is 10 * 1024 *1024 byte.
 * -# Call R_OSAL_MmngrDealloc to de-allocate the allocated buffer above
 * -# Call R_OSAL_MmngrClose to close the handle.
 * @subsection MmngrAlloc_TC_09_003_002_ereb Expected Result/Behavior
 * -# The return of R_OSAL_MmngrOpen is OSAL_RETURN_OK.<br>
 * The return handle is not OSAL_MEMORY_MANAGER_HANDLE_INVALID.
 * -# The return value of R_OSAL_MmngrAlloc is OSAL_RETURN_OK.<br>
 * The return buffer is not OSAL_MEMORY_BUFFER_HANDLE_INVALID.
 * -# The return value of R_OSAL_MmngrDealloc is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrClose is OSAL_RETURN_OK.
 * @subsection MmngrAlloc_TC_09_003_002_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrAlloc_TC_09_003_002
 */
// [MmngrAlloc_TC_09_003_002]
TEST_F(MemoryApiTest, MmngrAlloc_TC_09_003_002)
{
    //pre-process: open new memory manager
    config.max_allowed_allocations     = 4;
    config.max_registered_monitors_cbs = 0;
    config.memory_limit = 10 * 1024 * 1024;
    config.mode = OSAL_MMNGR_ALLOC_MODE_STACK;
    EXPECT_EQ(R_OSAL_MmngrOpen(&config, &hndl_mmngr), OSAL_RETURN_OK) << "pre-process failed";
    EXPECT_NE(hndl_mmngr, OSAL_MEMORY_MANAGER_HANDLE_INVALID) << "pre-process failed";

    // Test09_003_002
    // @brief: boundary normal case: size is equal to memory_limit (10MB)
    alignment = 128;
    size = 10 * 1024 * 1024;
    EXPECT_EQ(R_OSAL_MmngrAlloc(hndl_mmngr, size, alignment, &buffer_obj), OSAL_RETURN_OK) << "Test09_003_002 failed";
    EXPECT_NE(buffer_obj, OSAL_MEMORY_BUFFER_HANDLE_INVALID) << "Test09_003_002 failed";
    EXPECT_EQ(R_OSAL_MmngrDealloc(hndl_mmngr, buffer_obj), OSAL_RETURN_OK) << "Test09_003_002 failed";
    buffer_obj = OSAL_MEMORY_BUFFER_HANDLE_INVALID;

    //post-process: close memory manager
    EXPECT_EQ(R_OSAL_MmngrClose(hndl_mmngr), OSAL_RETURN_OK) << "post-process failed";
}
// [MmngrAlloc_TC_09_003_002]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrAlloc_TC_09_003_003 MemoryApiTest.MmngrAlloc_TC_09_003_003
 * @subsection MmngrAlloc_TC_09_003_003_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrAlloc_TC_09_003_003_tci Test Case ID
 * MmngrAlloc_S3_BN_TC_09_003_003
 * @subsection MmngrAlloc_TC_09_003_003_rr Related Requirement(s)
 * \#276410, \#276732
 * @subsection MmngrAlloc_TC_09_003_003_pp Prerequisite/Precondition
 * OSAL is initialized.
 * @subsection MmngrAlloc_TC_09_003_003_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrAlloc and R_OSAL_MmngrDealloc with normal condition in OSAL_MMNGR_ALLOC_MODE_STACK mode.
 * - pre-process: Open new memory manager
 * - Test09_003_003: alignment is 64 byte.
 * - post-process: close memory manager
 * @subsection MmngrAlloc_TC_09_003_003_tpts Test Procedure/Test Steps
 * -# Open the handle using R_OSAL_MmngrOpen with config:
 *      - config.max_allowed_allocations = 4
 *      - config.max_registered_monitors_cbs = 0
 *      - config.memory_limit = 10MB
 *      - config.mode = OSAL_MMNGR_ALLOC_MODE_STACK
 * -# Call R_OSAL_MmngrAlloc with "alignment" is 64 byte.
 * -# Call R_OSAL_MmngrDealloc to deallocate the allocated buffer as above.
 * -# Call R_OSAL_MmngrClose to close the handle.
 * @subsection MmngrAlloc_TC_09_003_003_ereb Expected Result/Behavior
 * -# The return of R_OSAL_MmngrOpen is OSAL_RETURN_OK.<br>
 * The return handle is not OSAL_MEMORY_MANAGER_HANDLE_INVALID.
 * -# The return value of R_OSAL_MmngrAlloc is OSAL_RETURN_OK.<br>
 * The return buffer is not OSAL_MEMORY_BUFFER_HANDLE_INVALID.
 * -# The return value of R_OSAL_MmngrDealloc is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrClose is OSAL_RETURN_OK.
 * @subsection MmngrAlloc_TC_09_003_003_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrAlloc_TC_09_003_003
 */
// [MmngrAlloc_TC_09_003_003]
TEST_F(MemoryApiTest, MmngrAlloc_TC_09_003_003)
{
    //pre-process: open new memory manager
    config.max_allowed_allocations     = 4;
    config.max_registered_monitors_cbs = 0;
    config.memory_limit = 10 * 1024 * 1024;
    config.mode = OSAL_MMNGR_ALLOC_MODE_STACK;
    EXPECT_EQ(R_OSAL_MmngrOpen(&config, &hndl_mmngr), OSAL_RETURN_OK) << "pre-process failed";
    EXPECT_NE(hndl_mmngr, OSAL_MEMORY_MANAGER_HANDLE_INVALID) << "pre-process failed";

    // Test09_003_003
    // @brief: boundary normal case: alignment is 64 byte
    alignment = 64;
    size = 1024;
    EXPECT_EQ(R_OSAL_MmngrAlloc(hndl_mmngr, size, alignment, &buffer_obj), OSAL_RETURN_OK) << "Test09_003_003 failed";
    EXPECT_NE(buffer_obj, OSAL_MEMORY_BUFFER_HANDLE_INVALID) << "Test09_003_003 failed";
    EXPECT_EQ(R_OSAL_MmngrDealloc(hndl_mmngr, buffer_obj), OSAL_RETURN_OK) << "Test09_003_003 failed";
    buffer_obj = OSAL_MEMORY_BUFFER_HANDLE_INVALID;

    //post-process: close memory manager
    EXPECT_EQ(R_OSAL_MmngrClose(hndl_mmngr), OSAL_RETURN_OK) << "post-process failed";
}
// [MmngrAlloc_TC_09_003_003]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrAlloc_TC_09_003_004 MemoryApiTest.MmngrAlloc_TC_09_003_004
 * @subsection MmngrAlloc_TC_09_003_004_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrAlloc_TC_09_003_004_tci Test Case ID
 * MmngrAlloc_S0_A_TC_09_003_004
 * @subsection MmngrAlloc_TC_09_003_004_rr Related Requirement(s)
 * \#276402, \#276410, \#276732
 * @subsection MmngrAlloc_TC_09_003_004_pp Prerequisite/Precondition
 * OSAL is initialized.
 * @subsection MmngrAlloc_TC_09_003_004_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrAlloc and R_OSAL_MmngrDealloc with abnormal condition in OSAL_MMNGR_ALLOC_MODE_STACK mode.
 * - pre-process: open new memory manager
 * - Test09_003_004: alloc with handle is NULL.
 * - post-process: close memory handle
 * @subsection MmngrAlloc_TC_09_003_004_tpts Test Procedure/Test Steps
 * -# Open the handle using R_OSAL_MmngrOpen with config:
 *      - config.max_allowed_allocations = 4
 *      - config.max_registered_monitors_cbs = 0
 *      - config.memory_limit = 10MB
 *      - config.mode = OSAL_MMNGR_ALLOC_MODE_STACK
 * -# Call R_OSAL_MmngrAlloc with handle is OSAL_MEMORY_MANAGER_HANDLE_INVALID.
 * -# Call R_OSAL_MmngrClose to close the handle.
 * @subsection MmngrAlloc_TC_09_003_004_ereb Expected Result/Behavior
 * -# The return of R_OSAL_MmngrOpen is OSAL_RETURN_OK.<br>
 * The return handle is not OSAL_MEMORY_MANAGER_HANDLE_INVALID.
 * -# The return value of R_OSAL_MmngrAlloc is OSAL_RETURN_HANDLE.<br>
 * The return buffer is OSAL_MEMORY_BUFFER_HANDLE_INVALID.
 * -# The return value of R_OSAL_MmngrClose is OSAL_RETURN_OK.
 * @subsection MmngrAlloc_TC_09_003_004_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrAlloc_TC_09_003_004
 */
// [MmngrAlloc_TC_09_003_004]
TEST_F(MemoryApiTest, MmngrAlloc_TC_09_003_004)
{
    // pre-process: open memory manager
    config.max_allowed_allocations     = 4;
    config.max_registered_monitors_cbs = 0;
    config.memory_limit = 10 * 1024 * 1024;
    config.mode = OSAL_MMNGR_ALLOC_MODE_STACK;
    EXPECT_EQ(R_OSAL_MmngrOpen(&config, &hndl_mmngr), OSAL_RETURN_OK) << "pre-process failed";
    EXPECT_NE(hndl_mmngr, OSAL_MEMORY_MANAGER_HANDLE_INVALID);

    // @brief: abnormal case: alloc with hndl_mmngr = OSAL_MEMORY_MANAGER_HANDLE_INVALID
    // Test09_003_004
    size = 4 * 1024;
    alignment = 64;
    EXPECT_EQ(R_OSAL_MmngrAlloc(OSAL_MEMORY_MANAGER_HANDLE_INVALID, size, alignment, &buffer_obj), OSAL_RETURN_HANDLE) << "Test09_003_004 failed";
    EXPECT_EQ(buffer_obj, OSAL_MEMORY_BUFFER_HANDLE_INVALID) << "Test09_003_004 failed";

    // post-process: close memory handle
    EXPECT_EQ(R_OSAL_MmngrClose(hndl_mmngr), OSAL_RETURN_OK) << "post-process failed";
}
// [MmngrAlloc_TC_09_003_004]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrAlloc_TC_09_003_005 MemoryApiTest.MmngrAlloc_TC_09_003_005
 * @subsection MmngrAlloc_TC_09_003_005_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrAlloc_TC_09_003_005_tci Test Case ID
 * MmngrAlloc_S0_A_TC_09_003_005
 * @subsection MmngrAlloc_TC_09_003_005_rr Related Requirement(s)
 * \#276410, \#276732
 * @subsection MmngrAlloc_TC_09_003_005_pp Prerequisite/Precondition
 * OSAL is initialized.
 * @subsection MmngrAlloc_TC_09_003_005_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrAlloc and R_OSAL_MmngrDealloc with abnormal condition in OSAL_MMNGR_ALLOC_MODE_STACK mode.
 * - pre-process: open new memory manager
 * - Test09_003_005: alloc with handle is not created by MmngrOpen
 * - post-process: close opened memory handle
 * @subsection MmngrAlloc_TC_09_003_005_tpts Test Procedure/Test Steps
 * -# Open the handle using R_OSAL_MmngrOpen with config:
 *      - config.max_allowed_allocations = 4
 *      - config.max_registered_monitors_cbs = 0
 *      - config.memory_limit = 10MB
 *      - config.mode = OSAL_MMNGR_ALLOC_MODE_STACK
 * -# Allocate "tmp_hndl_mmngr" by using malloc function.
 * -# Call R_OSAL_MmngrInitializeMemoryManagerObj with input paramater is another handle (call temporary handle).
 * -# Call R_OSAL_MmngrAlloc with the temporary memory handle above
 * -# Call R_OSAL_MmngrClose to close the handle.
 * -# Free "tmp_hndl_mmngr"
 * @subsection MmngrAlloc_TC_09_003_005_ereb Expected Result/Behavior
 * -# The return of R_OSAL_MmngrOpen is OSAL_RETURN_OK.<br>
 * The return handle is not OSAL_MEMORY_MANAGER_HANDLE_INVALID.
 * -# Memory allocation succeeded (Pointer to buffer != Nullpointer)
 * -# The return value of R_OSAL_MmngrInitializeMemoryManagerObj is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrAlloc is OSAL_RETURN_HANDLE_NOT_SUPPORTED.<br>
 * The return buffer is OSAL_MEMORY_BUFFER_HANDLE_INVALID.
 * -# The return value of R_OSAL_MmngrClose is OSAL_RETURN_OK.
 * -# Allocated memory "tmp_hndl_mmngr" free successfully
 * @subsection MmngrAlloc_TC_09_003_005_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrAlloc_TC_09_003_005
 */
// [MmngrAlloc_TC_09_003_005]
TEST_F(MemoryApiTest, MmngrAlloc_TC_09_003_005)
{
    osal_memory_manager_handle_t tmp_hndl_mmngr;

    // pre-process: open memory manager
    config.max_allowed_allocations     = 4;
    config.max_registered_monitors_cbs = 0;
    config.memory_limit = 10 * 1024 * 1024;
    config.mode = OSAL_MMNGR_ALLOC_MODE_STACK;
    EXPECT_EQ(R_OSAL_MmngrOpen(&config, &hndl_mmngr), OSAL_RETURN_OK) << "pre-process failed";
    EXPECT_NE(hndl_mmngr, OSAL_MEMORY_MANAGER_HANDLE_INVALID);

    // Test09_003_005
    // @brief: abnormal case: alloc with hndl_mmngr is not created by MmngrOpen
    tmp_hndl_mmngr = (osal_memory_manager_handle_t)malloc (sizeof(st_osal_memory_manager_obj));
    EXPECT_NE(tmp_hndl_mmngr, NULL_PTR);
    EXPECT_EQ(R_OSAL_MmngrInitializeMemoryManagerObj(tmp_hndl_mmngr), OSAL_RETURN_OK);
    size = 64;
    alignment = 64;
    EXPECT_EQ(R_OSAL_MmngrAlloc(tmp_hndl_mmngr, size, alignment, &buffer_obj), OSAL_RETURN_HANDLE_NOT_SUPPORTED) << "Test09_003_005 failed";
    EXPECT_EQ(buffer_obj, OSAL_MEMORY_BUFFER_HANDLE_INVALID) << "Test09_003_005 failed";

    // post-process: close memory handle
    EXPECT_EQ(R_OSAL_MmngrClose(hndl_mmngr), OSAL_RETURN_OK) << "post-process failed";
    free(tmp_hndl_mmngr);
}
// [MmngrAlloc_TC_09_003_005]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrAlloc_TC_09_003_006 MemoryApiTest.MmngrAlloc_TC_09_003_006
 * @subsection MmngrAlloc_TC_09_003_006_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrAlloc_TC_09_003_006_tci Test Case ID
 * MmngrAlloc_S0_BA_TC_09_003_006
 * @subsection MmngrAlloc_TC_09_003_006_rr Related Requirement(s)
 * \#276410, \#276732
 * @subsection MmngrAlloc_TC_09_003_006_pp Prerequisite/Precondition
 * OSAL is initialized.
 * @subsection MmngrAlloc_TC_09_003_006_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrAlloc and R_OSAL_MmngrDealloc with abnormal condition in OSAL_MMNGR_ALLOC_MODE_STACK mode.
 * - pre-process: open new memory manager
 * - Test09_003_006: allocate buffer which size is not aligned.
 * - post-process: close memory handle
 * @subsection MmngrAlloc_TC_09_003_006_tpts Test Procedure/Test Steps
 * -# Open the handle using R_OSAL_MmngrOpen with config:
 *      - config.max_allowed_allocations = 4
 *      - config.max_registered_monitors_cbs = 0
 *      - config.memory_limit = 10MB
 *      - config.mode = OSAL_MMNGR_ALLOC_MODE_STACK
 * -# Call R_OSAL_MmngrAlloc with "size" is 129 byte.
 * -# Call R_OSAL_MmngrClose to close the handle.
 * @subsection MmngrAlloc_TC_09_003_006_ereb Expected Result/Behavior
 * -# The return of R_OSAL_MmngrOpen is OSAL_RETURN_OK.<br>
 * The return handle is not OSAL_MEMORY_MANAGER_HANDLE_INVALID.
 * -# The return value of R_OSAL_MmngrAlloc is OSAL_RETURN_CONF.<br>
 * the return buffer is OSAL_MEMORY_BUFFER_HANDLE_INVALID.
 * -# The return value of R_OSAL_MmngrClose is OSAL_RETURN_OK.
 * @subsection MmngrAlloc_TC_09_003_006_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrAlloc_TC_09_003_006
 */
// [MmngrAlloc_TC_09_003_006]
TEST_F(MemoryApiTest, MmngrAlloc_TC_09_003_006)
{
    // pre-process: open memory manager
    config.max_allowed_allocations     = 4;
    config.max_registered_monitors_cbs = 0;
    config.memory_limit = 10 * 1024 * 1024;
    config.mode = OSAL_MMNGR_ALLOC_MODE_STACK;
    EXPECT_EQ(R_OSAL_MmngrOpen(&config, &hndl_mmngr), OSAL_RETURN_OK) << "pre-process failed";
    EXPECT_NE(hndl_mmngr, OSAL_MEMORY_MANAGER_HANDLE_INVALID);

    // Test09_003_006
    // @brief: abnormal case: size is not aligned
    size = 129;
    alignment = 64;
    EXPECT_EQ(R_OSAL_MmngrAlloc(hndl_mmngr, size, alignment, &buffer_obj), OSAL_RETURN_CONF) << "Test09_003_006 failed";
    EXPECT_EQ(buffer_obj, OSAL_MEMORY_BUFFER_HANDLE_INVALID) << "Test09_003_006 failed";

    // post-process: close memory handle
    EXPECT_EQ(R_OSAL_MmngrClose(hndl_mmngr), OSAL_RETURN_OK) << "post-process failed";
}
// [MmngrAlloc_TC_09_003_006]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrAlloc_TC_09_003_007 MemoryApiTest.MmngrAlloc_TC_09_003_007
 * @subsection MmngrAlloc_TC_09_003_007_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrAlloc_TC_09_003_007_tci Test Case ID
 * MmngrAlloc_S0_BA_TC_09_003_007
 * @subsection MmngrAlloc_TC_09_003_007_rr Related Requirement(s)
 * \#276410, \#276732
 * @subsection MmngrAlloc_TC_09_003_007_pp Prerequisite/Precondition
 * OSAL is initialized.
 * @subsection MmngrAlloc_TC_09_003_007_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrAlloc and R_OSAL_MmngrDealloc with abnormal condition in OSAL_MMNGR_ALLOC_MODE_STACK mode.
 * - pre-process: open new memory manager
 * - Test09_003_007: allocate buffer which alignment is not aligned by 64.
 * - post-process: close memory handle
 * @subsection MmngrAlloc_TC_09_003_007_tpts Test Procedure/Test Steps
 * -# Open the handle using R_OSAL_MmngrOpen with config:
 *      - config.max_allowed_allocations = 4
 *      - config.max_registered_monitors_cbs = 0
 *      - config.memory_limit = 10MB
 *      - config.mode = OSAL_MMNGR_ALLOC_MODE_STACK
 * -# Call R_OSAL_MmngrAlloc with "alignment" is 67 byte.
 * -# Call R_OSAL_MmngrClose to close the handle.
 * @subsection MmngrAlloc_TC_09_003_007_ereb Expected Result/Behavior
 * -# The return of R_OSAL_MmngrOpen is OSAL_RETURN_OK.<br>
 * The return handle is not OSAL_MEMORY_MANAGER_HANDLE_INVALID.
 * -# The return value of R_OSAL_MmngrAlloc is OSAL_RETURN_CONF.<br>
 * The return buffer is OSAL_MEMORY_BUFFER_HANDLE_INVALID.
 * -# The return value of R_OSAL_MmngrClose is OSAL_RETURN_OK.
 * @subsection MmngrAlloc_TC_09_003_007_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrAlloc_TC_09_003_007
 */
// [MmngrAlloc_TC_09_003_007]
TEST_F(MemoryApiTest, MmngrAlloc_TC_09_003_007)
{
    // pre-process: open memory manager
    config.max_allowed_allocations     = 4;
    config.max_registered_monitors_cbs = 0;
    config.memory_limit = 10 * 1024 * 1024;
    config.mode = OSAL_MMNGR_ALLOC_MODE_STACK;
    EXPECT_EQ(R_OSAL_MmngrOpen(&config, &hndl_mmngr), OSAL_RETURN_OK) << "pre-process failed";
    EXPECT_NE(hndl_mmngr, OSAL_MEMORY_MANAGER_HANDLE_INVALID);

    // Test09_003_007
    // @brief: abnormal case: the alignment is invalid (not aligned by 64)
    size = 1024;
    alignment = 67;
    EXPECT_EQ(R_OSAL_MmngrAlloc(hndl_mmngr, size, alignment, &buffer_obj), OSAL_RETURN_CONF) << "Test09_003_007 failed";
    EXPECT_EQ(buffer_obj, OSAL_MEMORY_BUFFER_HANDLE_INVALID) << "Test09_003_007 failed";

    // post-process: close memory handle
    EXPECT_EQ(R_OSAL_MmngrClose(hndl_mmngr), OSAL_RETURN_OK) << "post-process failed";
}
// [MmngrAlloc_TC_09_003_007]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrAlloc_TC_09_003_008 MemoryApiTest.MmngrAlloc_TC_09_003_008
 * @subsection MmngrAlloc_TC_09_003_008_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrAlloc_TC_09_003_008_tci Test Case ID
 * MmngrAlloc_S0_A_TC_09_003_008
 * @subsection MmngrAlloc_TC_09_003_008_rr Related Requirement(s)
 * \#276410, \#276732
 * @subsection MmngrAlloc_TC_09_003_008_pp Prerequisite/Precondition
 * OSAL is initialized.
 * @subsection MmngrAlloc_TC_09_003_008_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrAlloc and R_OSAL_MmngrDealloc with abnormal condition in OSAL_MMNGR_ALLOC_MODE_STACK mode.
 * - pre-process: open new memory manager
 * - Test09_003_008: alloc with buffer_obj is invalid (NULL).
 * - post-process: close memory handle
 * @subsection MmngrAlloc_TC_09_003_008_tpts Test Procedure/Test Steps
 * -# Open the handle using R_OSAL_MmngrOpen with config:
 *      - config.max_allowed_allocations = 4
 *      - config.max_registered_monitors_cbs = 0
 *      - config.memory_limit = 10MB
 *      - config.mode = OSAL_MMNGR_ALLOC_MODE_STACK
 * -# Call R_OSAL_MmngrAlloc with "buffer_obj" is NULL.
 * -# Call R_OSAL_MmngrClose to close the handle.
 * @subsection MmngrAlloc_TC_09_003_008_ereb Expected Result/Behavior
 * -# The return of R_OSAL_MmngrOpen is OSAL_RETURN_OK.<br>
 * The return handle is not OSAL_MEMORY_MANAGER_HANDLE_INVALID.
 * -# The return value of R_OSAL_MmngrAlloc is OSAL_RETURN_PAR.
 * -# The return value of R_OSAL_MmngrClose is OSAL_RETURN_OK.
 * @subsection MmngrAlloc_TC_09_003_008_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrAlloc_TC_09_003_008
 */
// [MmngrAlloc_TC_09_003_008]
TEST_F(MemoryApiTest, MmngrAlloc_TC_09_003_008)
{
    osal_memory_buffer_handle_t* p_buffer_obj = NULL;

    // pre-process: open memory manager
    config.max_allowed_allocations     = 4;
    config.max_registered_monitors_cbs = 0;
    config.memory_limit = 10 * 1024 * 1024;
    config.mode = OSAL_MMNGR_ALLOC_MODE_STACK;
    EXPECT_EQ(R_OSAL_MmngrOpen(&config, &hndl_mmngr), OSAL_RETURN_OK) << "pre-process failed";
    EXPECT_NE(hndl_mmngr, OSAL_MEMORY_MANAGER_HANDLE_INVALID);

    // @brief: abnormal case: alloc with buffer_obj is invalid (NULL)
    // Test09_003_008
    size = 64;
    alignment = 64;
    EXPECT_EQ(R_OSAL_MmngrAlloc(hndl_mmngr, size, alignment, p_buffer_obj), OSAL_RETURN_PAR) << "Test09_003_008 failed";

    // post-process: close memory handle
    EXPECT_EQ(R_OSAL_MmngrClose(hndl_mmngr), OSAL_RETURN_OK) << "post-process failed";
}
// [MmngrAlloc_TC_09_003_008]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrAlloc_TC_09_003_009 MemoryApiTest.MmngrAlloc_TC_09_003_009
 * @subsection MmngrAlloc_TC_09_003_009_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrAlloc_TC_09_003_009_tci Test Case ID
 * MmngrAlloc_S2_A_TC_09_003_009
 * @subsection MmngrAlloc_TC_09_003_009_rr Related Requirement(s)
 * \#276410, \#276732
 * @subsection MmngrAlloc_TC_09_003_009_pp Prerequisite/Precondition
 * OSAL is initialized.
 * @subsection MmngrAlloc_TC_09_003_009_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrAlloc and R_OSAL_MmngrDealloc with abnormal condition in OSAL_MMNGR_ALLOC_MODE_STACK mode.
 * - Test09_003_009: alloc with handle has already closed.
 * @subsection MmngrAlloc_TC_09_003_009_tpts Test Procedure/Test Steps
 * -# Open the handle using R_OSAL_MmngrOpen with config:
 *      - config.max_allowed_allocations = 4
 *      - config.max_registered_monitors_cbs = 0
 *      - config.memory_limit = 10MB
 *      - config.mode = OSAL_MMNGR_ALLOC_MODE_STACK
 * -# Call R_OSAL_MmngrClose to close the handle.
 * -# Call R_OSAL_MmngrAlloc with all valid parameters.
 * @subsection MmngrAlloc_TC_09_003_009_ereb Expected Result/Behavior
 * -# The return of R_OSAL_MmngrOpen is OSAL_RETURN_OK.<br>
 * The return handle is not OSAL_MEMORY_MANAGER_HANDLE_INVALID.
 * -# The return value of R_OSAL_MmngrClose is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrAlloc is OSAL_RETURN_HANDLE_NOT_SUPPORTED.<br>
 * The return buffer is OSAL_MEMORY_BUFFER_HANDLE_INVALID.
 * @subsection MmngrAlloc_TC_09_003_009_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrAlloc_TC_09_003_009
 */
// [MmngrAlloc_TC_09_003_009]
TEST_F(MemoryApiTest, MmngrAlloc_TC_09_003_009)
{
    // Test09_003_009
    // @brief: abnormal case: alloc with hndl_mmngr has already closed
    config.max_allowed_allocations     = 4;
    config.max_registered_monitors_cbs = 0;
    config.memory_limit = 10 * 1024 * 1024;
    config.mode = OSAL_MMNGR_ALLOC_MODE_STACK;
    EXPECT_EQ(R_OSAL_MmngrOpen(&config, &hndl_mmngr), OSAL_RETURN_OK) << "Test09_003_009 failed";
    EXPECT_NE(hndl_mmngr, OSAL_MEMORY_MANAGER_HANDLE_INVALID) << "Test09_003_009 failed";
    EXPECT_EQ(R_OSAL_MmngrClose(hndl_mmngr), OSAL_RETURN_OK) << "Test09_003_009 failed";

    size = 64;
    alignment = 64;
    EXPECT_EQ(R_OSAL_MmngrAlloc(hndl_mmngr, size, alignment, &buffer_obj), OSAL_RETURN_HANDLE_NOT_SUPPORTED) << "Test09_003_009 failed";
    EXPECT_EQ(buffer_obj, OSAL_MEMORY_BUFFER_HANDLE_INVALID) << "Test09_003_009 failed";
}
// [MmngrAlloc_TC_09_003_009]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrAlloc_TC_09_003_010 MemoryApiTest.MmngrAlloc_TC_09_003_010
 * @subsection MmngrAlloc_TC_09_003_010_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrAlloc_TC_09_003_010_tci Test Case ID
 * MmngrAlloc_S2_A_TC_09_003_010
 * @subsection MmngrAlloc_TC_09_003_010_rr Related Requirement(s)
 * \#276410, \#276732
 * @subsection MmngrAlloc_TC_09_003_010_pp Prerequisite/Precondition
 * OSAL is initialized.
 * @subsection MmngrAlloc_TC_09_003_010_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrAlloc and R_OSAL_MmngrDealloc with abnormal condition in OSAL_MMNGR_ALLOC_MODE_STACK mode.
 * - pre-process: open new memory manager
 * - Test09_003_010: the number of allocation is exceed the max_allowed_allocations is 4.
 * - post-process: close memory handle
 * @subsection MmngrAlloc_TC_09_003_010_tpts Test Procedure/Test Steps
 * -# Open the handle using R_OSAL_MmngrOpen with config:
 *      - config.max_allowed_allocations = 4
 *      - config.max_registered_monitors_cbs = 0
 *      - config.memory_limit = 10MB
 *      - config.mode = OSAL_MMNGR_ALLOC_MODE_STACK
 * -# Call R_OSAL_MmngrAlloc to allocate 4 buffers with valid paramater.
 * -# Call R_OSAL_MmngrAlloc to allocate 5th buffer with same configuration as step above.
 * -# Call R_OSAL_MmngrDealloc to deallocate 4 allocated buffer.
 * -# Call R_OSAL_MmngrClose to close the handle.
 * @subsection MmngrAlloc_TC_09_003_010_ereb Expected Result/Behavior
 * -# The return of R_OSAL_MmngrOpen is OSAL_RETURN_OK.<br>
 * The return handle is not OSAL_MEMORY_MANAGER_HANDLE_INVALID.
 * -# The return value of first 4 times call R_OSAL_MmngrAlloc is OSAL_RETURN_OK.<br>
 * The return of 4 buffer is not OSAL_MEMORY_BUFFER_HANDLE_INVALID.
 * -# The return value of the 5th call R_OSAL_MmngrAlloc is OSAL_RETURN_PROHIBITED. <br>
 * -# The return value of 4 times R_OSAL_MmngrDealloc is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrClose is OSAL_RETURN_OK.
 * @subsection MmngrAlloc_TC_09_003_010_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrAlloc_TC_09_003_010
 */
// [MmngrAlloc_TC_09_003_010]
TEST_F(MemoryApiTest, MmngrAlloc_TC_09_003_010)
{
    osal_memory_buffer_handle_t  buffer_obj_array[5]
        = {OSAL_MEMORY_BUFFER_HANDLE_INVALID, OSAL_MEMORY_BUFFER_HANDLE_INVALID,
           OSAL_MEMORY_BUFFER_HANDLE_INVALID, OSAL_MEMORY_BUFFER_HANDLE_INVALID,
           OSAL_MEMORY_BUFFER_HANDLE_INVALID};

    // pre-process: open memory manager
    config.max_allowed_allocations     = 4;
    config.max_registered_monitors_cbs = 0;
    config.memory_limit = 10 * 1024 * 1024;
    config.mode = OSAL_MMNGR_ALLOC_MODE_STACK;
    EXPECT_EQ(R_OSAL_MmngrOpen(&config, &hndl_mmngr), OSAL_RETURN_OK) << "pre-process failed";
    EXPECT_NE(hndl_mmngr, OSAL_MEMORY_MANAGER_HANDLE_INVALID);

    // Test09_003_010
    // @brief: abnormal case: call R_OSAL_MmngrAlloc 5 times but config.max_allowed_allocations is 4
    size = 64;
    alignment = 64;
    EXPECT_EQ(R_OSAL_MmngrAlloc(hndl_mmngr, size, alignment, buffer_obj_array), OSAL_RETURN_OK) << "Test09_003_010 failed";
    EXPECT_NE(buffer_obj_array[0], OSAL_MEMORY_BUFFER_HANDLE_INVALID) << "Test09_003_010 failed";
    EXPECT_EQ(R_OSAL_MmngrAlloc(hndl_mmngr, size, alignment, buffer_obj_array + 1), OSAL_RETURN_OK) << "Test09_003_010 failed";
    EXPECT_NE(buffer_obj_array[1], OSAL_MEMORY_BUFFER_HANDLE_INVALID) << "Test09_003_010 failed";
    EXPECT_EQ(R_OSAL_MmngrAlloc(hndl_mmngr, size, alignment, buffer_obj_array + 2), OSAL_RETURN_OK) << "Test09_003_010 failed";
    EXPECT_NE(buffer_obj_array[2], OSAL_MEMORY_BUFFER_HANDLE_INVALID) << "Test09_003_010 failed";
    EXPECT_EQ(R_OSAL_MmngrAlloc(hndl_mmngr, size, alignment, buffer_obj_array + 3), OSAL_RETURN_OK) << "Test09_003_010 failed";
    EXPECT_NE(buffer_obj_array[3], OSAL_MEMORY_BUFFER_HANDLE_INVALID) << "Test09_003_010 failed";
    EXPECT_EQ(R_OSAL_MmngrAlloc(hndl_mmngr, size, alignment, buffer_obj_array + 4), OSAL_RETURN_PROHIBITED) << "Test09_003_010 failed";
    EXPECT_EQ(R_OSAL_MmngrDealloc(hndl_mmngr, buffer_obj_array[3]), OSAL_RETURN_OK) << "Test09_003_010 failed";
    EXPECT_EQ(R_OSAL_MmngrDealloc(hndl_mmngr, buffer_obj_array[2]), OSAL_RETURN_OK) << "Test09_003_010 failed";
    EXPECT_EQ(R_OSAL_MmngrDealloc(hndl_mmngr, buffer_obj_array[1]), OSAL_RETURN_OK) << "Test09_003_010 failed";
    EXPECT_EQ(R_OSAL_MmngrDealloc(hndl_mmngr, buffer_obj_array[0]), OSAL_RETURN_OK) << "Test09_003_010 failed";

    // post-process: close memory handle
    EXPECT_EQ(R_OSAL_MmngrClose(hndl_mmngr), OSAL_RETURN_OK) << "post-process failed";
}
// [MmngrAlloc_TC_09_003_010]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrAlloc_TC_09_003_011 MemoryApiTest.MmngrAlloc_TC_09_003_011
 * @subsection MmngrAlloc_TC_09_003_011_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrAlloc_TC_09_003_011_tci Test Case ID
 * MmngrAlloc_S0_A_TC_09_003_011
 * @subsection MmngrAlloc_TC_09_003_011_rr Related Requirement(s)
 * \#276410, \#276732
 * @subsection MmngrAlloc_TC_09_003_011_pp Prerequisite/Precondition
 * OSAL is initialized.
 * @subsection MmngrAlloc_TC_09_003_011_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrAlloc and R_OSAL_MmngrDealloc with abnormal condition in OSAL_MMNGR_ALLOC_MODE_STACK mode.
 * - pre-process: open new memory manager
 * - Test09_003_011: allocate buffer which the input size is bigger than memory limit.
 * - post-process: close memory handle
 * @subsection MmngrAlloc_TC_09_003_011_tpts Test Procedure/Test Steps
 * -# Open the handle using R_OSAL_MmngrOpen with config:
 *      - config.max_allowed_allocations = 4
 *      - config.max_registered_monitors_cbs = 0
 *      - config.memory_limit = 10MB
 *      - config.mode = OSAL_MMNGR_ALLOC_MODE_STACK
 * -# Call R_OSAL_MmngrAlloc with input "size" is 11MB.
 * -# Call R_OSAL_MmngrClose to close the handle.
 * @subsection MmngrAlloc_TC_09_003_011_ereb Expected Result/Behavior
 * -# The return of R_OSAL_MmngrOpen is OSAL_RETURN_OK.<br>
 * The return handle is not OSAL_MEMORY_MANAGER_HANDLE_INVALID.
 * -# The return value of R_OSAL_MmngrAlloc is OSAL_RETURN_CONF.<br>
 * The return buffer is OSAL_MEMORY_BUFFER_HANDLE_INVALID.
 * -# The return value of R_OSAL_MmngrClose is OSAL_RETURN_OK.
 * @subsection MmngrAlloc_TC_09_003_011_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrAlloc_TC_09_003_011
 */
// [MmngrAlloc_TC_09_003_011]
TEST_F(MemoryApiTest, MmngrAlloc_TC_09_003_011)
{
    // pre-process: open memory manager
    config.max_allowed_allocations     = 4;
    config.max_registered_monitors_cbs = 0;
    config.memory_limit = 10 * 1024 * 1024;
    config.mode = OSAL_MMNGR_ALLOC_MODE_STACK;
    EXPECT_EQ(R_OSAL_MmngrOpen(&config, &hndl_mmngr), OSAL_RETURN_OK) << "pre-process failed";
    EXPECT_NE(hndl_mmngr, OSAL_MEMORY_MANAGER_HANDLE_INVALID);

    // Test09_003_011
    // @brief: abnormal case: size is bigger than memory_limit
    size = 11 * 1024 * 1024;
    alignment = 64;
    buffer_obj = OSAL_MEMORY_BUFFER_HANDLE_INVALID;
    EXPECT_EQ(R_OSAL_MmngrAlloc(hndl_mmngr, size, alignment, &buffer_obj), OSAL_RETURN_CONF) << "Test09_003_011 failed";
    EXPECT_EQ(buffer_obj, OSAL_MEMORY_BUFFER_HANDLE_INVALID) << "Test09_003_011 failed";

    // post-process: close memory handle
    EXPECT_EQ(R_OSAL_MmngrClose(hndl_mmngr), OSAL_RETURN_OK) << "post-process failed";
}
// [MmngrAlloc_TC_09_003_011]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrAlloc_TC_09_003_012 MemoryApiTest.MmngrAlloc_TC_09_003_012
 * @subsection MmngrAlloc_TC_09_003_012_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrAlloc_TC_09_003_012_tci Test Case ID
 * MmngrAlloc_S3_N_TC_09_003_012
 * @subsection MmngrAlloc_TC_09_003_012_rr Related Requirement(s)
 * \#276402, \#276410, \#276732
 * @subsection MmngrAlloc_TC_09_003_012_pp Prerequisite/Precondition
 * OSAL is initialized.
 * @subsection MmngrAlloc_TC_09_003_012_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrAlloc and R_OSAL_MmngrDealloc with normal condition in OSAL_MMNGR_ALLOC_MODE_FREE_LIST mode.
 * - pre-process: Open new memory manager
 * - Test09_003_012: alloc with all valid parameters.
 * - post-process: close memory manager
 * @subsection MmngrAlloc_TC_09_003_012_tpts Test Procedure/Test Steps
 * -# Open the handle using R_OSAL_MmngrOpen with config:
 *      - config.max_allowed_allocations = 4
 *      - config.max_registered_monitors_cbs = 0
 *      - config.memory_limit = 10MB
 *      - config.mode = OSAL_MMNGR_ALLOC_MODE_FREE_LIST
 * -# Call R_OSAL_MmngrAlloc with "size" is 128 byte and the "alignment" is 128 byte.
 * -# Call R_OSAL_MmngrDealloc to deallocate buffer above
 * -# Call R_OSAL_MmngrClose to close the handle.
 * @subsection MmngrAlloc_TC_09_003_012_ereb Expected Result/Behavior
 * -# The return of R_OSAL_MmngrOpen is OSAL_RETURN_OK.<br>
 * The return handle is not OSAL_MEMORY_MANAGER_HANDLE_INVALID.
 * -# The return value of R_OSAL_MmngrAlloc is OSAL_RETURN_OK.<br>
 * The return buffer is not OSAL_MEMORY_BUFFER_HANDLE_INVALID.
 * -# The return value of R_OSAL_MmngrDealloc is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrClose is OSAL_RETURN_OK.
 * @subsection MmngrAlloc_TC_09_003_012_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrAlloc_TC_09_003_012
 */
// [MmngrAlloc_TC_09_003_012]
TEST_F(MemoryApiTest, MmngrAlloc_TC_09_003_012)
{
    //pre-process: open new memory manager
    config.max_allowed_allocations     = 4;
    config.max_registered_monitors_cbs = 0;
    config.memory_limit = 10 * 1024 * 1024;
    config.mode = OSAL_MMNGR_ALLOC_MODE_FREE_LIST;
    EXPECT_EQ(R_OSAL_MmngrOpen(&config, &hndl_mmngr), OSAL_RETURN_OK) << "pre-process failed";
    EXPECT_NE(hndl_mmngr, OSAL_MEMORY_MANAGER_HANDLE_INVALID) << "pre-process failed";

    // @brief: normal case: alloc with all valid argument
    // Test09_003_012
    size = 128;
    alignment = 128;
    EXPECT_EQ(R_OSAL_MmngrAlloc(hndl_mmngr, size, alignment, &buffer_obj), OSAL_RETURN_OK) << "Test09_003_012 failed";
    EXPECT_NE(buffer_obj, OSAL_MEMORY_BUFFER_HANDLE_INVALID) << "Test09_003_012 failed";
    EXPECT_EQ(R_OSAL_MmngrDealloc(hndl_mmngr, buffer_obj), OSAL_RETURN_OK) << "Test09_003_012 failed";

    //post-process: close memory manager
    EXPECT_EQ(R_OSAL_MmngrClose(hndl_mmngr), OSAL_RETURN_OK) << "post-process failed";
}
// [MmngrAlloc_TC_09_003_012]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrAlloc_TC_09_003_013 MemoryApiTest.MmngrAlloc_TC_09_003_013
 * @subsection MmngrAlloc_TC_09_003_013_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrAlloc_TC_09_003_013_tci Test Case ID
 * MmngrAlloc_S2_A_TC_09_003_013
 * @subsection MmngrAlloc_TC_09_003_013_rr Related Requirement(s)
 * \#276410, \#276732
 * @subsection MmngrAlloc_TC_09_003_013_pp Prerequisite/Precondition
 * OSAL is initialized.
 * @subsection MmngrAlloc_TC_09_003_013_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrAlloc and R_OSAL_MmngrDealloc with abnormal condition in OSAL_MMNGR_ALLOC_MODE_FREE_LIST mode.
 * - pre-process: open new memory manager
 * - Test09_003_013: confirm memory external fragmentation behavior
 * - post-process: close memory handle
 * @subsection MmngrAlloc_TC_09_003_013_tpts Test Procedure/Test Steps
 * -# Open the handle using R_OSAL_MmngrOpen with config:
 *      - config.max_allowed_allocations = 4
 *      - config.max_registered_monitors_cbs = 0
 *      - config.memory_limit = 10MB
 *      - config.mode = OSAL_MMNGR_ALLOC_MODE_FREE_LIST
 * -# Call R_OSAL_MmngrAlloc to allocate 1st buffer with size is 4MB and align is 64.
 * -# Call R_OSAL_MmngrAlloc to allocate 2nd buffer with size is 4MB and align is 64.
 * -# Call R_OSAL_MmngrDealloc to deallocate the 1st buffer.
 *      - 6MB remaining free
 * -# Call R_OSAL_MmngrAlloc to allocate 3rd buffer with size is 5MB and align is 64.
 * -# Call R_OSAL_MmngrDealloc to deallocate the 2nd buffer.
 * -# Call R_OSAL_MmngrClose to close the handle.
 * @subsection MmngrAlloc_TC_09_003_013_ereb Expected Result/Behavior
 * -# The return of R_OSAL_MmngrOpen is OSAL_RETURN_OK.<br>
 * The return handle is not OSAL_MEMORY_MANAGER_HANDLE_INVALID.
 * -# The return value of R_OSAL_MmngrAlloc for the 1st buffer is OSAL_RETURN_OK
 * -# The return value of R_OSAL_MmngrAlloc for the 2nd buffer is OSAL_RETURN_OK
 * -# The return value of R_OSAL_MmngrDealloc for the 1st buffer is OSAL_RETURN_OK
 * -# The return value of R_OSAL_MmngrAlloc for the 3rd buffer is OSAL_RETURN_MEM
 * -# The return value of R_OSAL_MmngrDealloc for the 2nd buffer is OSAL_RETURN_OK
 * -# The return value of R_OSAL_MmngrClose is OSAL_RETURN_OK.
 * @subsection MmngrAlloc_TC_09_003_013_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrAlloc_TC_09_003_013
 */
// [MmngrAlloc_TC_09_003_013]
TEST_F(MemoryApiTest, MmngrAlloc_TC_09_003_013)
{
    osal_memory_buffer_handle_t  buffer_obj1 = OSAL_MEMORY_BUFFER_HANDLE_INVALID;

    // pre-process: open memory manager
    config.max_allowed_allocations     = 4;
    config.max_registered_monitors_cbs = 0;
    config.memory_limit = 10 * 1024 * 1024;
    config.mode = OSAL_MMNGR_ALLOC_MODE_FREE_LIST;
    EXPECT_EQ(R_OSAL_MmngrOpen(&config, &hndl_mmngr), OSAL_RETURN_OK) << "pre-process failed";
    EXPECT_NE(hndl_mmngr, OSAL_MEMORY_MANAGER_HANDLE_INVALID);

    // Test09_003_013
    // @brief: abnormal case: confirm memory external fragmentation behavior
    size = 4 * 1024 * 1024;
    alignment = 64;
    EXPECT_EQ(R_OSAL_MmngrAlloc(hndl_mmngr, size, alignment, &buffer_obj), OSAL_RETURN_OK) << "Test09_003_013 failed";
    EXPECT_NE(buffer_obj, OSAL_MEMORY_BUFFER_HANDLE_INVALID) << "Test09_003_013 failed";
    size = 4 * 1024 * 1024;
    EXPECT_EQ(R_OSAL_MmngrAlloc(hndl_mmngr, size, alignment, &buffer_obj1), OSAL_RETURN_OK) << "Test09_003_013 failed";
    EXPECT_NE(buffer_obj1, OSAL_MEMORY_BUFFER_HANDLE_INVALID) << "Test09_003_013 failed";
    EXPECT_EQ(R_OSAL_MmngrDealloc(hndl_mmngr, buffer_obj), OSAL_RETURN_OK) << "Test09_003_013 failed";
    buffer_obj = OSAL_MEMORY_BUFFER_HANDLE_INVALID;
    size = 5 * 1024 * 1024;
    EXPECT_EQ(R_OSAL_MmngrAlloc(hndl_mmngr, size, alignment, &buffer_obj), OSAL_RETURN_MEM) << "Test09_003_013 failed" 
        <<R_OSAL_MmngrDealloc(hndl_mmngr, buffer_obj); //memory external fragmentation ?
    EXPECT_EQ(buffer_obj, OSAL_MEMORY_BUFFER_HANDLE_INVALID) << "Test09_003_013 failed";
    EXPECT_EQ(R_OSAL_MmngrDealloc(hndl_mmngr, buffer_obj1), OSAL_RETURN_OK) << "Test09_003_013 failed";

    //post-process: close memory manager
    EXPECT_EQ(R_OSAL_MmngrClose(hndl_mmngr), OSAL_RETURN_OK) << "post-process failed";
}
// [MmngrAlloc_TC_09_003_013]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrAlloc_TC_09_003_014 MemoryApiTest.MmngrAlloc_TC_09_003_014
 * @subsection MmngrAlloc_TC_09_003_014_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrAlloc_TC_09_003_014_tci Test Case ID
 * MmngrAlloc_S2_A_TC_09_003_014
 * @subsection MmngrAlloc_TC_09_003_014_rr Related Requirement(s)
 * \#276410, \#276732
 * @subsection MmngrAlloc_TC_09_003_014_pp Prerequisite/Precondition
 * OSAL is initialized.
 * @subsection MmngrAlloc_TC_09_003_014_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrAlloc and R_OSAL_MmngrDealloc with abnormal condition in OSAL_MMNGR_ALLOC_MODE_STACK mode.
 * - pre-process: open new memory manager
 * - Test09_003_014: confirm the behavior of R_OSAL_MmngrAlloc when out of memory.
 * - post-process: close opened memory handle
 * @subsection MmngrAlloc_TC_09_003_014_tpts Test Procedure/Test Steps
 * -# Open the handle using R_OSAL_MmngrOpen with config:
 *      - config.max_allowed_allocations = 4
 *      - config.max_registered_monitors_cbs = 0
 *      - config.memory_limit = 10MB
 *      - config.mode = OSAL_MMNGR_ALLOC_MODE_STACK
 * -# Call R_OSAL_MmngrAlloc to allocate 1st buffer with size is 4MB and align is 64.
 * -# Call R_OSAL_MmngrAlloc to allocate 2nd buffer with size is 4MB and align is 64.
 * -# Call R_OSAL_MmngrAlloc to allocate 3rd buffer with size is 4MB and align is 64.
 * -# Call R_OSAL_MmngrDealloc to deallocate the 2nd buffer.
 * -# Call R_OSAL_MmngrDealloc to deallocate the 1st buffer.
 * -# Call R_OSAL_MmngrClose to close the handle.
 * @subsection MmngrAlloc_TC_09_003_014_ereb Expected Result/Behavior
 * -# The return of R_OSAL_MmngrOpen is OSAL_RETURN_OK.<br>
 * The return handle is not OSAL_MEMORY_MANAGER_HANDLE_INVALID.
 * -# The return value of R_OSAL_MmngrAlloc for 1st buffer is OSAL_RETURN_OK.<br>
 * 2 return buffers is not OSAL_MEMORY_BUFFER_HANDLE_INVALID.
 * -# The return value of R_OSAL_MmngrAlloc for 2nd buffer is OSAL_RETURN_OK.<br>
 * 2 return buffers is not OSAL_MEMORY_BUFFER_HANDLE_INVALID.
 * -# The return value of R_OSAL_MmngrAlloc for 3rd buffer is OSAL_RETURN_MEM.<br>
 * -# The return value of R_OSAL_MmngrDealloc for 1st buffer is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrDealloc for 2nd buffer is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrClose is OSAL_RETURN_OK.
 * @subsection MmngrAlloc_TC_09_003_014_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrAlloc_TC_09_003_014
 */
// [MmngrAlloc_TC_09_003_014]
TEST_F(MemoryApiTest, MmngrAlloc_TC_09_003_014)
{
    osal_memory_buffer_handle_t  buffer_obj1 = OSAL_MEMORY_BUFFER_HANDLE_INVALID;
    osal_memory_buffer_handle_t  buffer_obj2 = OSAL_MEMORY_BUFFER_HANDLE_INVALID;
    osal_memory_buffer_handle_t  buffer_obj3 = OSAL_MEMORY_BUFFER_HANDLE_INVALID;

    // pre-process: open memory manager
    config.max_allowed_allocations     = 4;
    config.max_registered_monitors_cbs = 0;
    config.memory_limit = 10 * 1024 * 1024;
    config.mode = OSAL_MMNGR_ALLOC_MODE_STACK;
    EXPECT_EQ(R_OSAL_MmngrOpen(&config, &hndl_mmngr), OSAL_RETURN_OK) << "pre-process failed";
    EXPECT_NE(hndl_mmngr, OSAL_MEMORY_MANAGER_HANDLE_INVALID);

    // Test09_003_014
    // @brief: abnormal case: confirm running out of memory:
    size = 4 * 1024 * 1024;
    alignment = 64;
    EXPECT_EQ(R_OSAL_MmngrAlloc(hndl_mmngr, size, alignment, &buffer_obj1), OSAL_RETURN_OK) << "Test09_003_014 failed";
    EXPECT_NE(buffer_obj1, OSAL_MEMORY_BUFFER_HANDLE_INVALID) << "Test09_003_014 failed";
    EXPECT_EQ(R_OSAL_MmngrAlloc(hndl_mmngr, size, alignment, &buffer_obj2), OSAL_RETURN_OK) << "Test09_003_014 failed";
    EXPECT_NE(buffer_obj2, OSAL_MEMORY_BUFFER_HANDLE_INVALID) << "Test09_003_014 failed";
    EXPECT_EQ(R_OSAL_MmngrAlloc(hndl_mmngr, size, alignment, &buffer_obj3), OSAL_RETURN_MEM) << "Test09_003_014 failed"
        << R_OSAL_MmngrDealloc(hndl_mmngr, buffer_obj);
    EXPECT_EQ(R_OSAL_MmngrDealloc(hndl_mmngr, buffer_obj2), OSAL_RETURN_OK) << "Test09_003_014 failed";
    EXPECT_EQ(R_OSAL_MmngrDealloc(hndl_mmngr, buffer_obj1), OSAL_RETURN_OK) << "Test09_003_014 failed";

    // post-process: close memory handle
    EXPECT_EQ(R_OSAL_MmngrClose(hndl_mmngr), OSAL_RETURN_OK) << "post-process failed";
}
// [MmngrAlloc_TC_09_003_014]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrAlloc_TC_09_003_015 MemoryApiTest.MmngrAlloc_TC_09_003_015
 * @subsection MmngrAlloc_TC_09_003_015_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrAlloc_TC_09_003_015_tci Test Case ID
 * MmngrAlloc_S3_N_TC_09_003_015
 * @subsection MmngrAlloc_TC_09_003_015_rr Related Requirement(s)
 * \#276402, \#276410, \#276732
 * @subsection MmngrAlloc_TC_09_003_015_pp Prerequisite/Precondition
 * OSAL is initialized.
 * @subsection MmngrAlloc_TC_09_003_015_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrAlloc and R_OSAL_MmngrDealloc with normal condition in OSAL_MMNGR_ALLOC_MODE_STACK_PROT mode.
 * - pre-process: Open new memory manager
 * - Test09_003_015: alloc with all valid parameters.
 * - post-process: close memory manager
 * @subsection MmngrAlloc_TC_09_003_015_tpts Test Procedure/Test Steps
 * -# Open the handle using R_OSAL_MmngrOpen with config:
 *      - config.max_allowed_allocations = 4
 *      - config.max_registered_monitors_cbs = 0
 *      - config.memory_limit = 10MB
 *      - config.mode = OSAL_MMNGR_ALLOC_MODE_STACK_PROT
 * -# Call R_OSAL_MmngrAlloc with "size" is 128 byte and the "alignment" is 128 byte.
 * -# Call R_OSAL_MmngrDealloc to deallocate buffer above
 * -# Call R_OSAL_MmngrClose to close the handle.
 * @subsection MmngrAlloc_TC_09_003_015_ereb Expected Result/Behavior
 * -# The return of R_OSAL_MmngrOpen is OSAL_RETURN_OK.<br>
 * The return handle is not OSAL_MEMORY_MANAGER_HANDLE_INVALID.
 * -# The return value of R_OSAL_MmngrAlloc is OSAL_RETURN_OK.<br>
 * The return buffer is not OSAL_MEMORY_BUFFER_HANDLE_INVALID.
 * -# The return value of R_OSAL_MmngrDealloc is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrClose is OSAL_RETURN_OK.
 * @subsection MmngrAlloc_TC_09_003_015_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrAlloc_TC_09_003_015
 */
// [MmngrAlloc_TC_09_003_015]
TEST_F(MemoryApiTest, MmngrAlloc_TC_09_003_015)
{
    //pre-process: open new memory manager
    config.max_allowed_allocations     = 4;
    config.max_registered_monitors_cbs = 0;
    config.memory_limit = 10 * 1024 * 1024;
    config.mode = OSAL_MMNGR_ALLOC_MODE_STACK_PROT;
    EXPECT_EQ(R_OSAL_MmngrOpen(&config, &hndl_mmngr), OSAL_RETURN_OK) << "pre-process failed";
    EXPECT_NE(hndl_mmngr, OSAL_MEMORY_MANAGER_HANDLE_INVALID) << "pre-process failed";

    // @brief: normal case: alloc with all valid argument
    // Test09_003_015
    size = 128;
    alignment = 128;
    EXPECT_EQ(R_OSAL_MmngrAlloc(hndl_mmngr, size, alignment, &buffer_obj), OSAL_RETURN_OK) << "Test09_003_015 failed";
    EXPECT_NE(buffer_obj, OSAL_MEMORY_BUFFER_HANDLE_INVALID) << "Test09_003_015 failed";
    EXPECT_EQ(R_OSAL_MmngrDealloc(hndl_mmngr, buffer_obj), OSAL_RETURN_OK) << "Test09_003_015 failed";

    //post-process: close memory manager
    EXPECT_EQ(R_OSAL_MmngrClose(hndl_mmngr), OSAL_RETURN_OK) << "post-process failed";
}
// [MmngrAlloc_TC_09_003_015]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrAlloc_TC_09_003_016 MemoryApiTest.MmngrAlloc_TC_09_003_016
 * @subsection MmngrAlloc_TC_09_003_016_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrAlloc_TC_09_003_016_tci Test Case ID
 * MmngrAlloc_S3_BN_TC_09_003_016
 * @subsection MmngrAlloc_TC_09_003_016_rr Related Requirement(s)
 * \#276410, \#276732
 * @subsection MmngrAlloc_TC_09_003_016_pp Prerequisite/Precondition
 * OSAL is initialized.
 * @subsection MmngrAlloc_TC_09_003_016_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrAlloc and R_OSAL_MmngrDealloc with normal condition in OSAL_MMNGR_ALLOC_MODE_STACK_PROT mode.
 * - pre-process: Open new memory manager
 * - Test09_003_016: size is equal to memory_limit(10MB).
 * - post-process: close memory manager
 * @subsection MmngrAlloc_TC_09_003_016_tpts Test Procedure/Test Steps
 * -# Open the handle using R_OSAL_MmngrOpen with config:
 *      - config.max_allowed_allocations = 4
 *      - config.max_registered_monitors_cbs = 0
 *      - config.memory_limit = 10MB
 *      - config.mode = OSAL_MMNGR_ALLOC_MODE_STACK_PROT
 * -# Call R_OSAL_MmngrAlloc with "size" is 10 * 1024 *1024 byte.
 * -# Call R_OSAL_MmngrDealloc to de-allocate the allocated buffer above
 * -# Call R_OSAL_MmngrClose to close the handle.
 * @subsection MmngrAlloc_TC_09_003_016_ereb Expected Result/Behavior
 * -# The return of R_OSAL_MmngrOpen is OSAL_RETURN_OK.<br>
 * The return handle is not OSAL_MEMORY_MANAGER_HANDLE_INVALID.
 * -# The return value of R_OSAL_MmngrAlloc is OSAL_RETURN_OK.<br>
 * The return buffer is not OSAL_MEMORY_BUFFER_HANDLE_INVALID.
 * -# The return value of R_OSAL_MmngrDealloc is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrClose is OSAL_RETURN_OK.
 * @subsection MmngrAlloc_TC_09_003_016_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrAlloc_TC_09_003_016
 */
// [MmngrAlloc_TC_09_003_016]
TEST_F(MemoryApiTest, MmngrAlloc_TC_09_003_016)
{
    //pre-process: open new memory manager
    config.max_allowed_allocations     = 4;
    config.max_registered_monitors_cbs = 0;
    config.memory_limit = 10 * 1024 * 1024;
    config.mode = OSAL_MMNGR_ALLOC_MODE_STACK_PROT;
    EXPECT_EQ(R_OSAL_MmngrOpen(&config, &hndl_mmngr), OSAL_RETURN_OK) << "pre-process failed";
    EXPECT_NE(hndl_mmngr, OSAL_MEMORY_MANAGER_HANDLE_INVALID) << "pre-process failed";

    // Test09_003_016
    // @brief: boundary normal case: size is equal to memory_limit (10MB)
    size = 10 * 1024 * 1024;
    alignment = 128;
    EXPECT_EQ(R_OSAL_MmngrAlloc(hndl_mmngr, size, alignment, &buffer_obj), OSAL_RETURN_OK) << "Test09_003_016 failed";
    EXPECT_NE(buffer_obj, OSAL_MEMORY_BUFFER_HANDLE_INVALID) << "Test09_003_016 failed";
    EXPECT_EQ(R_OSAL_MmngrDealloc(hndl_mmngr, buffer_obj), OSAL_RETURN_OK) << "Test09_003_016 failed";
    buffer_obj = OSAL_MEMORY_BUFFER_HANDLE_INVALID;

    //post-process: close memory manager
    EXPECT_EQ(R_OSAL_MmngrClose(hndl_mmngr), OSAL_RETURN_OK) << "post-process failed";
}
// [MmngrAlloc_TC_09_003_016]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrAlloc_TC_09_003_017 MemoryApiTest.MmngrAlloc_TC_09_003_017
 * @subsection MmngrAlloc_TC_09_003_017_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrAlloc_TC_09_003_017_tci Test Case ID
 * MmngrAlloc_S3_BN_TC_09_003_017
 * @subsection MmngrAlloc_TC_09_003_017_rr Related Requirement(s)
 * \#276410, \#276732
 * @subsection MmngrAlloc_TC_09_003_017_pp Prerequisite/Precondition
 * OSAL is initialized.
 * @subsection MmngrAlloc_TC_09_003_017_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrAlloc and R_OSAL_MmngrDealloc with normal condition in OSAL_MMNGR_ALLOC_MODE_STACK_PROT mode.
 * - pre-process: Open new memory manager
 * - Test09_003_017: alignment is 64 byte.
 * - post-process: close memory manager
 * @subsection MmngrAlloc_TC_09_003_017_tpts Test Procedure/Test Steps
 * -# Open the handle using R_OSAL_MmngrOpen with config:
 *      - config.max_allowed_allocations = 4
 *      - config.max_registered_monitors_cbs = 0
 *      - config.memory_limit = 10MB
 *      - config.mode = OSAL_MMNGR_ALLOC_MODE_STACK_PROT
 * -# Call R_OSAL_MmngrAlloc with "alignment" is 64 byte.
 * -# Call R_OSAL_MmngrDealloc to deallocate the allocated buffer above.
 * -# Call R_OSAL_MmngrClose to close the handle.
 * @subsection MmngrAlloc_TC_09_003_017_ereb Expected Result/Behavior
 * -# The return of R_OSAL_MmngrOpen is OSAL_RETURN_OK.<br>
 * The return handle is not OSAL_MEMORY_MANAGER_HANDLE_INVALID.
 * -# The return value of R_OSAL_MmngrAlloc is OSAL_RETURN_OK.<br>
 * The return buffer is not OSAL_MEMORY_BUFFER_HANDLE_INVALID.
 * -# The return value of R_OSAL_MmngrDealloc is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrClose is OSAL_RETURN_OK.
 * @subsection MmngrAlloc_TC_09_003_017_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrAlloc_TC_09_003_017
 */
// [MmngrAlloc_TC_09_003_017]
TEST_F(MemoryApiTest, MmngrAlloc_TC_09_003_017)
{
    //pre-process: open new memory manager
    config.max_allowed_allocations     = 4;
    config.max_registered_monitors_cbs = 0;
    config.memory_limit = 10 * 1024 * 1024;
    config.mode = OSAL_MMNGR_ALLOC_MODE_STACK_PROT;
    EXPECT_EQ(R_OSAL_MmngrOpen(&config, &hndl_mmngr), OSAL_RETURN_OK) << "pre-process failed";
    EXPECT_NE(hndl_mmngr, OSAL_MEMORY_MANAGER_HANDLE_INVALID) << "pre-process failed";

    // Test09_003_017
    // @brief: boundary normal case: alignment is 64 byte
    size = 1024;
    alignment = 64;
    EXPECT_EQ(R_OSAL_MmngrAlloc(hndl_mmngr, size, alignment, &buffer_obj), OSAL_RETURN_OK) << "Test09_003_017 failed";
    EXPECT_NE(buffer_obj, OSAL_MEMORY_BUFFER_HANDLE_INVALID) << "Test09_003_017 failed";
    EXPECT_EQ(R_OSAL_MmngrDealloc(hndl_mmngr, buffer_obj), OSAL_RETURN_OK) << "Test09_003_017 failed";
    buffer_obj = OSAL_MEMORY_BUFFER_HANDLE_INVALID;

    //post-process: close memory manager
    EXPECT_EQ(R_OSAL_MmngrClose(hndl_mmngr), OSAL_RETURN_OK) << "post-process failed";
}
// [MmngrAlloc_TC_09_003_017]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrAlloc_TC_09_003_018 MemoryApiTest.MmngrAlloc_TC_09_003_018
 * @subsection MmngrAlloc_TC_09_003_018_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrAlloc_TC_09_003_018_tci Test Case ID
 * MmngrAlloc_S0_BA_TC_09_003_018
 * @subsection MmngrAlloc_TC_09_003_018_rr Related Requirement(s)
 * \#276410, \#276732
 * @subsection MmngrAlloc_TC_09_003_018_pp Prerequisite/Precondition
 * OSAL is initialized.
 * @subsection MmngrAlloc_TC_09_003_018_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrAlloc and R_OSAL_MmngrDealloc with abnormal condition in OSAL_MMNGR_ALLOC_MODE_STACK_PROT mode.
 * - pre-process: open new memory manager
 * - Test09_003_018: allocate buffer which size is not aligned.
 * - post-process: close opened memory manager
 * @subsection MmngrAlloc_TC_09_003_018_tpts Test Procedure/Test Steps
 * -# Open the handle using R_OSAL_MmngrOpen with config:
 *      - config.max_allowed_allocations = 4
 *      - config.max_registered_monitors_cbs = 0
 *      - config.memory_limit = 10MB
 *      - config.mode = OSAL_MMNGR_ALLOC_MODE_STACK_PROT
 * -# Call R_OSAL_MmngrAlloc with "size" is 129 byte.
 * -# Call R_OSAL_MmngrClose to close the handle.
 * @subsection MmngrAlloc_TC_09_003_018_ereb Expected Result/Behavior
 * -# The return of R_OSAL_MmngrOpen is OSAL_RETURN_OK.<br>
 * The return handle is not OSAL_MEMORY_MANAGER_HANDLE_INVALID.
 * -# The return value of R_OSAL_MmngrAlloc is OSAL_RETURN_CONF.<br>
 * the return buffer is OSAL_MEMORY_BUFFER_HANDLE_INVALID.
 * -# The return value of R_OSAL_MmngrClose is OSAL_RETURN_OK.
 * @subsection MmngrAlloc_TC_09_003_018_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrAlloc_TC_09_003_018
 */
// [MmngrAlloc_TC_09_003_018]
TEST_F(MemoryApiTest, MmngrAlloc_TC_09_003_018)
{
    // pre-process: open memory manager
    config.max_allowed_allocations     = 4;
    config.max_registered_monitors_cbs = 0;
    config.memory_limit = 10 * 1024 * 1024;
    config.mode = OSAL_MMNGR_ALLOC_MODE_STACK_PROT;
    EXPECT_EQ(R_OSAL_MmngrOpen(&config, &hndl_mmngr), OSAL_RETURN_OK) << "pre-process failed";
    EXPECT_NE(hndl_mmngr, OSAL_MEMORY_MANAGER_HANDLE_INVALID);

    // Test09_003_018
    // @brief: abnormal case: size is not aligned
    size = 129;
    alignment = 64;
    EXPECT_EQ(R_OSAL_MmngrAlloc(hndl_mmngr, size, alignment, &buffer_obj), OSAL_RETURN_CONF) << "Test09_003_018 failed";
    EXPECT_EQ(buffer_obj, OSAL_MEMORY_BUFFER_HANDLE_INVALID) << "Test09_003_018 failed";

    // post-process: close memory manager
    EXPECT_EQ(R_OSAL_MmngrClose(hndl_mmngr), OSAL_RETURN_OK) << "post-process failed";
}
// [MmngrAlloc_TC_09_003_018]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrAlloc_TC_09_003_019 MemoryApiTest.MmngrAlloc_TC_09_003_019
 * @subsection MmngrAlloc_TC_09_003_019_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrAlloc_TC_09_003_019_tci Test Case ID
 * MmngrAlloc_S0_BA_TC_09_003_019
 * @subsection MmngrAlloc_TC_09_003_019_rr Related Requirement(s)
 * \#276410, \#276732
 * @subsection MmngrAlloc_TC_09_003_019_pp Prerequisite/Precondition
 * OSAL is initialized.
 * @subsection MmngrAlloc_TC_09_003_019_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrAlloc and R_OSAL_MmngrDealloc with abnormal condition in OSAL_MMNGR_ALLOC_MODE_STACK_PROT mode.
 * - pre-process: open new memory manager
 * - Test09_003_019: allocate buffer which alignment is not aligned by 64.
 * - post-process: close opened memory manager
 * @subsection MmngrAlloc_TC_09_003_019_tpts Test Procedure/Test Steps
 * -# Open the handle using R_OSAL_MmngrOpen with config:
 *      - config.max_allowed_allocations = 4
 *      - config.max_registered_monitors_cbs = 0
 *      - config.memory_limit = 10MB
 *      - config.mode = OSAL_MMNGR_ALLOC_MODE_STACK_PROT
 * -# Call R_OSAL_MmngrAlloc with "alignment" is 67 byte.
 * -# Call R_OSAL_MmngrClose to close the handle.
 * @subsection MmngrAlloc_TC_09_003_019_ereb Expected Result/Behavior
 * -# The return of R_OSAL_MmngrOpen is OSAL_RETURN_OK.<br>
 * The return handle is not OSAL_MEMORY_MANAGER_HANDLE_INVALID.
 * -# The return value of R_OSAL_MmngrAlloc is OSAL_RETURN_CONF.<br>
 * The return buffer is OSAL_MEMORY_BUFFER_HANDLE_INVALID.
 * -# The return value of R_OSAL_MmngrClose is OSAL_RETURN_OK.
 * @subsection MmngrAlloc_TC_09_003_019_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrAlloc_TC_09_003_019
 */
// [MmngrAlloc_TC_09_003_019]
TEST_F(MemoryApiTest, MmngrAlloc_TC_09_003_019)
{

    // pre-process: open memory manager
    config.max_allowed_allocations     = 4;
    config.max_registered_monitors_cbs = 0;
    config.memory_limit = 10 * 1024 * 1024;
    config.mode = OSAL_MMNGR_ALLOC_MODE_STACK_PROT;
    EXPECT_EQ(R_OSAL_MmngrOpen(&config, &hndl_mmngr), OSAL_RETURN_OK) << "pre-process failed";
    EXPECT_NE(hndl_mmngr, OSAL_MEMORY_MANAGER_HANDLE_INVALID);

    // Test09_003_019
    // @brief: abnormal case: the alignment is invalid (not aligned by 64)
    size = 1024;
    alignment = 67;
    EXPECT_EQ(R_OSAL_MmngrAlloc(hndl_mmngr, size, alignment, &buffer_obj), OSAL_RETURN_CONF) << "Test09_003_019 failed";
    EXPECT_EQ(buffer_obj, OSAL_MEMORY_BUFFER_HANDLE_INVALID) << "Test09_003_019 failed";

    // post-process: close memory manager
    EXPECT_EQ(R_OSAL_MmngrClose(hndl_mmngr), OSAL_RETURN_OK) << "post-process failed";
}
// [MmngrAlloc_TC_09_003_019]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrAlloc_TC_09_003_020 MemoryApiTest.MmngrAlloc_TC_09_003_020
 * @subsection MmngrAlloc_TC_09_003_020_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrAlloc_TC_09_003_020_tci Test Case ID
 * MmngrAlloc_S0_A_TC_09_003_020
 * @subsection MmngrAlloc_TC_09_003_020_rr Related Requirement(s)
 * \#276410, \#276732
 * @subsection MmngrAlloc_TC_09_003_020_pp Prerequisite/Precondition
 * OSAL is initialized.
 * @subsection MmngrAlloc_TC_09_003_020_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrAlloc and R_OSAL_MmngrDealloc with abnormal condition in OSAL_MMNGR_ALLOC_MODE_STACK_PROT mode.
 * - pre-process: open new memory manager
 * - Test09_003_020: alloc with buffer_obj is invalid (NULL).
 * - post-process: close opened memory manager
 * @subsection MmngrAlloc_TC_09_003_020_tpts Test Procedure/Test Steps
 * -# Open the handle using R_OSAL_MmngrOpen with config:
 *      - config.max_allowed_allocations = 4
 *      - config.max_registered_monitors_cbs = 0
 *      - config.memory_limit = 10MB
 *      - config.mode = OSAL_MMNGR_ALLOC_MODE_STACK_PROT
 * -# Call R_OSAL_MmngrAlloc with "buffer_obj" is NULL.
 * -# Call R_OSAL_MmngrClose to close the handle.
 * @subsection MmngrAlloc_TC_09_003_020_ereb Expected Result/Behavior
 * -# The return of R_OSAL_MmngrOpen is OSAL_RETURN_OK.<br>
 * The return handle is not OSAL_MEMORY_MANAGER_HANDLE_INVALID.
 * -# The return value of R_OSAL_MmngrAlloc is OSAL_RETURN_PAR.
 * -# The return value of R_OSAL_MmngrClose is OSAL_RETURN_OK.
 * @subsection MmngrAlloc_TC_09_003_020_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrAlloc_TC_09_003_020
 */
// [MmngrAlloc_TC_09_003_020]
TEST_F(MemoryApiTest, MmngrAlloc_TC_09_003_020)
{
    osal_memory_buffer_handle_t* p_buffer_obj = NULL;

    // pre-process: open memory manager
    config.max_allowed_allocations     = 4;
    config.max_registered_monitors_cbs = 0;
    config.memory_limit = 10 * 1024 * 1024;
    config.mode = OSAL_MMNGR_ALLOC_MODE_STACK_PROT;
    EXPECT_EQ(R_OSAL_MmngrOpen(&config, &hndl_mmngr), OSAL_RETURN_OK) << "pre-process failed";
    EXPECT_NE(hndl_mmngr, OSAL_MEMORY_MANAGER_HANDLE_INVALID);

    // Test09_003_020
    // @brief: abnormal case: alloc with buffer_obj is invalid (NULL)
    size = 128;
    alignment = 64;
    EXPECT_EQ(R_OSAL_MmngrAlloc(hndl_mmngr, size, alignment, p_buffer_obj), OSAL_RETURN_PAR) << "Test09_003_020 failed";

    // post-process: close memory manager
    EXPECT_EQ(R_OSAL_MmngrClose(hndl_mmngr), OSAL_RETURN_OK) << "post-process failed";
}
// [MmngrAlloc_TC_09_003_020]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrAlloc_TC_09_003_021 MemoryApiTest.MmngrAlloc_TC_09_003_021
 * @subsection MmngrAlloc_TC_09_003_021_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrAlloc_TC_09_003_021_tci Test Case ID
 * MmngrAlloc_S2_A_TC_09_003_021
 * @subsection MmngrAlloc_TC_09_003_021_rr Related Requirement(s)
 * \#276410, \#276732
 * @subsection MmngrAlloc_TC_09_003_021_pp Prerequisite/Precondition
 * OSAL is initialized.
 * @subsection MmngrAlloc_TC_09_003_021_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrAlloc and R_OSAL_MmngrDealloc with abnormal condition in OSAL_MMNGR_ALLOC_MODE_STACK_PROT mode.
 * - Test09_003_021: alloc with handle has already closed.
 * @subsection MmngrAlloc_TC_09_003_021_tpts Test Procedure/Test Steps
 * -# Open the handle using R_OSAL_MmngrOpen with config:
 *      - config.max_allowed_allocations = 4
 *      - config.max_registered_monitors_cbs = 0
 *      - config.memory_limit = 10MB
 *      - config.mode = OSAL_MMNGR_ALLOC_MODE_STACK_PROT
 * -# Call R_OSAL_MmngrClose to close the handle.
 * -# Call R_OSAL_MmngrAlloc to allocation memory.
 * @subsection MmngrAlloc_TC_09_003_021_ereb Expected Result/Behavior
 * -# The return of R_OSAL_MmngrOpen is OSAL_RETURN_OK.<br>
 * The return handle is not OSAL_MEMORY_MANAGER_HANDLE_INVALID.
 * -# The return value of R_OSAL_MmngrClose is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrAlloc is OSAL_RETURN_HANDLE_NOT_SUPPORTED.<br>
 * the return buffer is OSAL_MEMORY_BUFFER_HANDLE_INVALID.
 * @subsection MmngrAlloc_TC_09_003_021_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrAlloc_TC_09_003_021
 */
// [MmngrAlloc_TC_09_003_021]
TEST_F(MemoryApiTest, MmngrAlloc_TC_09_003_021)
{
    // Test09_003_021: alloc with hndl_mmngr has already closed
    config.max_allowed_allocations     = 4;
    config.max_registered_monitors_cbs = 0;
    config.memory_limit = 10 * 1024 * 1024;
    config.mode = OSAL_MMNGR_ALLOC_MODE_STACK_PROT;
    EXPECT_EQ(R_OSAL_MmngrOpen(&config, &hndl_mmngr), OSAL_RETURN_OK) << "Test09_003_021 failed";
    EXPECT_NE(hndl_mmngr, OSAL_MEMORY_MANAGER_HANDLE_INVALID);
    buffer_obj = OSAL_MEMORY_BUFFER_HANDLE_INVALID;
    EXPECT_EQ(R_OSAL_MmngrClose(hndl_mmngr), OSAL_RETURN_OK) << "Test09_003_021 failed";

    size = 64;
    alignment = 64;
    EXPECT_EQ(R_OSAL_MmngrAlloc(hndl_mmngr, size, alignment, &buffer_obj), OSAL_RETURN_HANDLE_NOT_SUPPORTED) << "Test09_003_021 failed";
    EXPECT_EQ(buffer_obj, OSAL_MEMORY_BUFFER_HANDLE_INVALID) << "Test09_003_021 failed";
}
// [MmngrAlloc_TC_09_003_021]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrAlloc_TC_09_003_022 MemoryApiTest.MmngrAlloc_TC_09_003_022
 * @subsection MmngrAlloc_TC_09_003_022_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrAlloc_TC_09_003_022_tci Test Case ID
 * MmngrAlloc_S2_A_TC_09_003_022
 * @subsection MmngrAlloc_TC_09_003_022_rr Related Requirement(s)
 * \#276410, \#276732
 * @subsection MmngrAlloc_TC_09_003_022_pp Prerequisite/Precondition
 * OSAL is initialized.
 * @subsection MmngrAlloc_TC_09_003_022_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrAlloc and R_OSAL_MmngrDealloc with abnormal condition in OSAL_MMNGR_ALLOC_MODE_STACK_PROT mode.
 * - pre-process: open new memory manager
 * - Test09_003_022: the number of allocation is exceed the max_allowed_allocations is 4.
 * - post-process: close opened memory manager
 * @subsection MmngrAlloc_TC_09_003_022_tpts Test Procedure/Test Steps
 * -# Open the handle using R_OSAL_MmngrOpen with config:
 *      - config.max_allowed_allocations = 4
 *      - config.max_registered_monitors_cbs = 0
 *      - config.memory_limit = 10MB
 *      - config.mode = OSAL_MMNGR_ALLOC_MODE_STACK_PROT
 * -# Call R_OSAL_MmngrAlloc to allocate 4 buffers with valid paramater.
 * -# Call R_OSAL_MmngrAlloc to allocate 5th buffer with same configuration as step above.
 * -# Call R_OSAL_MmngrDealloc to deallocate 4 allocated buffer.
 * -# Call R_OSAL_MmngrClose to close the handle.
 * @subsection MmngrAlloc_TC_09_003_022_ereb Expected Result/Behavior
 * -# The return of R_OSAL_MmngrOpen is OSAL_RETURN_OK.<br>
 * The return handle is not OSAL_MEMORY_MANAGER_HANDLE_INVALID.
 * -# The return value of first 4 times call R_OSAL_MmngrAlloc is OSAL_RETURN_OK.<br>
 * The return of 4 buffer is not OSAL_MEMORY_BUFFER_HANDLE_INVALID.
 * -# The return value of the 5th call R_OSAL_MmngrAlloc is OSAL_RETURN_PROHIBITED. <br>
 * -# The return value of 4 times R_OSAL_MmngrDealloc is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrClose is OSAL_RETURN_OK.
 * @subsection MmngrAlloc_TC_09_003_022_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrAlloc_TC_09_003_022
 */
// [MmngrAlloc_TC_09_003_022]
TEST_F(MemoryApiTest, MmngrAlloc_TC_09_003_022)
{
    osal_memory_buffer_handle_t  buffer_obj_array[5]
        = {OSAL_MEMORY_BUFFER_HANDLE_INVALID, OSAL_MEMORY_BUFFER_HANDLE_INVALID,
           OSAL_MEMORY_BUFFER_HANDLE_INVALID, OSAL_MEMORY_BUFFER_HANDLE_INVALID,
           OSAL_MEMORY_BUFFER_HANDLE_INVALID};

    // pre-process: open memory manager
    config.max_allowed_allocations     = 4;
    config.max_registered_monitors_cbs = 0;
    config.memory_limit = 10 * 1024 * 1024;
    config.mode = OSAL_MMNGR_ALLOC_MODE_STACK_PROT;
    EXPECT_EQ(R_OSAL_MmngrOpen(&config, &hndl_mmngr), OSAL_RETURN_OK) << "pre-process failed";
    EXPECT_NE(hndl_mmngr, OSAL_MEMORY_MANAGER_HANDLE_INVALID);

    // Test09_003_022
    // @brief: abnormal case: call R_OSAL_MmngrAlloc 5 times but config.max_allowed_allocations is 4
    size = 64;
    alignment = 64;
    EXPECT_EQ(R_OSAL_MmngrAlloc(hndl_mmngr, size, alignment, buffer_obj_array), OSAL_RETURN_OK) << "Test09_003_022 failed";
    EXPECT_NE(buffer_obj_array[0], OSAL_MEMORY_BUFFER_HANDLE_INVALID) << "Test09_003_022 failed";
    EXPECT_EQ(R_OSAL_MmngrAlloc(hndl_mmngr, size, alignment, buffer_obj_array + 1), OSAL_RETURN_OK) << "Test09_003_022 failed";
    EXPECT_NE(buffer_obj_array[1], OSAL_MEMORY_BUFFER_HANDLE_INVALID) << "Test09_003_022 failed";
    EXPECT_EQ(R_OSAL_MmngrAlloc(hndl_mmngr, size, alignment, buffer_obj_array + 2), OSAL_RETURN_OK) << "Test09_003_022 failed";
    EXPECT_NE(buffer_obj_array[2], OSAL_MEMORY_BUFFER_HANDLE_INVALID) << "Test09_003_022 failed";
    EXPECT_EQ(R_OSAL_MmngrAlloc(hndl_mmngr, size, alignment, buffer_obj_array + 3), OSAL_RETURN_OK) << "Test09_003_022 failed";
    EXPECT_NE(buffer_obj_array[3], OSAL_MEMORY_BUFFER_HANDLE_INVALID) << "Test09_003_022 failed";
    EXPECT_EQ(R_OSAL_MmngrAlloc(hndl_mmngr, size, alignment, buffer_obj_array + 4), OSAL_RETURN_PROHIBITED) << "Test09_003_022 failed";
    EXPECT_EQ(R_OSAL_MmngrDealloc(hndl_mmngr, buffer_obj_array[3]), OSAL_RETURN_OK) << "Test09_003_022 failed";
    EXPECT_EQ(R_OSAL_MmngrDealloc(hndl_mmngr, buffer_obj_array[2]), OSAL_RETURN_OK) << "Test09_003_022 failed";
    EXPECT_EQ(R_OSAL_MmngrDealloc(hndl_mmngr, buffer_obj_array[1]), OSAL_RETURN_OK) << "Test09_003_022 failed";
    EXPECT_EQ(R_OSAL_MmngrDealloc(hndl_mmngr, buffer_obj_array[0]), OSAL_RETURN_OK) << "Test09_003_022 failed";

    // post-process: close memory manager
    EXPECT_EQ(R_OSAL_MmngrClose(hndl_mmngr), OSAL_RETURN_OK) << "post-process failed";
}
// [MmngrAlloc_TC_09_003_022]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrAlloc_TC_09_003_023 MemoryApiTest.MmngrAlloc_TC_09_003_023
 * @subsection MmngrAlloc_TC_09_003_023_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrAlloc_TC_09_003_023_tci Test Case ID
 * MmngrAlloc_S2_A_TC_09_003_023
 * @subsection MmngrAlloc_TC_09_003_023_rr Related Requirement(s)
 * \#276410, \#276732
 * @subsection MmngrAlloc_TC_09_003_023_pp Prerequisite/Precondition
 * OSAL is initialized.
 * @subsection MmngrAlloc_TC_09_003_023_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrAlloc and R_OSAL_MmngrDealloc with abnormal condition in OSAL_MMNGR_ALLOC_MODE_STACK_PROT mode.
 * - pre-process: open new memory manager
 * - Test09_003_023: allocate buffer which the input size is bigger than memory limit.
 * - post-process: close opened memory manager
 * @subsection MmngrAlloc_TC_09_003_023_tpts Test Procedure/Test Steps
 * -# Open the handle using R_OSAL_MmngrOpen with config:
 *      - config.max_allowed_allocations = 4
 *      - config.max_registered_monitors_cbs = 0
 *      - config.memory_limit = 10MB
 *      - config.mode = OSAL_MMNGR_ALLOC_MODE_STACK_PROT
 * -# Call R_OSAL_MmngrAlloc with input "size" is 11MB.
 * -# Call R_OSAL_MmngrClose to close the handle.
 * @subsection MmngrAlloc_TC_09_003_023_ereb Expected Result/Behavior
 * -# The return of R_OSAL_MmngrOpen is OSAL_RETURN_OK.<br>
 * The return handle is not OSAL_MEMORY_MANAGER_HANDLE_INVALID.
 * -# The return value of R_OSAL_MmngrAlloc is OSAL_RETURN_CONF.<br>
 * The return buffer is OSAL_MEMORY_BUFFER_HANDLE_INVALID.
 * -# The return value of R_OSAL_MmngrClose is OSAL_RETURN_OK.
 * @subsection MmngrAlloc_TC_09_003_023_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrAlloc_TC_09_003_023
 */
// [MmngrAlloc_TC_09_003_023]
TEST_F(MemoryApiTest, MmngrAlloc_TC_09_003_023)
{
    // pre-process: open memory manager
    config.max_allowed_allocations     = 4;
    config.max_registered_monitors_cbs = 0;
    config.memory_limit = 10 * 1024 * 1024;
    config.mode = OSAL_MMNGR_ALLOC_MODE_STACK_PROT;
    EXPECT_EQ(R_OSAL_MmngrOpen(&config, &hndl_mmngr), OSAL_RETURN_OK) << "pre-process failed";
    EXPECT_NE(hndl_mmngr, OSAL_MEMORY_MANAGER_HANDLE_INVALID);

    // Test09_003_023
    // @brief: abnormal case: size is bigger than memory_limit
    size = 11 * 1024 * 1024;
    alignment = 64;
    buffer_obj = OSAL_MEMORY_BUFFER_HANDLE_INVALID;
    EXPECT_EQ(R_OSAL_MmngrAlloc(hndl_mmngr, size, alignment, &buffer_obj), OSAL_RETURN_CONF) << "Test09_003_023 failed";
    EXPECT_EQ(buffer_obj, OSAL_MEMORY_BUFFER_HANDLE_INVALID) << "Test09_003_023 failed";

    // post-process: close memory manager
    EXPECT_EQ(R_OSAL_MmngrClose(hndl_mmngr), OSAL_RETURN_OK) << "post-process failed";
}
// [MmngrAlloc_TC_09_003_023]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrAlloc_TC_09_003_024 MemoryApiTest.MmngrAlloc_TC_09_003_024
 * @subsection MmngrAlloc_TC_09_003_024_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrAlloc_TC_09_003_024_tci Test Case ID
 * MmngrAlloc_S2_A_TC_09_003_024
 * @subsection MmngrAlloc_TC_09_003_024_rr Related Requirement(s)
 * \#276410, \#276732
 * @subsection MmngrAlloc_TC_09_003_024_pp Prerequisite/Precondition
 * OSAL is initialized.
 * @subsection MmngrAlloc_TC_09_003_024_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrAlloc and R_OSAL_MmngrDealloc with abnormal condition in OSAL_MMNGR_ALLOC_MODE_STACK_PROT mode.
 * - pre-process: open new memory manager
 * - Test09_003_024: confirm the behavior of R_OSAL_MmngrAlloc when out of memory.
 * - post-process: close opened memory manager
 * @subsection MmngrAlloc_TC_09_003_024_tpts Test Procedure/Test Steps
 * -# Open the handle using R_OSAL_MmngrOpen with config:
 *      - config.max_allowed_allocations = 4
 *      - config.max_registered_monitors_cbs = 0
 *      - config.memory_limit = 10MB
 *      - config.mode = OSAL_MMNGR_ALLOC_MODE_STACK_PROT.
 * -# Call R_OSAL_MmngrAlloc to allocate 1st buffer with size is 4MB and align is 64.
 * -# Call R_OSAL_MmngrAlloc to allocate 2nd buffer with size is 4MB and align is 64.
 * -# Call R_OSAL_MmngrAlloc to allocate 3rd buffer with size is 4MB and align is 64.
 * -# Call R_OSAL_MmngrDealloc to deallocate the 2nd buffer.
 * -# Call R_OSAL_MmngrDealloc to deallocate the 1st buffer.
 * -# Call R_OSAL_MmngrClose to close the handle.
 * @subsection MmngrAlloc_TC_09_003_024_ereb Expected Result/Behavior
 * -# The return value of R_OSAL_MmngrOpen is OSAL_RETURN_OK.<br>
 * The return handle is not OSAL_MEMORY_MANAGER_HANDLE_INVALID.
 * -# The return value of R_OSAL_MmngrAlloc for 1st buffer is OSAL_RETURN_OK.<br>
 * 2 return buffers is not OSAL_MEMORY_BUFFER_HANDLE_INVALID.
 * -# The return value of R_OSAL_MmngrAlloc for 2nd buffer is OSAL_RETURN_OK.<br>
 * 2 return buffers is not OSAL_MEMORY_BUFFER_HANDLE_INVALID.
 * -# The return value of R_OSAL_MmngrAlloc for 3rd buffer is OSAL_RETURN_MEM.<br>
 * -# The return value of R_OSAL_MmngrDealloc for 1st buffer is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrDealloc for 2nd buffer is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrClose is OSAL_RETURN_OK.
 * @subsection MmngrAlloc_TC_09_003_024_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrAlloc_TC_09_003_024
 */
// [MmngrAlloc_TC_09_003_024]
TEST_F(MemoryApiTest, MmngrAlloc_TC_09_003_024)
{
    osal_memory_buffer_handle_t  buffer_obj1 = OSAL_MEMORY_BUFFER_HANDLE_INVALID;
    osal_memory_buffer_handle_t  buffer_obj2 = OSAL_MEMORY_BUFFER_HANDLE_INVALID;
    osal_memory_buffer_handle_t  buffer_obj3 = OSAL_MEMORY_BUFFER_HANDLE_INVALID;

    // pre-process: open memory manager
    config.max_allowed_allocations     = 4;
    config.max_registered_monitors_cbs = 0;
    config.memory_limit = 10 * 1024 * 1024;
    config.mode = OSAL_MMNGR_ALLOC_MODE_STACK_PROT;
    EXPECT_EQ(R_OSAL_MmngrOpen(&config, &hndl_mmngr), OSAL_RETURN_OK) << "pre-process failed";
    EXPECT_NE(hndl_mmngr, OSAL_MEMORY_MANAGER_HANDLE_INVALID);

    // Test09_003_024
    // @brief: abnormal case: confirm running out of memory:
    size = 4 * 1024 * 1024;
    alignment = 64;
    EXPECT_EQ(R_OSAL_MmngrAlloc(hndl_mmngr, size, alignment, &buffer_obj1), OSAL_RETURN_OK) << "Test09_003_024 failed";
    EXPECT_NE(buffer_obj1, OSAL_MEMORY_BUFFER_HANDLE_INVALID) << "Test09_003_024 failed";
    EXPECT_EQ(R_OSAL_MmngrAlloc(hndl_mmngr, size, alignment, &buffer_obj2), OSAL_RETURN_OK) << "Test09_003_024 failed";
    EXPECT_NE(buffer_obj2, OSAL_MEMORY_BUFFER_HANDLE_INVALID) << "Test09_003_024 failed";
    EXPECT_EQ(R_OSAL_MmngrAlloc(hndl_mmngr, size, alignment, &buffer_obj3), OSAL_RETURN_MEM) << "Test09_003_024 failed"
        << R_OSAL_MmngrDealloc(hndl_mmngr, buffer_obj);
    EXPECT_EQ(R_OSAL_MmngrDealloc(hndl_mmngr, buffer_obj2), OSAL_RETURN_OK) << "Test09_003_024 failed";
    EXPECT_EQ(R_OSAL_MmngrDealloc(hndl_mmngr, buffer_obj1), OSAL_RETURN_OK) << "Test09_003_024 failed";

    // post-process: close memory manager
    EXPECT_EQ(R_OSAL_MmngrClose(hndl_mmngr), OSAL_RETURN_OK) << "post-process failed";
}
// [MmngrAlloc_TC_09_003_024]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrAlloc_TC_09_003_025 MemoryApiTest.MmngrAlloc_TC_09_003_025
 * @subsection MmngrAlloc_TC_09_003_025_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrAlloc_TC_09_003_025_tci Test Case ID
 * MmngrAlloc_S3_BN_TC_09_003_025
 * @subsection MmngrAlloc_TC_09_003_025_rr Related Requirement(s)
 * \#276410, \#276732
 * @subsection MmngrAlloc_TC_09_003_025_pp Prerequisite/Precondition
 * OSAL is initialized.
 * @subsection MmngrAlloc_TC_09_003_025_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrAlloc and R_OSAL_MmngrDealloc with normal condition in OSAL_MMNGR_ALLOC_MODE_FREE_LIST mode.
 * - pre-process: Open new memory manager
 * - Test09_003_025: size is equal to memory_limit(10MB).
 * - post-process: close memory manager
 * @subsection MmngrAlloc_TC_09_003_025_tpts Test Procedure/Test Steps
 * -# Open the handle using R_OSAL_MmngrOpen with config:
 *      - config.max_allowed_allocations = 4
 *      - config.max_registered_monitors_cbs = 0
 *      - config.memory_limit = 10MB
 *      - config.mode = OSAL_MMNGR_ALLOC_MODE_FREE_LIST
 * -# Call R_OSAL_MmngrAlloc with "size" is 10 * 1024 *1024 byte.
 * -# Call R_OSAL_MmngrDealloc to de-allocate the allocated buffer at step above.
 * -# Call R_OSAL_MmngrClose to close the handle.
 * @subsection MmngrAlloc_TC_09_003_025_ereb Expected Result/Behavior
 * -# The return of R_OSAL_MmngrOpen is OSAL_RETURN_OK.<br>
 * The return handle is not OSAL_MEMORY_MANAGER_HANDLE_INVALID.
 * -# The return value of R_OSAL_MmngrAlloc is OSAL_RETURN_OK.<br>
 * The return buffer is not OSAL_MEMORY_BUFFER_HANDLE_INVALID.
 * -# The return value of R_OSAL_MmngrDealloc is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrClose is OSAL_RETURN_OK.
 * @subsection MmngrAlloc_TC_09_003_025_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrAlloc_TC_09_003_025
 */
// [MmngrAlloc_TC_09_003_025]
TEST_F(MemoryApiTest, MmngrAlloc_TC_09_003_025)
{
    //pre-process: open new memory manager
    config.max_allowed_allocations     = 4;
    config.max_registered_monitors_cbs = 0;
    config.memory_limit = 10 * 1024 * 1024;
    config.mode = OSAL_MMNGR_ALLOC_MODE_FREE_LIST;
    EXPECT_EQ(R_OSAL_MmngrOpen(&config, &hndl_mmngr), OSAL_RETURN_OK) << "pre-process failed";
    EXPECT_NE(hndl_mmngr, OSAL_MEMORY_MANAGER_HANDLE_INVALID) << "pre-process failed";

    // Test09_003_025
    // @brief: boundary normal case: size is equal to memory_limit (10MB)
    size = 10 * 1024 * 1024;
    alignment = 128;
    EXPECT_EQ(R_OSAL_MmngrAlloc(hndl_mmngr, size, alignment, &buffer_obj), OSAL_RETURN_OK) << "Test09_003_025 failed";
    EXPECT_NE(buffer_obj, OSAL_MEMORY_BUFFER_HANDLE_INVALID) << "Test09_003_025 failed";
    EXPECT_EQ(R_OSAL_MmngrDealloc(hndl_mmngr, buffer_obj), OSAL_RETURN_OK) << "Test09_003_025 failed";
    buffer_obj = OSAL_MEMORY_BUFFER_HANDLE_INVALID;

    //post-process: close memory manager
    EXPECT_EQ(R_OSAL_MmngrClose(hndl_mmngr), OSAL_RETURN_OK) << "post-process failed";
}
// [MmngrAlloc_TC_09_003_025]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrAlloc_TC_09_003_026 MemoryApiTest.MmngrAlloc_TC_09_003_026
 * @subsection MmngrAlloc_TC_09_003_026_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrAlloc_TC_09_003_026_tci Test Case ID
 * MmngrAlloc_S3_BN_TC_09_003_026
 * @subsection MmngrAlloc_TC_09_003_026_rr Related Requirement(s)
 * \#276410, \#276732
 * @subsection MmngrAlloc_TC_09_003_026_pp Prerequisite/Precondition
 * OSAL is initialized.
 * @subsection MmngrAlloc_TC_09_003_026_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrAlloc and R_OSAL_MmngrDealloc with normal condition in OSAL_MMNGR_ALLOC_MODE_FREE_LIST mode.
 * - pre-process: Open new memory manager
 * - Test09_003_026: alignment is 64 byte.
 * - post-process: close memory manager
 * @subsection MmngrAlloc_TC_09_003_026_tpts Test Procedure/Test Steps
 * -# Open the handle using R_OSAL_MmngrOpen with config:
 *      - config.max_allowed_allocations = 4
 *      - config.max_registered_monitors_cbs = 0
 *      - config.memory_limit = 10MB
 *      - config.mode = OSAL_MMNGR_ALLOC_MODE_FREE_LIST
 * -# Call R_OSAL_MmngrAlloc with "alignment" is 64 byte.
 * -# Call R_OSAL_MmngrDealloc to deallocate the allocated buffer above.
 * -# Call R_OSAL_MmngrClose to close the handle.
 * @subsection MmngrAlloc_TC_09_003_026_ereb Expected Result/Behavior
 * -# The return of R_OSAL_MmngrOpen is OSAL_RETURN_OK.<br>
 * The return handle is not OSAL_MEMORY_MANAGER_HANDLE_INVALID.
 * -# The return value of R_OSAL_MmngrAlloc is OSAL_RETURN_OK.<br>
 * The return buffer is not OSAL_MEMORY_BUFFER_HANDLE_INVALID.
 * -# The return value of R_OSAL_MmngrDealloc is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrClose is OSAL_RETURN_OK.
 * @subsection MmngrAlloc_TC_09_003_026_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrAlloc_TC_09_003_026
 */
// [MmngrAlloc_TC_09_003_026]
TEST_F(MemoryApiTest, MmngrAlloc_TC_09_003_026)
{
    //pre-process: open new memory manager
    config.max_allowed_allocations     = 4;
    config.max_registered_monitors_cbs = 0;
    config.memory_limit = 10 * 1024 * 1024;
    config.mode = OSAL_MMNGR_ALLOC_MODE_FREE_LIST;
    EXPECT_EQ(R_OSAL_MmngrOpen(&config, &hndl_mmngr), OSAL_RETURN_OK) << "pre-process failed";
    EXPECT_NE(hndl_mmngr, OSAL_MEMORY_MANAGER_HANDLE_INVALID) << "pre-process failed";

    // Test09_003_026
    // @brief: boundary normal case: alignment is 64 byte
    size = 1024;
    alignment = 64;
    EXPECT_EQ(R_OSAL_MmngrAlloc(hndl_mmngr, size, alignment, &buffer_obj), OSAL_RETURN_OK) << "Test09_003_026 failed";
    EXPECT_NE(buffer_obj, OSAL_MEMORY_BUFFER_HANDLE_INVALID) << "Test09_003_026 failed";
    EXPECT_EQ(R_OSAL_MmngrDealloc(hndl_mmngr, buffer_obj), OSAL_RETURN_OK) << "Test09_003_026 failed";
    buffer_obj = OSAL_MEMORY_BUFFER_HANDLE_INVALID;

    //post-process: close memory manager
    EXPECT_EQ(R_OSAL_MmngrClose(hndl_mmngr), OSAL_RETURN_OK) << "post-process failed";
}
// [MmngrAlloc_TC_09_003_026]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrAlloc_TC_09_003_027 MemoryApiTest.MmngrAlloc_TC_09_003_027
 * @subsection MmngrAlloc_TC_09_003_027_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrAlloc_TC_09_003_027_tci Test Case ID
 * MmngrAlloc_S0_BA_TC_09_003_027
 * @subsection MmngrAlloc_TC_09_003_027_rr Related Requirement(s)
 * \#276410, \#276732
 * @subsection MmngrAlloc_TC_09_003_027_pp Prerequisite/Precondition
 * OSAL is initialized.
 * @subsection MmngrAlloc_TC_09_003_027_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrAlloc and R_OSAL_MmngrDealloc with abnormal condition in OSAL_MMNGR_ALLOC_MODE_FREE_LIST mode.
 * - pre-process: open new memory manager
 * - Test09_003_027: allocate buffer which size is not aligned.
 * - post-process: close memory manager
 * @subsection MmngrAlloc_TC_09_003_027_tpts Test Procedure/Test Steps
 * -# Open the handle using R_OSAL_MmngrOpen with config:
 *      - config.max_allowed_allocations = 4
 *      - config.max_registered_monitors_cbs = 0
 *      - config.memory_limit = 10MB
 *      - config.mode = OSAL_MMNGR_ALLOC_MODE_FREE_LIST
 * -# Call R_OSAL_MmngrAlloc with "size" is 129 byte.
 * -# Call R_OSAL_MmngrClose to close the handle.
 * @subsection MmngrAlloc_TC_09_003_027_ereb Expected Result/Behavior
 * -# The return of R_OSAL_MmngrOpen is OSAL_RETURN_OK.<br>
 * The return handle is not OSAL_MEMORY_MANAGER_HANDLE_INVALID.
 * -# The return value of R_OSAL_MmngrAlloc is OSAL_RETURN_CONF.<br>
 * the return buffer is OSAL_MEMORY_BUFFER_HANDLE_INVALID.
 * -# The return value of R_OSAL_MmngrClose is OSAL_RETURN_OK.
 * @subsection MmngrAlloc_TC_09_003_027_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrAlloc_TC_09_003_027
 */
// [MmngrAlloc_TC_09_003_027]
TEST_F(MemoryApiTest, MmngrAlloc_TC_09_003_027)
{
    // pre-process: open memory manager
    config.max_allowed_allocations     = 4;
    config.max_registered_monitors_cbs = 0;
    config.memory_limit = 10 * 1024 * 1024;
    config.mode = OSAL_MMNGR_ALLOC_MODE_FREE_LIST;
    EXPECT_EQ(R_OSAL_MmngrOpen(&config, &hndl_mmngr), OSAL_RETURN_OK) << "pre-process failed";
    EXPECT_NE(hndl_mmngr, OSAL_MEMORY_MANAGER_HANDLE_INVALID);

    // Test09_003_027
    // @brief: abnormal case: size is not aligned
    size = 129;
    alignment = 64;
    EXPECT_EQ(R_OSAL_MmngrAlloc(hndl_mmngr, size, alignment, &buffer_obj), OSAL_RETURN_CONF) << "Test09_003_027 failed";
    EXPECT_EQ(buffer_obj, OSAL_MEMORY_BUFFER_HANDLE_INVALID) << "Test09_003_027 failed";

    //post-process: close memory manager
    EXPECT_EQ(R_OSAL_MmngrClose(hndl_mmngr), OSAL_RETURN_OK) << "post-process failed";
}
// [MmngrAlloc_TC_09_003_027]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrAlloc_TC_09_003_028 MemoryApiTest.MmngrAlloc_TC_09_003_028
 * @subsection MmngrAlloc_TC_09_003_028_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrAlloc_TC_09_003_028_tci Test Case ID
 * MmngrAlloc_S0_BA_TC_09_003_028
 * @subsection MmngrAlloc_TC_09_003_028_rr Related Requirement(s)
 * \#276410, \#276732
 * @subsection MmngrAlloc_TC_09_003_028_pp Prerequisite/Precondition
 * OSAL is initialized.
 * @subsection MmngrAlloc_TC_09_003_028_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrAlloc and R_OSAL_MmngrDealloc with abnormal condition in OSAL_MMNGR_ALLOC_MODE_FREE_LIST mode.
 * - pre-process: open new memory manager
 * - Test09_003_028: allocate buffer which alignment is not aligned by 64.
 * - post-process: close memory manager
 * @subsection MmngrAlloc_TC_09_003_028_tpts Test Procedure/Test Steps
 * -# Open the handle using R_OSAL_MmngrOpen with config:
 *      - config.max_allowed_allocations = 4
 *      - config.max_registered_monitors_cbs = 0
 *      - config.memory_limit = 10MB
 *      - config.mode = OSAL_MMNGR_ALLOC_MODE_FREE_LIST
 * -# Call R_OSAL_MmngrAlloc with "alignment" is 67 byte.
 * -# Call R_OSAL_MmngrClose to close the handle.
 * @subsection MmngrAlloc_TC_09_003_028_ereb Expected Result/Behavior
 * -# The return of R_OSAL_MmngrOpen is OSAL_RETURN_OK.<br>
 * The return handle is not OSAL_MEMORY_MANAGER_HANDLE_INVALID.
 * -# The return value of R_OSAL_MmngrAlloc is OSAL_RETURN_CONF.<br>
 * The return buffer is OSAL_MEMORY_BUFFER_HANDLE_INVALID.
 * -# The return value of R_OSAL_MmngrClose is OSAL_RETURN_OK.
 * @subsection MmngrAlloc_TC_09_003_028_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrAlloc_TC_09_003_028
 */
// [MmngrAlloc_TC_09_003_028]
TEST_F(MemoryApiTest, MmngrAlloc_TC_09_003_028)
{
    // pre-process: open memory manager
    config.max_allowed_allocations     = 4;
    config.max_registered_monitors_cbs = 0;
    config.memory_limit = 10 * 1024 * 1024;
    config.mode = OSAL_MMNGR_ALLOC_MODE_FREE_LIST;
    EXPECT_EQ(R_OSAL_MmngrOpen(&config, &hndl_mmngr), OSAL_RETURN_OK) << "pre-process failed";
    EXPECT_NE(hndl_mmngr, OSAL_MEMORY_MANAGER_HANDLE_INVALID);

    // Test09_003_028
    // @brief: abnormal case: the alignment is invalid (not aligned by 64)
    size = 1024;
    alignment = 67;
    EXPECT_EQ(R_OSAL_MmngrAlloc(hndl_mmngr, size, alignment, &buffer_obj), OSAL_RETURN_CONF) << "Test09_003_028 failed";
    EXPECT_EQ(buffer_obj, OSAL_MEMORY_BUFFER_HANDLE_INVALID) << "Test09_003_028 failed";

    //post-process: close memory manager
    EXPECT_EQ(R_OSAL_MmngrClose(hndl_mmngr), OSAL_RETURN_OK) << "post-process failed";
}
// [MmngrAlloc_TC_09_003_028]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrAlloc_TC_09_003_029 MemoryApiTest.MmngrAlloc_TC_09_003_029
 * @subsection MmngrAlloc_TC_09_003_029_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrAlloc_TC_09_003_029_tci Test Case ID
 * MmngrAlloc_S0_A_TC_09_003_029
 * @subsection MmngrAlloc_TC_09_003_029_rr Related Requirement(s)
 * \#276410, \#276732
 * @subsection MmngrAlloc_TC_09_003_029_pp Prerequisite/Precondition
 * OSAL is initialized.
 * @subsection MmngrAlloc_TC_09_003_029_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrAlloc and R_OSAL_MmngrDealloc with abnormal condition in OSAL_MMNGR_ALLOC_MODE_FREE_LIST mode.
 * - Spre-process: open new memory manager
 * - Test09_003_029: alloc with buffer_obj is invalid (NULL).
 * - post-process: close memory manager
 * @subsection MmngrAlloc_TC_09_003_029_tpts Test Procedure/Test Steps
 * -# Open the handle using R_OSAL_MmngrOpen with config:
 *      - config.max_allowed_allocations = 4
 *      - config.max_registered_monitors_cbs = 0
 *      - config.memory_limit = 10MB
 *      - config.mode = OSAL_MMNGR_ALLOC_MODE_FREE_LIST
 * -# Call R_OSAL_MmngrAlloc with "buffer_obj" is NULL.
 * -# Call R_OSAL_MmngrClose to close the handle.
 * @subsection MmngrAlloc_TC_09_003_029_ereb Expected Result/Behavior
 * -# The return of R_OSAL_MmngrOpen is OSAL_RETURN_OK.<br>
 * The return handle is not OSAL_MEMORY_MANAGER_HANDLE_INVALID.
 * -# The return value of R_OSAL_MmngrAlloc is OSAL_RETURN_PAR.
 * -# The return value of R_OSAL_MmngrClose is OSAL_RETURN_OK.
 * @subsection MmngrAlloc_TC_09_003_029_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrAlloc_TC_09_003_029
 */
// [MmngrAlloc_TC_09_003_029]
TEST_F(MemoryApiTest, MmngrAlloc_TC_09_003_029)
{
    osal_memory_buffer_handle_t* p_buffer_obj = NULL;

    // pre-process: open memory manager
    config.max_allowed_allocations     = 4;
    config.max_registered_monitors_cbs = 0;
    config.memory_limit = 10 * 1024 * 1024;
    config.mode = OSAL_MMNGR_ALLOC_MODE_FREE_LIST;
    EXPECT_EQ(R_OSAL_MmngrOpen(&config, &hndl_mmngr), OSAL_RETURN_OK) << "pre-process failed";
    EXPECT_NE(hndl_mmngr, OSAL_MEMORY_MANAGER_HANDLE_INVALID);

    // Test09_003_029
    // @brief: abnormal case: alloc with buffer_obj is invalid (NULL)
    size = 128;
    alignment = 64;
    EXPECT_EQ(R_OSAL_MmngrAlloc(hndl_mmngr, size, alignment, p_buffer_obj), OSAL_RETURN_PAR) << "Test09_003_029 failed";

    //post-process: close memory manager
    EXPECT_EQ(R_OSAL_MmngrClose(hndl_mmngr), OSAL_RETURN_OK) << "post-process failed";
}
// [MmngrAlloc_TC_09_003_029]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrAlloc_TC_09_003_030 MemoryApiTest.MmngrAlloc_TC_09_003_030
 * @subsection MmngrAlloc_TC_09_003_030_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrAlloc_TC_09_003_030_tci Test Case ID
 * MmngrAlloc_S2_A_TC_09_003_030
 * @subsection MmngrAlloc_TC_09_003_030_rr Related Requirement(s)
 * \#276410, \#276732
 * @subsection MmngrAlloc_TC_09_003_030_pp Prerequisite/Precondition
 * OSAL is initialized.
 * @subsection MmngrAlloc_TC_09_003_030_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrAlloc and R_OSAL_MmngrDealloc with abnormal condition in OSAL_MMNGR_ALLOC_MODE_FREE_LIST mode.
 * - Test09_003_030: alloc with handle has already closed.
 * @subsection MmngrAlloc_TC_09_003_030_tpts Test Procedure/Test Steps
 * -# Open the handle using R_OSAL_MmngrOpen with config:
 *      - config.max_allowed_allocations = 4
 *      - config.max_registered_monitors_cbs = 0
 *      - config.memory_limit = 10MB
 *      - config.mode = OSAL_MMNGR_ALLOC_MODE_FREE_LIST
 * -# Call R_OSAL_MmngrClose to close the handle.
 * -# Call R_OSAL_MmngrAlloc with all valid parameters.
 * @subsection MmngrAlloc_TC_09_003_030_ereb Expected Result/Behavior
 * -# The return of R_OSAL_MmngrOpen is OSAL_RETURN_OK.<br>
 * The return handle is not OSAL_MEMORY_MANAGER_HANDLE_INVALID.
 * -# The return value of R_OSAL_MmngrClose is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrAlloc is OSAL_RETURN_HANDLE_NOT_SUPPORTED.<br>
 * The return buffer is OSAL_MEMORY_BUFFER_HANDLE_INVALID.
 * @subsection MmngrAlloc_TC_09_003_030_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrAlloc_TC_09_003_030
 */
// [MmngrAlloc_TC_09_003_030]
TEST_F(MemoryApiTest, MmngrAlloc_TC_09_003_030)
{
    // Test09_003_030
    // @brief: abnormal case: alloc with hndl_mmngr has already closed
    config.max_allowed_allocations     = 4;
    config.max_registered_monitors_cbs = 0;
    config.memory_limit = 10 * 1024 * 1024;
    config.mode = OSAL_MMNGR_ALLOC_MODE_FREE_LIST;
    EXPECT_EQ(R_OSAL_MmngrOpen(&config, &hndl_mmngr), OSAL_RETURN_OK) << "Test09_003_030 failed";
    EXPECT_NE(hndl_mmngr, OSAL_MEMORY_MANAGER_HANDLE_INVALID);
    EXPECT_EQ(R_OSAL_MmngrClose(hndl_mmngr), OSAL_RETURN_OK) << "Test09_003_030 failed";

    size = 64;
    alignment = 64;
    EXPECT_EQ(R_OSAL_MmngrAlloc(hndl_mmngr, size, alignment, &buffer_obj), OSAL_RETURN_HANDLE_NOT_SUPPORTED) << "Test09_003_030 failed";
    EXPECT_EQ(buffer_obj, OSAL_MEMORY_BUFFER_HANDLE_INVALID) << "Test09_003_030 failed";
}
// [MmngrAlloc_TC_09_003_030]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrAlloc_TC_09_003_031 MemoryApiTest.MmngrAlloc_TC_09_003_031
 * @subsection MmngrAlloc_TC_09_003_031_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrAlloc_TC_09_003_031_tci Test Case ID
 * MmngrAlloc_S2_A_TC_09_003_031
 * @subsection MmngrAlloc_TC_09_003_031_rr Related Requirement(s)
 * \#276410, \#276732
 * @subsection MmngrAlloc_TC_09_003_031_pp Prerequisite/Precondition
 * OSAL is initialized.
 * @subsection MmngrAlloc_TC_09_003_031_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrAlloc and R_OSAL_MmngrDealloc with abnormal condition in OSAL_MMNGR_ALLOC_MODE_FREE_LIST mode.
 * - pre-process: open new memory manager
 * - Test09_003_031: the number of allocation is exceed the max_allowed_allocations is 4.
 * - post-process: close memory manager
 * @subsection MmngrAlloc_TC_09_003_031_tpts Test Procedure/Test Steps
 * -# Open the handle using R_OSAL_MmngrOpen with config:
 *      - config.max_allowed_allocations = 4
 *      - config.max_registered_monitors_cbs = 0
 *      - config.memory_limit = 10MB
 *      - config.mode = OSAL_MMNGR_ALLOC_MODE_FREE_LIST
 * -# Call R_OSAL_MmngrAlloc to allocate 4 buffers with valid paramater.
 * -# Call R_OSAL_MmngrAlloc to allocate 5th buffer with same configuration as step above.
 * -# Call R_OSAL_MmngrDealloc to deallocate 4 allocated buffer.
 * -# Call R_OSAL_MmngrClose to close the handle.
 * @subsection MmngrAlloc_TC_09_003_031_ereb Expected Result/Behavior
 * -# The return of R_OSAL_MmngrOpen is OSAL_RETURN_OK.<br>
 * The return handle is not OSAL_MEMORY_MANAGER_HANDLE_INVALID.
 * -# The return value of first 4 times call R_OSAL_MmngrAlloc is OSAL_RETURN_OK.<br>
 * The return of 4 buffer is not OSAL_MEMORY_BUFFER_HANDLE_INVALID.
 * -# The return value of the 5th call R_OSAL_MmngrAlloc is OSAL_RETURN_PROHIBITED. <br>
 * -# The return value of 4 times R_OSAL_MmngrDealloc is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrClose is OSAL_RETURN_OK.
 * @subsection MmngrAlloc_TC_09_003_031_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrAlloc_TC_09_003_031
 */
// [MmngrAlloc_TC_09_003_031]
TEST_F(MemoryApiTest, MmngrAlloc_TC_09_003_031)
{
    osal_memory_buffer_handle_t  buffer_obj_array[5]
        = {OSAL_MEMORY_BUFFER_HANDLE_INVALID, OSAL_MEMORY_BUFFER_HANDLE_INVALID,
           OSAL_MEMORY_BUFFER_HANDLE_INVALID, OSAL_MEMORY_BUFFER_HANDLE_INVALID,
           OSAL_MEMORY_BUFFER_HANDLE_INVALID};

    // pre-process: open memory manager
    config.max_allowed_allocations     = 4;
    config.max_registered_monitors_cbs = 0;
    config.memory_limit = 10 * 1024 * 1024;
    config.mode = OSAL_MMNGR_ALLOC_MODE_FREE_LIST;
    EXPECT_EQ(R_OSAL_MmngrOpen(&config, &hndl_mmngr), OSAL_RETURN_OK) << "pre-process failed";
    EXPECT_NE(hndl_mmngr, OSAL_MEMORY_MANAGER_HANDLE_INVALID);

    // Test09_003_031
    // @brief: abnormal case: call R_OSAL_MmngrAlloc 5 times but config.max_allowed_allocations is 4
    size = 64;
    alignment = 64;
    EXPECT_EQ(R_OSAL_MmngrAlloc(hndl_mmngr, size, alignment, buffer_obj_array), OSAL_RETURN_OK) << "Test09_003_031 failed";
    EXPECT_NE(buffer_obj_array[0], OSAL_MEMORY_BUFFER_HANDLE_INVALID) << "Test09_003_031 failed";
    EXPECT_EQ(R_OSAL_MmngrAlloc(hndl_mmngr, size, alignment, buffer_obj_array + 1), OSAL_RETURN_OK) << "Test09_003_031 failed";
    EXPECT_NE(buffer_obj_array[1], OSAL_MEMORY_BUFFER_HANDLE_INVALID) << "Test09_003_031 failed";
    EXPECT_EQ(R_OSAL_MmngrAlloc(hndl_mmngr, size, alignment, buffer_obj_array + 2), OSAL_RETURN_OK) << "Test09_003_031 failed";
    EXPECT_NE(buffer_obj_array[2], OSAL_MEMORY_BUFFER_HANDLE_INVALID) << "Test09_003_031 failed";
    EXPECT_EQ(R_OSAL_MmngrAlloc(hndl_mmngr, size, alignment, buffer_obj_array + 3), OSAL_RETURN_OK) << "Test09_003_031 failed";
    EXPECT_NE(buffer_obj_array[3], OSAL_MEMORY_BUFFER_HANDLE_INVALID) << "Test09_003_031 failed";
    EXPECT_EQ(R_OSAL_MmngrAlloc(hndl_mmngr, size, alignment, buffer_obj_array + 4), OSAL_RETURN_PROHIBITED) << "Test09_003_031 failed";
    EXPECT_EQ(R_OSAL_MmngrDealloc(hndl_mmngr, buffer_obj_array[3]), OSAL_RETURN_OK) << "Test09_003_031 failed";
    EXPECT_EQ(R_OSAL_MmngrDealloc(hndl_mmngr, buffer_obj_array[2]), OSAL_RETURN_OK) << "Test09_003_031 failed";
    EXPECT_EQ(R_OSAL_MmngrDealloc(hndl_mmngr, buffer_obj_array[1]), OSAL_RETURN_OK) << "Test09_003_031 failed";
    EXPECT_EQ(R_OSAL_MmngrDealloc(hndl_mmngr, buffer_obj_array[0]), OSAL_RETURN_OK) << "Test09_003_031 failed";

    //post-process: close memory manager
    EXPECT_EQ(R_OSAL_MmngrClose(hndl_mmngr), OSAL_RETURN_OK) << "post-process failed";
}
// [MmngrAlloc_TC_09_003_031]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrAlloc_TC_09_003_032 MemoryApiTest.MmngrAlloc_TC_09_003_032
 * @subsection MmngrAlloc_TC_09_003_032_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrAlloc_TC_09_003_032_tci Test Case ID
 * MmngrAlloc_S0_A_TC_09_003_032
 * @subsection MmngrAlloc_TC_09_003_032_rr Related Requirement(s)
 * \#276410, \#276732
 * @subsection MmngrAlloc_TC_09_003_032_pp Prerequisite/Precondition
 * OSAL is initialized.
 * @subsection MmngrAlloc_TC_09_003_032_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrAlloc and R_OSAL_MmngrDealloc with abnormal condition in OSAL_MMNGR_ALLOC_MODE_FREE_LIST mode.
 * - pre-process: open new memory manager
 * - Test09_003_032: allocate buffer which the input size is bigger than memory limit.
 * - post-process: close memory manager
 * @subsection MmngrAlloc_TC_09_003_032_tpts Test Procedure/Test Steps
 * -# Open the handle using R_OSAL_MmngrOpen with config:
 *      - config.max_allowed_allocations = 4
 *      - config.max_registered_monitors_cbs = 0
 *      - config.memory_limit = 10MB
 *      - config.mode = OSAL_MMNGR_ALLOC_MODE_FREE_LIST
 * -# Call R_OSAL_MmngrAlloc with input "size" is 11MB.
 * -# Call R_OSAL_MmngrClose to close the handle.
 * @subsection MmngrAlloc_TC_09_003_032_ereb Expected Result/Behavior
 * -# The return of R_OSAL_MmngrOpen is OSAL_RETURN_OK.<br>
 * The return handle is not OSAL_MEMORY_MANAGER_HANDLE_INVALID.
 * -# The return value of R_OSAL_MmngrAlloc is OSAL_RETURN_CONF.<br>
 * The return buffer is OSAL_MEMORY_BUFFER_HANDLE_INVALID.
 * -# The return value of R_OSAL_MmngrClose is OSAL_RETURN_OK.
 * @subsection MmngrAlloc_TC_09_003_032_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrAlloc_TC_09_003_032
 */
// [MmngrAlloc_TC_09_003_032]
TEST_F(MemoryApiTest, MmngrAlloc_TC_09_003_032)
{
    // pre-process: open memory manager
    config.max_allowed_allocations     = 4;
    config.max_registered_monitors_cbs = 0;
    config.memory_limit = 10 * 1024 * 1024;
    config.mode = OSAL_MMNGR_ALLOC_MODE_FREE_LIST;
    EXPECT_EQ(R_OSAL_MmngrOpen(&config, &hndl_mmngr), OSAL_RETURN_OK) << "pre-process failed";
    EXPECT_NE(hndl_mmngr, OSAL_MEMORY_MANAGER_HANDLE_INVALID);

    // Test09_003_032
    // @brief: abnormal case: size is bigger than memory_limit
    size = 11 * 1024 * 1024;
    alignment = 128;
    buffer_obj = OSAL_MEMORY_BUFFER_HANDLE_INVALID;
    EXPECT_EQ(R_OSAL_MmngrAlloc(hndl_mmngr, size, alignment, &buffer_obj), OSAL_RETURN_CONF) << "Test09_003_032 failed";
    EXPECT_EQ(buffer_obj, OSAL_MEMORY_BUFFER_HANDLE_INVALID) << "Test09_003_032 failed";

    //post-process: close memory manager
    EXPECT_EQ(R_OSAL_MmngrClose(hndl_mmngr), OSAL_RETURN_OK) << "post-process failed";
}
// [MmngrAlloc_TC_09_003_032]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrAlloc_TC_09_003_033 MemoryApiTest.MmngrAlloc_TC_09_003_033
 * @subsection MmngrAlloc_TC_09_003_033_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrAlloc_TC_09_003_033_tci Test Case ID
 * MmngrAlloc_S2_A_TC_09_003_033
 * @subsection MmngrAlloc_TC_09_003_033_rr Related Requirement(s)
 * \#276410, \#276732
 * @subsection MmngrAlloc_TC_09_003_033_pp Prerequisite/Precondition
 * OSAL is initialized.
 * @subsection MmngrAlloc_TC_09_003_033_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrAlloc and R_OSAL_MmngrDealloc with abnormal condition in OSAL_MMNGR_ALLOC_MODE_FREE_LIST mode.
 * - pre-process: open new memory manager
 * - Test09_003_033: confirm the behavior of R_OSAL_MmngrAlloc when out of memory.
 * - post-process: close memory handle
 * @subsection MmngrAlloc_TC_09_003_033_tpts Test Procedure/Test Steps
 * -# Open the handle using R_OSAL_MmngrOpen with config:
 *      - config.max_allowed_allocations = 4
 *      - config.max_registered_monitors_cbs = 0
 *      - config.memory_limit = 10MB
 *      - config.mode = OSAL_MMNGR_ALLOC_MODE_FREE_LIST
 * -# Call R_OSAL_MmngrAlloc to allocate 1st buffer with size is 4MB and align is 64.
 * -# Call R_OSAL_MmngrAlloc to allocate 2nd buffer with size is 4MB and align is 64.
 * -# Call R_OSAL_MmngrAlloc to allocate 3rd buffer with size is 4MB and align is 64.
 * -# Call R_OSAL_MmngrDealloc to deallocate the 2nd buffer.
 * -# Call R_OSAL_MmngrDealloc to deallocate the 1st buffer.
 * -# Call R_OSAL_MmngrClose to close the handle.
 * @subsection MmngrAlloc_TC_09_003_033_ereb Expected Result/Behavior
 * -# The return of R_OSAL_MmngrOpen is OSAL_RETURN_OK.<br>
 * The return handle is not OSAL_MEMORY_MANAGER_HANDLE_INVALID.
 * -# The return value of R_OSAL_MmngrAlloc for 1st buffer is OSAL_RETURN_OK.<br>
 * 2 return buffers is not OSAL_MEMORY_BUFFER_HANDLE_INVALID.
 * -# The return value of R_OSAL_MmngrAlloc for 2nd buffer is OSAL_RETURN_OK.<br>
 * 2 return buffers is not OSAL_MEMORY_BUFFER_HANDLE_INVALID.
 * -# The return value of R_OSAL_MmngrAlloc for 3rd buffer is OSAL_RETURN_MEM.<br>
 * -# The return value of R_OSAL_MmngrDealloc for 1st buffer is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrDealloc for 2nd buffer is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrClose is OSAL_RETURN_OK.
 * @subsection MmngrAlloc_TC_09_003_033_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrAlloc_TC_09_003_033
 */
// [MmngrAlloc_TC_09_003_033]
TEST_F(MemoryApiTest, MmngrAlloc_TC_09_003_033)
{
    osal_memory_buffer_handle_t  buffer_obj1 = OSAL_MEMORY_BUFFER_HANDLE_INVALID;
    osal_memory_buffer_handle_t  buffer_obj2 = OSAL_MEMORY_BUFFER_HANDLE_INVALID;
    osal_memory_buffer_handle_t  buffer_obj3 = OSAL_MEMORY_BUFFER_HANDLE_INVALID;

    // pre-process: open memory manager
    config.max_allowed_allocations     = 4;
    config.max_registered_monitors_cbs = 0;
    config.memory_limit = 10 * 1024 * 1024;
    config.mode = OSAL_MMNGR_ALLOC_MODE_FREE_LIST;
    EXPECT_EQ(R_OSAL_MmngrOpen(&config, &hndl_mmngr), OSAL_RETURN_OK) << "pre-process failed";
    EXPECT_NE(hndl_mmngr, OSAL_MEMORY_MANAGER_HANDLE_INVALID);

    // Test09_003_033
    // @brief: abnormal case: confirm running out of memory:
    size = 4 * 1024 * 1024;
    alignment = 64;
    EXPECT_EQ(R_OSAL_MmngrAlloc(hndl_mmngr, size, alignment, &buffer_obj1), OSAL_RETURN_OK) << "Test09_003_033 failed";
    EXPECT_NE(buffer_obj1, OSAL_MEMORY_BUFFER_HANDLE_INVALID) << "Test09_003_033 failed";
    EXPECT_EQ(R_OSAL_MmngrAlloc(hndl_mmngr, size, alignment, &buffer_obj2), OSAL_RETURN_OK) << "Test09_003_033 failed";
    EXPECT_NE(buffer_obj2, OSAL_MEMORY_BUFFER_HANDLE_INVALID) << "Test09_003_033 failed";
    EXPECT_EQ(R_OSAL_MmngrAlloc(hndl_mmngr, size, alignment, &buffer_obj3), OSAL_RETURN_MEM) << "Test09_003_033 failed"
        << R_OSAL_MmngrDealloc(hndl_mmngr, buffer_obj);
    EXPECT_EQ(R_OSAL_MmngrDealloc(hndl_mmngr, buffer_obj2), OSAL_RETURN_OK) << "Test09_003_033 failed";
    EXPECT_EQ(R_OSAL_MmngrDealloc(hndl_mmngr, buffer_obj1), OSAL_RETURN_OK) << "Test09_003_033 failed";

    //post-process: close memory manager
    EXPECT_EQ(R_OSAL_MmngrClose(hndl_mmngr), OSAL_RETURN_OK) << "post-process failed";
}
// [MmngrAlloc_TC_09_003_033]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrAlloc_TC_09_003_034 MemoryApiTest.MmngrAlloc_TC_09_003_034
 * @subsection MmngrAlloc_TC_09_003_034_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrAlloc_TC_09_003_034_tci Test Case ID
 * MmngrAlloc_S3_N_TC_09_003_034
 * @subsection MmngrAlloc_TC_09_003_034_rr Related Requirement(s)
 * \#276402, \#276410, \#276732
 * @subsection MmngrAlloc_TC_09_003_034_pp Prerequisite/Precondition
 * OSAL is initialized.
 * @subsection MmngrAlloc_TC_09_003_034_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrAlloc and R_OSAL_MmngrDealloc with normal condition in OSAL_MMNGR_ALLOC_MODE_FREE_LIST_PROT mode.
 * - pre-process: Open new memory manager
 * - Test09_003_034: alloc with all valid parameters.
 * - post-process: close memory manager
 * @subsection MmngrAlloc_TC_09_003_034_tpts Test Procedure/Test Steps
 * -# Open the handle using R_OSAL_MmngrOpen with config:
 *      - config.max_allowed_allocations = 4
 *      - config.max_registered_monitors_cbs = 0
 *      - config.memory_limit = 10MB
 *      - config.mode = OSAL_MMNGR_ALLOC_MODE_FREE_LIST_PROT
 * -# Call R_OSAL_MmngrAlloc with "size" is 128 byte and the "alignment" is 128 byte.
 * -# Call R_OSAL_MmngrDealloc to deallocate buffer above
 * -# Call R_OSAL_MmngrClose to close memory manager.
 * @subsection MmngrAlloc_TC_09_003_034_ereb Expected Result/Behavior
 * -# The return of R_OSAL_MmngrOpen is OSAL_RETURN_OK.<br>
 * The return handle is not OSAL_MEMORY_MANAGER_HANDLE_INVALID.
 * -# The return value of R_OSAL_MmngrAlloc is OSAL_RETURN_OK.<br>
 * The return buffer is not OSAL_MEMORY_BUFFER_HANDLE_INVALID.
 * -# The return value of R_OSAL_MmngrDealloc is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrClose is OSAL_RETURN_OK.
 * @subsection MmngrAlloc_TC_09_003_034_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrAlloc_TC_09_003_034
 */
// [MmngrAlloc_TC_09_003_034]
TEST_F(MemoryApiTest, MmngrAlloc_TC_09_003_034)
{
    //pre-process: open new memory manager
    config.max_allowed_allocations     = 4;
    config.max_registered_monitors_cbs = 0;
    config.memory_limit = 10 * 1024 * 1024;
    config.mode = OSAL_MMNGR_ALLOC_MODE_FREE_LIST_PROT;
    EXPECT_EQ(R_OSAL_MmngrOpen(&config, &hndl_mmngr), OSAL_RETURN_OK) << "pre-process failed";
    EXPECT_NE(hndl_mmngr, OSAL_MEMORY_MANAGER_HANDLE_INVALID) << "pre-process failed";

    // @brief: normal case: alloc/dealloc with all valid argument
    // Test09_003_034
    size = 128;
    alignment = 128;
    EXPECT_EQ(R_OSAL_MmngrAlloc(hndl_mmngr, size, alignment, &buffer_obj), OSAL_RETURN_OK) << "Test09_003_034 failed";
    EXPECT_NE(buffer_obj, OSAL_MEMORY_BUFFER_HANDLE_INVALID) << "Test09_003_034 failed";
    EXPECT_EQ(R_OSAL_MmngrDealloc(hndl_mmngr, buffer_obj), OSAL_RETURN_OK) << "Test09_003_034 failed";

    //post-process: close memory manager
    EXPECT_EQ(R_OSAL_MmngrClose(hndl_mmngr), OSAL_RETURN_OK) << "post-process failed";
}
// [MmngrAlloc_TC_09_003_034]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrAlloc_TC_09_003_035 MemoryApiTest.MmngrAlloc_TC_09_003_035
 * @subsection MmngrAlloc_TC_09_003_035_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrAlloc_TC_09_003_035_tci Test Case ID
 * MmngrAlloc_S3_BN_TC_09_003_035
 * @subsection MmngrAlloc_TC_09_003_035_rr Related Requirement(s)
 * \#276410, \#276732
 * @subsection MmngrAlloc_TC_09_003_035_pp Prerequisite/Precondition
 * OSAL is initialized.
 * @subsection MmngrAlloc_TC_09_003_035_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrAlloc and R_OSAL_MmngrDealloc with normal condition in OSAL_MMNGR_ALLOC_MODE_FREE_LIST_PROT mode.
 * - pre-process: Open new memory manager
 * - Test09_003_035: size is equal to memory_limit(10MB).
 * - post-process: close memory manager
 * @subsection MmngrAlloc_TC_09_003_035_tpts Test Procedure/Test Steps
 * -# Open the handle using R_OSAL_MmngrOpen with config:
 *      - config.max_allowed_allocations = 4
 *      - config.max_registered_monitors_cbs = 0
 *      - config.memory_limit = 10MB
 *      - config.mode = OSAL_MMNGR_ALLOC_MODE_FREE_LIST_PROT
 * -# Call R_OSAL_MmngrAlloc with "size" is 4*1024 byte.
 * -# Call R_OSAL_MmngrDealloc to de-allocate the allocated buffer above.
 * -# Call R_OSAL_MmngrClose to close the handle.
 * @subsection MmngrAlloc_TC_09_003_035_ereb Expected Result/Behavior
 * -# The return of R_OSAL_MmngrOpen is OSAL_RETURN_OK.<br>
 * The return handle is not OSAL_MEMORY_MANAGER_HANDLE_INVALID.
 * -# The return value of R_OSAL_MmngrAlloc is OSAL_RETURN_OK.<br>
 * The return buffer is not OSAL_MEMORY_BUFFER_HANDLE_INVALID.
 * -# The return value of R_OSAL_MmngrDealloc is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrClose is OSAL_RETURN_OK.
 * @subsection MmngrAlloc_TC_09_003_035_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrAlloc_TC_09_003_035
 */
// [MmngrAlloc_TC_09_003_035]
TEST_F(MemoryApiTest, MmngrAlloc_TC_09_003_035)
{
    //pre-process: open new memory manager
    config.max_allowed_allocations     = 4;
    config.max_registered_monitors_cbs = 0;
    config.memory_limit = 10 * 1024 * 1024;
    config.mode = OSAL_MMNGR_ALLOC_MODE_FREE_LIST_PROT;
    EXPECT_EQ(R_OSAL_MmngrOpen(&config, &hndl_mmngr), OSAL_RETURN_OK) << "pre-process failed";
    EXPECT_NE(hndl_mmngr, OSAL_MEMORY_MANAGER_HANDLE_INVALID) << "pre-process failed";

    // Test09_003_035
    // @brief: boundary normal case: size is equal to memory_limit (10MB)
    size = 10 * 1024 * 1024;
    alignment = 128;
    EXPECT_EQ(R_OSAL_MmngrAlloc(hndl_mmngr, size, alignment, &buffer_obj), OSAL_RETURN_OK) << "Test09_003_035 failed";
    EXPECT_NE(buffer_obj, OSAL_MEMORY_BUFFER_HANDLE_INVALID) << "Test09_003_035 failed";
    EXPECT_EQ(R_OSAL_MmngrDealloc(hndl_mmngr, buffer_obj), OSAL_RETURN_OK) << "Test09_003_035 failed";
    buffer_obj = OSAL_MEMORY_BUFFER_HANDLE_INVALID;

    //post-process: close memory manager
    EXPECT_EQ(R_OSAL_MmngrClose(hndl_mmngr), OSAL_RETURN_OK) << "post-process failed";
}
// [MmngrAlloc_TC_09_003_035]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrAlloc_TC_09_003_036 MemoryApiTest.MmngrAlloc_TC_09_003_036
 * @subsection MmngrAlloc_TC_09_003_036_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrAlloc_TC_09_003_036_tci Test Case ID
 * MmngrAlloc_S3_BN_TC_09_003_036
 * @subsection MmngrAlloc_TC_09_003_036_rr Related Requirement(s)
 * \#276410, \#276732
 * @subsection MmngrAlloc_TC_09_003_036_pp Prerequisite/Precondition
 * OSAL is initialized.
 * @subsection MmngrAlloc_TC_09_003_036_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrAlloc and R_OSAL_MmngrDealloc with normal condition in OSAL_MMNGR_ALLOC_MODE_FREE_LIST_PROT mode.
 * - pre-process: Open new memory manager
 * - Test09_003_036: alignment is 64 byte.
 * - post-process: close memory manager
 * @subsection MmngrAlloc_TC_09_003_036_tpts Test Procedure/Test Steps
 * -# Open the handle using R_OSAL_MmngrOpen with config:
 *      - config.max_allowed_allocations = 4
 *      - config.max_registered_monitors_cbs = 0
 *      - config.memory_limit = 10MB
 *      - config.mode = OSAL_MMNGR_ALLOC_MODE_FREE_LIST_PROT
 * -# Call R_OSAL_MmngrAlloc with "alignment" is 64 byte.
 * -# Call R_OSAL_MmngrDealloc to deallocate the allocated buffer above.
 * -# Call R_OSAL_MmngrClose to close the handle.
 * @subsection MmngrAlloc_TC_09_003_036_ereb Expected Result/Behavior
 * -# The return of R_OSAL_MmngrOpen is OSAL_RETURN_OK.<br>
 * The return handle is not OSAL_MEMORY_MANAGER_HANDLE_INVALID.
 * -# The return value of R_OSAL_MmngrAlloc is OSAL_RETURN_OK.<br>
 * The return buffer is not OSAL_MEMORY_BUFFER_HANDLE_INVALID.
 * -# The return value of R_OSAL_MmngrDealloc is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrClose is OSAL_RETURN_OK.
 * @subsection MmngrAlloc_TC_09_003_036_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrAlloc_TC_09_003_036
 */
// [MmngrAlloc_TC_09_003_036]
TEST_F(MemoryApiTest, MmngrAlloc_TC_09_003_036)
{
    //pre-process: open new memory manager
    config.max_allowed_allocations     = 4;
    config.max_registered_monitors_cbs = 0;
    config.memory_limit = 10 * 1024 * 1024;
    config.mode = OSAL_MMNGR_ALLOC_MODE_FREE_LIST_PROT;
    EXPECT_EQ(R_OSAL_MmngrOpen(&config, &hndl_mmngr), OSAL_RETURN_OK) << "pre-process failed";
    EXPECT_NE(hndl_mmngr, OSAL_MEMORY_MANAGER_HANDLE_INVALID) << "pre-process failed";

    // Test09_003_036
    // @brief: boundary normal case: alignment is 64 byte
    size = 1024;
    alignment = 64;
    EXPECT_EQ(R_OSAL_MmngrAlloc(hndl_mmngr, size, alignment, &buffer_obj), OSAL_RETURN_OK) << "Test09_003_036 failed";
    EXPECT_NE(buffer_obj, OSAL_MEMORY_BUFFER_HANDLE_INVALID) << "Test09_003_036 failed";
    EXPECT_EQ(R_OSAL_MmngrDealloc(hndl_mmngr, buffer_obj), OSAL_RETURN_OK) << "Test09_003_036 failed";
    buffer_obj = OSAL_MEMORY_BUFFER_HANDLE_INVALID;

    //post-process: close memory manager
    EXPECT_EQ(R_OSAL_MmngrClose(hndl_mmngr), OSAL_RETURN_OK) << "post-process failed";
}
// [MmngrAlloc_TC_09_003_036]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrAlloc_TC_09_003_037 MemoryApiTest.MmngrAlloc_TC_09_003_037
 * @subsection MmngrAlloc_TC_09_003_037_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrAlloc_TC_09_003_037_tci Test Case ID
 * MmngrAlloc_S0_BA_TC_09_003_037
 * @subsection MmngrAlloc_TC_09_003_037_rr Related Requirement(s)
 * \#276410, \#276732
 * @subsection MmngrAlloc_TC_09_003_037_pp Prerequisite/Precondition
 * OSAL is initialized.
 * @subsection MmngrAlloc_TC_09_003_037_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrAlloc and R_OSAL_MmngrDealloc with abnormal condition in OSAL_MMNGR_ALLOC_MODE_FREE_LIST_PROT mode.
 * - pre-process: open new memory manager
 * - Test09_003_037: allocate buffer which size is not aligned.
 * - post-process: close memory manager
 * @subsection MmngrAlloc_TC_09_003_037_tpts Test Procedure/Test Steps
 * -# Open the handle using R_OSAL_MmngrOpen with config:
 *      - config.max_allowed_allocations = 4
 *      - config.max_registered_monitors_cbs = 0
 *      - config.memory_limit = 10MB
 *      - config.mode = OSAL_MMNGR_ALLOC_MODE_FREE_LIST_PROT
 * -# Call R_OSAL_MmngrAlloc with "size" is 129 byte.
 * -# Call R_OSAL_MmngrClose to close the handle.
 * @subsection MmngrAlloc_TC_09_003_037_ereb Expected Result/Behavior
 * -# The return of R_OSAL_MmngrOpen is OSAL_RETURN_OK.<br>
 * The return handle is not OSAL_MEMORY_MANAGER_HANDLE_INVALID.
 * -# The return value of R_OSAL_MmngrAlloc is OSAL_RETURN_CONF.<br>
 * the return buffer is OSAL_MEMORY_BUFFER_HANDLE_INVALID.
 * -# The return value of R_OSAL_MmngrClose is OSAL_RETURN_OK.
 * @subsection MmngrAlloc_TC_09_003_037_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrAlloc_TC_09_003_037
 */
// [MmngrAlloc_TC_09_003_037]
TEST_F(MemoryApiTest, MmngrAlloc_TC_09_003_037)
{
    // pre-process: open memory manager
    config.max_allowed_allocations     = 4;
    config.max_registered_monitors_cbs = 0;
    config.memory_limit = 10 * 1024 * 1024;
    config.mode = OSAL_MMNGR_ALLOC_MODE_FREE_LIST_PROT;
    EXPECT_EQ(R_OSAL_MmngrOpen(&config, &hndl_mmngr), OSAL_RETURN_OK) << "pre-process failed";
    EXPECT_NE(hndl_mmngr, OSAL_MEMORY_MANAGER_HANDLE_INVALID);

    // Test09_003_037
    // @brief: abnormal case: size is not aligned
    size = 129;
    alignment = 64;
    EXPECT_EQ(R_OSAL_MmngrAlloc(hndl_mmngr, size, alignment, &buffer_obj), OSAL_RETURN_CONF) << "Test09_003_037 failed";
    EXPECT_EQ(buffer_obj, OSAL_MEMORY_BUFFER_HANDLE_INVALID) << "Test09_003_037 failed";

    //post-process: close memory manager
    EXPECT_EQ(R_OSAL_MmngrClose(hndl_mmngr), OSAL_RETURN_OK) << "post-process failed";
}
// [MmngrAlloc_TC_09_003_037]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrAlloc_TC_09_003_038 MemoryApiTest.MmngrAlloc_TC_09_003_038
 * @subsection MmngrAlloc_TC_09_003_038_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrAlloc_TC_09_003_038_tci Test Case ID
 * MmngrAlloc_S0_BA_TC_09_003_038
 * @subsection MmngrAlloc_TC_09_003_038_rr Related Requirement(s)
 * \#276410, \#276732
 * @subsection MmngrAlloc_TC_09_003_038_pp Prerequisite/Precondition
 * OSAL is initialized.
 * @subsection MmngrAlloc_TC_09_003_038_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrAlloc and R_OSAL_MmngrDealloc with abnormal condition in OSAL_MMNGR_ALLOC_MODE_FREE_LIST_PROT mode.
 * - pre-process: open new memory manager
 * - Test09_003_038: allocate buffer which alignment is not aligned by 64.
 * - post-process: close memory manager
 * @subsection MmngrAlloc_TC_09_003_038_tpts Test Procedure/Test Steps
 * -# Open the handle using R_OSAL_MmngrOpen with config:
 *      - config.max_allowed_allocations = 4
 *      - config.max_registered_monitors_cbs = 0
 *      - config.memory_limit = 10MB
 *      - config.mode = OSAL_MMNGR_ALLOC_MODE_FREE_LIST_PROT
 * -# Call R_OSAL_MmngrAlloc with "alignment" is 67 byte.
 * -# Call R_OSAL_MmngrClose to close the handle.
 * @subsection MmngrAlloc_TC_09_003_038_ereb Expected Result/Behavior
 * -# The return of R_OSAL_MmngrOpen is OSAL_RETURN_OK.<br>
 * The return handle is not OSAL_MEMORY_MANAGER_HANDLE_INVALID.
 * -# The return value of R_OSAL_MmngrAlloc is OSAL_RETURN_CONF.<br>
 * The return buffer is OSAL_MEMORY_BUFFER_HANDLE_INVALID.
 * -# The return value of R_OSAL_MmngrClose is OSAL_RETURN_OK.
 * @subsection MmngrAlloc_TC_09_003_038_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrAlloc_TC_09_003_038
 */
// [MmngrAlloc_TC_09_003_038]
TEST_F(MemoryApiTest, MmngrAlloc_TC_09_003_038)
{
    // pre-process: open memory manager
    config.max_allowed_allocations     = 4;
    config.max_registered_monitors_cbs = 0;
    config.memory_limit = 10 * 1024 * 1024;
    config.mode = OSAL_MMNGR_ALLOC_MODE_FREE_LIST_PROT;
    EXPECT_EQ(R_OSAL_MmngrOpen(&config, &hndl_mmngr), OSAL_RETURN_OK) << "pre-process failed";
    EXPECT_NE(hndl_mmngr, OSAL_MEMORY_MANAGER_HANDLE_INVALID);

    // Test09_003_038
    // @brief: abnormal case: the alignment is invalid (not aligned by 64)
    size = 1024;
    alignment = 67;
    EXPECT_EQ(R_OSAL_MmngrAlloc(hndl_mmngr, size, alignment, &buffer_obj), OSAL_RETURN_CONF) << "Test09_003_038 failed";
    EXPECT_EQ(buffer_obj, OSAL_MEMORY_BUFFER_HANDLE_INVALID) << "Test09_003_038 failed";

    //post-process: close memory manager
    EXPECT_EQ(R_OSAL_MmngrClose(hndl_mmngr), OSAL_RETURN_OK) << "post-process failed";
}
// [MmngrAlloc_TC_09_003_038]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrAlloc_TC_09_003_039 MemoryApiTest.MmngrAlloc_TC_09_003_039
 * @subsection MmngrAlloc_TC_09_003_039_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrAlloc_TC_09_003_039_tci Test Case ID
 * MmngrAlloc_S0_A_TC_09_003_039
 * @subsection MmngrAlloc_TC_09_003_039_rr Related Requirement(s)
 * \#276410, \#276732
 * @subsection MmngrAlloc_TC_09_003_039_pp Prerequisite/Precondition
 * OSAL is initialized.
 * @subsection MmngrAlloc_TC_09_003_039_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrAlloc and R_OSAL_MmngrDealloc with abnormal condition in OSAL_MMNGR_ALLOC_MODE_FREE_LIST_PROT mode.
 * - pre-process: open new memory manager
 * - Test09_003_039: alloc with buffer_obj is invalid (NULL).
 * - post-process: close memory manager
 * @subsection MmngrAlloc_TC_09_003_039_tpts Test Procedure/Test Steps
 * -# Open the handle using R_OSAL_MmngrOpen with config:
 *      - config.max_allowed_allocations = 4
 *      - config.max_registered_monitors_cbs = 0
 *      - config.memory_limit = 10MB
 *      - config.mode = OSAL_MMNGR_ALLOC_MODE_FREE_LIST_PROT
 * -# Call R_OSAL_MmngrAlloc with "buffer_obj" is NULL.
 * -# Call R_OSAL_MmngrClose to close the handle.
 * @subsection MmngrAlloc_TC_09_003_039_ereb Expected Result/Behavior
 * -# The return of R_OSAL_MmngrOpen is OSAL_RETURN_OK.<br>
 * The return handle is not OSAL_MEMORY_MANAGER_HANDLE_INVALID.
 * -# The return value of R_OSAL_MmngrAlloc is OSAL_RETURN_PAR.
 * -# The return value of R_OSAL_MmngrClose is OSAL_RETURN_OK.
 * @subsection MmngrAlloc_TC_09_003_039_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrAlloc_TC_09_003_039
 */
// [MmngrAlloc_TC_09_003_039]
TEST_F(MemoryApiTest, MmngrAlloc_TC_09_003_039)
{
    osal_memory_buffer_handle_t* p_buffer_obj = NULL;

    // pre-process: open memory manager
    config.max_allowed_allocations     = 4;
    config.max_registered_monitors_cbs = 0;
    config.memory_limit = 10 * 1024 * 1024;
    config.mode = OSAL_MMNGR_ALLOC_MODE_FREE_LIST_PROT;
    EXPECT_EQ(R_OSAL_MmngrOpen(&config, &hndl_mmngr), OSAL_RETURN_OK) << "pre-process failed";
    EXPECT_NE(hndl_mmngr, OSAL_MEMORY_MANAGER_HANDLE_INVALID);

    // Test09_003_039
    // @brief: abnormal case: alloc/dealloc with buffer_obj is invalid (NULL)
    size = 128;
    alignment = 64;
    EXPECT_EQ(R_OSAL_MmngrAlloc(hndl_mmngr, size, alignment, p_buffer_obj), OSAL_RETURN_PAR) << "Test09_003_039 failed";

    //post-process: close memory manager
    EXPECT_EQ(R_OSAL_MmngrClose(hndl_mmngr), OSAL_RETURN_OK) << "post-process failed";
}
// [MmngrAlloc_TC_09_003_039]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrAlloc_TC_09_003_040 MemoryApiTest.MmngrAlloc_TC_09_003_040
 * @subsection MmngrAlloc_TC_09_003_040_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrAlloc_TC_09_003_040_tci Test Case ID
 * MmngrAlloc_S2_A_TC_09_003_040
 * @subsection MmngrAlloc_TC_09_003_040_rr Related Requirement(s)
 * \#276410, \#276732
 * @subsection MmngrAlloc_TC_09_003_040_pp Prerequisite/Precondition
 * OSAL is initialized.
 * @subsection MmngrAlloc_TC_09_003_040_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrAlloc and R_OSAL_MmngrDealloc with abnormal condition in OSAL_MMNGR_ALLOC_MODE_FREE_LIST_PROT mode.
 * - Test09_003_040: alloc with handle has already closed.
 * @subsection MmngrAlloc_TC_09_003_040_tpts Test Procedure/Test Steps
 * -# Open the handle using R_OSAL_MmngrOpen with config:
 *      - config.max_allowed_allocations = 4
 *      - config.max_registered_monitors_cbs = 0
 *      - config.memory_limit = 10MB
 *      - config.mode = OSAL_MMNGR_ALLOC_MODE_FREE_LIST_PROT
 * -# Call R_OSAL_MmngrClose to close the handle.
 * -# Call R_OSAL_MmngrAlloc with all valid parameters.
 * @subsection MmngrAlloc_TC_09_003_040_ereb Expected Result/Behavior
 * -# The return of R_OSAL_MmngrOpen is OSAL_RETURN_OK.<br>
 * The return handle is not OSAL_MEMORY_MANAGER_HANDLE_INVALID.
 * -# The return value of R_OSAL_MmngrClose is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrAlloc is OSAL_RETURN_HANDLE_NOT_SUPPORTED.<br>
 * The return buffer is OSAL_MEMORY_BUFFER_HANDLE_INVALID.
 * @subsection MmngrAlloc_TC_09_003_040_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrAlloc_TC_09_003_040
 */
// [MmngrAlloc_TC_09_003_040]
TEST_F(MemoryApiTest, MmngrAlloc_TC_09_003_040)
{
    // Test09_003_040
    // @brief: abnormal case: alloc with hndl_mmngr has already closed
    config.max_allowed_allocations     = 4;
    config.max_registered_monitors_cbs = 0;
    config.memory_limit = 10 * 1024 * 1024;
    config.mode = OSAL_MMNGR_ALLOC_MODE_FREE_LIST_PROT;
    EXPECT_EQ(R_OSAL_MmngrOpen(&config, &hndl_mmngr), OSAL_RETURN_OK) << "Test09_003_040 failed";
    EXPECT_NE(hndl_mmngr, OSAL_MEMORY_MANAGER_HANDLE_INVALID);
    EXPECT_EQ(R_OSAL_MmngrClose(hndl_mmngr), OSAL_RETURN_OK) << "Test09_003_040 failed";

    size = 64;
    alignment = 64;
    EXPECT_EQ(R_OSAL_MmngrAlloc(hndl_mmngr, size, alignment, &buffer_obj), OSAL_RETURN_HANDLE_NOT_SUPPORTED) << "Test09_003_040 failed";
    EXPECT_EQ(buffer_obj, OSAL_MEMORY_BUFFER_HANDLE_INVALID) << "Test09_003_040 failed";
}
// [MmngrAlloc_TC_09_003_040]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrAlloc_TC_09_003_041 MemoryApiTest.MmngrAlloc_TC_09_003_041
 * @subsection MmngrAlloc_TC_09_003_041_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrAlloc_TC_09_003_041_tci Test Case ID
 * MmngrAlloc_S2_A_TC_09_003_041
 * @subsection MmngrAlloc_TC_09_003_041_rr Related Requirement(s)
 * \#276410, \#276732
 * @subsection MmngrAlloc_TC_09_003_041_pp Prerequisite/Precondition
 * OSAL is initialized.
 * @subsection MmngrAlloc_TC_09_003_041_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrAlloc and R_OSAL_MmngrDealloc with abnormal condition in OSAL_MMNGR_ALLOC_MODE_FREE_LIST_PROT mode.
 * - pre-process: open new memory manager
 * - Test09_003_041: the number of allocation is exceed the max_allowed_allocations is 4.
 * - post-process: close memory manager
 * @subsection MmngrAlloc_TC_09_003_041_tpts Test Procedure/Test Steps
 * -# Open the handle using R_OSAL_MmngrOpen with config:
 *      - config.max_allowed_allocations = 4
 *      - config.max_registered_monitors_cbs = 0
 *      - config.memory_limit = 10MB
 *      - config.mode = OSAL_MMNGR_ALLOC_MODE_FREE_LIST_PROT
 * -# Call R_OSAL_MmngrAlloc to allocate 4 buffers with valid paramater.
 * -# Call R_OSAL_MmngrAlloc to allocate 5th buffer with same configuration as step above.
 * -# Call R_OSAL_MmngrDealloc to deallocate 4 allocated buffer.
 * -# Call R_OSAL_MmngrClose to close the handle.
 * @subsection MmngrAlloc_TC_09_003_041_ereb Expected Result/Behavior
 * -# The return of R_OSAL_MmngrOpen is OSAL_RETURN_OK.<br>
 * The return handle is not OSAL_MEMORY_MANAGER_HANDLE_INVALID.
 * -# The return value of first 4 times call R_OSAL_MmngrAlloc is OSAL_RETURN_OK.<br>
 * The return of 4 buffer is not OSAL_MEMORY_BUFFER_HANDLE_INVALID.
 * -# The return value of the 5th call R_OSAL_MmngrAlloc is OSAL_RETURN_PROHIBITED. <br>
 * -# The return value of 4 times R_OSAL_MmngrDealloc is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrClose is OSAL_RETURN_OK.
 * @subsection MmngrAlloc_TC_09_003_041_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrAlloc_TC_09_003_041
 */
// [MmngrAlloc_TC_09_003_041]
TEST_F(MemoryApiTest, MmngrAlloc_TC_09_003_041)
{
    osal_memory_buffer_handle_t  buffer_obj_array[5]
        = {OSAL_MEMORY_BUFFER_HANDLE_INVALID, OSAL_MEMORY_BUFFER_HANDLE_INVALID,
           OSAL_MEMORY_BUFFER_HANDLE_INVALID, OSAL_MEMORY_BUFFER_HANDLE_INVALID,
           OSAL_MEMORY_BUFFER_HANDLE_INVALID};

    // pre-process: open memory manager
    config.max_allowed_allocations     = 4;
    config.max_registered_monitors_cbs = 0;
    config.memory_limit = 10 * 1024 * 1024;
    config.mode = OSAL_MMNGR_ALLOC_MODE_FREE_LIST_PROT;
    EXPECT_EQ(R_OSAL_MmngrOpen(&config, &hndl_mmngr), OSAL_RETURN_OK) << "pre-process failed";
    EXPECT_NE(hndl_mmngr, OSAL_MEMORY_MANAGER_HANDLE_INVALID);

    // Test09_003_041
    // @brief: abnormal case: call R_OSAL_MmngrAlloc 5 times but config.max_allowed_allocations is 4
    size = 64;
    alignment = 64;
    EXPECT_EQ(R_OSAL_MmngrAlloc(hndl_mmngr, size, alignment, buffer_obj_array), OSAL_RETURN_OK) << "Test09_003_041 failed";
    EXPECT_NE(buffer_obj_array[0], OSAL_MEMORY_BUFFER_HANDLE_INVALID) << "Test09_003_041 failed";
    EXPECT_EQ(R_OSAL_MmngrAlloc(hndl_mmngr, size, alignment, buffer_obj_array + 1), OSAL_RETURN_OK) << "Test09_003_041 failed";
    EXPECT_NE(buffer_obj_array[1], OSAL_MEMORY_BUFFER_HANDLE_INVALID) << "Test09_003_041 failed";
    EXPECT_EQ(R_OSAL_MmngrAlloc(hndl_mmngr, size, alignment, buffer_obj_array + 2), OSAL_RETURN_OK) << "Test09_003_041 failed";
    EXPECT_NE(buffer_obj_array[2], OSAL_MEMORY_BUFFER_HANDLE_INVALID) << "Test09_003_041 failed";
    EXPECT_EQ(R_OSAL_MmngrAlloc(hndl_mmngr, size, alignment, buffer_obj_array + 3), OSAL_RETURN_OK) << "Test09_003_041 failed";
    EXPECT_NE(buffer_obj_array[3], OSAL_MEMORY_BUFFER_HANDLE_INVALID) << "Test09_003_041 failed";
    EXPECT_EQ(R_OSAL_MmngrAlloc(hndl_mmngr, size, alignment, buffer_obj_array + 4), OSAL_RETURN_PROHIBITED) << "Test09_003_041 failed";
    EXPECT_EQ(R_OSAL_MmngrDealloc(hndl_mmngr, buffer_obj_array[3]), OSAL_RETURN_OK) << "Test09_003_041 failed";
    EXPECT_EQ(R_OSAL_MmngrDealloc(hndl_mmngr, buffer_obj_array[2]), OSAL_RETURN_OK) << "Test09_003_041 failed";
    EXPECT_EQ(R_OSAL_MmngrDealloc(hndl_mmngr, buffer_obj_array[1]), OSAL_RETURN_OK) << "Test09_003_041 failed";
    EXPECT_EQ(R_OSAL_MmngrDealloc(hndl_mmngr, buffer_obj_array[0]), OSAL_RETURN_OK) << "Test09_003_041 failed";

    //post-process: close memory manager
    EXPECT_EQ(R_OSAL_MmngrClose(hndl_mmngr), OSAL_RETURN_OK) << "post-process failed";
}
// [MmngrAlloc_TC_09_003_041]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrAlloc_TC_09_003_042 MemoryApiTest.MmngrAlloc_TC_09_003_042
 * @subsection MmngrAlloc_TC_09_003_042_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrAlloc_TC_09_003_042_tci Test Case ID
 * MmngrAlloc_S0_A_TC_09_003_042
 * @subsection MmngrAlloc_TC_09_003_042_rr Related Requirement(s)
 * \#276410, \#276732
 * @subsection MmngrAlloc_TC_09_003_042_pp Prerequisite/Precondition
 * OSAL is initialized.
 * @subsection MmngrAlloc_TC_09_003_042_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrAlloc and R_OSAL_MmngrDealloc with abnormal condition in OSAL_MMNGR_ALLOC_MODE_FREE_LIST_PROT mode.
 * - pre-process: open new memory manager
 * - Test09_003_042: allocate buffer which the input size is bigger than memory limit.
 * - post-process: close memory manager
 * @subsection MmngrAlloc_TC_09_003_042_tpts Test Procedure/Test Steps
 * -# Open the handle using R_OSAL_MmngrOpen with config:
 *      - config.max_allowed_allocations = 4
 *      - config.max_registered_monitors_cbs = 0
 *      - config.memory_limit = 10MB
 *      - config.mode = OSAL_MMNGR_ALLOC_MODE_FREE_LIST_PROT
 * -# Call R_OSAL_MmngrAlloc with input "size" is 11MB.
 * -# Call R_OSAL_MmngrClose to close the handle.
 * @subsection MmngrAlloc_TC_09_003_042_ereb Expected Result/Behavior
 * -# The return of R_OSAL_MmngrOpen is OSAL_RETURN_OK.<br>
 * The return handle is not OSAL_MEMORY_MANAGER_HANDLE_INVALID.
 * -# The return value of R_OSAL_MmngrAlloc is OSAL_RETURN_CONF.<br>
 * The return buffer is OSAL_MEMORY_BUFFER_HANDLE_INVALID.
 * -# The return value of R_OSAL_MmngrClose is OSAL_RETURN_OK.
 * @subsection MmngrAlloc_TC_09_003_042_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrAlloc_TC_09_003_042
 */
// [MmngrAlloc_TC_09_003_042]
TEST_F(MemoryApiTest, MmngrAlloc_TC_09_003_042)
{
    // pre-process: open memory manager
    config.max_allowed_allocations     = 4;
    config.max_registered_monitors_cbs = 0;
    config.memory_limit = 10 * 1024 * 1024;
    config.mode = OSAL_MMNGR_ALLOC_MODE_FREE_LIST_PROT;
    EXPECT_EQ(R_OSAL_MmngrOpen(&config, &hndl_mmngr), OSAL_RETURN_OK) << "pre-process failed";
    EXPECT_NE(hndl_mmngr, OSAL_MEMORY_MANAGER_HANDLE_INVALID);

    // Test09_003_042
    // @brief: abnormal case: size is bigger than memory_limit
    size = 11 * 1024 * 1024;
    alignment = 64;
    buffer_obj = OSAL_MEMORY_BUFFER_HANDLE_INVALID;
    EXPECT_EQ(R_OSAL_MmngrAlloc(hndl_mmngr, size, alignment, &buffer_obj), OSAL_RETURN_CONF) << "Test09_003_042 failed";
    EXPECT_EQ(buffer_obj, OSAL_MEMORY_BUFFER_HANDLE_INVALID) << "Test09_003_042 failed";

    //post-process: close memory manager
    EXPECT_EQ(R_OSAL_MmngrClose(hndl_mmngr), OSAL_RETURN_OK) << "post-process failed";
}
// [MmngrAlloc_TC_09_003_042]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrAlloc_TC_09_003_043 MemoryApiTest.MmngrAlloc_TC_09_003_043
 * @subsection MmngrAlloc_TC_09_003_043_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrAlloc_TC_09_003_043_tci Test Case ID
 * MmngrAlloc_S2_A_TC_09_003_043
 * @subsection MmngrAlloc_TC_09_003_043_rr Related Requirement(s)
 * \#276410, \#276732
 * @subsection MmngrAlloc_TC_09_003_043_pp Prerequisite/Precondition
 * OSAL is initialized.
 * @subsection MmngrAlloc_TC_09_003_043_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrAlloc and R_OSAL_MmngrDealloc with abnormal condition in OSAL_MMNGR_ALLOC_MODE_FREE_LIST_PROT mode.
 * - pre-process: open new memory manager
 * - Test09_003_043: confirm memory external fragmentation behavior
 * - post-process: close memory manager
 * @subsection MmngrAlloc_TC_09_003_043_tpts Test Procedure/Test Steps
 * -# Open the handle using R_OSAL_MmngrOpen with config:
 *      - config.max_allowed_allocations = 4
 *      - config.max_registered_monitors_cbs = 0
 *      - config.memory_limit = 10MB
 *      - config.mode = OSAL_MMNGR_ALLOC_MODE_FREE_LIST_PROT
 * -# Call R_OSAL_MmngrAlloc to allocate 1st buffer with size is 4MB and align is 64.
 * -# Call R_OSAL_MmngrAlloc to allocate 2nd buffer with size is 4MB and align is 64.
 * -# Call R_OSAL_MmngrDealloc to deallocate the 1st buffer.
 *      - 6MB remaining free
 * -# Call R_OSAL_MmngrAlloc to allocate 3rd buffer with size is 5MB and align is 64.
 * -# Call R_OSAL_MmngrDealloc to deallocate the 2nd buffer.
 * -# Call R_OSAL_MmngrClose to close the handle.
 * @subsection MmngrAlloc_TC_09_003_043_ereb Expected Result/Behavior
 * -# The return of R_OSAL_MmngrOpen is OSAL_RETURN_OK.<br>
 * The return handle is not OSAL_MEMORY_MANAGER_HANDLE_INVALID.
 * -# The return value of R_OSAL_MmngrAlloc for the 1st buffer is OSAL_RETURN_OK
 * -# The return value of R_OSAL_MmngrAlloc for the 2nd buffer is OSAL_RETURN_OK
 * -# The return value of R_OSAL_MmngrDealloc for the 1st buffer is OSAL_RETURN_OK
 * -# The return value of R_OSAL_MmngrAlloc for the 3rd buffer is OSAL_RETURN_MEM
 * -# The return value of R_OSAL_MmngrDealloc for the 2nd buffer is OSAL_RETURN_OK
 * -# The return value of R_OSAL_MmngrClose is OSAL_RETURN_OK.
 * @subsection MmngrAlloc_TC_09_003_043_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrAlloc_TC_09_003_043
 */
// [MmngrAlloc_TC_09_003_043]
TEST_F(MemoryApiTest, MmngrAlloc_TC_09_003_043)
{
    osal_memory_buffer_handle_t  buffer_obj1 = OSAL_MEMORY_BUFFER_HANDLE_INVALID;

    // pre-process: open memory manager
    config.max_allowed_allocations     = 4;
    config.max_registered_monitors_cbs = 0;
    config.memory_limit = 10 * 1024 * 1024;
    config.mode = OSAL_MMNGR_ALLOC_MODE_FREE_LIST_PROT;
    EXPECT_EQ(R_OSAL_MmngrOpen(&config, &hndl_mmngr), OSAL_RETURN_OK) << "pre-process failed";
    EXPECT_NE(hndl_mmngr, OSAL_MEMORY_MANAGER_HANDLE_INVALID);

    // Test09_003_043
    // @brief: abnormal case: confirm memory external fragmentation behavior
    size = 4 * 1024 * 1024;
    alignment = 64;
    EXPECT_EQ(R_OSAL_MmngrAlloc(hndl_mmngr, size, alignment, &buffer_obj), OSAL_RETURN_OK) << "Test09_003_043 failed";
    EXPECT_NE(buffer_obj, OSAL_MEMORY_BUFFER_HANDLE_INVALID) << "Test09_003_043 failed";
    size = 4 * 1024 * 1024;
    EXPECT_EQ(R_OSAL_MmngrAlloc(hndl_mmngr, size, alignment, &buffer_obj1), OSAL_RETURN_OK) << "Test09_003_043 failed";
    EXPECT_NE(buffer_obj1, OSAL_MEMORY_BUFFER_HANDLE_INVALID) << "Test09_003_043 failed";
    EXPECT_EQ(R_OSAL_MmngrDealloc(hndl_mmngr, buffer_obj), OSAL_RETURN_OK) << "Test09_003_043 failed";
    buffer_obj = OSAL_MEMORY_BUFFER_HANDLE_INVALID;
    size = 5 * 1024 * 1024;
    EXPECT_EQ(R_OSAL_MmngrAlloc(hndl_mmngr, size, alignment, &buffer_obj), OSAL_RETURN_MEM) << "Test09_003_043 failed" 
        <<R_OSAL_MmngrDealloc(hndl_mmngr, buffer_obj); //memory external fragmentation ?
    EXPECT_EQ(buffer_obj, OSAL_MEMORY_BUFFER_HANDLE_INVALID) << "Test09_003_043 failed";
    EXPECT_EQ(R_OSAL_MmngrDealloc(hndl_mmngr, buffer_obj1), OSAL_RETURN_OK) << "Test09_003_043 failed";

    //post-process: close memory manager
    EXPECT_EQ(R_OSAL_MmngrClose(hndl_mmngr), OSAL_RETURN_OK) << "post-process failed";
}
// [MmngrAlloc_TC_09_003_043]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrAlloc_TC_09_003_044 MemoryApiTest.MmngrAlloc_TC_09_003_044
 * @subsection MmngrAlloc_TC_09_003_044_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrAlloc_TC_09_003_044_tci Test Case ID
 * MmngrAlloc_S2_A_TC_09_003_044
 * @subsection MmngrAlloc_TC_09_003_044_rr Related Requirement(s)
 * \#276410, \#276732
 * @subsection MmngrAlloc_TC_09_003_044_pp Prerequisite/Precondition
 * OSAL is initialized.
 * @subsection MmngrAlloc_TC_09_003_044_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrAlloc and R_OSAL_MmngrDealloc with abnormal condition in OSAL_MMNGR_ALLOC_MODE_FREE_LIST_PROT mode.
 * - pre-process: open new memory manager
 * - Test09_003_044: confirm the behavior of R_OSAL_MmngrAlloc when out of memory.
 * - post-process: close memory manager
 * @subsection MmngrAlloc_TC_09_003_044_tpts Test Procedure/Test Steps
 * -# Open the handle using R_OSAL_MmngrOpen with config:
 *      - config.max_allowed_allocations = 4
 *      - config.max_registered_monitors_cbs = 0
 *      - config.memory_limit = 10MB
 *      - config.mode = OSAL_MMNGR_ALLOC_MODE_FREE_LIST_PROT.
 * -# Call R_OSAL_MmngrAlloc to allocate 1st buffer with size is 4MB and align is 64.
 * -# Call R_OSAL_MmngrAlloc to allocate 2nd buffer with size is 4MB and align is 64.
 * -# Call R_OSAL_MmngrAlloc to allocate 3rd buffer with size is 4MB and align is 64.
 * -# Call R_OSAL_MmngrDealloc to deallocate the 2nd buffer.
 * -# Call R_OSAL_MmngrDealloc to deallocate the 1st buffer.
 * -# Call R_OSAL_MmngrClose to close the handle.
 * @subsection MmngrAlloc_TC_09_003_044_ereb Expected Result/Behavior
 * -# The return value of R_OSAL_MmngrOpen is OSAL_RETURN_OK.<br>
 * The return handle is not OSAL_MEMORY_MANAGER_HANDLE_INVALID.
 * -# The return value of R_OSAL_MmngrAlloc for 1st buffer is OSAL_RETURN_OK.<br>
 * 2 return buffers is not OSAL_MEMORY_BUFFER_HANDLE_INVALID.
 * -# The return value of R_OSAL_MmngrAlloc for 2nd buffer is OSAL_RETURN_OK.<br>
 * 2 return buffers is not OSAL_MEMORY_BUFFER_HANDLE_INVALID.
 * -# The return value of R_OSAL_MmngrAlloc for 3rd buffer is OSAL_RETURN_MEM.<br>
 * -# The return value of R_OSAL_MmngrDealloc for 1st buffer is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrDealloc for 2nd buffer is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrClose is OSAL_RETURN_OK.
 * @subsection MmngrAlloc_TC_09_003_044_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrAlloc_TC_09_003_044
 */
// [MmngrAlloc_TC_09_003_044]
TEST_F(MemoryApiTest, MmngrAlloc_TC_09_003_044)
{
    osal_memory_buffer_handle_t  buffer_obj1 = OSAL_MEMORY_BUFFER_HANDLE_INVALID;
    osal_memory_buffer_handle_t  buffer_obj2 = OSAL_MEMORY_BUFFER_HANDLE_INVALID;
    osal_memory_buffer_handle_t  buffer_obj3 = OSAL_MEMORY_BUFFER_HANDLE_INVALID;

    // pre-process: open memory manager
    config.max_allowed_allocations     = 4;
    config.max_registered_monitors_cbs = 0;
    config.memory_limit = 10 * 1024 * 1024;
    config.mode = OSAL_MMNGR_ALLOC_MODE_FREE_LIST_PROT;
    EXPECT_EQ(R_OSAL_MmngrOpen(&config, &hndl_mmngr), OSAL_RETURN_OK) << "pre-process failed";
    EXPECT_NE(hndl_mmngr, OSAL_MEMORY_MANAGER_HANDLE_INVALID);

    // Test09_003_044
    // @brief: abnormal case: confirm running out of memory
    size = 4 * 1024 * 1024;
    alignment = 64;
    EXPECT_EQ(R_OSAL_MmngrAlloc(hndl_mmngr, size, alignment, &buffer_obj1), OSAL_RETURN_OK) << "Test09_003_044 failed";
    EXPECT_NE(buffer_obj1, OSAL_MEMORY_BUFFER_HANDLE_INVALID) << "Test09_003_044 failed";
    EXPECT_EQ(R_OSAL_MmngrAlloc(hndl_mmngr, size, alignment, &buffer_obj2), OSAL_RETURN_OK) << "Test09_003_044 failed";
    EXPECT_NE(buffer_obj2, OSAL_MEMORY_BUFFER_HANDLE_INVALID) << "Test09_003_044 failed";
    EXPECT_EQ(R_OSAL_MmngrAlloc(hndl_mmngr, size, alignment, &buffer_obj3), OSAL_RETURN_MEM) << "Test09_003_044 failed"
        << R_OSAL_MmngrDealloc(hndl_mmngr, buffer_obj);
    EXPECT_EQ(R_OSAL_MmngrDealloc(hndl_mmngr, buffer_obj2), OSAL_RETURN_OK) << "Test09_003_044 failed";
    EXPECT_EQ(R_OSAL_MmngrDealloc(hndl_mmngr, buffer_obj1), OSAL_RETURN_OK) << "Test09_003_044 failed";

    //post-process: close memory manager
    EXPECT_EQ(R_OSAL_MmngrClose(hndl_mmngr), OSAL_RETURN_OK) << "post-process failed";
}
// [MmngrAlloc_TC_09_003_044]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrAlloc_TC_09_003_046 MemoryApiTest.MmngrAlloc_TC_09_003_046
 * @subsection MmngrAlloc_TC_09_003_046_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrAlloc_TC_09_003_046_tci Test Case ID
 * MmngrAlloc_S2_A_TC_09_003_046
 * @subsection MmngrAlloc_TC_09_003_046_rr Related Requirement(s)
 * \#276410
 * @subsection MmngrAlloc_TC_09_003_046_pp Prerequisite/Precondition
 * - A dummy handle is created by copy the data from a valid handle in SetUpTestSuite()
 * - The dummy handle will be free after all test cases was executed.
 * - OSAL is initialized.
 * @subsection MmngrAlloc_TC_09_003_046_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrAlloc and R_OSAL_MmngrAlloc with abnormal condition.
 * - Test09_003_046: confirm the use case the of R_OSAL_MmngrAlloc when Memory Manager is not opened
 * @subsection MmngrAlloc_TC_09_003_046_tpts Test Procedure/Test Steps
 * -# Call R_OSAL_MmngrAlloc to allocate the buffer using the dummy handle.
 * @subsection MmngrAlloc_TC_09_003_046_ereb Expected Result/Behavior
 * -# The return value when calling R_OSAL_MmngrAlloc is OSAL_RETURN_STATE.
 * @subsection MmngrAlloc_TC_09_003_046_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrAlloc_TC_09_003_046
 */
// [MmngrAlloc_TC_09_003_046]
TEST_F(MemoryApiTest, MmngrAlloc_TC_09_003_046)
{
    // Test09_003_046
    // @brief: abnormal case: confirm the use case the of R_OSAL_MmngrAlloc when Memory Manager is not opened
    size = 64;
    alignment = 64;

    EXPECT_EQ(R_OSAL_MmngrAlloc(dummy_hndl_mmngr, size, alignment, &buffer_obj), OSAL_RETURN_STATE) << "Test09_003_046 failed";
}
// [MmngrAlloc_TC_09_003_046]
#endif

#ifndef SKIP_MEMORY_DEALLOC
/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrAlloc_TC_09_003_047 MemoryApiTest.MmngrAlloc_TC_09_003_047
 * @subsection MmngrAlloc_TC_09_003_047_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrAlloc_TC_09_003_047_tci Test Case ID
 * MmngrAlloc_S0_BA_TC_09_003_047
 * @subsection MmngrAlloc_TC_09_003_047_rr Related Requirement(s)
 * \#276410, \#276732
 * @subsection MmngrAlloc_TC_09_003_047_pp Prerequisite/Precondition
 * OSAL is initialized.
 * @subsection MmngrAlloc_TC_09_003_047_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrAlloc with abnormal condition in OSAL_MMNGR_ALLOC_MODE_STACK mode.
 * - pre-process: open new memory manager then close the memory manager
 * - Test09_003_047: confirm the behavior of R_OSAL_MmngrAlloc with the allocation size is 63
 * @subsection MmngrAlloc_TC_09_003_047_tpts Test Procedure/Test Steps
 * -# Open the handle using R_OSAL_MmngrOpen with config:
 *      - config.max_allowed_allocations = 4
 *      - config.max_registered_monitors_cbs = 0
 *      - config.memory_limit = 10MB
 *      - config.mode = OSAL_MMNGR_ALLOC_MODE_STACK.
 * -# Call R_OSAL_MmngrAlloc to allocate buffer with size is 63 and align is 64.
 * -# Call R_OSAL_MmngrClose to close the memory manager.
 * @subsection MmngrAlloc_TC_09_003_047_ereb Expected Result/Behavior
 * -# The return value of R_OSAL_MmngrOpen is OSAL_RETURN_OK.<br>
 * The return handle is not OSAL_MEMORY_MANAGER_HANDLE_INVALID.
 * -# The return value of R_OSAL_MmngrAlloc is OSAL_RETURN_CONF.
 * -# The return value of R_OSAL_MmngrClose is OSAL_RETURN_OK.
 * @subsection MmngrAlloc_TC_09_003_047_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrAlloc_TC_09_003_047
 */
// [MmngrAlloc_TC_09_003_047]
TEST_F(MemoryApiTest, MmngrAlloc_TC_09_003_047)
{
    // pre-process: open memory manager
    config.max_allowed_allocations     = 4;
    config.max_registered_monitors_cbs = 0;
    config.memory_limit = 10 * 1024 * 1024;
    config.mode = OSAL_MMNGR_ALLOC_MODE_STACK;
    EXPECT_EQ(R_OSAL_MmngrOpen(&config, &hndl_mmngr), OSAL_RETURN_OK) << "pre-process failed";
    EXPECT_NE(hndl_mmngr, OSAL_MEMORY_MANAGER_HANDLE_INVALID);

    // Test09_003_047
    // @brief: boundary abnormal case: Allocation size is 63.
    size = 63;
    alignment = 64;
    buffer_obj = OSAL_MEMORY_BUFFER_HANDLE_INVALID;
    EXPECT_EQ(R_OSAL_MmngrAlloc(hndl_mmngr, size, alignment, &buffer_obj), OSAL_RETURN_CONF) << "Test09_003_047 failed";
    EXPECT_EQ(buffer_obj, OSAL_MEMORY_BUFFER_HANDLE_INVALID) << "Test09_003_047 failed";
    EXPECT_EQ(R_OSAL_MmngrClose(hndl_mmngr), OSAL_RETURN_OK) << "Test09_003_047 failed";
}
// [MmngrAlloc_TC_09_003_047]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrAlloc_TC_09_003_048 MemoryApiTest.MmngrAlloc_TC_09_003_048
 * @subsection MmngrAlloc_TC_09_003_048_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrAlloc_TC_09_003_048_tci Test Case ID
 * MmngrAlloc_S0_BA_TC_09_003_048
 * @subsection MmngrAlloc_TC_09_003_048_rr Related Requirement(s)
 * \#276410, \#276732
 * @subsection MmngrAlloc_TC_09_003_048_pp Prerequisite/Precondition
 * OSAL is initialized.
 * @subsection MmngrAlloc_TC_09_003_048_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrAlloc with abnormal condition in OSAL_MMNGR_ALLOC_MODE_STACK_PROT mode.
 * - pre-process: open new memory manager then close the memory manager
 * - Test09_003_048: confirm the behavior of R_OSAL_MmngrAlloc with the allocation size is 63
 * @subsection MmngrAlloc_TC_09_003_048_tpts Test Procedure/Test Steps
 * -# Open the handle using R_OSAL_MmngrOpen with config:
 *      - config.max_allowed_allocations = 4
 *      - config.max_registered_monitors_cbs = 0
 *      - config.memory_limit = 10MB
 *      - config.mode = OSAL_MMNGR_ALLOC_MODE_STACK_PROT.
 * -# Call R_OSAL_MmngrAlloc to allocate buffer with size is 63 and align is 64.
 * -# Call R_OSAL_MmngrClose to close the memory manager.
 * @subsection MmngrAlloc_TC_09_003_048_ereb Expected Result/Behavior
 * -# The return value of R_OSAL_MmngrOpen is OSAL_RETURN_OK.<br>
 * The return handle is not OSAL_MEMORY_MANAGER_HANDLE_INVALID.
 * -# The return value of R_OSAL_MmngrAlloc is OSAL_RETURN_CONF.
 * -# The return value of R_OSAL_MmngrClose is OSAL_RETURN_OK.
 * @subsection MmngrAlloc_TC_09_003_048_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrAlloc_TC_09_003_048
 */
// [MmngrAlloc_TC_09_003_048]
TEST_F(MemoryApiTest, MmngrAlloc_TC_09_003_048)
{
    // pre-process: open memory manager
    config.max_allowed_allocations     = 4;
    config.max_registered_monitors_cbs = 0;
    config.memory_limit = 10 * 1024 * 1024;
    config.mode = OSAL_MMNGR_ALLOC_MODE_STACK_PROT;
    EXPECT_EQ(R_OSAL_MmngrOpen(&config, &hndl_mmngr), OSAL_RETURN_OK) << "pre-process failed";
    EXPECT_NE(hndl_mmngr, OSAL_MEMORY_MANAGER_HANDLE_INVALID);

    // Test09_003_048
    // @brief: boundary abnormal case: Allocation size is 63.
    size = 63;
    alignment = 64;
    buffer_obj = OSAL_MEMORY_BUFFER_HANDLE_INVALID;
    EXPECT_EQ(R_OSAL_MmngrAlloc(hndl_mmngr, size, alignment, &buffer_obj), OSAL_RETURN_CONF) << "Test09_003_048 failed";
    EXPECT_EQ(buffer_obj, OSAL_MEMORY_BUFFER_HANDLE_INVALID) << "Test09_003_048 failed";
    EXPECT_EQ(R_OSAL_MmngrClose(hndl_mmngr), OSAL_RETURN_OK) << "Test09_003_048 failed";
}
// [MmngrAlloc_TC_09_003_048]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrAlloc_TC_09_003_049 MemoryApiTest.MmngrAlloc_TC_09_003_049
 * @subsection MmngrAlloc_TC_09_003_049_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrAlloc_TC_09_003_049_tci Test Case ID
 * MmngrAlloc_S0_BA_TC_09_003_049
 * @subsection MmngrAlloc_TC_09_003_049_rr Related Requirement(s)
 * \#276410, \#276732
 * @subsection MmngrAlloc_TC_09_003_049_pp Prerequisite/Precondition
 * OSAL is initialized.
 * @subsection MmngrAlloc_TC_09_003_049_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrAlloc with abnormal condition in OSAL_MMNGR_ALLOC_MODE_FREE_LIST mode.
 * - pre-process: open new memory manager then close the memory manager
 * - Test09_003_049: confirm the behavior of R_OSAL_MmngrAlloc with the allocation size is 63
 * @subsection MmngrAlloc_TC_09_003_049_tpts Test Procedure/Test Steps
 * -# Open the handle using R_OSAL_MmngrOpen with config:
 *      - config.max_allowed_allocations = 4
 *      - config.max_registered_monitors_cbs = 0
 *      - config.memory_limit = 10MB
 *      - config.mode = OSAL_MMNGR_ALLOC_MODE_FREE_LIST.
 * -# Call R_OSAL_MmngrAlloc to allocate buffer with size is 63 and align is 64.
 * -# Call R_OSAL_MmngrClose to close the memory manager.
 * @subsection MmngrAlloc_TC_09_003_049_ereb Expected Result/Behavior
 * -# The return value of R_OSAL_MmngrOpen is OSAL_RETURN_OK.<br>
 * The return handle is not OSAL_MEMORY_MANAGER_HANDLE_INVALID.
 * -# The return value of R_OSAL_MmngrAlloc is OSAL_RETURN_CONF.
 * -# The return value of R_OSAL_MmngrClose is OSAL_RETURN_OK.
 * @subsection MmngrAlloc_TC_09_003_049_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrAlloc_TC_09_003_049
 */
// [MmngrAlloc_TC_09_003_049]
TEST_F(MemoryApiTest, MmngrAlloc_TC_09_003_049)
{
    // pre-process: open memory manager
    config.max_allowed_allocations     = 4;
    config.max_registered_monitors_cbs = 0;
    config.memory_limit = 10 * 1024 * 1024;
    config.mode = OSAL_MMNGR_ALLOC_MODE_FREE_LIST;
    EXPECT_EQ(R_OSAL_MmngrOpen(&config, &hndl_mmngr), OSAL_RETURN_OK) << "pre-process failed";
    EXPECT_NE(hndl_mmngr, OSAL_MEMORY_MANAGER_HANDLE_INVALID);

    // Test09_003_049
    // @brief: boundary abnormal case: Allocation size is 63.
    size = 63;
    alignment = 64;
    buffer_obj = OSAL_MEMORY_BUFFER_HANDLE_INVALID;
    EXPECT_EQ(R_OSAL_MmngrAlloc(hndl_mmngr, size, alignment, &buffer_obj), OSAL_RETURN_CONF) << "Test09_003_049 failed";
    EXPECT_EQ(buffer_obj, OSAL_MEMORY_BUFFER_HANDLE_INVALID) << "Test09_003_049 failed";
    EXPECT_EQ(R_OSAL_MmngrClose(hndl_mmngr), OSAL_RETURN_OK) << "Test09_003_049 failed";
}
// [MmngrAlloc_TC_09_003_049]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrAlloc_TC_09_003_050 MemoryApiTest.MmngrAlloc_TC_09_003_050
 * @subsection MmngrAlloc_TC_09_003_050_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrAlloc_TC_09_003_050_tci Test Case ID
 * MmngrAlloc_S0_BA_TC_09_003_050
 * @subsection MmngrAlloc_TC_09_003_050_rr Related Requirement(s)
 * \#276410, \#276732
 * @subsection MmngrAlloc_TC_09_003_050_pp Prerequisite/Precondition
 * OSAL is initialized.
 * @subsection MmngrAlloc_TC_09_003_050_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrAlloc with abnormal condition in OSAL_MMNGR_ALLOC_MODE_FREE_LIST_PROT mode.
 * - pre-process: open new memory manager then close the memory manager
 * - Test09_003_050: confirm the behavior of R_OSAL_MmngrAlloc with the allocation size is 63
 * @subsection MmngrAlloc_TC_09_003_050_tpts Test Procedure/Test Steps
 * -# Open the handle using R_OSAL_MmngrOpen with config:
 *      - config.max_allowed_allocations = 4
 *      - config.max_registered_monitors_cbs = 0
 *      - config.memory_limit = 10MB
 *      - config.mode = OSAL_MMNGR_ALLOC_MODE_FREE_LIST_PROT.
 * -# Call R_OSAL_MmngrAlloc to allocate buffer with size is 63 and align is 64.
 * -# Call R_OSAL_MmngrClose to close the memory manager.
 * @subsection MmngrAlloc_TC_09_003_050_ereb Expected Result/Behavior
 * -# The return value of R_OSAL_MmngrOpen is OSAL_RETURN_OK.<br>
 * The return handle is not OSAL_MEMORY_MANAGER_HANDLE_INVALID.
 * -# The return value of R_OSAL_MmngrAlloc is OSAL_RETURN_CONF.
 * -# The return value of R_OSAL_MmngrClose is OSAL_RETURN_OK.
 * @subsection MmngrAlloc_TC_09_003_050_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrAlloc_TC_09_003_050
 */
// [MmngrAlloc_TC_09_003_050]
TEST_F(MemoryApiTest, MmngrAlloc_TC_09_003_050)
{
    // pre-process: open memory manager
    config.max_allowed_allocations     = 4;
    config.max_registered_monitors_cbs = 0;
    config.memory_limit = 10 * 1024 * 1024;
    config.mode = OSAL_MMNGR_ALLOC_MODE_FREE_LIST_PROT;
    EXPECT_EQ(R_OSAL_MmngrOpen(&config, &hndl_mmngr), OSAL_RETURN_OK) << "pre-process failed";
    EXPECT_NE(hndl_mmngr, OSAL_MEMORY_MANAGER_HANDLE_INVALID);

    // Test09_003_050
    // @brief: boundary abnormal case: Allocation size is 63.
    size = 63;
    alignment = 64;
    buffer_obj = OSAL_MEMORY_BUFFER_HANDLE_INVALID;
    EXPECT_EQ(R_OSAL_MmngrAlloc(hndl_mmngr, size, alignment, &buffer_obj), OSAL_RETURN_CONF) << "Test09_003_050 failed";
    EXPECT_EQ(buffer_obj, OSAL_MEMORY_BUFFER_HANDLE_INVALID) << "Test09_003_050 failed";
    EXPECT_EQ(R_OSAL_MmngrClose(hndl_mmngr), OSAL_RETURN_OK) << "Test09_003_050 failed";
}
// [MmngrAlloc_TC_09_003_050]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrAlloc_TC_09_003_051 MemoryApiTest.MmngrAlloc_TC_09_003_051
 * @subsection MmngrAlloc_TC_09_003_051_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrAlloc_TC_09_003_051_tci Test Case ID
 * MmngrAlloc_S0_BA_TC_09_003_051
 * @subsection MmngrAlloc_TC_09_003_051_rr Related Requirement(s)
 * \#276410, \#276732
 * @subsection MmngrAlloc_TC_09_003_051_pp Prerequisite/Precondition
 * OSAL is initialized.
 * @subsection MmngrAlloc_TC_09_003_051_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrAlloc with abnormal condition in OSAL_MMNGR_ALLOC_MODE_STACK mode.
 * - pre-process: open new memory manager then close the memory manager
 * - Test09_003_051: confirm the behavior of R_OSAL_MmngrAlloc with the allocation alignment is 63
 * @subsection MmngrAlloc_TC_09_003_051_tpts Test Procedure/Test Steps
 * -# Open the handle using R_OSAL_MmngrOpen with config:
 *      - config.max_allowed_allocations = 4
 *      - config.max_registered_monitors_cbs = 0
 *      - config.memory_limit = 10MB
 *      - config.mode = OSAL_MMNGR_ALLOC_MODE_STACK.
 * -# Call R_OSAL_MmngrAlloc to allocate buffer with size is 64 and align is 63.
 * -# Call R_OSAL_MmngrClose to close the memory manager.
 * @subsection MmngrAlloc_TC_09_003_051_ereb Expected Result/Behavior
 * -# The return value of R_OSAL_MmngrOpen is OSAL_RETURN_OK.<br>
 * The return handle is not OSAL_MEMORY_MANAGER_HANDLE_INVALID.
 * -# The return value of R_OSAL_MmngrAlloc is OSAL_RETURN_CONF.
 * -# The return value of R_OSAL_MmngrClose is OSAL_RETURN_OK.
 * @subsection MmngrAlloc_TC_09_003_051_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrAlloc_TC_09_003_051
 */
// [MmngrAlloc_TC_09_003_051]
TEST_F(MemoryApiTest, MmngrAlloc_TC_09_003_051)
{
    // pre-process: open memory manager
    config.max_allowed_allocations     = 4;
    config.max_registered_monitors_cbs = 0;
    config.memory_limit = 10 * 1024 * 1024;
    config.mode = OSAL_MMNGR_ALLOC_MODE_STACK;
    EXPECT_EQ(R_OSAL_MmngrOpen(&config, &hndl_mmngr), OSAL_RETURN_OK) << "pre-process failed";
    EXPECT_NE(hndl_mmngr, OSAL_MEMORY_MANAGER_HANDLE_INVALID);

    // Test09_003_051
    // @brief: boundary abnormal case: Allocation alignment is 63.
    size = 64;
    alignment = 63;
    buffer_obj = OSAL_MEMORY_BUFFER_HANDLE_INVALID;
    EXPECT_EQ(R_OSAL_MmngrAlloc(hndl_mmngr, size, alignment, &buffer_obj), OSAL_RETURN_CONF) << "Test09_003_051 failed";
    EXPECT_EQ(buffer_obj, OSAL_MEMORY_BUFFER_HANDLE_INVALID) << "Test09_003_051 failed";
    EXPECT_EQ(R_OSAL_MmngrClose(hndl_mmngr), OSAL_RETURN_OK) << "Test09_003_051 failed";
}
// [MmngrAlloc_TC_09_003_051]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrAlloc_TC_09_003_052 MemoryApiTest.MmngrAlloc_TC_09_003_052
 * @subsection MmngrAlloc_TC_09_003_052_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrAlloc_TC_09_003_052_tci Test Case ID
 * MmngrAlloc_S0_BA_TC_09_003_052
 * @subsection MmngrAlloc_TC_09_003_052_rr Related Requirement(s)
 * \#276410, \#276732
 * @subsection MmngrAlloc_TC_09_003_052_pp Prerequisite/Precondition
 * OSAL is initialized.
 * @subsection MmngrAlloc_TC_09_003_052_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrAlloc with abnormal condition in OSAL_MMNGR_ALLOC_MODE_STACK_PROT mode.
 * - pre-process: open new memory manager then close the memory manager
 * - Test09_003_052: confirm the behavior of R_OSAL_MmngrAlloc with the allocation alignment is 63
 * @subsection MmngrAlloc_TC_09_003_052_tpts Test Procedure/Test Steps
 * -# Open the handle using R_OSAL_MmngrOpen with config:
 *      - config.max_allowed_allocations = 4
 *      - config.max_registered_monitors_cbs = 0
 *      - config.memory_limit = 10MB
 *      - config.mode = OSAL_MMNGR_ALLOC_MODE_STACK_PROT.
 * -# Call R_OSAL_MmngrAlloc to allocate buffer with size is 64 and align is 63.
 * -# Call R_OSAL_MmngrClose to close the memory manager.
 * @subsection MmngrAlloc_TC_09_003_052_ereb Expected Result/Behavior
 * -# The return value of R_OSAL_MmngrOpen is OSAL_RETURN_OK.<br>
 * The return handle is not OSAL_MEMORY_MANAGER_HANDLE_INVALID.
 * -# The return value of R_OSAL_MmngrAlloc is OSAL_RETURN_CONF.
 * -# The return value of R_OSAL_MmngrClose is OSAL_RETURN_OK.
 * @subsection MmngrAlloc_TC_09_003_052_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrAlloc_TC_09_003_052
 */
// [MmngrAlloc_TC_09_003_052]
TEST_F(MemoryApiTest, MmngrAlloc_TC_09_003_052)
{
    // pre-process: open memory manager
    config.max_allowed_allocations     = 4;
    config.max_registered_monitors_cbs = 0;
    config.memory_limit = 10 * 1024 * 1024;
    config.mode = OSAL_MMNGR_ALLOC_MODE_STACK_PROT;
    EXPECT_EQ(R_OSAL_MmngrOpen(&config, &hndl_mmngr), OSAL_RETURN_OK) << "pre-process failed";
    EXPECT_NE(hndl_mmngr, OSAL_MEMORY_MANAGER_HANDLE_INVALID);

    // Test09_003_052
    // @brief: boundary abnormal case: Allocation alignment is 63.
    size = 64;
    alignment = 63;
    buffer_obj = OSAL_MEMORY_BUFFER_HANDLE_INVALID;
    EXPECT_EQ(R_OSAL_MmngrAlloc(hndl_mmngr, size, alignment, &buffer_obj), OSAL_RETURN_CONF) << "Test09_003_052 failed";
    EXPECT_EQ(buffer_obj, OSAL_MEMORY_BUFFER_HANDLE_INVALID) << "Test09_003_052 failed";
    EXPECT_EQ(R_OSAL_MmngrClose(hndl_mmngr), OSAL_RETURN_OK) << "Test09_003_052 failed";
}
// [MmngrAlloc_TC_09_003_052]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrAlloc_TC_09_003_053 MemoryApiTest.MmngrAlloc_TC_09_003_053
 * @subsection MmngrAlloc_TC_09_003_053_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrAlloc_TC_09_003_053_tci Test Case ID
 * MmngrAlloc_S0_BA_TC_09_003_053
 * @subsection MmngrAlloc_TC_09_003_053_rr Related Requirement(s)
 * \#276410, \#276732
 * @subsection MmngrAlloc_TC_09_003_053_pp Prerequisite/Precondition
 * OSAL is initialized.
 * @subsection MmngrAlloc_TC_09_003_053_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrAlloc with abnormal condition in OSAL_MMNGR_ALLOC_MODE_FREE_LIST mode.
 * - pre-process: open new memory manager then close the memory manager
 * - Test09_003_053: confirm the behavior of R_OSAL_MmngrAlloc with the allocation alignment is 63
 * @subsection MmngrAlloc_TC_09_003_053_tpts Test Procedure/Test Steps
 * -# Open the handle using R_OSAL_MmngrOpen with config:
 *      - config.max_allowed_allocations = 4
 *      - config.max_registered_monitors_cbs = 0
 *      - config.memory_limit = 10MB
 *      - config.mode = OSAL_MMNGR_ALLOC_MODE_FREE_LIST.
 * -# Call R_OSAL_MmngrAlloc to allocate buffer with size is 64 and align is 63.
 * -# Call R_OSAL_MmngrClose to close the memory manager.
 * @subsection MmngrAlloc_TC_09_003_053_ereb Expected Result/Behavior
 * -# The return value of R_OSAL_MmngrOpen is OSAL_RETURN_OK.<br>
 * The return handle is not OSAL_MEMORY_MANAGER_HANDLE_INVALID.
 * -# The return value of R_OSAL_MmngrAlloc is OSAL_RETURN_CONF.
 * -# The return value of R_OSAL_MmngrClose is OSAL_RETURN_OK.
 * @subsection MmngrAlloc_TC_09_003_053_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrAlloc_TC_09_003_053
 */
// [MmngrAlloc_TC_09_003_053]
TEST_F(MemoryApiTest, MmngrAlloc_TC_09_003_053)
{
    // pre-process: open memory manager
    config.max_allowed_allocations     = 4;
    config.max_registered_monitors_cbs = 0;
    config.memory_limit = 10 * 1024 * 1024;
    config.mode = OSAL_MMNGR_ALLOC_MODE_FREE_LIST;
    EXPECT_EQ(R_OSAL_MmngrOpen(&config, &hndl_mmngr), OSAL_RETURN_OK) << "pre-process failed";
    EXPECT_NE(hndl_mmngr, OSAL_MEMORY_MANAGER_HANDLE_INVALID);

    // Test09_003_053
    // @brief: boundary abnormal case: Allocation alignment is 63.
    size = 64;
    alignment = 63;
    buffer_obj = OSAL_MEMORY_BUFFER_HANDLE_INVALID;
    EXPECT_EQ(R_OSAL_MmngrAlloc(hndl_mmngr, size, alignment, &buffer_obj), OSAL_RETURN_CONF) << "Test09_003_053 failed";
    EXPECT_EQ(buffer_obj, OSAL_MEMORY_BUFFER_HANDLE_INVALID) << "Test09_003_053 failed";
    EXPECT_EQ(R_OSAL_MmngrClose(hndl_mmngr), OSAL_RETURN_OK) << "Test09_003_053 failed";
}
// [MmngrAlloc_TC_09_003_053]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrAlloc_TC_09_003_054 MemoryApiTest.MmngrAlloc_TC_09_003_054
 * @subsection MmngrAlloc_TC_09_003_054_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrAlloc_TC_09_003_054_tci Test Case ID
 * MmngrAlloc_S0_BA_TC_09_003_054
 * @subsection MmngrAlloc_TC_09_003_054_rr Related Requirement(s)
 * \#276410, \#276732
 * @subsection MmngrAlloc_TC_09_003_054_pp Prerequisite/Precondition
 * OSAL is initialized.
 * @subsection MmngrAlloc_TC_09_003_054_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrAlloc with abnormal condition in OSAL_MMNGR_ALLOC_MODE_FREE_LIST_PROT mode.
 * - pre-process: open new memory manager then close the memory manager
 * - Test09_003_054: confirm the behavior of R_OSAL_MmngrAlloc with the allocation alignment is 63
 * @subsection MmngrAlloc_TC_09_003_054_tpts Test Procedure/Test Steps
 * -# Open the handle using R_OSAL_MmngrOpen with config:
 *      - config.max_allowed_allocations = 4
 *      - config.max_registered_monitors_cbs = 0
 *      - config.memory_limit = 10MB
 *      - config.mode = OSAL_MMNGR_ALLOC_MODE_FREE_LIST_PROT.
 * -# Call R_OSAL_MmngrAlloc to allocate buffer with size is 64 and align is 63.
 * -# Call R_OSAL_MmngrClose to close the memory manager.
 * @subsection MmngrAlloc_TC_09_003_054_ereb Expected Result/Behavior
 * -# The return value of R_OSAL_MmngrOpen is OSAL_RETURN_OK.<br>
 * The return handle is not OSAL_MEMORY_MANAGER_HANDLE_INVALID.
 * -# The return value of R_OSAL_MmngrAlloc is OSAL_RETURN_CONF.
 * -# The return value of R_OSAL_MmngrClose is OSAL_RETURN_OK.
 * @subsection MmngrAlloc_TC_09_003_054_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrAlloc_TC_09_003_054
 */
// [MmngrAlloc_TC_09_003_054]
TEST_F(MemoryApiTest, MmngrAlloc_TC_09_003_054)
{
    // pre-process: open memory manager
    config.max_allowed_allocations     = 4;
    config.max_registered_monitors_cbs = 0;
    config.memory_limit = 10 * 1024 * 1024;
    config.mode = OSAL_MMNGR_ALLOC_MODE_FREE_LIST_PROT;
    EXPECT_EQ(R_OSAL_MmngrOpen(&config, &hndl_mmngr), OSAL_RETURN_OK) << "pre-process failed";
    EXPECT_NE(hndl_mmngr, OSAL_MEMORY_MANAGER_HANDLE_INVALID);

    // Test09_003_054
    // @brief: boundary abnormal case: Allocation alignment is 63.
    size = 64;
    alignment = 63;
    buffer_obj = OSAL_MEMORY_BUFFER_HANDLE_INVALID;
    EXPECT_EQ(R_OSAL_MmngrAlloc(hndl_mmngr, size, alignment, &buffer_obj), OSAL_RETURN_CONF) << "Test09_003_054 failed";
    EXPECT_EQ(buffer_obj, OSAL_MEMORY_BUFFER_HANDLE_INVALID) << "Test09_003_054 failed";
    EXPECT_EQ(R_OSAL_MmngrClose(hndl_mmngr), OSAL_RETURN_OK) << "Test09_003_054 failed";
}
// [MmngrAlloc_TC_09_003_054]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrAlloc_TC_09_003_055 MemoryApiTest.MmngrAlloc_TC_09_003_055
 * @subsection MmngrAlloc_TC_09_003_055_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrAlloc_TC_09_003_055_tci Test Case ID
 * MmngrAlloc_S4_A_TC_09_003_055
 * @subsection MmngrAlloc_TC_09_003_055_rr Related Requirement(s)
 * \#276410, \#276732
 * @subsection MmngrAlloc_TC_09_003_055_pp Prerequisite/Precondition
 * OSAL is initialized.
 * @subsection MmngrAlloc_TC_09_003_055_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrAlloc with abnormal condition in OSAL_MMNGR_ALLOC_MODE_STACK mode.
 * - Test09_003_055: hndl_mmngr->p_ptr_self is invalid (NULL)
 * @subsection MmngrAlloc_TC_09_003_055_tpts Test Procedure/Test Steps
 * -# Open the handle using R_OSAL_MmngrOpen with config:
 *      - config.max_allowed_allocations = 4
 *      - config.max_registered_monitors_cbs = 0
 *      - config.memory_limit = 10MB
 *      - config.mode = OSAL_MMNGR_ALLOC_MODE_STACK.
 * -# Call R_OSAL_MmngrAlloc to allocate buffer with the hndl_mmngr->p_ptr_self is NULL
 * -# Call R_OSAL_MmngrClose to close the memory manager.
 * @subsection MmngrAlloc_TC_09_003_055_ereb Expected Result/Behavior
 * -# The return value of R_OSAL_MmngrOpen is OSAL_RETURN_OK.<br>
 * The return handle is not OSAL_MEMORY_MANAGER_HANDLE_INVALID.
 * -# The return value of R_OSAL_MmngrAlloc is OSAL_RETURN_HANDLE.
 * -# The return value of R_OSAL_MmngrClose is OSAL_RETURN_OK.
 * @subsection MmngrAlloc_TC_09_003_055_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrAlloc_TC_09_003_055
 */
// [MmngrAlloc_TC_09_003_055]
TEST_F(MemoryApiTest, MmngrAlloc_TC_09_003_055)
{
    void *bk_ptr_self;

    // Test09_003_055
    // @brief: Abnormal case: hndl_mmngr->p_ptr_self is invalid (NULL)
    config.max_allowed_allocations     = 4;
    config.max_registered_monitors_cbs = 0;
    config.memory_limit = 10 * 1024 * 1024;
    config.mode = OSAL_MMNGR_ALLOC_MODE_STACK;
    EXPECT_EQ(R_OSAL_MmngrOpen(&config, &hndl_mmngr), OSAL_RETURN_OK) << "Test09_003_055 failed";
    EXPECT_NE(hndl_mmngr, OSAL_MEMORY_MANAGER_HANDLE_INVALID) << "Test09_003_055 failed";
    bk_ptr_self = hndl_mmngr->p_ptr_self;
    hndl_mmngr->p_ptr_self = NULL;
    size = 64;
    alignment = 64;
    buffer_obj = OSAL_MEMORY_BUFFER_HANDLE_INVALID;
    EXPECT_EQ(R_OSAL_MmngrAlloc(hndl_mmngr, size, alignment, &buffer_obj), OSAL_RETURN_HANDLE) << "Test09_003_055 failed";
    EXPECT_EQ(buffer_obj, OSAL_MEMORY_BUFFER_HANDLE_INVALID) << "Test09_003_055 failed";
    hndl_mmngr->p_ptr_self = bk_ptr_self;
    EXPECT_EQ(R_OSAL_MmngrClose(hndl_mmngr), OSAL_RETURN_OK) << "Test09_003_055 failed";
}
// [MmngrAlloc_TC_09_003_055]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrAlloc_TC_09_003_056 MemoryApiTest.MmngrAlloc_TC_09_003_056
 * @subsection MmngrAlloc_TC_09_003_056_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrAlloc_TC_09_003_056_tci Test Case ID
 * MmngrAlloc_S4_A_TC_09_003_056
 * @subsection MmngrAlloc_TC_09_003_056_rr Related Requirement(s)
 * \#276410, \#276732
 * @subsection MmngrAlloc_TC_09_003_056_pp Prerequisite/Precondition
 * OSAL is initialized.
 * @subsection MmngrAlloc_TC_09_003_056_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrAlloc with abnormal condition in OSAL_MMNGR_ALLOC_MODE_STACK_PROT mode.
 * - Test09_003_056: hndl_mmngr->p_ptr_self is invalid (NULL)
 * @subsection MmngrAlloc_TC_09_003_056_tpts Test Procedure/Test Steps
 * -# Open the handle using R_OSAL_MmngrOpen with config:
 *      - config.max_allowed_allocations = 4
 *      - config.max_registered_monitors_cbs = 0
 *      - config.memory_limit = 10MB
 *      - config.mode = OSAL_MMNGR_ALLOC_MODE_STACK_PROT.
 * -# Call R_OSAL_MmngrAlloc to allocate buffer with the hndl_mmngr->p_ptr_self is NULL
 * -# Call R_OSAL_MmngrClose to close the memory manager.
 * @subsection MmngrAlloc_TC_09_003_056_ereb Expected Result/Behavior
 * -# The return value of R_OSAL_MmngrOpen is OSAL_RETURN_OK.<br>
 * The return handle is not OSAL_MEMORY_MANAGER_HANDLE_INVALID.
 * -# The return value of R_OSAL_MmngrAlloc is OSAL_RETURN_HANDLE.
 * -# The return value of R_OSAL_MmngrClose is OSAL_RETURN_OK.
 * @subsection MmngrAlloc_TC_09_003_056_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrAlloc_TC_09_003_056
 */
// [MmngrAlloc_TC_09_003_056]
TEST_F(MemoryApiTest, MmngrAlloc_TC_09_003_056)
{
    void *bk_ptr_self;

    // Test09_003_056
    // @brief: Abnormal case: hndl_mmngr->p_ptr_self is invalid (NULL)
    config.max_allowed_allocations     = 4;
    config.max_registered_monitors_cbs = 0;
    config.memory_limit = 10 * 1024 * 1024;
    config.mode = OSAL_MMNGR_ALLOC_MODE_STACK_PROT;
    EXPECT_EQ(R_OSAL_MmngrOpen(&config, &hndl_mmngr), OSAL_RETURN_OK) << "Test09_003_056 failed";
    EXPECT_NE(hndl_mmngr, OSAL_MEMORY_MANAGER_HANDLE_INVALID) << "Test09_003_056 failed";
    bk_ptr_self = hndl_mmngr->p_ptr_self;
    hndl_mmngr->p_ptr_self = NULL;
    size = 64;
    alignment = 64;
    buffer_obj = OSAL_MEMORY_BUFFER_HANDLE_INVALID;
    EXPECT_EQ(R_OSAL_MmngrAlloc(hndl_mmngr, size, alignment, &buffer_obj), OSAL_RETURN_HANDLE) << "Test09_003_056 failed";
    EXPECT_EQ(buffer_obj, OSAL_MEMORY_BUFFER_HANDLE_INVALID) << "Test09_003_056 failed";
    hndl_mmngr->p_ptr_self = bk_ptr_self;
    EXPECT_EQ(R_OSAL_MmngrClose(hndl_mmngr), OSAL_RETURN_OK) << "Test09_003_056 failed";
}
// [MmngrAlloc_TC_09_003_056]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrAlloc_TC_09_003_057 MemoryApiTest.MmngrAlloc_TC_09_003_057
 * @subsection MmngrAlloc_TC_09_003_057_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrAlloc_TC_09_003_057_tci Test Case ID
 * MmngrAlloc_S4_A_TC_09_003_057
 * @subsection MmngrAlloc_TC_09_003_057_rr Related Requirement(s)
 * \#276410, \#276732
 * @subsection MmngrAlloc_TC_09_003_057_pp Prerequisite/Precondition
 * OSAL is initialized.
 * @subsection MmngrAlloc_TC_09_003_057_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrAlloc with abnormal condition in OSAL_MMNGR_ALLOC_MODE_FREE_LIST mode.
 * - Test09_003_057: hndl_mmngr->p_ptr_self is invalid (NULL)
 * @subsection MmngrAlloc_TC_09_003_057_tpts Test Procedure/Test Steps
 * -# Open the handle using R_OSAL_MmngrOpen with config:
 *      - config.max_allowed_allocations = 4
 *      - config.max_registered_monitors_cbs = 0
 *      - config.memory_limit = 10MB
 *      - config.mode = OSAL_MMNGR_ALLOC_MODE_FREE_LIST.
 * -# Call R_OSAL_MmngrAlloc to allocate buffer with the hndl_mmngr->p_ptr_self is NULL
 * -# Call R_OSAL_MmngrClose to close the memory manager.
 * @subsection MmngrAlloc_TC_09_003_057_ereb Expected Result/Behavior
 * -# The return value of R_OSAL_MmngrOpen is OSAL_RETURN_OK.<br>
 * The return handle is not OSAL_MEMORY_MANAGER_HANDLE_INVALID.
 * -# The return value of R_OSAL_MmngrAlloc is OSAL_RETURN_HANDLE.
 * -# The return value of R_OSAL_MmngrClose is OSAL_RETURN_OK.
 * @subsection MmngrAlloc_TC_09_003_057_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrAlloc_TC_09_003_057
 */
// [MmngrAlloc_TC_09_003_057]
TEST_F(MemoryApiTest, MmngrAlloc_TC_09_003_057)
{
    void *bk_ptr_self;

    // Test09_003_057
    // @brief: Abnormal case: hndl_mmngr->p_ptr_self is invalid (NULL)
    config.max_allowed_allocations     = 4;
    config.max_registered_monitors_cbs = 0;
    config.memory_limit = 10 * 1024 * 1024;
    config.mode = OSAL_MMNGR_ALLOC_MODE_FREE_LIST;
    EXPECT_EQ(R_OSAL_MmngrOpen(&config, &hndl_mmngr), OSAL_RETURN_OK) << "Test09_003_057 failed";
    EXPECT_NE(hndl_mmngr, OSAL_MEMORY_MANAGER_HANDLE_INVALID) << "Test09_003_057 failed";
    bk_ptr_self = hndl_mmngr->p_ptr_self;
    hndl_mmngr->p_ptr_self = NULL;
    size = 64;
    alignment = 64;
    buffer_obj = OSAL_MEMORY_BUFFER_HANDLE_INVALID;
    EXPECT_EQ(R_OSAL_MmngrAlloc(hndl_mmngr, size, alignment, &buffer_obj), OSAL_RETURN_HANDLE) << "Test09_003_057 failed";
    EXPECT_EQ(buffer_obj, OSAL_MEMORY_BUFFER_HANDLE_INVALID) << "Test09_003_057 failed";
    hndl_mmngr->p_ptr_self = bk_ptr_self;
    EXPECT_EQ(R_OSAL_MmngrClose(hndl_mmngr), OSAL_RETURN_OK) << "Test09_003_057 failed";
}
// [MmngrAlloc_TC_09_003_057]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrAlloc_TC_09_003_058 MemoryApiTest.MmngrAlloc_TC_09_003_058
 * @subsection MmngrAlloc_TC_09_003_058_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrAlloc_TC_09_003_058_tci Test Case ID
 * MmngrAlloc_S4_A_TC_09_003_058
 * @subsection MmngrAlloc_TC_09_003_058_rr Related Requirement(s)
 * \#276410, \#276732
 * @subsection MmngrAlloc_TC_09_003_058_pp Prerequisite/Precondition
 * OSAL is initialized.
 * @subsection MmngrAlloc_TC_09_003_058_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrAlloc with abnormal condition in OSAL_MMNGR_ALLOC_MODE_FREE_LIST_PROT mode.
 * - Test09_003_058: hndl_mmngr->p_ptr_self is invalid (NULL)
 * @subsection MmngrAlloc_TC_09_003_058_tpts Test Procedure/Test Steps
 * -# Open the handle using R_OSAL_MmngrOpen with config:
 *      - config.max_allowed_allocations = 4
 *      - config.max_registered_monitors_cbs = 0
 *      - config.memory_limit = 10MB
 *      - config.mode = OSAL_MMNGR_ALLOC_MODE_FREE_LIST_PROT.
 * -# Call R_OSAL_MmngrAlloc to allocate buffer with the hndl_mmngr->p_ptr_self is NULL
 * -# Call R_OSAL_MmngrClose to close the memory manager.
 * @subsection MmngrAlloc_TC_09_003_058_ereb Expected Result/Behavior
 * -# The return value of R_OSAL_MmngrOpen is OSAL_RETURN_OK.<br>
 * The return handle is not OSAL_MEMORY_MANAGER_HANDLE_INVALID.
 * -# The return value of R_OSAL_MmngrAlloc is OSAL_RETURN_HANDLE.
 * -# The return value of R_OSAL_MmngrClose is OSAL_RETURN_OK.
 * @subsection MmngrAlloc_TC_09_003_058_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrAlloc_TC_09_003_058
 */
// [MmngrAlloc_TC_09_003_058]
TEST_F(MemoryApiTest, MmngrAlloc_TC_09_003_058)
{
    void *bk_ptr_self;

    // Test09_003_058
    // @brief: Abnormal case: hndl_mmngr->p_ptr_self is invalid (NULL)
    config.max_allowed_allocations     = 4;
    config.max_registered_monitors_cbs = 0;
    config.memory_limit = 10 * 1024 * 1024;
    config.mode = OSAL_MMNGR_ALLOC_MODE_FREE_LIST_PROT;
    EXPECT_EQ(R_OSAL_MmngrOpen(&config, &hndl_mmngr), OSAL_RETURN_OK) << "Test09_003_058 failed";
    EXPECT_NE(hndl_mmngr, OSAL_MEMORY_MANAGER_HANDLE_INVALID) << "Test09_003_058 failed";
    bk_ptr_self = hndl_mmngr->p_ptr_self;
    hndl_mmngr->p_ptr_self = NULL;
    size = 64;
    alignment = 64;
    buffer_obj = OSAL_MEMORY_BUFFER_HANDLE_INVALID;
    EXPECT_EQ(R_OSAL_MmngrAlloc(hndl_mmngr, size, alignment, &buffer_obj), OSAL_RETURN_HANDLE) << "Test09_003_058 failed";
    EXPECT_EQ(buffer_obj, OSAL_MEMORY_BUFFER_HANDLE_INVALID) << "Test09_003_058 failed";
    hndl_mmngr->p_ptr_self = bk_ptr_self;
    EXPECT_EQ(R_OSAL_MmngrClose(hndl_mmngr), OSAL_RETURN_OK) << "Test09_003_058 failed";
}
// [MmngrAlloc_TC_09_003_058]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrAlloc_TC_09_003_059 MemoryApiTest.MmngrAlloc_TC_09_003_059
 * @subsection MmngrAlloc_TC_09_003_059_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrAlloc_TC_09_003_059_tci Test Case ID
 * MmngrAlloc_S4_A_TC_09_003_059
 * @subsection MmngrAlloc_TC_09_003_059_rr Related Requirement(s)
 * \#276410, \#276732
 * @subsection MmngrAlloc_TC_09_003_059_pp Prerequisite/Precondition
 * OSAL is initialized.
 * @subsection MmngrAlloc_TC_09_003_059_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrAlloc with abnormal condition in OSAL_MMNGR_ALLOC_MODE_STACK mode.
 * - Test09_003_059: hndl_mmngr->p_ptr_self is invalid (NULL)
 * @subsection MmngrAlloc_TC_09_003_059_tpts Test Procedure/Test Steps
 * -# Open the handle using R_OSAL_MmngrOpen with config:
 *      - config.max_allowed_allocations = 4
 *      - config.max_registered_monitors_cbs = 0
 *      - config.memory_limit = 10MB
 *      - config.mode = OSAL_MMNGR_ALLOC_MODE_STACK.
 * -# Call R_OSAL_MmngrAlloc to allocate buffer with the hndl_mmngr->p_ptr_self point to an invalid data
 * -# Call R_OSAL_MmngrClose to close the memory manager.
 * @subsection MmngrAlloc_TC_09_003_059_ereb Expected Result/Behavior
 * -# The return value of R_OSAL_MmngrOpen is OSAL_RETURN_OK.<br>
 * The return handle is not OSAL_MEMORY_MANAGER_HANDLE_INVALID.
 * -# The return value of R_OSAL_MmngrAlloc is OSAL_RETURN_HANDLE.
 * -# The return value of R_OSAL_MmngrClose is OSAL_RETURN_OK.
 * @subsection MmngrAlloc_TC_09_003_059_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrAlloc_TC_09_003_059
 */
// [MmngrAlloc_TC_09_003_059]
TEST_F(MemoryApiTest, MmngrAlloc_TC_09_003_059)
{
    void *bk_ptr_self;
    void *ng_ptr_self;

    // Test09_003_059
    // @brief: Abnormal case: hndl_mmngr->p_ptr_self is invalid (not NULL)
    config.max_allowed_allocations     = 4;
    config.max_registered_monitors_cbs = 0;
    config.memory_limit = 10 * 1024 * 1024;
    config.mode = OSAL_MMNGR_ALLOC_MODE_STACK;
    EXPECT_EQ(R_OSAL_MmngrOpen(&config, &hndl_mmngr), OSAL_RETURN_OK) << "Test09_003_059 failed";
    EXPECT_NE(hndl_mmngr, OSAL_MEMORY_MANAGER_HANDLE_INVALID) << "Test09_003_059 failed";
    bk_ptr_self = hndl_mmngr->p_ptr_self;
    ng_ptr_self = malloc(0x100);
    EXPECT_NE(ng_ptr_self, NULL_PTR) << "Test09_003_059 failed";
    memset(ng_ptr_self, 0x1, 0x100);
    hndl_mmngr->p_ptr_self = ng_ptr_self;
    size = 64;
    alignment = 64;
    buffer_obj = OSAL_MEMORY_BUFFER_HANDLE_INVALID;
    EXPECT_EQ(R_OSAL_MmngrAlloc(hndl_mmngr, size, alignment, &buffer_obj), OSAL_RETURN_HANDLE) << "Test09_003_059 failed";
    EXPECT_EQ(buffer_obj, OSAL_MEMORY_BUFFER_HANDLE_INVALID) << "Test09_003_059 failed";
    hndl_mmngr->p_ptr_self = bk_ptr_self;
    EXPECT_EQ(R_OSAL_MmngrClose(hndl_mmngr), OSAL_RETURN_OK) << "Test09_003_059 failed";
    free(ng_ptr_self);
}
// [MmngrAlloc_TC_09_003_059]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrAlloc_TC_09_003_060 MemoryApiTest.MmngrAlloc_TC_09_003_060
 * @subsection MmngrAlloc_TC_09_003_060_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrAlloc_TC_09_003_060_tci Test Case ID
 * MmngrAlloc_S4_A_TC_09_003_060
 * @subsection MmngrAlloc_TC_09_003_060_rr Related Requirement(s)
 * \#276410, \#276732
 * @subsection MmngrAlloc_TC_09_003_060_pp Prerequisite/Precondition
 * OSAL is initialized.
 * @subsection MmngrAlloc_TC_09_003_060_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrAlloc with abnormal condition in OSAL_MMNGR_ALLOC_MODE_STACK_PROT mode.
 * - Test09_003_060: hndl_mmngr->p_ptr_self is invalid (NULL)
 * @subsection MmngrAlloc_TC_09_003_060_tpts Test Procedure/Test Steps
 * -# Open the handle using R_OSAL_MmngrOpen with config:
 *      - config.max_allowed_allocations = 4
 *      - config.max_registered_monitors_cbs = 0
 *      - config.memory_limit = 10MB
 *      - config.mode = OSAL_MMNGR_ALLOC_MODE_STACK_PROT.
 * -# Call R_OSAL_MmngrAlloc to allocate buffer with the hndl_mmngr->p_ptr_self point to an invalid data
 * -# Call R_OSAL_MmngrClose to close the memory manager.
 * @subsection MmngrAlloc_TC_09_003_060_ereb Expected Result/Behavior
 * -# The return value of R_OSAL_MmngrOpen is OSAL_RETURN_OK.<br>
 * The return handle is not OSAL_MEMORY_MANAGER_HANDLE_INVALID.
 * -# The return value of R_OSAL_MmngrAlloc is OSAL_RETURN_HANDLE.
 * -# The return value of R_OSAL_MmngrClose is OSAL_RETURN_OK.
 * @subsection MmngrAlloc_TC_09_003_060_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrAlloc_TC_09_003_060
 */
// [MmngrAlloc_TC_09_003_060]
TEST_F(MemoryApiTest, MmngrAlloc_TC_09_003_060)
{
    void *bk_ptr_self;
    void *ng_ptr_self;

    // Test09_003_060
    // @brief: Abnormal case: hndl_mmngr->p_ptr_self is invalid (not NULL)
    config.max_allowed_allocations     = 4;
    config.max_registered_monitors_cbs = 0;
    config.memory_limit = 10 * 1024 * 1024;
    config.mode = OSAL_MMNGR_ALLOC_MODE_STACK_PROT;
    EXPECT_EQ(R_OSAL_MmngrOpen(&config, &hndl_mmngr), OSAL_RETURN_OK) << "Test09_003_060 failed";
    EXPECT_NE(hndl_mmngr, OSAL_MEMORY_MANAGER_HANDLE_INVALID) << "Test09_003_060 failed";
    bk_ptr_self = hndl_mmngr->p_ptr_self;
    ng_ptr_self = malloc(0x100);
    EXPECT_NE(ng_ptr_self, NULL_PTR) << "Test09_003_060 failed";
    memset(ng_ptr_self, 0x1, 0x100);
    hndl_mmngr->p_ptr_self = ng_ptr_self;
    size = 64;
    alignment = 64;
    buffer_obj = OSAL_MEMORY_BUFFER_HANDLE_INVALID;
    EXPECT_EQ(R_OSAL_MmngrAlloc(hndl_mmngr, size, alignment, &buffer_obj), OSAL_RETURN_HANDLE) << "Test09_003_060 failed";
    EXPECT_EQ(buffer_obj, OSAL_MEMORY_BUFFER_HANDLE_INVALID) << "Test09_003_060 failed";
    hndl_mmngr->p_ptr_self = bk_ptr_self;
    EXPECT_EQ(R_OSAL_MmngrClose(hndl_mmngr), OSAL_RETURN_OK) << "Test09_003_060 failed";
    free(ng_ptr_self);
}
// [MmngrAlloc_TC_09_003_060]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrAlloc_TC_09_003_061 MemoryApiTest.MmngrAlloc_TC_09_003_061
 * @subsection MmngrAlloc_TC_09_003_061_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrAlloc_TC_09_003_061_tci Test Case ID
 * MmngrAlloc_S4_A_TC_09_003_061
 * @subsection MmngrAlloc_TC_09_003_061_rr Related Requirement(s)
 * \#276410, \#276732
 * @subsection MmngrAlloc_TC_09_003_061_pp Prerequisite/Precondition
 * OSAL is initialized.
 * @subsection MmngrAlloc_TC_09_003_061_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrAlloc with abnormal condition in OSAL_MMNGR_ALLOC_MODE_FREE_LIST mode.
 * - Test09_003_061: hndl_mmngr->p_ptr_self is invalid (NULL)
 * @subsection MmngrAlloc_TC_09_003_061_tpts Test Procedure/Test Steps
 * -# Open the handle using R_OSAL_MmngrOpen with config:
 *      - config.max_allowed_allocations = 4
 *      - config.max_registered_monitors_cbs = 0
 *      - config.memory_limit = 10MB
 *      - config.mode = OSAL_MMNGR_ALLOC_MODE_FREE_LIST.
 * -# Call R_OSAL_MmngrAlloc to allocate buffer with the hndl_mmngr->p_ptr_self point to an invalid data
 * -# Call R_OSAL_MmngrClose to close the memory manager.
 * @subsection MmngrAlloc_TC_09_003_061_ereb Expected Result/Behavior
 * -# The return value of R_OSAL_MmngrOpen is OSAL_RETURN_OK.<br>
 * The return handle is not OSAL_MEMORY_MANAGER_HANDLE_INVALID.
 * -# The return value of R_OSAL_MmngrAlloc is OSAL_RETURN_HANDLE.
 * -# The return value of R_OSAL_MmngrClose is OSAL_RETURN_OK.
 * @subsection MmngrAlloc_TC_09_003_061_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrAlloc_TC_09_003_061
 */
// [MmngrAlloc_TC_09_003_061]
TEST_F(MemoryApiTest, MmngrAlloc_TC_09_003_061)
{
    void *bk_ptr_self;
    void *ng_ptr_self;

    // Test09_003_061
    // @brief: Abnormal case: hndl_mmngr->p_ptr_self is invalid (not NULL)
    config.max_allowed_allocations     = 4;
    config.max_registered_monitors_cbs = 0;
    config.memory_limit = 10 * 1024 * 1024;
    config.mode = OSAL_MMNGR_ALLOC_MODE_FREE_LIST;
    EXPECT_EQ(R_OSAL_MmngrOpen(&config, &hndl_mmngr), OSAL_RETURN_OK) << "Test09_003_061 failed";
    EXPECT_NE(hndl_mmngr, OSAL_MEMORY_MANAGER_HANDLE_INVALID) << "Test09_003_061 failed";
    bk_ptr_self = hndl_mmngr->p_ptr_self;
    ng_ptr_self = malloc(0x100);
    EXPECT_NE(ng_ptr_self, NULL_PTR) << "Test09_003_061 failed";
    memset(ng_ptr_self, 0x1, 0x100);
    hndl_mmngr->p_ptr_self = ng_ptr_self;
    size = 64;
    alignment = 64;
    buffer_obj = OSAL_MEMORY_BUFFER_HANDLE_INVALID;
    EXPECT_EQ(R_OSAL_MmngrAlloc(hndl_mmngr, size, alignment, &buffer_obj), OSAL_RETURN_HANDLE) << "Test09_003_061 failed";
    EXPECT_EQ(buffer_obj, OSAL_MEMORY_BUFFER_HANDLE_INVALID) << "Test09_003_061 failed";
    hndl_mmngr->p_ptr_self = bk_ptr_self;
    EXPECT_EQ(R_OSAL_MmngrClose(hndl_mmngr), OSAL_RETURN_OK) << "Test09_003_061 failed";
    free(ng_ptr_self);
}
// [MmngrAlloc_TC_09_003_061]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrAlloc_TC_09_003_062 MemoryApiTest.MmngrAlloc_TC_09_003_062
 * @subsection MmngrAlloc_TC_09_003_062_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrAlloc_TC_09_003_062_tci Test Case ID
 * MmngrAlloc_S4_A_TC_09_003_062
 * @subsection MmngrAlloc_TC_09_003_062_rr Related Requirement(s)
 * \#276410, \#276732
 * @subsection MmngrAlloc_TC_09_003_062_pp Prerequisite/Precondition
 * OSAL is initialized.
 * @subsection MmngrAlloc_TC_09_003_062_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrAlloc with abnormal condition in OSAL_MMNGR_ALLOC_MODE_FREE_LIST_PROT mode.
 * - Test09_003_062: hndl_mmngr->p_ptr_self is invalid (NULL)
 * @subsection MmngrAlloc_TC_09_003_062_tpts Test Procedure/Test Steps
 * -# Open the handle using R_OSAL_MmngrOpen with config:
 *      - config.max_allowed_allocations = 4
 *      - config.max_registered_monitors_cbs = 0
 *      - config.memory_limit = 10MB
 *      - config.mode = OSAL_MMNGR_ALLOC_MODE_FREE_LIST_PROT.
 * -# Call R_OSAL_MmngrAlloc to allocate buffer with the hndl_mmngr->p_ptr_self point to an invalid data
 * -# Call R_OSAL_MmngrClose to close the memory manager.
 * @subsection MmngrAlloc_TC_09_003_062_ereb Expected Result/Behavior
 * -# The return value of R_OSAL_MmngrOpen is OSAL_RETURN_OK.<br>
 * The return handle is not OSAL_MEMORY_MANAGER_HANDLE_INVALID.
 * -# The return value of R_OSAL_MmngrAlloc is OSAL_RETURN_HANDLE.
 * -# The return value of R_OSAL_MmngrClose is OSAL_RETURN_OK.
 * @subsection MmngrAlloc_TC_09_003_062_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrAlloc_TC_09_003_062
 */
// [MmngrAlloc_TC_09_003_062]
TEST_F(MemoryApiTest, MmngrAlloc_TC_09_003_062)
{
    void *bk_ptr_self;
    void *ng_ptr_self;

    // Test09_003_062
    // @brief: Abnormal case: hndl_mmngr->p_ptr_self is invalid (not NULL)
    config.max_allowed_allocations     = 4;
    config.max_registered_monitors_cbs = 0;
    config.memory_limit = 10 * 1024 * 1024;
    config.mode = OSAL_MMNGR_ALLOC_MODE_FREE_LIST_PROT;
    EXPECT_EQ(R_OSAL_MmngrOpen(&config, &hndl_mmngr), OSAL_RETURN_OK) << "Test09_003_062 failed";
    EXPECT_NE(hndl_mmngr, OSAL_MEMORY_MANAGER_HANDLE_INVALID) << "Test09_003_062 failed";
    bk_ptr_self = hndl_mmngr->p_ptr_self;
    ng_ptr_self = malloc(0x100);
    EXPECT_NE(ng_ptr_self, NULL_PTR) << "Test09_003_062 failed";
    memset(ng_ptr_self, 0x1, 0x100);
    hndl_mmngr->p_ptr_self = ng_ptr_self;
    size = 64;
    alignment = 64;
    buffer_obj = OSAL_MEMORY_BUFFER_HANDLE_INVALID;
    EXPECT_EQ(R_OSAL_MmngrAlloc(hndl_mmngr, size, alignment, &buffer_obj), OSAL_RETURN_HANDLE) << "Test09_003_062 failed";
    EXPECT_EQ(buffer_obj, OSAL_MEMORY_BUFFER_HANDLE_INVALID) << "Test09_003_062 failed";
    hndl_mmngr->p_ptr_self = bk_ptr_self;
    EXPECT_EQ(R_OSAL_MmngrClose(hndl_mmngr), OSAL_RETURN_OK) << "Test09_003_062 failed";
    free(ng_ptr_self);
}
// [MmngrAlloc_TC_09_003_062]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrAlloc_TC_09_003_063 MemoryApiTest.MmngrAlloc_TC_09_003_063
 * @subsection MmngrAlloc_TC_09_003_063_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrAlloc_TC_09_003_063_tci Test Case ID
 * MmngrAlloc_S3_N_TC_09_003_063
 * @subsection MmngrAlloc_TC_09_003_063_rr Related Requirement(s)
 * \#276410, \#276732
 * @subsection MmngrAlloc_TC_09_003_063_pp Prerequisite/Precondition
 * OSAL is initialized.
 * @subsection MmngrAlloc_TC_09_003_063_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrAlloc in normal condition.
 * - Test09_003_063: Confirm the behavior of R_OSAL_MmngrAlloc function when there is a padding area which size is 4KB
 * @subsection MmngrAlloc_TC_09_003_063_tpts Test Procedure/Test Steps
 * -# Get the max configuration by using R_OSAL_MmngrGetOsalMaxConfig
 * -# Open the handle using R_OSAL_MmngrOpen with the max configuration above
 * -# Make a padding area by allocating 2 buffers which size and alignment as below:
 *      - First buffer: size and alignment are {4096, 4096}
 *      - Second buffer: size and alignment are {64, 4096}
 * -# Continue to allocate the third buffer which can fit the padding area
 * -# Deallocate all allocated buffers
 * -# Call R_OSAL_MmngrClose to close the memory manager.
 * @subsection MmngrAlloc_TC_09_003_063_ereb Expected Result/Behavior
 * -# R_OSAL_MmngrGetOsalMaxConfig return OSAL_RETURN_OK
 * -# The return value of R_OSAL_MmngrOpen is OSAL_RETURN_OK.<br>
 * The return handle is not OSAL_MEMORY_MANAGER_HANDLE_INVALID.
 * -# The return value of R_OSAL_MmngrAlloc for 1st and 2nd buffers is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrAlloc for 3rd is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrDealloc is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrClose is OSAL_RETURN_OK.
 * @subsection MmngrAlloc_TC_09_003_063_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrAlloc_TC_09_003_063
 */
// [MmngrAlloc_TC_09_003_063]
TEST_F(MemoryApiTest, MmngrAlloc_TC_09_003_063)
{
    osal_memory_buffer_handle_t buffer_obj[3];
    uintptr_t hw_addr;
    size_t size[3] = {4096, 64, 64};
    size_t align[3] = {4096, 4096 * 2, 4096};

    //pre-process: open new memory manager
    EXPECT_EQ(R_OSAL_MmngrGetOsalMaxConfig(&config), OSAL_RETURN_OK) << "pre-process failed";
    EXPECT_EQ(R_OSAL_MmngrOpen(&config, &hndl_mmngr), OSAL_RETURN_OK) << "pre-process failed";
    EXPECT_NE(hndl_mmngr, OSAL_MEMORY_MANAGER_HANDLE_INVALID) << "pre-process failed";

    for(size_t i = 0; i < 3; i++)
    {
        EXPECT_EQ(R_OSAL_MmngrAlloc(hndl_mmngr, size[i], align[i], &buffer_obj[i]), OSAL_RETURN_OK) << "Test09_003_063 failed";
        EXPECT_EQ(R_OSAL_MmngrGetHwAddr(buffer_obj[i] ,2, &hw_addr), OSAL_RETURN_OK) << "Test09_003_063 failed";
    }

    for(int j = 2; j >= 0; j--)
    {
        EXPECT_EQ(R_OSAL_MmngrDealloc(hndl_mmngr, buffer_obj[j]), OSAL_RETURN_OK) << "Test09_003_063 failed";
    }

    //post-process: close memory manager
    EXPECT_EQ(R_OSAL_MmngrClose(hndl_mmngr), OSAL_RETURN_OK) << "post-process failed";
}
// [MmngrAlloc_TC_09_003_063]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrAlloc_TC_09_003_064 MemoryApiTest.MmngrAlloc_TC_09_003_064
 * @subsection MmngrAlloc_TC_09_003_064_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrAlloc_TC_09_003_064_tci Test Case ID
 * MmngrAlloc_S3_N_TC_09_003_064
 * @subsection MmngrAlloc_TC_09_003_064_rr Related Requirement(s)
 * \#276410, \#276732
 * @subsection MmngrAlloc_TC_09_003_064_pp Prerequisite/Precondition
 * OSAL is initialized.
 * @subsection MmngrAlloc_TC_09_003_064_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrAlloc in normal condition.
 * - Test09_003_064: Confirm the behavior of R_OSAL_MmngrAlloc function when there is a padding area which size is 4KB
 * @subsection MmngrAlloc_TC_09_003_064_tpts Test Procedure/Test Steps
 * -# Get the max configuration by using R_OSAL_MmngrGetOsalMaxConfig
 * -# Open the handle using R_OSAL_MmngrOpen with the max configuration above
 * -# Allocate multi-buffer using R_OSAL_MmngrAlloc
 * -# Get the HW address using R_OSAL_MmngrGetHwAddr
 * -# Deallocate all allocated buffers
 * -# Call R_OSAL_MmngrClose to close the memory manager.
 * @subsection MmngrAlloc_TC_09_003_064_ereb Expected Result/Behavior
 * -# R_OSAL_MmngrGetOsalMaxConfig return OSAL_RETURN_OK
 * -# The return value of R_OSAL_MmngrOpen is OSAL_RETURN_OK.<br>
 * The return handle is not OSAL_MEMORY_MANAGER_HANDLE_INVALID.
 * -# The return value of R_OSAL_MmngrAlloc is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrGetHwAddr is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrDealloc is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrClose is OSAL_RETURN_OK.
 * @subsection MmngrAlloc_TC_09_003_064_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrAlloc_TC_09_003_064
 */
// [MmngrAlloc_TC_09_003_064]
TEST_F(MemoryApiTest, MmngrAlloc_TC_09_003_064)
{
    osal_memory_buffer_handle_t buffer_obj[44];
    uintptr_t hw_addr;
    size_t sizee[44] = {37478400, 37478400, 37478400, 37478400, 37478400, 37478400, \
    37478400, 37478400, 37478400, 37478400, 709443584, 8388608, 8388608, 8192, 25165824, 25165824, \
    5621760, 1499136, 374784, 2097152, 2097152, 524288, 524288, 131072, 131072, 29982720, \
    5621760, 1499136, 374784, 2097152, 2097152, 524288, 524288, 131072, 131072, 3148800, \
    3148800, 3148800, 3148800, 7499520, 64, 512, 2162688, 7864320 };

    size_t alignn[44] = {256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 64, 64, \
    64, 64, 64, 64, 2097152, 2097152, 524288, 524288, 131072, 131072, 64, 64, 64, 64, 2097152, \
    2097152, 524288, 524288, 131072, 131072, 64, 64, 64, 64, 256, 64, 64, 256, 64};

    //pre-process: open new memory manager
    EXPECT_EQ(R_OSAL_MmngrGetOsalMaxConfig(&config), OSAL_RETURN_OK) << "pre-process failed";
    EXPECT_EQ(R_OSAL_MmngrOpen(&config, &hndl_mmngr), OSAL_RETURN_OK) << "pre-process failed";
    EXPECT_NE(hndl_mmngr, OSAL_MEMORY_MANAGER_HANDLE_INVALID) << "pre-process failed";

    for(size_t i = 0; i < 44; i++)
    {
        EXPECT_EQ(R_OSAL_MmngrAlloc(hndl_mmngr, sizee[i], alignn[i], &buffer_obj[i]), OSAL_RETURN_OK) << "Test09_003_064 failed";
        EXPECT_EQ(R_OSAL_MmngrGetHwAddr(buffer_obj[i] ,2, &hw_addr), OSAL_RETURN_OK) << "Test09_003_064 failed";
    }

    for(int j = 43; j >= 0; j--)
    {
        EXPECT_EQ(R_OSAL_MmngrDealloc(hndl_mmngr, buffer_obj[j]), OSAL_RETURN_OK) << "Test09_003_064 failed";
    }

    //post-process: close memory manager
    EXPECT_EQ(R_OSAL_MmngrClose(hndl_mmngr), OSAL_RETURN_OK) << "post-process failed";
}
// [MmngrAlloc_TC_09_003_064]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrAlloc_TC_09_003_065 MemoryApiTest.MmngrAlloc_TC_09_003_065
 * @subsection MmngrAlloc_TC_09_003_065_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrAlloc_TC_09_003_065_tci Test Case ID
 * MmngrAlloc_S3_N_TC_09_003_065
 * @subsection MmngrAlloc_TC_09_003_065_rr Related Requirement(s)
 * \#276410, \#276732
 * @subsection MmngrAlloc_TC_09_003_065_pp Prerequisite/Precondition
 * OSAL is initialized.
 * @subsection MmngrAlloc_TC_09_003_065_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrAlloc in normal condition.
 * - Test09_003_065: Confirm the behavior of R_OSAL_MmngrAlloc function when there is a padding area which size is 4KB
 * @subsection MmngrAlloc_TC_09_003_065_tpts Test Procedure/Test Steps
 * -# Get the max configuration by using R_OSAL_MmngrGetOsalMaxConfig
 * -# Open the handle using R_OSAL_MmngrOpen with the max configuration above
 * -# Allocate multi-buffer using R_OSAL_MmngrAlloc
 *  - If the memory is not enough for next allocation, Dealloc previous allocated buffers by using R_OSAL_MmngrDealloc
 *  - Continue to allocate new buffer by using R_OSAL_MmngrAlloc
 * -# Get the HW address using R_OSAL_MmngrGetHwAddr
 * -# Deallocate all allocated buffers by using R_OSAL_MmngrDealloc
 * -# Call R_OSAL_MmngrClose to close the memory manager.
 * @subsection MmngrAlloc_TC_09_003_065_ereb Expected Result/Behavior
 * -# R_OSAL_MmngrGetOsalMaxConfig return OSAL_RETURN_OK
 * -# The return value of R_OSAL_MmngrOpen is OSAL_RETURN_OK.<br>
 * The return handle is not OSAL_MEMORY_MANAGER_HANDLE_INVALID.
 * -# The return value of R_OSAL_MmngrAlloc is OSAL_RETURN_OK or OSAL_RETURN_MEM.
 *  - If R_OSAL_MmngrAlloc return OSAL_RETURN_MEM, the calling R_OSAL_MmngrDealloc return OSAL_RETURN_OK
 *  - The calling to R_OSAL_MmngrAlloc to allocate new buffer return OSAL_RETURN_OK
 * -# The return value of R_OSAL_MmngrGetHwAddr is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrDealloc is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrClose is OSAL_RETURN_OK.
 * @subsection MmngrAlloc_TC_09_003_065_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrAlloc_TC_09_003_065
 */
// [MmngrAlloc_TC_09_003_065]
TEST_F(MemoryApiTest, MmngrAlloc_TC_09_003_065)
{
    osal_memory_buffer_handle_t buffer_obj[273];
    uintptr_t hw_addr;
    e_osal_return_t osal_ret;
    size_t size[273] = {37478400, 37478400, 37478400, 37478400, 37478400, 37478400, 37478400, 37478400, 37478400, \
    37478400, 709443584, 8388608, 8388608, 8192, 25165824, 25165824, 5621760, 1499136, 374784, 2097152, 2097152, 524288, 524288, \
    131072, 131072, 29982720, 5621760, 1499136, 374784, 2097152, 2097152, 524288, 524288, 131072, 131072, 3148800, \
    3148800, 3148800, 3148800, 7499520, 64, 512, 2162688, 7864320, 2162688, 16220160, 12288, 12288, 12288, 12288, \
    12288, 12288, 12288, 12288, 12288, 12288, 12288, 12288, 12288, 12288, 12288, 12288, 12288, 12288, 12288, 12288,\
    12288, 12288, 12288, 12288, 12288, 12288, 12288, 12288, 12288, 12288, 12288, 12288, 12288, 12288, 12288, 12288, \
    12288, 12288, 12288, 12288, 12288, 12288, 12288, 12288, 12288, 12288, 12288, 12288, 387840, 491520, 10240, 113664,\
    131072, 131072, 131072, 524288, 524288, 524288, 198912, 229376, 229376, 229376, 5621760, 1499136, 374784, 2097152,\
    2097152, 524288, 524288, 131072, 131072, 29982720, 5621760, 1499136, 374784, 2097152, 2097152, 524288, 524288, 131072,\
    131072, 3148800, 3148800, 7499520, 5621760, 1499136, 22487040, 5621760, 1499136, 465408, 49152, \
    // 2nd time
    37478400, 37478400, 37478400, 37478400, 37478400, 37478400, 37478400, 37478400, 37478400, \
    37478400, 8388608, 8388608, 8192, 25165824, 25165824, 5621760, 1499136, 374784, 2097152, 2097152, 524288, 524288, \
    131072, 131072, 29982720, 5621760, 1499136, 374784, 2097152, 2097152, 524288, 524288, 131072, 131072, 3148800, \
    3148800, 3148800, 3148800, 7499520, 64, 512, 2162688, 7864320, 2162688, 16220160, 12288, 12288, 12288, 12288, \
    12288, 12288, 12288, 12288, 12288, 12288, 12288, 12288, 12288, 12288, 12288, 12288, 12288, 12288, 12288, 12288,\
    12288, 12288, 12288, 12288, 12288, 12288, 12288, 12288, 12288, 12288, 12288, 12288, 12288, 12288, 12288, 12288, \
    12288, 12288, 12288, 12288, 12288, 12288, 12288, 12288, 12288, 12288, 12288, 12288, 387840, 491520, 10240, 113664,\
    131072, 131072, 131072, 524288, 524288, 524288, 198912, 229376, 229376, 229376, 5621760, 1499136, 374784, 2097152,\
    2097152, 524288, 524288, 131072, 131072, 29982720, 5621760, 1499136, 374784, 2097152, 2097152, 524288, 524288, 131072,\
    131072, 3148800, 3148800, 7499520, 5621760, 1499136, 22487040, 5621760, 1499136, 465408, 49152};

    size_t align[273] = {67108864, 67108864, 67108864, 67108864, 67108864, 67108864, 67108864, 67108864, 67108864, 67108864, 67108864, 67108864,\
    67108864, 67108864, 67108864, 67108864, 67108864, 67108864, 67108864, 67108864, 67108864, 67108864, 67108864, 67108864, 67108864, 67108864,\
    67108864, 67108864, 67108864, 67108864, 67108864, 67108864, 67108864, 67108864, 67108864, 67108864, 67108864, 67108864, 67108864, 67108864,\
    67108864, 67108864, 67108864, 67108864, 67108864, 67108864, 67108864, 67108864, 67108864, 67108864, 67108864, 67108864, 67108864, 67108864,\
    67108864, 67108864, 67108864, 67108864, 67108864, 67108864, 67108864, 67108864, 67108864, 67108864, 67108864, 67108864, 67108864, 67108864,\
    67108864, 67108864, 67108864, 67108864, 67108864, 67108864, 67108864, 67108864, 67108864, 67108864, 67108864, 67108864, 67108864, 67108864,\
    67108864, 67108864, 67108864, 67108864, 67108864, 67108864, 67108864, 67108864, 67108864, 67108864, 67108864, 67108864, 67108864, 67108864,\
    67108864, 67108864, 67108864, 67108864, 67108864, 67108864, 67108864, 67108864, 67108864, 67108864, 67108864, 67108864, 67108864, 67108864,\
    67108864, 67108864, 67108864, 67108864, 67108864, 67108864, 67108864, 67108864, 67108864, 67108864, 67108864, 67108864, 67108864, 67108864,\
    67108864, 67108864, 67108864, 67108864, 67108864, 67108864, 67108864, 67108864, 67108864, 67108864, 67108864, 67108864, 67108864, \
    // 2nd time
    67108864, 67108864, 67108864, 67108864, 67108864, 67108864, 67108864, 67108864, 67108864, 67108864, 67108864,\
    67108864, 67108864, 67108864, 67108864, 67108864, 67108864, 67108864, 67108864, 67108864, 67108864, 67108864, 67108864, 67108864, 67108864,\
    67108864, 67108864, 67108864, 67108864, 67108864, 67108864, 67108864, 67108864, 67108864, 67108864, 67108864, 67108864, 67108864, 67108864,\
    67108864, 67108864, 67108864, 67108864, 67108864, 67108864, 67108864, 67108864, 67108864, 67108864, 67108864, 67108864, 67108864, 67108864,\
    67108864, 67108864, 67108864, 67108864, 67108864, 67108864, 67108864, 67108864, 67108864, 67108864, 67108864, 67108864, 67108864, 67108864,\
    67108864, 67108864, 67108864, 67108864, 67108864, 67108864, 67108864, 67108864, 67108864, 67108864, 67108864, 67108864, 67108864, 67108864,\
    67108864, 67108864, 67108864, 67108864, 67108864, 67108864, 67108864, 67108864, 67108864, 67108864, 67108864, 67108864, 67108864, 67108864,\
    67108864, 67108864, 67108864, 67108864, 67108864, 67108864, 67108864, 67108864, 67108864, 67108864, 67108864, 67108864, 67108864, 67108864,\
    67108864, 67108864, 67108864, 67108864, 67108864, 67108864, 67108864, 67108864, 67108864, 67108864, 67108864, 67108864, 67108864, 67108864,\
    67108864, 67108864, 67108864, 67108864, 67108864, 67108864, 67108864, 67108864, 67108864, 67108864, 67108864, 67108864, 67108864};

    //pre-process: open new memory manager
    EXPECT_EQ(R_OSAL_MmngrGetOsalMaxConfig(&config), OSAL_RETURN_OK) << "pre-process failed";
    config.mode = OSAL_MMNGR_ALLOC_MODE_STACK;
    EXPECT_EQ(R_OSAL_MmngrOpen(&config, &hndl_mmngr), OSAL_RETURN_OK) << "pre-process failed";
    EXPECT_NE(hndl_mmngr, OSAL_MEMORY_MANAGER_HANDLE_INVALID) << "pre-process failed";

    for(size_t i = 0; i < 273; i++)
    {
        osal_ret = R_OSAL_MmngrAlloc(hndl_mmngr, size[i], align[i], &buffer_obj[i]);
        if(osal_ret == OSAL_RETURN_MEM) // out-of-memory
        {
            printf("Out-of-memory \n");
            if(buffer_obj[i-1] != OSAL_MEMORY_BUFFER_HANDLE_INVALID)
            {
                EXPECT_EQ(R_OSAL_MmngrDealloc(hndl_mmngr, buffer_obj[i-1]), OSAL_RETURN_OK) << "Test09_003_065 failed"; // deallocate the previous buffer
                buffer_obj[i-1] = OSAL_MEMORY_BUFFER_HANDLE_INVALID;
            }

            if(buffer_obj[i-2] != OSAL_MEMORY_BUFFER_HANDLE_INVALID)
            {
                EXPECT_EQ(R_OSAL_MmngrDealloc(hndl_mmngr, buffer_obj[i-2]), OSAL_RETURN_OK) << "Test09_003_065 failed"; // deallocate the previous buffer
                buffer_obj[i-2] = OSAL_MEMORY_BUFFER_HANDLE_INVALID;
            }

            if(buffer_obj[i-3] != OSAL_MEMORY_BUFFER_HANDLE_INVALID)
            {
                EXPECT_EQ(R_OSAL_MmngrDealloc(hndl_mmngr, buffer_obj[i-3]), OSAL_RETURN_OK) << "Test09_003_065 failed"; // deallocate the previous buffer
                buffer_obj[i-3] = OSAL_MEMORY_BUFFER_HANDLE_INVALID;
            }

            if(buffer_obj[i-4] != OSAL_MEMORY_BUFFER_HANDLE_INVALID)
            {
                EXPECT_EQ(R_OSAL_MmngrDealloc(hndl_mmngr, buffer_obj[i-4]), OSAL_RETURN_OK) << "Test09_003_065 failed"; // deallocate the previous buffer
                buffer_obj[i-4] = OSAL_MEMORY_BUFFER_HANDLE_INVALID;
            }

            if(buffer_obj[i-5] != OSAL_MEMORY_BUFFER_HANDLE_INVALID)
            {
                EXPECT_EQ(R_OSAL_MmngrDealloc(hndl_mmngr, buffer_obj[i-5]), OSAL_RETURN_OK) << "Test09_003_065 failed"; // deallocate the previous buffer
                buffer_obj[i-5] = OSAL_MEMORY_BUFFER_HANDLE_INVALID;
            }

            EXPECT_EQ(R_OSAL_MmngrAlloc(hndl_mmngr, size[i], align[i], &buffer_obj[i]), OSAL_RETURN_OK) << "Test09_003_065 failed"; // allocate new buffer
        }
        EXPECT_EQ(R_OSAL_MmngrGetHwAddr(buffer_obj[i] ,2, &hw_addr), OSAL_RETURN_OK) << "Test09_003_065 failed";
    }

    for(int j = 272; j >= 0; j--)
    {
        if(buffer_obj[j] != OSAL_MEMORY_BUFFER_HANDLE_INVALID)
        {
            EXPECT_EQ(R_OSAL_MmngrDealloc(hndl_mmngr, buffer_obj[j]), OSAL_RETURN_OK) << "Test09_003_065 failed";
        }
    }

    //post-process: close memory manager
    EXPECT_EQ(R_OSAL_MmngrClose(hndl_mmngr), OSAL_RETURN_OK) << "post-process failed";
}
// [MmngrAlloc_TC_09_003_065]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrAlloc_TC_09_003_066 MemoryApiTest.MmngrAlloc_TC_09_003_066
 * @subsection MmngrAlloc_TC_09_003_066_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrAlloc_TC_09_003_066_tci Test Case ID
 * MmngrAlloc_S3_N_TC_09_003_066
 * @subsection MmngrAlloc_TC_09_003_066_rr Related Requirement(s)
 * \#276410, \#276732
 * @subsection MmngrAlloc_TC_09_003_066_pp Prerequisite/Precondition
 * OSAL is initialized.
 * @subsection MmngrAlloc_TC_09_003_066_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrAlloc in normal condition.
 * - Test09_003_066: Allocating multi-buffers with FREE_LIST in memory region index 0. Deallocation order is not in reversed order of allocation
 * @subsection MmngrAlloc_TC_09_003_066_tpts Test Procedure/Test Steps
 * -# Get the max configuration by using R_OSAL_MmngrGetOsalMaxConfig
 * -# Open the handle using R_OSAL_MmngrOpen with the max configuration above
 * -# Allocate multi-buffer using R_OSAL_MmngrAlloc
 * -# Get the HW address using R_OSAL_MmngrGetHwAddr
 * -# Deallocate all allocated buffers. Deallocation order is not in reversed order of allocation.
 * -# Call R_OSAL_MmngrClose to close the memory manager.
 * @subsection MmngrAlloc_TC_09_003_066_ereb Expected Result/Behavior
 * -# R_OSAL_MmngrGetOsalMaxConfig return OSAL_RETURN_OK
 * -# The return value of R_OSAL_MmngrOpen is OSAL_RETURN_OK.<br>
 * The return handle is not OSAL_MEMORY_MANAGER_HANDLE_INVALID.
 * -# The return value of R_OSAL_MmngrAlloc is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrGetHwAddr is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrDealloc is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrClose is OSAL_RETURN_OK.
 * @subsection MmngrAlloc_TC_09_003_066_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrAlloc_TC_09_003_066
 */
// [MmngrAlloc_TC_09_003_066]
TEST_F(MemoryApiTest, MmngrAlloc_TC_09_003_066)
{
    osal_memory_buffer_handle_t buffer_obj[44];
    uintptr_t hw_addr;
    vector<size_t> random_index;
    size_t sizee[44] = {37478400, 37478400, 37478400, 37478400, 37478400, 37478400, \
    37478400, 37478400, 37478400, 37478400, 709443584, 8388608, 8388608, 8192, 25165824, 25165824, \
    5621760, 1499136, 374784, 2097152, 2097152, 524288, 524288, 131072, 131072, 29982720, \
    5621760, 1499136, 374784, 2097152, 2097152, 524288, 524288, 131072, 131072, 3148800, \
    3148800, 3148800, 3148800, 7499520, 64, 512, 2162688, 7864320 };

    size_t alignn[44] = {256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 64, 64, \
    64, 64, 64, 64, 2097152, 2097152, 524288, 524288, 131072, 131072, 64, 64, 64, 64, 2097152, \
    2097152, 524288, 524288, 131072, 131072, 64, 64, 64, 64, 256, 64, 64, 256, 64};

    //pre-process: open new memory manager
    EXPECT_EQ(R_OSAL_MmngrGetOsalMaxConfig(&config), OSAL_RETURN_OK) << "pre-process failed";
    config.mode = OSAL_MMNGR_ALLOC_MODE_FREE_LIST;
    EXPECT_EQ(R_OSAL_MmngrOpen(&config, &hndl_mmngr), OSAL_RETURN_OK) << "pre-process failed";
    EXPECT_NE(hndl_mmngr, OSAL_MEMORY_MANAGER_HANDLE_INVALID) << "pre-process failed";

    for(size_t i = 0; i < 44; i++)
    {
        EXPECT_EQ(R_OSAL_MmngrAlloc(hndl_mmngr, sizee[i], alignn[i], &buffer_obj[i]), OSAL_RETURN_OK) << "Test09_003_066 failed";
        EXPECT_EQ(R_OSAL_MmngrGetHwAddr(buffer_obj[i] ,2, &hw_addr), OSAL_RETURN_OK) << "Test09_003_066 failed";
    }

    for (auto index = 0; index < 44; index++)
    {
        size_t tmp = (size_t)(rand() % 44);
        if(0 != index) // no need to check for the first element
        {
            for(auto j = 0; j < index; j++)
            {
                while(random_index.end() != find(random_index.begin(), random_index.end(), tmp))
                {
                    tmp = rand() % 44;
                }
            }
        }

        random_index.push_back(tmp);

        printf("Random index: %ld\n", random_index.at(index));
    }

    for(size_t j = 0; j < random_index.size(); j++)
    {
        EXPECT_EQ(R_OSAL_MmngrDealloc(hndl_mmngr, buffer_obj[random_index.at(j)]), OSAL_RETURN_OK) << "Test09_003_066 failed";
    }

    //post-process: close memory manager
    EXPECT_EQ(R_OSAL_MmngrClose(hndl_mmngr), OSAL_RETURN_OK) << "post-process failed";
}
// [MmngrAlloc_TC_09_003_066]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrAlloc_TC_09_003_067 MemoryApiTest.MmngrAlloc_TC_09_003_067
 * @subsection MmngrAlloc_TC_09_003_067_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrAlloc_TC_09_003_067_tci Test Case ID
 * MmngrAlloc_S3_N_TC_09_003_067
 * @subsection MmngrAlloc_TC_09_003_067_rr Related Requirement(s)
 * \#276410, \#276732
 * @subsection MmngrAlloc_TC_09_003_067_pp Prerequisite/Precondition
 * OSAL is initialized.
 * @subsection MmngrAlloc_TC_09_003_067_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrAlloc in normal condition.
 * - Test09_003_067: Allocating multi-buffers with FREE_LIST_PROT in memory region index 0. Deallocation order is not in reversed order of allocation
 * @subsection MmngrAlloc_TC_09_003_067_tpts Test Procedure/Test Steps
 * -# Get the max configuration by using R_OSAL_MmngrGetOsalMaxConfig
 * -# Open the handle using R_OSAL_MmngrOpen with the max configuration above
 * -# Allocate multi-buffer using R_OSAL_MmngrAlloc
 * -# Get the HW address using R_OSAL_MmngrGetHwAddr
 * -# Deallocate all allocated buffers. Deallocation order is not in reversed order of allocation.
 * -# Call R_OSAL_MmngrClose to close the memory manager.
 * @subsection MmngrAlloc_TC_09_003_067_ereb Expected Result/Behavior
 * -# R_OSAL_MmngrGetOsalMaxConfig return OSAL_RETURN_OK
 * -# The return value of R_OSAL_MmngrOpen is OSAL_RETURN_OK.<br>
 * The return handle is not OSAL_MEMORY_MANAGER_HANDLE_INVALID.
 * -# The return value of R_OSAL_MmngrAlloc is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrGetHwAddr is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrDealloc is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrClose is OSAL_RETURN_OK.
 * @subsection MmngrAlloc_TC_09_003_067_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrAlloc_TC_09_003_067
 */
// [MmngrAlloc_TC_09_003_067]
TEST_F(MemoryApiTest, MmngrAlloc_TC_09_003_067)
{
    osal_memory_buffer_handle_t buffer_obj[44];
    uintptr_t hw_addr;
    vector<size_t> random_index;
    size_t sizee[44] = {37478400, 37478400, 37478400, 37478400, 37478400, 37478400, \
    37478400, 37478400, 37478400, 37478400, 709443584, 8388608, 8388608, 8192, 25165824, 25165824, \
    5621760, 1499136, 374784, 2097152, 2097152, 524288, 524288, 131072, 131072, 29982720, \
    5621760, 1499136, 374784, 2097152, 2097152, 524288, 524288, 131072, 131072, 3148800, \
    3148800, 3148800, 3148800, 7499520, 64, 512, 2162688, 7864320 };

    size_t alignn[44] = {256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 64, 64, \
    64, 64, 64, 64, 2097152, 2097152, 524288, 524288, 131072, 131072, 64, 64, 64, 64, 2097152, \
    2097152, 524288, 524288, 131072, 131072, 64, 64, 64, 64, 256, 64, 64, 256, 64};

    //pre-process: open new memory manager
    EXPECT_EQ(R_OSAL_MmngrGetOsalMaxConfig(&config), OSAL_RETURN_OK) << "pre-process failed";
    config.mode = OSAL_MMNGR_ALLOC_MODE_FREE_LIST_PROT;
    EXPECT_EQ(R_OSAL_MmngrOpen(&config, &hndl_mmngr), OSAL_RETURN_OK) << "pre-process failed";
    EXPECT_NE(hndl_mmngr, OSAL_MEMORY_MANAGER_HANDLE_INVALID) << "pre-process failed";

    for(size_t i = 0; i < 44; i++)
    {
        EXPECT_EQ(R_OSAL_MmngrAlloc(hndl_mmngr, sizee[i], alignn[i], &buffer_obj[i]), OSAL_RETURN_OK) << "Test09_003_067 failed";
        EXPECT_EQ(R_OSAL_MmngrGetHwAddr(buffer_obj[i] ,2, &hw_addr), OSAL_RETURN_OK) << "Test09_003_067 failed";
    }

    for (auto index = 0; index < 44; index++)
    {
        size_t tmp = (size_t)(rand() % 44);
        if(0 != index) // no need to check for the first element
        {
            for(auto j = 0; j < index; j++)
            {
                while(random_index.end() != find(random_index.begin(), random_index.end(), tmp))
                {
                    tmp = rand() % 44;
                }
            }
        }

        random_index.push_back(tmp);

        printf("Random index: %ld\n", random_index.at(index));
    }

    for(size_t j = 0; j < random_index.size(); j++)
    {
        EXPECT_EQ(R_OSAL_MmngrDealloc(hndl_mmngr, buffer_obj[random_index.at(j)]), OSAL_RETURN_OK) << "Test09_003_067 failed";
    }

    //post-process: close memory manager
    EXPECT_EQ(R_OSAL_MmngrClose(hndl_mmngr), OSAL_RETURN_OK) << "post-process failed";
}
// [MmngrAlloc_TC_09_003_067]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrAlloc_TC_09_003_068 MemoryApiTest.MmngrAlloc_TC_09_003_068
 * @subsection MmngrAlloc_TC_09_003_068_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrAlloc_TC_09_003_068_tci Test Case ID
 * MmngrAlloc_S3_N_TC_09_003_068
 * @subsection MmngrAlloc_TC_09_003_068_rr Related Requirement(s)
 * \#276410, \#276732
 * @subsection MmngrAlloc_TC_09_003_068_pp Prerequisite/Precondition
 * OSAL is initialized.
 * @subsection MmngrAlloc_TC_09_003_068_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrAlloc in normal condition.
 * - Test09_003_068: Allocating multi-buffers with FREE_LIST in memory region index 1. Deallocation order is not in reversed order of allocation
 * @subsection MmngrAlloc_TC_09_003_068_tpts Test Procedure/Test Steps
 * -# Get the max configuration by using R_OSAL_MmngrGetOsalMaxConfigFromRegionIdx with region index 1
 * -# Open the handle using R_OSAL_MmngrOpenFromRegionIdx with the max configuration above and region index 1
 * -# Allocate multi-buffer using R_OSAL_MmngrAlloc
 * -# Get the HW address using R_OSAL_MmngrGetHwAddr
 * -# Deallocate all allocated buffers. Deallocation order is not in reversed order of allocation.
 * -# Call R_OSAL_MmngrClose to close the memory manager.
 * @subsection MmngrAlloc_TC_09_003_068_ereb Expected Result/Behavior
 * -# R_OSAL_MmngrGetOsalMaxConfigFromRegionIdx return OSAL_RETURN_OK
 * -# The return value of R_OSAL_MmngrOpenFromRegionIdx is OSAL_RETURN_OK.<br>
 * The return handle is not OSAL_MEMORY_MANAGER_HANDLE_INVALID.
 * -# The return value of R_OSAL_MmngrAlloc is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrGetHwAddr is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrDealloc is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrClose is OSAL_RETURN_OK.
 * @subsection MmngrAlloc_TC_09_003_068_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrAlloc_TC_09_003_068
 */
// [MmngrAlloc_TC_09_003_068]
TEST_F(MemoryApiTest, MmngrAlloc_TC_09_003_068)
{
    osal_memory_buffer_handle_t buffer_obj[44];
    uintptr_t hw_addr;
    vector<size_t> random_index;
    size_t sizee[44] = {37478400, 37478400, 37478400, 37478400, 37478400, 37478400, \
    37478400, 37478400, 37478400, 37478400, 709443584, 8388608, 8388608, 8192, 25165824, 25165824, \
    5621760, 1499136, 374784, 2097152, 2097152, 524288, 524288, 131072, 131072, 29982720, \
    5621760, 1499136, 374784, 2097152, 2097152, 524288, 524288, 131072, 131072, 3148800, \
    3148800, 3148800, 3148800, 7499520, 64, 512, 2162688, 7864320 };

    size_t alignn[44] = {256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 64, 64, \
    64, 64, 64, 64, 2097152, 2097152, 524288, 524288, 131072, 131072, 64, 64, 64, 64, 2097152, \
    2097152, 524288, 524288, 131072, 131072, 64, 64, 64, 64, 256, 64, 64, 256, 64};

    //pre-process: open new memory manager
    EXPECT_EQ(R_OSAL_MmngrGetOsalMaxConfigFromRegionIdx(1, &config), OSAL_RETURN_OK) << "pre-process failed";
    config.mode = OSAL_MMNGR_ALLOC_MODE_FREE_LIST;
    EXPECT_EQ(R_OSAL_MmngrOpenFromRegionIdx(&config, 1, &hndl_mmngr), OSAL_RETURN_OK) << "pre-process failed";
    EXPECT_NE(hndl_mmngr, OSAL_MEMORY_MANAGER_HANDLE_INVALID) << "pre-process failed";

    for(size_t i = 0; i < 44; i++)
    {
        EXPECT_EQ(R_OSAL_MmngrAlloc(hndl_mmngr, sizee[i], alignn[i], &buffer_obj[i]), OSAL_RETURN_OK) << "Test09_003_068 failed";
        EXPECT_EQ(R_OSAL_MmngrGetHwAddr(buffer_obj[i] ,2, &hw_addr), OSAL_RETURN_OK) << "Test09_003_068 failed";
    }

    for (auto index = 0; index < 44; index++)
    {
        size_t tmp = (size_t)(rand() % 44);
        if(0 != index) // no need to check for the first element
        {
            for(auto j = 0; j < index; j++)
            {
                while(random_index.end() != find(random_index.begin(), random_index.end(), tmp))
                {
                    tmp = rand() % 44;
                }
            }
        }

        random_index.push_back(tmp);

        printf("Random index: %ld\n", random_index.at(index));
    }

    for(size_t j = 0; j < random_index.size(); j++)
    {
        EXPECT_EQ(R_OSAL_MmngrDealloc(hndl_mmngr, buffer_obj[random_index.at(j)]), OSAL_RETURN_OK) << "Test09_003_068 failed";
    }

    //post-process: close memory manager
    EXPECT_EQ(R_OSAL_MmngrClose(hndl_mmngr), OSAL_RETURN_OK) << "post-process failed";
}
// [MmngrAlloc_TC_09_003_068]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrAlloc_TC_09_003_069 MemoryApiTest.MmngrAlloc_TC_09_003_069
 * @subsection MmngrAlloc_TC_09_003_069_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrAlloc_TC_09_003_069_tci Test Case ID
 * MmngrAlloc_S3_N_TC_09_003_069
 * @subsection MmngrAlloc_TC_09_003_069_rr Related Requirement(s)
 * \#276410, \#276732
 * @subsection MmngrAlloc_TC_09_003_069_pp Prerequisite/Precondition
 * OSAL is initialized.
 * @subsection MmngrAlloc_TC_09_003_069_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrAlloc in normal condition.
 * - Test09_003_069: Allocating multi-buffers with FREE_LIST_PROT in memory region index 1. Deallocation order is not in reversed order of allocation
 * @subsection MmngrAlloc_TC_09_003_069_tpts Test Procedure/Test Steps
 * -# Get the max configuration by using R_OSAL_MmngrGetOsalMaxConfigFromRegionIdx with region index 1
 * -# Open the handle using R_OSAL_MmngrOpenFromRegionIdx with the max configuration above and region index 1
 * -# Allocate multi-buffer using R_OSAL_MmngrAlloc
 * -# Get the HW address using R_OSAL_MmngrGetHwAddr
 * -# Deallocate all allocated buffers. Deallocation order is not in reversed order of allocation.
 * -# Call R_OSAL_MmngrClose to close the memory manager.
 * @subsection MmngrAlloc_TC_09_003_069_ereb Expected Result/Behavior
 * -# R_OSAL_MmngrGetOsalMaxConfigFromRegionIdx return OSAL_RETURN_OK
 * -# The return value of R_OSAL_MmngrOpenFromRegionIdx is OSAL_RETURN_OK.<br>
 * The return handle is not OSAL_MEMORY_MANAGER_HANDLE_INVALID.
 * -# The return value of R_OSAL_MmngrAlloc is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrGetHwAddr is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrDealloc is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrClose is OSAL_RETURN_OK.
 * @subsection MmngrAlloc_TC_09_003_069_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrAlloc_TC_09_003_069
 */
// [MmngrAlloc_TC_09_003_069]
TEST_F(MemoryApiTest, MmngrAlloc_TC_09_003_069)
{
    osal_memory_buffer_handle_t buffer_obj[44];
    uintptr_t hw_addr;
    vector<size_t> random_index;
    size_t sizee[44] = {37478400, 37478400, 37478400, 37478400, 37478400, 37478400, \
    37478400, 37478400, 37478400, 37478400, 709443584, 8388608, 8388608, 8192, 25165824, 25165824, \
    5621760, 1499136, 374784, 2097152, 2097152, 524288, 524288, 131072, 131072, 29982720, \
    5621760, 1499136, 374784, 2097152, 2097152, 524288, 524288, 131072, 131072, 3148800, \
    3148800, 3148800, 3148800, 7499520, 64, 512, 2162688, 7864320 };

    size_t alignn[44] = {256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 64, 64, \
    64, 64, 64, 64, 2097152, 2097152, 524288, 524288, 131072, 131072, 64, 64, 64, 64, 2097152, \
    2097152, 524288, 524288, 131072, 131072, 64, 64, 64, 64, 256, 64, 64, 256, 64};

    //pre-process: open new memory manager
    EXPECT_EQ(R_OSAL_MmngrGetOsalMaxConfigFromRegionIdx(1, &config), OSAL_RETURN_OK) << "pre-process failed";
    config.mode = OSAL_MMNGR_ALLOC_MODE_FREE_LIST_PROT;
    EXPECT_EQ(R_OSAL_MmngrOpenFromRegionIdx(&config, 1, &hndl_mmngr), OSAL_RETURN_OK) << "pre-process failed";
    EXPECT_NE(hndl_mmngr, OSAL_MEMORY_MANAGER_HANDLE_INVALID) << "pre-process failed";

    for(size_t i = 0; i < 44; i++)
    {
        EXPECT_EQ(R_OSAL_MmngrAlloc(hndl_mmngr, sizee[i], alignn[i], &buffer_obj[i]), OSAL_RETURN_OK) << "Test09_003_069 failed";
        EXPECT_EQ(R_OSAL_MmngrGetHwAddr(buffer_obj[i] ,2, &hw_addr), OSAL_RETURN_OK) << "Test09_003_069 failed";
    }

    for (auto index = 0; index < 44; index++)
    {
        size_t tmp = (size_t)(rand() % 44);
        if(0 != index) // no need to check for the first element
        {
            for(auto j = 0; j < index; j++)
            {
                while(random_index.end() != find(random_index.begin(), random_index.end(), tmp))
                {
                    tmp = rand() % 44;
                }
            }
        }

        random_index.push_back(tmp);

        printf("Random index: %ld\n", random_index.at(index));
    }

    for(size_t j = 0; j < random_index.size(); j++)
    {
        EXPECT_EQ(R_OSAL_MmngrDealloc(hndl_mmngr, buffer_obj[random_index.at(j)]), OSAL_RETURN_OK) << "Test09_003_069 failed";
    }

    //post-process: close memory manager
    EXPECT_EQ(R_OSAL_MmngrClose(hndl_mmngr), OSAL_RETURN_OK) << "post-process failed";
}
// [MmngrAlloc_TC_09_003_069]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrAlloc_TC_09_003_070 MemoryApiTest.MmngrAlloc_TC_09_003_070
 * @subsection MmngrAlloc_TC_09_003_070_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrAlloc_TC_09_003_070_tci Test Case ID
 * MmngrAlloc_S3_N_TC_09_003_070
 * @subsection MmngrAlloc_TC_09_003_070_rr Related Requirement(s)
 * \#276410, \#276732
 * @subsection MmngrAlloc_TC_09_003_070_pp Prerequisite/Precondition
 * OSAL is initialized.
 * @subsection MmngrAlloc_TC_09_003_070_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrAlloc in normal condition.
 * - Test09_003_070: Allocating multi-buffers with FREE_LIST in multi-memory regions. Deallocation order is not in reversed order of allocation
 * @subsection MmngrAlloc_TC_09_003_070_tpts Test Procedure/Test Steps
 * -# Get the max configuration of memory region index 0, 1 and 2 by using R_OSAL_MmngrGetOsalMaxConfigFromRegionIdx
 * -# Open the 3 memory handle of 3 memory regions by using R_OSAL_MmngrOpenFromRegionIdx with the max configuration above
 * -# Allocate multi-buffers using R_OSAL_MmngrAlloc on 3 memory regions
 * -# Get the HW address using R_OSAL_MmngrGetHwAddr
 * -# Deallocate all allocated buffers. Deallocation order is not in reversed order of allocation.
 * -# Call R_OSAL_MmngrClose to close the all memory managers of all memory regions.
 * @subsection MmngrAlloc_TC_09_003_070_ereb Expected Result/Behavior
 * -# R_OSAL_MmngrGetOsalMaxConfigFromRegionIdx return OSAL_RETURN_OK
 * -# The return value of R_OSAL_MmngrOpenFromRegionIdx is OSAL_RETURN_OK.<br>
 * The return handle is not OSAL_MEMORY_MANAGER_HANDLE_INVALID.
 * -# The return value of R_OSAL_MmngrAlloc is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrGetHwAddr is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrDealloc is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrClose is OSAL_RETURN_OK.
 * @subsection MmngrAlloc_TC_09_003_070_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrAlloc_TC_09_003_070
 */
// [MmngrAlloc_TC_09_003_070]
TEST_F(MemoryApiTest, MmngrAlloc_TC_09_003_070)
{
    osal_memory_buffer_handle_t buffer_obj_0[44];
    osal_memory_buffer_handle_t buffer_obj_1[44];
    osal_memory_buffer_handle_t buffer_obj_2[44];
    uintptr_t hw_addr;
    vector<size_t> random_index;
    osal_memory_manager_handle_t hndl_mmngr_0;
    osal_memory_manager_handle_t hndl_mmngr_1;
    osal_memory_manager_handle_t hndl_mmngr_2;
    size_t sizee[44] = {37478400, 37478400, 37478400, 37478400, 37478400, 37478400, \
    37478400, 37478400, 37478400, 37478400, 709443584, 8388608, 8388608, 8192, 25165824, 25165824, \
    5621760, 1499136, 374784, 2097152, 2097152, 524288, 524288, 131072, 131072, 29982720, \
    5621760, 1499136, 374784, 2097152, 2097152, 524288, 524288, 131072, 131072, 3148800, \
    3148800, 3148800, 3148800, 7499520, 64, 512, 2162688, 7864320 };

    size_t alignn[44] = {256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 64, 64, \
    64, 64, 64, 64, 2097152, 2097152, 524288, 524288, 131072, 131072, 64, 64, 64, 64, 2097152, \
    2097152, 524288, 524288, 131072, 131072, 64, 64, 64, 64, 256, 64, 64, 256, 64};

    //pre-process: open new memory manager
    EXPECT_EQ(R_OSAL_MmngrGetOsalMaxConfigFromRegionIdx(0, &config), OSAL_RETURN_OK) << "pre-process failed";
    config.mode = OSAL_MMNGR_ALLOC_MODE_FREE_LIST;
    EXPECT_EQ(R_OSAL_MmngrOpenFromRegionIdx(&config, 0, &hndl_mmngr_0), OSAL_RETURN_OK) << "pre-process failed";
    EXPECT_EQ(R_OSAL_MmngrGetOsalMaxConfigFromRegionIdx(1, &config), OSAL_RETURN_OK) << "pre-process failed";
    config.mode = OSAL_MMNGR_ALLOC_MODE_FREE_LIST;
    EXPECT_EQ(R_OSAL_MmngrOpenFromRegionIdx(&config, 1, &hndl_mmngr_1), OSAL_RETURN_OK) << "pre-process failed";
    EXPECT_EQ(R_OSAL_MmngrGetOsalMaxConfigFromRegionIdx(2, &config), OSAL_RETURN_OK) << "pre-process failed";
    config.mode = OSAL_MMNGR_ALLOC_MODE_FREE_LIST;
    EXPECT_EQ(R_OSAL_MmngrOpenFromRegionIdx(&config, 2, &hndl_mmngr_2), OSAL_RETURN_OK) << "pre-process failed";
    EXPECT_NE(hndl_mmngr_2, OSAL_MEMORY_MANAGER_HANDLE_INVALID) << "pre-process failed";

    for(size_t i = 0; i < 44; i++)
    {
        EXPECT_EQ(R_OSAL_MmngrAlloc(hndl_mmngr_0, sizee[i], alignn[i], &buffer_obj_0[i]), OSAL_RETURN_OK) << "Test09_003_070 failed";
        EXPECT_EQ(R_OSAL_MmngrGetHwAddr(buffer_obj_0[i] ,2, &hw_addr), OSAL_RETURN_OK) << "Test09_003_070 failed";
    }

    for(size_t i = 0; i < 44; i++)
    {
        EXPECT_EQ(R_OSAL_MmngrAlloc(hndl_mmngr_1, sizee[i], alignn[i], &buffer_obj_1[i]), OSAL_RETURN_OK) << "Test09_003_070 failed";
        EXPECT_EQ(R_OSAL_MmngrGetHwAddr(buffer_obj_1[i] ,2, &hw_addr), OSAL_RETURN_OK) << "Test09_003_070 failed";
    }

    for(size_t i = 0; i < 44; i++)
    {
        EXPECT_EQ(R_OSAL_MmngrAlloc(hndl_mmngr_2, sizee[i], alignn[i], &buffer_obj_2[i]), OSAL_RETURN_OK) << "Test09_003_070 failed";
        EXPECT_EQ(R_OSAL_MmngrGetHwAddr(buffer_obj_2[i] ,2, &hw_addr), OSAL_RETURN_OK) << "Test09_003_070 failed";
    }

    for (auto index = 0; index < 44; index++)
    {
        size_t tmp = (size_t)(rand() % 44);
        if(0 != index) // no need to check for the first element
        {
            for(auto j = 0; j < index; j++)
            {
                while(random_index.end() != find(random_index.begin(), random_index.end(), tmp))
                {
                    tmp = rand() % 44;
                }
            }
        }

        random_index.push_back(tmp);

        printf("Random index: %ld\n", random_index.at(index));
    }

    for(size_t j = 0; j < random_index.size(); j++)
    {
        EXPECT_EQ(R_OSAL_MmngrDealloc(hndl_mmngr_1, buffer_obj_1[random_index.at(j)]), OSAL_RETURN_OK) << "Test09_003_070 failed";
    }

    for(size_t j = 0; j < random_index.size(); j++)
    {
        EXPECT_EQ(R_OSAL_MmngrDealloc(hndl_mmngr_0, buffer_obj_0[random_index.at(j)]), OSAL_RETURN_OK) << "Test09_003_070 failed";
    }

    for(size_t j = 0; j < random_index.size(); j++)
    {
        EXPECT_EQ(R_OSAL_MmngrDealloc(hndl_mmngr_2, buffer_obj_2[random_index.at(j)]), OSAL_RETURN_OK) << "Test09_003_070 failed";
    }

    //post-process: close memory manager
    EXPECT_EQ(R_OSAL_MmngrClose(hndl_mmngr_0), OSAL_RETURN_OK) << "post-process failed";
    EXPECT_EQ(R_OSAL_MmngrClose(hndl_mmngr_1), OSAL_RETURN_OK) << "post-process failed";
    EXPECT_EQ(R_OSAL_MmngrClose(hndl_mmngr_2), OSAL_RETURN_OK) << "post-process failed";
}
// [MmngrAlloc_TC_09_003_070]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrAlloc_TC_09_003_071 MemoryApiTest.MmngrAlloc_TC_09_003_071
 * @subsection MmngrAlloc_TC_09_003_071_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrAlloc_TC_09_003_071_tci Test Case ID
 * MmngrAlloc_S3_N_TC_09_003_071
 * @subsection MmngrAlloc_TC_09_003_071_rr Related Requirement(s)
 * \#276410, \#276732
 * @subsection MmngrAlloc_TC_09_003_071_pp Prerequisite/Precondition
 * OSAL is initialized.
 * @subsection MmngrAlloc_TC_09_003_071_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrAlloc in normal condition.
 * - Test09_003_071: Allocating multi-buffers with FREE_LIST_PROT in multi-memory regions. Deallocation order is not in reversed order of allocation
 * @subsection MmngrAlloc_TC_09_003_071_tpts Test Procedure/Test Steps
 * -# Get the max configuration of memory region index 0, 1 and 2 by using R_OSAL_MmngrGetOsalMaxConfigFromRegionIdx
 * -# Open the 3 memory handle of 3 memory regions by using R_OSAL_MmngrOpenFromRegionIdx with the max configuration above
 * -# Allocate multi-buffers using R_OSAL_MmngrAlloc on 3 memory regions
 * -# Get the HW address using R_OSAL_MmngrGetHwAddr
 * -# Deallocate all allocated buffers. Deallocation order is not in reversed order of allocation.
 * -# Call R_OSAL_MmngrClose to close the all memory managers of all memory regions.
 * @subsection MmngrAlloc_TC_09_003_071_ereb Expected Result/Behavior
 * -# R_OSAL_MmngrGetOsalMaxConfigFromRegionIdx return OSAL_RETURN_OK
 * -# The return value of R_OSAL_MmngrOpenFromRegionIdx is OSAL_RETURN_OK.<br>
 * The return handle is not OSAL_MEMORY_MANAGER_HANDLE_INVALID.
 * -# The return value of R_OSAL_MmngrAlloc is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrGetHwAddr is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrDealloc is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrClose is OSAL_RETURN_OK.
 * @subsection MmngrAlloc_TC_09_003_071_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrAlloc_TC_09_003_071
 */
// [MmngrAlloc_TC_09_003_071]
TEST_F(MemoryApiTest, MmngrAlloc_TC_09_003_071)
{
    osal_memory_buffer_handle_t buffer_obj_0[44];
    osal_memory_buffer_handle_t buffer_obj_1[44];
    osal_memory_buffer_handle_t buffer_obj_2[44];
    uintptr_t hw_addr;
    vector<size_t> random_index;
    osal_memory_manager_handle_t hndl_mmngr_0;
    osal_memory_manager_handle_t hndl_mmngr_1;
    osal_memory_manager_handle_t hndl_mmngr_2;
    size_t sizee[44] = {37478400, 37478400, 37478400, 37478400, 37478400, 37478400, \
    37478400, 37478400, 37478400, 37478400, 709443584, 8388608, 8388608, 8192, 25165824, 25165824, \
    5621760, 1499136, 374784, 2097152, 2097152, 524288, 524288, 131072, 131072, 29982720, \
    5621760, 1499136, 374784, 2097152, 2097152, 524288, 524288, 131072, 131072, 3148800, \
    3148800, 3148800, 3148800, 7499520, 64, 512, 2162688, 7864320 };

    size_t alignn[44] = {256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 64, 64, \
    64, 64, 64, 64, 2097152, 2097152, 524288, 524288, 131072, 131072, 64, 64, 64, 64, 2097152, \
    2097152, 524288, 524288, 131072, 131072, 64, 64, 64, 64, 256, 64, 64, 256, 64};

    //pre-process: open new memory manager
    EXPECT_EQ(R_OSAL_MmngrGetOsalMaxConfigFromRegionIdx(0, &config), OSAL_RETURN_OK) << "pre-process failed";
    config.mode = OSAL_MMNGR_ALLOC_MODE_FREE_LIST_PROT;
    EXPECT_EQ(R_OSAL_MmngrOpenFromRegionIdx(&config, 0, &hndl_mmngr_0), OSAL_RETURN_OK) << "pre-process failed";
    EXPECT_EQ(R_OSAL_MmngrGetOsalMaxConfigFromRegionIdx(1, &config), OSAL_RETURN_OK) << "pre-process failed";
    config.mode = OSAL_MMNGR_ALLOC_MODE_FREE_LIST_PROT;
    EXPECT_EQ(R_OSAL_MmngrOpenFromRegionIdx(&config, 1, &hndl_mmngr_1), OSAL_RETURN_OK) << "pre-process failed";
    EXPECT_EQ(R_OSAL_MmngrGetOsalMaxConfigFromRegionIdx(2, &config), OSAL_RETURN_OK) << "pre-process failed";
    config.mode = OSAL_MMNGR_ALLOC_MODE_FREE_LIST_PROT;
    EXPECT_EQ(R_OSAL_MmngrOpenFromRegionIdx(&config, 2, &hndl_mmngr_2), OSAL_RETURN_OK) << "pre-process failed";
    EXPECT_NE(hndl_mmngr_2, OSAL_MEMORY_MANAGER_HANDLE_INVALID) << "pre-process failed";

    for(size_t i = 0; i < 44; i++)
    {
        EXPECT_EQ(R_OSAL_MmngrAlloc(hndl_mmngr_0, sizee[i], alignn[i], &buffer_obj_0[i]), OSAL_RETURN_OK) << "Test09_003_071 failed";
        EXPECT_EQ(R_OSAL_MmngrGetHwAddr(buffer_obj_0[i] ,2, &hw_addr), OSAL_RETURN_OK) << "Test09_003_071 failed";
    }

    for(size_t i = 0; i < 44; i++)
    {
        EXPECT_EQ(R_OSAL_MmngrAlloc(hndl_mmngr_1, sizee[i], alignn[i], &buffer_obj_1[i]), OSAL_RETURN_OK) << "Test09_003_071 failed";
        EXPECT_EQ(R_OSAL_MmngrGetHwAddr(buffer_obj_1[i] ,2, &hw_addr), OSAL_RETURN_OK) << "Test09_003_071 failed";
    }

    for(size_t i = 0; i < 44; i++)
    {
        EXPECT_EQ(R_OSAL_MmngrAlloc(hndl_mmngr_2, sizee[i], alignn[i], &buffer_obj_2[i]), OSAL_RETURN_OK) << "Test09_003_071 failed";
        EXPECT_EQ(R_OSAL_MmngrGetHwAddr(buffer_obj_2[i] ,2, &hw_addr), OSAL_RETURN_OK) << "Test09_003_071 failed";
    }

    for (auto index = 0; index < 44; index++)
    {
        size_t tmp = (size_t)(rand() % 44);
        if(0 != index) // no need to check for the first element
        {
            for(auto j = 0; j < index; j++)
            {
                while(random_index.end() != find(random_index.begin(), random_index.end(), tmp))
                {
                    tmp = rand() % 44;
                }
            }
        }

        random_index.push_back(tmp);

        printf("Random index: %ld\n", random_index.at(index));
    }

    for(size_t j = 0; j < random_index.size(); j++)
    {
        EXPECT_EQ(R_OSAL_MmngrDealloc(hndl_mmngr_1, buffer_obj_1[random_index.at(j)]), OSAL_RETURN_OK) << "Test09_003_071 failed";
    }

    for(size_t j = 0; j < random_index.size(); j++)
    {
        EXPECT_EQ(R_OSAL_MmngrDealloc(hndl_mmngr_0, buffer_obj_0[random_index.at(j)]), OSAL_RETURN_OK) << "Test09_003_071 failed";
    }

    for(size_t j = 0; j < random_index.size(); j++)
    {
        EXPECT_EQ(R_OSAL_MmngrDealloc(hndl_mmngr_2, buffer_obj_2[random_index.at(j)]), OSAL_RETURN_OK) << "Test09_003_071 failed";
    }

    //post-process: close memory manager
    EXPECT_EQ(R_OSAL_MmngrClose(hndl_mmngr_0), OSAL_RETURN_OK) << "post-process failed";
    EXPECT_EQ(R_OSAL_MmngrClose(hndl_mmngr_1), OSAL_RETURN_OK) << "post-process failed";
    EXPECT_EQ(R_OSAL_MmngrClose(hndl_mmngr_2), OSAL_RETURN_OK) << "post-process failed";
}
// [MmngrAlloc_TC_09_003_071]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrAlloc_TC_09_003_072 MemoryApiTest.MmngrAlloc_TC_09_003_072
 * @subsection MmngrAlloc_TC_09_003_072_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrAlloc_TC_09_003_072_tci Test Case ID
 * MmngrAlloc_S3_N_TC_09_003_072
 * @subsection MmngrAlloc_TC_09_003_072_rr Related Requirement(s)
 * \#276410, \#276732
 * @subsection MmngrAlloc_TC_09_003_072_pp Prerequisite/Precondition
 * OSAL is initialized.
 * @subsection MmngrAlloc_TC_09_003_072_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrAlloc in normal condition.
 * - Test09_003_072: Allocating multi-buffers with FREE_LIST to create the padding area. The next buffer size is less than the free padding area size.
 * @subsection MmngrAlloc_TC_09_003_072_tpts Test Procedure/Test Steps
 * -# Get the max memory configuration by using R_OSAL_MmngrGetOsalMaxConfig. Allocation mode is FREE_LIST
 * -# Open the memory handle with the configuration above by using R_OSAL_MmngrOpen
 * -# Allocate multi-buffers using R_OSAL_MmngrAlloc with different sizes and alignments.
 * -# Get the HW address using R_OSAL_MmngrGetHwAddr
 * -# Deallocate all allocated buffers. Deallocation order is not in reversed order of allocation.
 * -# Call R_OSAL_MmngrClose to close the memory handle.
 * @subsection MmngrAlloc_TC_09_003_072_ereb Expected Result/Behavior
 * -# R_OSAL_MmngrGetOsalMaxConfig return OSAL_RETURN_OK
 * -# The return value of R_OSAL_MmngrOpen is OSAL_RETURN_OK.<br>
 * The return handle is not OSAL_MEMORY_MANAGER_HANDLE_INVALID.
 * -# The return value of R_OSAL_MmngrAlloc is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrGetHwAddr is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrDealloc is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrClose is OSAL_RETURN_OK.
 * @subsection MmngrAlloc_TC_09_003_072_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrAlloc_TC_09_003_072
 */
// [MmngrAlloc_TC_09_003_072]
TEST_F(MemoryApiTest, MmngrAlloc_TC_09_003_072)
{
    size_t count = 3;
    osal_memory_buffer_handle_t buffer_obj[3];
    uintptr_t hw_addr;
    size_t size[3] = {4096, 4096, 4096};
    size_t align[3] = {4096, 4096 * 4, 4096};

    //pre-process: open new memory manager
    EXPECT_EQ(R_OSAL_MmngrGetOsalMaxConfig(&config), OSAL_RETURN_OK) << "pre-process failed";
    config.mode = OSAL_MMNGR_ALLOC_MODE_FREE_LIST;
    EXPECT_EQ(R_OSAL_MmngrOpen(&config, &hndl_mmngr), OSAL_RETURN_OK) << "pre-process failed";
    EXPECT_NE(hndl_mmngr, OSAL_MEMORY_MANAGER_HANDLE_INVALID) << "pre-process failed";

    // next buffer size less than free padding size
    for(size_t i = 0; i < count; i++)
    {
        EXPECT_EQ(R_OSAL_MmngrAlloc(hndl_mmngr, size[i], align[i], &buffer_obj[i]), OSAL_RETURN_OK) << "Test09_003_072 failed";
        EXPECT_EQ(R_OSAL_MmngrGetHwAddr(buffer_obj[i] ,2, &hw_addr), OSAL_RETURN_OK) << "Test09_003_072 failed";
    }

    EXPECT_EQ(R_OSAL_MmngrDealloc(hndl_mmngr, buffer_obj[1]), OSAL_RETURN_OK) << "Test09_003_072 failed";
    EXPECT_EQ(R_OSAL_MmngrDealloc(hndl_mmngr, buffer_obj[0]), OSAL_RETURN_OK) << "Test09_003_072 failed";
    EXPECT_EQ(R_OSAL_MmngrDealloc(hndl_mmngr, buffer_obj[2]), OSAL_RETURN_OK) << "Test09_003_072 failed";

    //post-process: close memory manager
    EXPECT_EQ(R_OSAL_MmngrClose(hndl_mmngr), OSAL_RETURN_OK) << "post-process failed";
}
// [MmngrAlloc_TC_09_003_072]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrAlloc_TC_09_003_073 MemoryApiTest.MmngrAlloc_TC_09_003_073
 * @subsection MmngrAlloc_TC_09_003_073_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrAlloc_TC_09_003_073_tci Test Case ID
 * MmngrAlloc_S3_N_TC_09_003_073
 * @subsection MmngrAlloc_TC_09_003_073_rr Related Requirement(s)
 * \#276410, \#276732
 * @subsection MmngrAlloc_TC_09_003_073_pp Prerequisite/Precondition
 * OSAL is initialized.
 * @subsection MmngrAlloc_TC_09_003_073_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrAlloc in normal condition.
 * - Test09_003_073: Allocating multi-buffers with FREE_LIST_PROT to create the padding area. The next buffer size is less than the free padding area size.
 * @subsection MmngrAlloc_TC_09_003_073_tpts Test Procedure/Test Steps
 * -# Get the max memory configuration by using R_OSAL_MmngrGetOsalMaxConfig. Allocation mode is FREE_LIST_PROT
 * -# Open the memory handle with the configuration above by using R_OSAL_MmngrOpen
 * -# Allocate multi-buffers using R_OSAL_MmngrAlloc with different sizes and alignments.
 * -# Get the HW address using R_OSAL_MmngrGetHwAddr
 * -# Deallocate all allocated buffers. Deallocation order is not in reversed order of allocation.
 * -# Call R_OSAL_MmngrClose to close the memory handle.
 * @subsection MmngrAlloc_TC_09_003_073_ereb Expected Result/Behavior
 * -# R_OSAL_MmngrGetOsalMaxConfig return OSAL_RETURN_OK
 * -# The return value of R_OSAL_MmngrOpen is OSAL_RETURN_OK.<br>
 * The return handle is not OSAL_MEMORY_MANAGER_HANDLE_INVALID.
 * -# The return value of R_OSAL_MmngrAlloc is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrGetHwAddr is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrDealloc is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrClose is OSAL_RETURN_OK.
 * @subsection MmngrAlloc_TC_09_003_073_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrAlloc_TC_09_003_073
 */
// [MmngrAlloc_TC_09_003_073]
TEST_F(MemoryApiTest, MmngrAlloc_TC_09_003_073)
{
    size_t count = 3;
    osal_memory_buffer_handle_t buffer_obj[3];
    uintptr_t hw_addr;
    size_t size[3] = {4096, 4096, 4096};
    size_t align[3] = {4096, 4096 * 4, 4096};

    //pre-process: open new memory manager
    EXPECT_EQ(R_OSAL_MmngrGetOsalMaxConfig(&config), OSAL_RETURN_OK) << "pre-process failed";
    config.mode = OSAL_MMNGR_ALLOC_MODE_FREE_LIST_PROT;
    EXPECT_EQ(R_OSAL_MmngrOpen(&config, &hndl_mmngr), OSAL_RETURN_OK) << "pre-process failed";
    EXPECT_NE(hndl_mmngr, OSAL_MEMORY_MANAGER_HANDLE_INVALID) << "pre-process failed";

    for(size_t i = 0; i < count; i++)
    {
        EXPECT_EQ(R_OSAL_MmngrAlloc(hndl_mmngr, size[i], align[i], &buffer_obj[i]), OSAL_RETURN_OK) << "Test09_003_073 failed";
        EXPECT_EQ(R_OSAL_MmngrGetHwAddr(buffer_obj[i] ,2, &hw_addr), OSAL_RETURN_OK) << "Test09_003_073 failed";
    }

    EXPECT_EQ(R_OSAL_MmngrDealloc(hndl_mmngr, buffer_obj[1]), OSAL_RETURN_OK) << "Test09_003_073 failed";
    EXPECT_EQ(R_OSAL_MmngrDealloc(hndl_mmngr, buffer_obj[0]), OSAL_RETURN_OK) << "Test09_003_073 failed";
    EXPECT_EQ(R_OSAL_MmngrDealloc(hndl_mmngr, buffer_obj[2]), OSAL_RETURN_OK) << "Test09_003_073 failed";

    //post-process: close memory manager
    EXPECT_EQ(R_OSAL_MmngrClose(hndl_mmngr), OSAL_RETURN_OK) << "post-process failed";
}
// [MmngrAlloc_TC_09_003_073]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrAlloc_TC_09_003_074 MemoryApiTest.MmngrAlloc_TC_09_003_074
 * @subsection MmngrAlloc_TC_09_003_074_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrAlloc_TC_09_003_074_tci Test Case ID
 * MmngrAlloc_S3_N_TC_09_003_074
 * @subsection MmngrAlloc_TC_09_003_074_rr Related Requirement(s)
 * \#276410, \#276732
 * @subsection MmngrAlloc_TC_09_003_074_pp Prerequisite/Precondition
 * OSAL is initialized.
 * @subsection MmngrAlloc_TC_09_003_074_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrAlloc in normal condition.
 * - Test09_003_074: Allocating multi-buffers with FREE_LIST to create the padding area. The next buffer size is more than the free padding area size.
 * @subsection MmngrAlloc_TC_09_003_074_tpts Test Procedure/Test Steps
 * -# Get the max memory configuration by using R_OSAL_MmngrGetOsalMaxConfig. Allocation mode is FREE_LIST
 * -# Open the memory handle with the configuration above by using R_OSAL_MmngrOpen
 * -# Allocate multi-buffers using R_OSAL_MmngrAlloc with different sizes and alignments.
 * -# Get the HW address using R_OSAL_MmngrGetHwAddr
 * -# Deallocate all allocated buffers. Deallocation order is not in reversed order of allocation.
 * -# Call R_OSAL_MmngrClose to close the memory handle.
 * @subsection MmngrAlloc_TC_09_003_074_ereb Expected Result/Behavior
 * -# R_OSAL_MmngrGetOsalMaxConfig return OSAL_RETURN_OK
 * -# The return value of R_OSAL_MmngrOpen is OSAL_RETURN_OK.<br>
 * The return handle is not OSAL_MEMORY_MANAGER_HANDLE_INVALID.
 * -# The return value of R_OSAL_MmngrAlloc is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrGetHwAddr is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrDealloc is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrClose is OSAL_RETURN_OK.
 * @subsection MmngrAlloc_TC_09_003_074_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrAlloc_TC_09_003_074
 */
// [MmngrAlloc_TC_09_003_074]
TEST_F(MemoryApiTest, MmngrAlloc_TC_09_003_074)
{
    size_t count = 3;
    osal_memory_buffer_handle_t buffer_obj[3];
    uintptr_t hw_addr;
    size_t size[3] = {4096, 4096, 4096 * 10};
    size_t align[3] = {4096, 4096 * 4, 4096};

    //pre-process: open new memory manager
    EXPECT_EQ(R_OSAL_MmngrGetOsalMaxConfig(&config), OSAL_RETURN_OK) << "pre-process failed";
    config.mode = OSAL_MMNGR_ALLOC_MODE_FREE_LIST;
    EXPECT_EQ(R_OSAL_MmngrOpen(&config, &hndl_mmngr), OSAL_RETURN_OK) << "pre-process failed";
    EXPECT_NE(hndl_mmngr, OSAL_MEMORY_MANAGER_HANDLE_INVALID) << "pre-process failed";

    // next buffer size more than free padding size
    for(size_t i = 0; i < count; i++)
    {
        EXPECT_EQ(R_OSAL_MmngrAlloc(hndl_mmngr, size[i], align[i], &buffer_obj[i]), OSAL_RETURN_OK) << "Test09_003_074 failed";
        EXPECT_EQ(R_OSAL_MmngrGetHwAddr(buffer_obj[i] ,2, &hw_addr), OSAL_RETURN_OK) << "Test09_003_074 failed";
        printf("hw_addr of buffer %ld is %ld\n", i, (unsigned long)hw_addr);
    }

    EXPECT_EQ(R_OSAL_MmngrDealloc(hndl_mmngr, buffer_obj[1]), OSAL_RETURN_OK) << "Test09_003_074 failed";
    EXPECT_EQ(R_OSAL_MmngrDealloc(hndl_mmngr, buffer_obj[0]), OSAL_RETURN_OK) << "Test09_003_074 failed";
    EXPECT_EQ(R_OSAL_MmngrDealloc(hndl_mmngr, buffer_obj[2]), OSAL_RETURN_OK) << "Test09_003_074 failed";

    //post-process: close memory manager
    EXPECT_EQ(R_OSAL_MmngrClose(hndl_mmngr), OSAL_RETURN_OK) << "post-process failed";
}
// [MmngrAlloc_TC_09_003_074]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrAlloc_TC_09_003_075 MemoryApiTest.MmngrAlloc_TC_09_003_075
 * @subsection MmngrAlloc_TC_09_003_075_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrAlloc_TC_09_003_075_tci Test Case ID
 * MmngrAlloc_S3_N_TC_09_003_075
 * @subsection MmngrAlloc_TC_09_003_075_rr Related Requirement(s)
 * \#276410, \#276732
 * @subsection MmngrAlloc_TC_09_003_075_pp Prerequisite/Precondition
 * OSAL is initialized.
 * @subsection MmngrAlloc_TC_09_003_075_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrAlloc in normal condition.
 * - Test09_003_075: Allocating multi-buffers with FREE_LIST_PROT to create the padding area. The next buffer size is more than the free padding area size.
 * @subsection MmngrAlloc_TC_09_003_075_tpts Test Procedure/Test Steps
 * -# Get the max memory configuration by using R_OSAL_MmngrGetOsalMaxConfig. Allocation mode is FREE_LIST_PROT
 * -# Open the memory handle with the configuration above by using R_OSAL_MmngrOpen
 * -# Allocate multi-buffers using R_OSAL_MmngrAlloc with different sizes and alignments.
 * -# Get the HW address using R_OSAL_MmngrGetHwAddr
 * -# Deallocate all allocated buffers. Deallocation order is not in reversed order of allocation.
 * -# Call R_OSAL_MmngrClose to close the memory handle.
 * @subsection MmngrAlloc_TC_09_003_075_ereb Expected Result/Behavior
 * -# R_OSAL_MmngrGetOsalMaxConfig return OSAL_RETURN_OK
 * -# The return value of R_OSAL_MmngrOpen is OSAL_RETURN_OK.<br>
 * The return handle is not OSAL_MEMORY_MANAGER_HANDLE_INVALID.
 * -# The return value of R_OSAL_MmngrAlloc is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrGetHwAddr is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrDealloc is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrClose is OSAL_RETURN_OK.
 * @subsection MmngrAlloc_TC_09_003_075_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrAlloc_TC_09_003_075
 */
// [MmngrAlloc_TC_09_003_075]
TEST_F(MemoryApiTest, MmngrAlloc_TC_09_003_075)
{
    size_t count = 3;
    osal_memory_buffer_handle_t buffer_obj[3];
    uintptr_t hw_addr;
    size_t size[3] = {4096, 4096, 4096 * 10};
    size_t align[3] = {4096, 4096 * 4, 4096};

    //pre-process: open new memory manager
    EXPECT_EQ(R_OSAL_MmngrGetOsalMaxConfig(&config), OSAL_RETURN_OK) << "pre-process failed";
    config.mode = OSAL_MMNGR_ALLOC_MODE_FREE_LIST_PROT;
    EXPECT_EQ(R_OSAL_MmngrOpen(&config, &hndl_mmngr), OSAL_RETURN_OK) << "pre-process failed";
    EXPECT_NE(hndl_mmngr, OSAL_MEMORY_MANAGER_HANDLE_INVALID) << "pre-process failed";

    // next buffer size more than free padding size
    for(size_t i = 0; i < count; i++)
    {
        EXPECT_EQ(R_OSAL_MmngrAlloc(hndl_mmngr, size[i], align[i], &buffer_obj[i]), OSAL_RETURN_OK) << "Test09_003_075 failed";
        EXPECT_EQ(R_OSAL_MmngrGetHwAddr(buffer_obj[i] ,2, &hw_addr), OSAL_RETURN_OK) << "Test09_003_075 failed";
        printf("hw_addr of buffer %ld is %ld\n", i, (unsigned long)hw_addr);
    }

    EXPECT_EQ(R_OSAL_MmngrDealloc(hndl_mmngr, buffer_obj[1]), OSAL_RETURN_OK) << "Test09_003_075 failed";
    EXPECT_EQ(R_OSAL_MmngrDealloc(hndl_mmngr, buffer_obj[0]), OSAL_RETURN_OK) << "Test09_003_075 failed";
    EXPECT_EQ(R_OSAL_MmngrDealloc(hndl_mmngr, buffer_obj[2]), OSAL_RETURN_OK) << "Test09_003_075 failed";

    //post-process: close memory manager
    EXPECT_EQ(R_OSAL_MmngrClose(hndl_mmngr), OSAL_RETURN_OK) << "post-process failed";
}
// [MmngrAlloc_TC_09_003_075]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrAlloc_TC_09_003_076 MemoryApiTest.MmngrAlloc_TC_09_003_076
 * @subsection MmngrAlloc_TC_09_003_076_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrAlloc_TC_09_003_076_tci Test Case ID
 * MmngrAlloc_S3_N_TC_09_003_076
 * @subsection MmngrAlloc_TC_09_003_076_rr Related Requirement(s)
 * \#276410, \#276732
 * @subsection MmngrAlloc_TC_09_003_076_pp Prerequisite/Precondition
 * OSAL is initialized.
 * @subsection MmngrAlloc_TC_09_003_076_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrAlloc in normal condition.
 * - Test09_003_076: Allocating multi-buffers with FREE_LIST to create the padding area. The next buffer size fits the free padding area size.
 * @subsection MmngrAlloc_TC_09_003_076_tpts Test Procedure/Test Steps
 * -# Get the max memory configuration by using R_OSAL_MmngrGetOsalMaxConfig. Allocation mode is FREE_LIST
 * -# Open the memory handle with the configuration above by using R_OSAL_MmngrOpen
 * -# Allocate multi-buffers using R_OSAL_MmngrAlloc with different sizes and alignments.
 * -# Get the HW address using R_OSAL_MmngrGetHwAddr
 * -# Deallocate all allocated buffers. Deallocation order is not in reversed order of allocation.
 * -# Call R_OSAL_MmngrClose to close the memory handle.
 * @subsection MmngrAlloc_TC_09_003_076_ereb Expected Result/Behavior
 * -# R_OSAL_MmngrGetOsalMaxConfig return OSAL_RETURN_OK
 * -# The return value of R_OSAL_MmngrOpen is OSAL_RETURN_OK.<br>
 * The return handle is not OSAL_MEMORY_MANAGER_HANDLE_INVALID.
 * -# The return value of R_OSAL_MmngrAlloc is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrGetHwAddr is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrDealloc is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrClose is OSAL_RETURN_OK.
 * @subsection MmngrAlloc_TC_09_003_076_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrAlloc_TC_09_003_076
 */
// [MmngrAlloc_TC_09_003_076]
TEST_F(MemoryApiTest, MmngrAlloc_TC_09_003_076)
{
    size_t count = 3;
    osal_memory_buffer_handle_t buffer_obj[3];
    uintptr_t hw_addr;
    size_t size[3] = {4096, 4096, 4096 * 3};
    size_t align[3] = {4096, 4096 * 4, 4096};

    //pre-process: open new memory manager
    EXPECT_EQ(R_OSAL_MmngrGetOsalMaxConfig(&config), OSAL_RETURN_OK) << "pre-process failed";
    config.mode = OSAL_MMNGR_ALLOC_MODE_FREE_LIST;
    EXPECT_EQ(R_OSAL_MmngrOpen(&config, &hndl_mmngr), OSAL_RETURN_OK) << "pre-process failed";
    EXPECT_NE(hndl_mmngr, OSAL_MEMORY_MANAGER_HANDLE_INVALID) << "pre-process failed";

    // next buffer size fit free padding size
    for(size_t i = 0; i < count; i++)
    {
        EXPECT_EQ(R_OSAL_MmngrAlloc(hndl_mmngr, size[i], align[i], &buffer_obj[i]), OSAL_RETURN_OK) << "Test09_003_076 failed";
        EXPECT_EQ(R_OSAL_MmngrGetHwAddr(buffer_obj[i] ,2, &hw_addr), OSAL_RETURN_OK) << "Test09_003_076 failed";
    }

    EXPECT_EQ(R_OSAL_MmngrDealloc(hndl_mmngr, buffer_obj[1]), OSAL_RETURN_OK) << "Test09_003_076 failed";
    EXPECT_EQ(R_OSAL_MmngrDealloc(hndl_mmngr, buffer_obj[0]), OSAL_RETURN_OK) << "Test09_003_076 failed";
    EXPECT_EQ(R_OSAL_MmngrDealloc(hndl_mmngr, buffer_obj[2]), OSAL_RETURN_OK) << "Test09_003_076 failed";

    //post-process: close memory manager
    EXPECT_EQ(R_OSAL_MmngrClose(hndl_mmngr), OSAL_RETURN_OK) << "post-process failed";
}
// [MmngrAlloc_TC_09_003_076]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrAlloc_TC_09_003_077 MemoryApiTest.MmngrAlloc_TC_09_003_077
 * @subsection MmngrAlloc_TC_09_003_077_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrAlloc_TC_09_003_077_tci Test Case ID
 * MmngrAlloc_S3_N_TC_09_003_077
 * @subsection MmngrAlloc_TC_09_003_077_rr Related Requirement(s)
 * \#276410, \#276732
 * @subsection MmngrAlloc_TC_09_003_077_pp Prerequisite/Precondition
 * OSAL is initialized.
 * @subsection MmngrAlloc_TC_09_003_077_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrAlloc in normal condition.
 * - Test09_003_077: Allocating multi-buffers with FREE_LIST_PROT to create the padding area. The next buffer size fits the free padding area size.
 * @subsection MmngrAlloc_TC_09_003_077_tpts Test Procedure/Test Steps
 * -# Get the max memory configuration by using R_OSAL_MmngrGetOsalMaxConfig. Allocation mode is FREE_LIST_PROT
 * -# Open the memory handle with the configuration above by using R_OSAL_MmngrOpen
 * -# Allocate multi-buffers using R_OSAL_MmngrAlloc with different sizes and alignments.
 * -# Get the HW address using R_OSAL_MmngrGetHwAddr
 * -# Deallocate all allocated buffers. Deallocation order is not in reversed order of allocation.
 * -# Call R_OSAL_MmngrClose to close the memory handle.
 * @subsection MmngrAlloc_TC_09_003_077_ereb Expected Result/Behavior
 * -# R_OSAL_MmngrGetOsalMaxConfig return OSAL_RETURN_OK
 * -# The return value of R_OSAL_MmngrOpen is OSAL_RETURN_OK.<br>
 * The return handle is not OSAL_MEMORY_MANAGER_HANDLE_INVALID.
 * -# The return value of R_OSAL_MmngrAlloc is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrGetHwAddr is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrDealloc is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrClose is OSAL_RETURN_OK.
 * @subsection MmngrAlloc_TC_09_003_077_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrAlloc_TC_09_003_077
 */
// [MmngrAlloc_TC_09_003_077]
TEST_F(MemoryApiTest, MmngrAlloc_TC_09_003_077)
{
    size_t count = 3;
    osal_memory_buffer_handle_t buffer_obj[3];
    uintptr_t hw_addr;
    size_t size[3] = {4096, 4096, 4096 * 3};
    size_t align[3] = {4096, 4096 * 4, 4096};

    //pre-process: open new memory manager
    EXPECT_EQ(R_OSAL_MmngrGetOsalMaxConfig(&config), OSAL_RETURN_OK) << "pre-process failed";
    config.mode = OSAL_MMNGR_ALLOC_MODE_FREE_LIST_PROT;
    EXPECT_EQ(R_OSAL_MmngrOpen(&config, &hndl_mmngr), OSAL_RETURN_OK) << "pre-process failed";
    EXPECT_NE(hndl_mmngr, OSAL_MEMORY_MANAGER_HANDLE_INVALID) << "pre-process failed";

    // next buffer size fit free padding size
    for(size_t i = 0; i < count; i++)
    {
        EXPECT_EQ(R_OSAL_MmngrAlloc(hndl_mmngr, size[i], align[i], &buffer_obj[i]), OSAL_RETURN_OK) << "Test09_003_077 failed";
        EXPECT_EQ(R_OSAL_MmngrGetHwAddr(buffer_obj[i] ,2, &hw_addr), OSAL_RETURN_OK) << "Test09_003_077 failed";
    }

    EXPECT_EQ(R_OSAL_MmngrDealloc(hndl_mmngr, buffer_obj[1]), OSAL_RETURN_OK) << "Test09_003_077 failed";
    EXPECT_EQ(R_OSAL_MmngrDealloc(hndl_mmngr, buffer_obj[0]), OSAL_RETURN_OK) << "Test09_003_077 failed";
    EXPECT_EQ(R_OSAL_MmngrDealloc(hndl_mmngr, buffer_obj[2]), OSAL_RETURN_OK) << "Test09_003_077 failed";

    //post-process: close memory manager
    EXPECT_EQ(R_OSAL_MmngrClose(hndl_mmngr), OSAL_RETURN_OK) << "post-process failed";
}
// [MmngrAlloc_TC_09_003_077]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrAlloc_TC_09_003_078 MemoryApiTest.MmngrAlloc_TC_09_003_078
 * @subsection MmngrAlloc_TC_09_003_078_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrAlloc_TC_09_003_078_tci Test Case ID
 * MmngrAlloc_S3_N_TC_09_003_078
 * @subsection MmngrAlloc_TC_09_003_078_rr Related Requirement(s)
 * \#276410, \#276732
 * @subsection MmngrAlloc_TC_09_003_078_pp Prerequisite/Precondition
 * OSAL is initialized.
 * @subsection MmngrAlloc_TC_09_003_078_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrAlloc in normal condition.
 * - Test09_003_078: Allocating multi-buffers with FREE_LIST to create the padding area. The next buffer size is less than the free padding area size.
 * @subsection MmngrAlloc_TC_09_003_078_tpts Test Procedure/Test Steps
 * -# Get the max memory configuration by using R_OSAL_MmngrGetOsalMaxConfig. Allocation mode is FREE_LIST
 * -# Open the memory handle with the configuration above by using R_OSAL_MmngrOpen
 * -# Allocate multi-buffers using R_OSAL_MmngrAlloc with different sizes and alignments.
 * -# Get the HW address using R_OSAL_MmngrGetHwAddr
 * -# Deallocate all allocated buffers. Deallocation order is not in reversed order of allocation.
 * -# Call R_OSAL_MmngrClose to close the memory handle.
 * @subsection MmngrAlloc_TC_09_003_078_ereb Expected Result/Behavior
 * -# R_OSAL_MmngrGetOsalMaxConfig return OSAL_RETURN_OK
 * -# The return value of R_OSAL_MmngrOpen is OSAL_RETURN_OK.<br>
 * The return handle is not OSAL_MEMORY_MANAGER_HANDLE_INVALID.
 * -# The return value of R_OSAL_MmngrAlloc is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrGetHwAddr is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrDealloc is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrClose is OSAL_RETURN_OK.
 * @subsection MmngrAlloc_TC_09_003_078_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrAlloc_TC_09_003_078
 */
// [MmngrAlloc_TC_09_003_078]
TEST_F(MemoryApiTest, MmngrAlloc_TC_09_003_078)
{
    size_t count = 3;
    osal_memory_buffer_handle_t buffer_obj[3];
    uintptr_t hw_addr;
    size_t size[3] = {4096, 4096, 4096 * 2};
    size_t align[3] = {4096, 4096 * 4, 4096 * 2};

    //pre-process: open new memory manager
    EXPECT_EQ(R_OSAL_MmngrGetOsalMaxConfig(&config), OSAL_RETURN_OK) << "pre-process failed";
    config.mode = OSAL_MMNGR_ALLOC_MODE_FREE_LIST;
    EXPECT_EQ(R_OSAL_MmngrOpen(&config, &hndl_mmngr), OSAL_RETURN_OK) << "pre-process failed";
    EXPECT_NE(hndl_mmngr, OSAL_MEMORY_MANAGER_HANDLE_INVALID) << "pre-process failed";

    // next buffer size less than free padding size
    for(size_t i = 0; i < count; i++)
    {
        EXPECT_EQ(R_OSAL_MmngrAlloc(hndl_mmngr, size[i], align[i], &buffer_obj[i]), OSAL_RETURN_OK) << "Test09_003_078 failed";
        EXPECT_EQ(R_OSAL_MmngrGetHwAddr(buffer_obj[i] ,2, &hw_addr), OSAL_RETURN_OK) << "Test09_003_078 failed";
    }

    EXPECT_EQ(R_OSAL_MmngrDealloc(hndl_mmngr, buffer_obj[1]), OSAL_RETURN_OK) << "Test09_003_078 failed";
    EXPECT_EQ(R_OSAL_MmngrDealloc(hndl_mmngr, buffer_obj[0]), OSAL_RETURN_OK) << "Test09_003_078 failed";
    EXPECT_EQ(R_OSAL_MmngrDealloc(hndl_mmngr, buffer_obj[2]), OSAL_RETURN_OK) << "Test09_003_078 failed";

    //post-process: close memory manager
    EXPECT_EQ(R_OSAL_MmngrClose(hndl_mmngr), OSAL_RETURN_OK) << "post-process failed";
}
// [MmngrAlloc_TC_09_003_078]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrAlloc_TC_09_003_078 MemoryApiTest.MmngrAlloc_TC_09_003_079
 * @subsection MmngrAlloc_TC_09_003_078_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrAlloc_TC_09_003_078_tci Test Case ID
 * MmngrAlloc_S3_N_TC_09_003_078
 * @subsection MmngrAlloc_TC_09_003_078_rr Related Requirement(s)
 * \#276410, \#276732
 * @subsection MmngrAlloc_TC_09_003_078_pp Prerequisite/Precondition
 * OSAL is initialized.
 * @subsection MmngrAlloc_TC_09_003_078_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrAlloc in normal condition.
 * - Test09_003_078: Allocating multi-buffers with FREE_LIST_PROT to create the padding area. The next buffer size is less than the free padding area size.
 * @subsection MmngrAlloc_TC_09_003_078_tpts Test Procedure/Test Steps
 * -# Get the max memory configuration by using R_OSAL_MmngrGetOsalMaxConfig. Allocation mode is FREE_LIST_PROT
 * -# Open the memory handle with the configuration above by using R_OSAL_MmngrOpen
 * -# Allocate multi-buffers using R_OSAL_MmngrAlloc with different sizes and alignments.
 * -# Get the HW address using R_OSAL_MmngrGetHwAddr
 * -# Deallocate all allocated buffers. Deallocation order is not in reversed order of allocation.
 * -# Call R_OSAL_MmngrClose to close the memory handle.
 * @subsection MmngrAlloc_TC_09_003_078_ereb Expected Result/Behavior
 * -# R_OSAL_MmngrGetOsalMaxConfig return OSAL_RETURN_OK
 * -# The return value of R_OSAL_MmngrOpen is OSAL_RETURN_OK.<br>
 * The return handle is not OSAL_MEMORY_MANAGER_HANDLE_INVALID.
 * -# The return value of R_OSAL_MmngrAlloc is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrGetHwAddr is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrDealloc is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrClose is OSAL_RETURN_OK.
 * @subsection MmngrAlloc_TC_09_003_078_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrAlloc_TC_09_003_079
 */
// [MmngrAlloc_TC_09_003_079]
TEST_F(MemoryApiTest, MmngrAlloc_TC_09_003_079)
{
    size_t count = 3;
    osal_memory_buffer_handle_t buffer_obj[3];
    uintptr_t hw_addr;
    size_t size[3] = {4096, 4096, 4096 * 2};
    size_t align[3] = {4096, 4096 * 4, 4096 * 2};

    //pre-process: open new memory manager
    EXPECT_EQ(R_OSAL_MmngrGetOsalMaxConfig(&config), OSAL_RETURN_OK) << "pre-process failed";
    config.mode = OSAL_MMNGR_ALLOC_MODE_FREE_LIST_PROT;
    EXPECT_EQ(R_OSAL_MmngrOpen(&config, &hndl_mmngr), OSAL_RETURN_OK) << "pre-process failed";
    EXPECT_NE(hndl_mmngr, OSAL_MEMORY_MANAGER_HANDLE_INVALID) << "pre-process failed";

    // next buffer size less than free padding size
    for(size_t i = 0; i < count; i++)
    {
        EXPECT_EQ(R_OSAL_MmngrAlloc(hndl_mmngr, size[i], align[i], &buffer_obj[i]), OSAL_RETURN_OK) << "Test09_003_079 failed";
        EXPECT_EQ(R_OSAL_MmngrGetHwAddr(buffer_obj[i] ,2, &hw_addr), OSAL_RETURN_OK) << "Test09_003_079 failed";
    }

    EXPECT_EQ(R_OSAL_MmngrDealloc(hndl_mmngr, buffer_obj[1]), OSAL_RETURN_OK) << "Test09_003_079 failed";
    EXPECT_EQ(R_OSAL_MmngrDealloc(hndl_mmngr, buffer_obj[0]), OSAL_RETURN_OK) << "Test09_003_079 failed";
    EXPECT_EQ(R_OSAL_MmngrDealloc(hndl_mmngr, buffer_obj[2]), OSAL_RETURN_OK) << "Test09_003_079 failed";

    //post-process: close memory manager
    EXPECT_EQ(R_OSAL_MmngrClose(hndl_mmngr), OSAL_RETURN_OK) << "post-process failed";
}
// [MmngrAlloc_TC_09_003_079]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrDealloc_TC_09_004_001 MemoryApiTest.MmngrDealloc_TC_09_004_001
 * @subsection MmngrDealloc_TC_09_004_001_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrDealloc_TC_09_004_001_tci Test Case ID
 * MmngrDealloc_S3_N_TC_09_004_001
 * @subsection MmngrDealloc_TC_09_004_001_rr Related Requirement(s)
 * \#276402, \#276412
 * @subsection MmngrDealloc_TC_09_004_001_pp Prerequisite/Precondition
 * OSAL is initialized.
 * @subsection MmngrDealloc_TC_09_004_001_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrAlloc and R_OSAL_MmngrDealloc with normal condition in OSAL_MMNGR_ALLOC_MODE_STACK mode.
 * - pre-process: Open new memory manager
 * - Test09_004_001: dealloc with all valid parameters.
 * - post-process: close memory manager
 * @subsection MmngrDealloc_TC_09_004_001_tpts Test Procedure/Test Steps
 * -# Open the handle using R_OSAL_MmngrOpen with config:
 *      - config.max_allowed_allocations = 4
 *      - config.max_registered_monitors_cbs = 0
 *      - config.memory_limit = 10MB
 *      - config.mode = OSAL_MMNGR_ALLOC_MODE_STACK
 * -# Call R_OSAL_MmngrAlloc with "size" is 128 byte and the "alignment" is 128 byte.
 * -# Call R_OSAL_MmngrDealloc to deallocate the buffer.
 * -# Call R_OSAL_MmngrClose to close the handle.
 * @subsection MmngrDealloc_TC_09_004_001_ereb Expected Result/Behavior
 * -# The return of R_OSAL_MmngrOpen is OSAL_RETURN_OK.<br>
 * The return handle is not OSAL_MEMORY_MANAGER_HANDLE_INVALID.
 * -# The return value of R_OSAL_MmngrAlloc is OSAL_RETURN_OK.<br>
 * The return buffer is not OSAL_MEMORY_BUFFER_HANDLE_INVALID.
 * -# The return value of R_OSAL_MmngrDealloc is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrClose is OSAL_RETURN_OK.
 * @subsection MmngrDealloc_TC_09_004_001_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrDealloc_TC_09_004_001
 */
// [MmngrDealloc_TC_09_004_001]
TEST_F(MemoryApiTest, MmngrDealloc_TC_09_004_001)
{
    //pre-process: open new memory manager
    config.max_allowed_allocations     = 4;
    config.max_registered_monitors_cbs = 0;
    config.memory_limit = 10 * 1024 * 1024;
    config.mode = OSAL_MMNGR_ALLOC_MODE_STACK;
    EXPECT_EQ(R_OSAL_MmngrOpen(&config, &hndl_mmngr), OSAL_RETURN_OK) << "pre-process failed";
    EXPECT_NE(hndl_mmngr, OSAL_MEMORY_MANAGER_HANDLE_INVALID) << "pre-process failed";

    // Test09_004_001
    size = 128;
    alignment = 128;
    EXPECT_EQ(R_OSAL_MmngrAlloc(hndl_mmngr, size, alignment, &buffer_obj), OSAL_RETURN_OK) << "Test09_004_001 failed";
    EXPECT_NE(buffer_obj, OSAL_MEMORY_BUFFER_HANDLE_INVALID) << "Test09_004_001 failed";
    EXPECT_EQ(R_OSAL_MmngrDealloc(hndl_mmngr, buffer_obj), OSAL_RETURN_OK) << "Test09_004_001 failed";

    //post-process: close memory manager
    EXPECT_EQ(R_OSAL_MmngrClose(hndl_mmngr), OSAL_RETURN_OK) << "post-process failed";
}
// [MmngrDealloc_TC_09_004_001]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrDealloc_TC_09_004_002 MemoryApiTest.MmngrDealloc_TC_09_004_002
 * @subsection MmngrDealloc_TC_09_004_002_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrDealloc_TC_09_004_002_tci Test Case ID
 * MmngrDealloc_S0_A_TC_09_004_002
 * @subsection MmngrDealloc_TC_09_004_002_rr Related Requirement(s)
 * \#276402, \#276412
 * @subsection MmngrDealloc_TC_09_004_002_pp Prerequisite/Precondition
 * OSAL is initialized.
 * @subsection MmngrDealloc_TC_09_004_002_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrAlloc and R_OSAL_MmngrDealloc with abnormal condition in OSAL_MMNGR_ALLOC_MODE_STACK mode.
 * - pre-process: open new memory manager
 * - Test09_004_002: dealloc with handle is NULL.
 * - post-process: close memory handle
 * @subsection MmngrDealloc_TC_09_004_002_tpts Test Procedure/Test Steps
 * -# Open the handle using R_OSAL_MmngrOpen with config:
 *      - config.max_allowed_allocations = 4
 *      - config.max_registered_monitors_cbs = 0
 *      - config.memory_limit = 10MB
 *      - config.mode = OSAL_MMNGR_ALLOC_MODE_STACK
 * -# Allocate "buffer_obj" by using malloc function.
 * -# Call R_OSAL_MmngrDealloc with handle is OSAL_MEMORY_MANAGER_HANDLE_INVALID.<br>
 * -# Free allocated "buffer_obj"
 * -# Call R_OSAL_MmngrClose to close the handle.
 * @subsection MmngrDealloc_TC_09_004_002_ereb Expected Result/Behavior
 * -# The return of R_OSAL_MmngrOpen is OSAL_RETURN_OK.<br>
 * The return handle is not OSAL_MEMORY_MANAGER_HANDLE_INVALID.
 * -# Memory allocation succeeded (Pointer to buffer != Nullpointer)
 * -# The return value of R_OSAL_MmngrDealloc is OSAL_RETURN_HANDLE.<br>
 * -# Allocated memory free succeeded.
 * -# The return value of R_OSAL_MmngrClose is OSAL_RETURN_OK.
 * @subsection MmngrDealloc_TC_09_004_002_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrDealloc_TC_09_004_002
 */
// [MmngrDealloc_TC_09_004_002]
TEST_F(MemoryApiTest, MmngrDealloc_TC_09_004_002)
{
    // pre-process: open memory manager
    config.max_allowed_allocations     = 4;
    config.max_registered_monitors_cbs = 0;
    config.memory_limit = 10 * 1024 * 1024;
    config.mode = OSAL_MMNGR_ALLOC_MODE_STACK;
    EXPECT_EQ(R_OSAL_MmngrOpen(&config, &hndl_mmngr), OSAL_RETURN_OK) << "pre-process failed";
    EXPECT_NE(hndl_mmngr, OSAL_MEMORY_MANAGER_HANDLE_INVALID);

    // Test09_004_002: deallocate with memory handle is NULL
    buffer_obj = (osal_memory_buffer_handle_t)malloc(sizeof(st_osal_memory_buffer_obj));
    EXPECT_NE(buffer_obj, NULL_PTR);
    EXPECT_EQ(R_OSAL_MmngrDealloc(OSAL_MEMORY_MANAGER_HANDLE_INVALID, buffer_obj), OSAL_RETURN_HANDLE) << "Test09_004_002 failed";
    free(buffer_obj);
    buffer_obj = OSAL_MEMORY_BUFFER_HANDLE_INVALID;

    // post-process: close memory handle
    EXPECT_EQ(R_OSAL_MmngrClose(hndl_mmngr), OSAL_RETURN_OK) << "post-process failed";

}
// [MmngrDealloc_TC_09_004_002]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrDealloc_TC_09_004_003 MemoryApiTest.MmngrDealloc_TC_09_004_003
 * @subsection MmngrDealloc_TC_09_004_003_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrDealloc_TC_09_004_003_tci Test Case ID
 * MmngrDealloc_S0_A_TC_09_004_003
 * @subsection MmngrDealloc_TC_09_004_003_rr Related Requirement(s)
 * \#276412
 * @subsection MmngrDealloc_TC_09_004_003_pp Prerequisite/Precondition
 * OSAL is initialized.
 * @subsection MmngrDealloc_TC_09_004_003_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrAlloc and R_OSAL_MmngrDealloc with abnormal condition in OSAL_MMNGR_ALLOC_MODE_STACK mode.
 * - pre-process: open new memory manager
 * - Test09_004_003: Dealloc with handle is not created by MmngrOpen
 * - post-process: close opened memory handle
 * @subsection MmngrDealloc_TC_09_004_003_tpts Test Procedure/Test Steps
 * -# Open the handle using R_OSAL_MmngrOpen with config:
 *      - config.max_allowed_allocations = 4
 *      - config.max_registered_monitors_cbs = 0
 *      - config.memory_limit = 10MB
 *      - config.mode = OSAL_MMNGR_ALLOC_MODE_STACK
 * -# Allocate "tmp_hndl_mmngr" by using malloc function.
 * -# Call R_OSAL_MmngrInitializeMemoryManagerObj with input paramater is another handle (call temporary handle).
 * -# Allocate "buffer_obj" by using malloc function.
 * -# Call R_OSAL_MmngrDealloc with handle is temp handle above.<br>
 * -# Free allocated "buffer_obj".
 * -# Call R_OSAL_MmngrClose to close the handle.
 * -# Free "tmp_hndl_mmngr"
 * @subsection MmngrDealloc_TC_09_004_003_ereb Expected Result/Behavior
 * -# The return of R_OSAL_MmngrOpen is OSAL_RETURN_OK.<br>
 * The return handle is not OSAL_MEMORY_MANAGER_HANDLE_INVALID.
 * -# Memory allocation succeeded (Pointer to buffer != Nullpointer)
 * -# The return value of R_OSAL_MmngrInitializeMemoryManagerObj is OSAL_RETURN_OK.
 * -# Memory allocation succeeded (Pointer to buffer != Nullpointer)
 * -# The return value of R_OSAL_MmngrDealloc is OSAL_RETURN_HANDLE_NOT_SUPPORTED.<br>
 * The return buffer is OSAL_MEMORY_BUFFER_HANDLE_INVALID.
 * -# Allocated memory free succeeded.
 * -# The return value of R_OSAL_MmngrClose is OSAL_RETURN_OK.
 * -# Allocated memory free succeeded.
 * @subsection MmngrDealloc_TC_09_004_003_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrDealloc_TC_09_004_003
 */
// [MmngrDealloc_TC_09_004_003]
TEST_F(MemoryApiTest, MmngrDealloc_TC_09_004_003)
{
    osal_memory_manager_handle_t tmp_hndl_mmngr;

    // pre-process: open memory manager
    config.max_allowed_allocations     = 4;
    config.max_registered_monitors_cbs = 0;
    config.memory_limit = 10 * 1024 * 1024;
    config.mode = OSAL_MMNGR_ALLOC_MODE_STACK;
    EXPECT_EQ(R_OSAL_MmngrOpen(&config, &hndl_mmngr), OSAL_RETURN_OK) << "pre-process failed";
    EXPECT_NE(hndl_mmngr, OSAL_MEMORY_MANAGER_HANDLE_INVALID);

    // Test09_004_003
    // @brief: abnormal case: Dealloc with hndl_mmngr is not created by MmngrOpen
    tmp_hndl_mmngr = (osal_memory_manager_handle_t)malloc (sizeof(st_osal_memory_manager_obj));
    EXPECT_NE(tmp_hndl_mmngr, NULL_PTR);
    EXPECT_EQ(R_OSAL_MmngrInitializeMemoryManagerObj(tmp_hndl_mmngr), OSAL_RETURN_OK);
    buffer_obj = (osal_memory_buffer_handle_t)malloc(sizeof(st_osal_memory_buffer_obj));
    EXPECT_NE(buffer_obj, NULL_PTR);
    EXPECT_EQ(R_OSAL_MmngrDealloc(tmp_hndl_mmngr, buffer_obj), OSAL_RETURN_HANDLE_NOT_SUPPORTED) << "Test09_004_003 failed";
    free(buffer_obj);
    buffer_obj = OSAL_MEMORY_BUFFER_HANDLE_INVALID;

    // post-process: close memory handle
    EXPECT_EQ(R_OSAL_MmngrClose(hndl_mmngr), OSAL_RETURN_OK) << "post-process failed";
    free(tmp_hndl_mmngr);
}
// [MmngrDealloc_TC_09_004_003]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrDealloc_TC_09_004_004 MemoryApiTest.MmngrDealloc_TC_09_004_004
 * @subsection MmngrDealloc_TC_09_004_004_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrDealloc_TC_09_004_004_tci Test Case ID
 * MmngrDealloc_S4_A_TC_09_004_004
 * @subsection MmngrDealloc_TC_09_004_004_rr Related Requirement(s)
 * \#276412
 * @subsection MmngrDealloc_TC_09_004_004_pp Prerequisite/Precondition
 * OSAL is initialized.
 * @subsection MmngrDealloc_TC_09_004_004_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrAlloc and R_OSAL_MmngrDealloc with abnormal condition in OSAL_MMNGR_ALLOC_MODE_STACK mode.
 * - pre-process: open new memory manager
 * - Test09_004_004: handle is not support deallocation.
 * - post-process: close memory handle
 * @subsection MmngrDealloc_TC_09_004_004_tpts Test Procedure/Test Steps
 * -# Open the handle using R_OSAL_MmngrOpen with config:
 *      - config.max_allowed_allocations = 4
 *      - config.max_registered_monitors_cbs = 0
 *      - config.memory_limit = 10MB
 *      - config.mode = OSAL_MMNGR_ALLOC_MODE_STACK
 * -# Allocate "tmp_hndl_mmngr" by using malloc function.
 * -# Call R_OSAL_MmngrAlloc with "size" is 64 byte and "alignment" is 64 byte.<br>
 * Store "hndl_mmngr->p_deallocate" to a temporary memory handle "tmp_hndl_mmngr->p_deallocate".<br>
 * Set "hndl_mmngr->p_deallocate" to NULL
 * -# Call R_OSAL_MmngrDealloc with the modified memory handle "hndl_mmngr".
 * -# Re-assign "tmp_hndl_mmngr->p_deallocate" to "hndl_mmngr->p_deallocate".<br>
 * Call R_OSAL_MmngrDealloc with this updated memory handle "hndl_mmngr".
 * -# Free "tmp_hndl_mmngr".
 * -# Call R_OSAL_MmngrClose to close the handle.
 * @subsection MmngrDealloc_TC_09_004_004_ereb Expected Result/Behavior
 * -# The return of R_OSAL_MmngrOpen is OSAL_RETURN_OK.<br>
 * The return handle is not OSAL_MEMORY_MANAGER_HANDLE_INVALID.
 * -# Memory allocation succeeded (Pointer to buffer != Nullpointer)
 * -# The return value of R_OSAL_MmngrAlloc is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrDealloc with the changed handle is OSAL_RETURN_HANDLE_NOT_SUPPORTED.
 * -# "hndl_mmngr->p_deallocate" is not NULL_PTR.<br>
 * The return value of R_OSAL_MmngrDealloc with the original handle is OSAL_RETURN_OK.
 * -# Allocated memory free succeeded.
 * -# The return value of R_OSAL_MmngrClose is OSAL_RETURN_OK.
 * @subsection MmngrDealloc_TC_09_004_004_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrDealloc_TC_09_004_004
 */
// [MmngrDealloc_TC_09_004_004]
TEST_F(MemoryApiTest, MmngrDealloc_TC_09_004_004)
{
    osal_memory_manager_handle_t tmp_hndl_mmngr;


    // pre-process: open memory manager
    config.max_allowed_allocations     = 4;
    config.max_registered_monitors_cbs = 0;
    config.memory_limit = 10 * 1024 * 1024;
    config.mode = OSAL_MMNGR_ALLOC_MODE_STACK;
    EXPECT_EQ(R_OSAL_MmngrOpen(&config, &hndl_mmngr), OSAL_RETURN_OK) << "pre-process failed";
    EXPECT_NE(hndl_mmngr, OSAL_MEMORY_MANAGER_HANDLE_INVALID);

    // Test09_004_004
    // @brief: abnormal case: hndl_mmngr not support deallocation
    size = 64;
    alignment = 64;
    tmp_hndl_mmngr = (osal_memory_manager_handle_t)malloc (sizeof(st_osal_memory_manager_obj));
    EXPECT_NE(tmp_hndl_mmngr, NULL_PTR);
    EXPECT_EQ(R_OSAL_MmngrAlloc(hndl_mmngr, size, alignment, &buffer_obj), OSAL_RETURN_OK) << "Test09_004_004 failed";
    tmp_hndl_mmngr->p_deallocate = hndl_mmngr->p_deallocate;
    hndl_mmngr->p_deallocate = NULL;
    EXPECT_EQ(R_OSAL_MmngrDealloc(hndl_mmngr, buffer_obj), OSAL_RETURN_HANDLE_NOT_SUPPORTED) << "Test09_004_004 failed";
    hndl_mmngr->p_deallocate = tmp_hndl_mmngr->p_deallocate;
    EXPECT_NE(hndl_mmngr->p_deallocate, NULL_PTR) << "Test09_004_004 failed";
    EXPECT_EQ(R_OSAL_MmngrDealloc(hndl_mmngr, buffer_obj ), OSAL_RETURN_OK) << "Test09_004_004 failed";
    free(tmp_hndl_mmngr);

    // post-process: close memory handle
    EXPECT_EQ(R_OSAL_MmngrClose(hndl_mmngr), OSAL_RETURN_OK) << "post-process failed";
}
// [MmngrDealloc_TC_09_004_004]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrDealloc_TC_09_004_005 MemoryApiTest.MmngrDealloc_TC_09_004_005
 * @subsection MmngrDealloc_TC_09_004_005_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrDealloc_TC_09_004_005_tci Test Case ID
 * MmngrDealloc_S0_A_TC_09_004_005
 * @subsection MmngrDealloc_TC_09_004_005_rr Related Requirement(s)
 * \#276412
 * @subsection MmngrDealloc_TC_09_004_005_pp Prerequisite/Precondition
 * OSAL is initialized.
 * @subsection MmngrDealloc_TC_09_004_005_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrAlloc and R_OSAL_MmngrDealloc with abnormal condition in OSAL_MMNGR_ALLOC_MODE_STACK mode.
 * - pre-process: open new memory manager
 * - Test09_004_005: dealloc with buffer_obj is invalid (NULL).
 * - post-process: close memory handle
 * @subsection MmngrDealloc_TC_09_004_005_tpts Test Procedure/Test Steps
 * -# Open the handle using R_OSAL_MmngrOpen with config:
 *      - config.max_allowed_allocations = 4
 *      - config.max_registered_monitors_cbs = 0
 *      - config.memory_limit = 10MB
 *      - config.mode = OSAL_MMNGR_ALLOC_MODE_STACK
 * -# Call R_OSAL_MmngrDealloc with "buffer_obj" is NULL.
 * -# Call R_OSAL_MmngrClose to close the handle.
 * @subsection MmngrDealloc_TC_09_004_005_ereb Expected Result/Behavior
 * -# The return of R_OSAL_MmngrOpen is OSAL_RETURN_OK.<br>
 * The return handle is not OSAL_MEMORY_MANAGER_HANDLE_INVALID.
 * -# The return value of R_OSAL_MmngrDealloc is OSAL_RETURN_HANDLE.
 * -# The return value of R_OSAL_MmngrClose is OSAL_RETURN_OK.
 * @subsection MmngrDealloc_TC_09_004_005_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrDealloc_TC_09_004_005
 */
// [MmngrDealloc_TC_09_004_005]
TEST_F(MemoryApiTest, MmngrDealloc_TC_09_004_005)
{
    // pre-process: open memory manager
    config.max_allowed_allocations     = 4;
    config.max_registered_monitors_cbs = 0;
    config.memory_limit = 10 * 1024 * 1024;
    config.mode = OSAL_MMNGR_ALLOC_MODE_STACK;
    EXPECT_EQ(R_OSAL_MmngrOpen(&config, &hndl_mmngr), OSAL_RETURN_OK) << "pre-process failed";
    EXPECT_NE(hndl_mmngr, OSAL_MEMORY_MANAGER_HANDLE_INVALID);

    // Test09_004_005
    EXPECT_EQ(R_OSAL_MmngrDealloc(hndl_mmngr, OSAL_MEMORY_BUFFER_HANDLE_INVALID), OSAL_RETURN_HANDLE) << "Test09_004_005 failed";

    // post-process: close memory handle
    EXPECT_EQ(R_OSAL_MmngrClose(hndl_mmngr), OSAL_RETURN_OK) << "post-process failed";
}
// [MmngrDealloc_TC_09_004_005]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrDealloc_TC_09_004_006 MemoryApiTest.MmngrDealloc_TC_09_004_006
 * @subsection MmngrDealloc_TC_09_004_006_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrDealloc_TC_09_004_006_tci Test Case ID
 * MmngrDealloc_S2_A_TC_09_004_006
 * @subsection MmngrDealloc_TC_09_004_006_rr Related Requirement(s)
 * \#276412
 * @subsection MmngrDealloc_TC_09_004_006_pp Prerequisite/Precondition
 * OSAL is initialized.
 * @subsection MmngrDealloc_TC_09_004_006_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrAlloc and R_OSAL_MmngrDealloc with abnormal condition in OSAL_MMNGR_ALLOC_MODE_STACK mode.
 * - Test09_004_006: Dealloc with handle has already closed.
 * @subsection MmngrDealloc_TC_09_004_006_tpts Test Procedure/Test Steps
 * -# Open the handle using R_OSAL_MmngrOpen with config:
 *      - config.max_allowed_allocations = 4
 *      - config.max_registered_monitors_cbs = 0
 *      - config.memory_limit = 10MB
 *      - config.mode = OSAL_MMNGR_ALLOC_MODE_STACK
 * -# Call R_OSAL_MmngrClose to close the handle.
 * -# Allocate "buffer_obj" by using malloc function.
 * -# Call R_OSAL_MmngrDealloc with handle is temp handle above.<br>
 * -# Free allocated "buffer_obj".
 * @subsection MmngrDealloc_TC_09_004_006_ereb Expected Result/Behavior
 * -# The return of R_OSAL_MmngrOpen is OSAL_RETURN_OK.<br>
 * The return handle is not OSAL_MEMORY_MANAGER_HANDLE_INVALID.
 * -# The return value of R_OSAL_MmngrClose is OSAL_RETURN_OK.
 * -# Memory allocation succeeded (Pointer to buffer != Nullpointer)
 * -# The return value of R_OSAL_MmngrDealloc is OSAL_RETURN_HANDLE_NOT_SUPPORTED.<br>
 * -# Allocated memory free succeeded.
 * @subsection MmngrDealloc_TC_09_004_006_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrDealloc_TC_09_004_006
 */
// [MmngrDealloc_TC_09_004_006]
TEST_F(MemoryApiTest, MmngrDealloc_TC_09_004_006)
{
    // Test09_004_006
    // @brief: abnormal case: Dealloc with hndl_mmngr has already closed
    config.max_allowed_allocations     = 4;
    config.max_registered_monitors_cbs = 0;
    config.memory_limit = 10 * 1024 * 1024;
    config.mode = OSAL_MMNGR_ALLOC_MODE_STACK;
    EXPECT_EQ(R_OSAL_MmngrOpen(&config, &hndl_mmngr), OSAL_RETURN_OK) << "Test09_004_006 failed";
    EXPECT_NE(hndl_mmngr, OSAL_MEMORY_MANAGER_HANDLE_INVALID) << "Test09_004_006 failed";
    EXPECT_EQ(R_OSAL_MmngrClose(hndl_mmngr), OSAL_RETURN_OK) << "Test09_004_006 failed";

    buffer_obj = (osal_memory_buffer_handle_t)malloc(sizeof(st_osal_memory_buffer_obj));
    EXPECT_NE(buffer_obj, NULL_PTR);
    EXPECT_EQ(R_OSAL_MmngrDealloc(hndl_mmngr, buffer_obj), OSAL_RETURN_HANDLE_NOT_SUPPORTED) << "Test09_004_006 failed";
    free(buffer_obj);
    buffer_obj = OSAL_MEMORY_BUFFER_HANDLE_INVALID;
}
// [MmngrDealloc_TC_09_004_006]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrDealloc_TC_09_004_007 MemoryApiTest.MmngrDealloc_TC_09_004_007
 * @subsection MmngrDealloc_TC_09_004_007_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrDealloc_TC_09_004_007_tci Test Case ID
 * MmngrDealloc_S3_N_TC_09_004_007
 * @subsection MmngrDealloc_TC_09_004_007_rr Related Requirement(s)
 * \#276412
 * @subsection MmngrDealloc_TC_09_004_007_pp Prerequisite/Precondition
 * OSAL is initialized.
 * @subsection MmngrDealloc_TC_09_004_007_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrAlloc and R_OSAL_MmngrDealloc with normal condition in OSAL_MMNGR_ALLOC_MODE_FREE_LIST mode.
 * - pre-process: Open new memory manager
 * - Test09_004_007: allocate 3 buffers with OSAL_MMNGR_ALLOC_MODE_FREE_LIST mode.<br>
 * Deallocate order is not same as allocation order first, then deallocate as same as the allocation order.
 * - post-process: close memory manager
 * @subsection MmngrDealloc_TC_09_004_007_tpts Test Procedure/Test Steps
 * -# Open the handle using R_OSAL_MmngrOpen with config:
 *      - config.max_allowed_allocations = 4
 *      - config.max_registered_monitors_cbs = 0
 *      - config.memory_limit = 10MB
 *      - config.mode = OSAL_MMNGR_ALLOC_MODE_FREE_LIST
 * -# Call R_OSAL_MmngrAlloc to allocate 1st buffer with size is 1KB and align is 64.
 * -# Call R_OSAL_MmngrAlloc to allocate 2nd buffer with size is 1KB and align is 64.
 * -# Call R_OSAL_MmngrAlloc to allocate 3rd buffer with size is 1KB and align is 64.
 * -# Call R_OSAL_MmngrDealloc to deallocate 2nd buffer with size is 1KB and align is 64.
 * -# Call R_OSAL_MmngrDealloc to deallocate 3rd buffer with size is 1KB and align is 64.
 * -# Call R_OSAL_MmngrDealloc to deallocate 1st buffer with size is 1KB and align is 64.
 * -# Call R_OSAL_MmngrClose to close the handle.
 * @subsection MmngrDealloc_TC_09_004_007_ereb Expected Result/Behavior
 * -# The return of R_OSAL_MmngrOpen is OSAL_RETURN_OK.<br>
 * The return handle is not OSAL_MEMORY_MANAGER_HANDLE_INVALID.
 * -# The return value of the 1st R_OSAL_MmngrAlloc is OSAL_RETURN_OK.<br>
 * The return buffer is not OSAL_MEMORY_BUFFER_HANDLE_INVALID.
 * -# The return value of the 2nd R_OSAL_MmngrAlloc is OSAL_RETURN_OK.<br>
 * The return buffer is not OSAL_MEMORY_BUFFER_HANDLE_INVALID.
 * -# The return value of the 3rd R_OSAL_MmngrAlloc is OSAL_RETURN_OK.<br>
 * The return buffer is not OSAL_MEMORY_BUFFER_HANDLE_INVALID.
 * -# The return value when calling R_OSAL_MmngrDealloc to deallocate the 2nd buffer is OSAL_RETURN_OK.
 * -# The return value of the R_OSAL_MmngrDealloc for 3rd buffer is OSAL_RETURN_OK.
 * -# The return value of the R_OSAL_MmngrDealloc for 1st buffer is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrClose is OSAL_RETURN_OK.
 * @subsection MmngrDealloc_TC_09_004_007_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrDealloc_TC_09_004_007
 */
// [MmngrDealloc_TC_09_004_007]
TEST_F(MemoryApiTest, MmngrDealloc_TC_09_004_007)
{
    osal_memory_buffer_handle_t  buffer_obj_array1[5]
        = {OSAL_MEMORY_BUFFER_HANDLE_INVALID, OSAL_MEMORY_BUFFER_HANDLE_INVALID,
           OSAL_MEMORY_BUFFER_HANDLE_INVALID, OSAL_MEMORY_BUFFER_HANDLE_INVALID,
           OSAL_MEMORY_BUFFER_HANDLE_INVALID};

    //pre-process: open new memory manager
    config.max_allowed_allocations     = 4;
    config.max_registered_monitors_cbs = 0;
    config.memory_limit = 10 * 1024 * 1024;
    config.mode = OSAL_MMNGR_ALLOC_MODE_FREE_LIST;
    EXPECT_EQ(R_OSAL_MmngrOpen(&config, &hndl_mmngr), OSAL_RETURN_OK) << "pre-process failed";
    EXPECT_NE(hndl_mmngr, OSAL_MEMORY_MANAGER_HANDLE_INVALID) << "pre-process failed";

    // Test09_004_007
    // @brief: normal case: allocate 3 buffers with OSAL_MMNGR_ALLOC_MODE_FREE_LIST mode. Deallocate order is not same as allocation.
    size = 1024;
    alignment = 64;
    EXPECT_EQ(R_OSAL_MmngrAlloc(hndl_mmngr, size, alignment, buffer_obj_array1), OSAL_RETURN_OK) << "Test09_004_007 failed";
    EXPECT_NE(buffer_obj_array1[0], OSAL_MEMORY_BUFFER_HANDLE_INVALID) << "Test09_004_007 failed";
    EXPECT_EQ(R_OSAL_MmngrAlloc(hndl_mmngr, size, alignment, buffer_obj_array1 + 1), OSAL_RETURN_OK) << "Test09_004_007 failed";
    EXPECT_NE(buffer_obj_array1[1], OSAL_MEMORY_BUFFER_HANDLE_INVALID) << "Test09_004_007 failed";
    EXPECT_EQ(R_OSAL_MmngrAlloc(hndl_mmngr, size, alignment, buffer_obj_array1+ 2), OSAL_RETURN_OK) << "Test09_004_007 failed";
    EXPECT_NE(buffer_obj_array1[2], OSAL_MEMORY_BUFFER_HANDLE_INVALID) << "Test09_004_007 failed";
    EXPECT_EQ(R_OSAL_MmngrDealloc(hndl_mmngr, buffer_obj_array1[1]), OSAL_RETURN_OK) << "Test09_004_007 failed";
    EXPECT_EQ(R_OSAL_MmngrDealloc(hndl_mmngr, buffer_obj_array1[2]), OSAL_RETURN_OK) << "Test09_004_007 failed";
    EXPECT_EQ(R_OSAL_MmngrDealloc(hndl_mmngr, buffer_obj_array1[0]), OSAL_RETURN_OK) << "Test09_004_007 failed";

    //post-process: close memory manager
    EXPECT_EQ(R_OSAL_MmngrClose(hndl_mmngr), OSAL_RETURN_OK) << "post-process failed";
}
// [MmngrDealloc_TC_09_004_007]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrDealloc_TC_09_004_008 MemoryApiTest.MmngrDealloc_TC_09_004_008
 * @subsection MmngrDealloc_TC_09_004_008_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrDealloc_TC_09_004_008_tci Test Case ID
 * MmngrDealloc_S2_N_TC_09_004_008
 * @subsection MmngrDealloc_TC_09_004_008_rr Related Requirement(s)
 * \#276412
 * @subsection MmngrDealloc_TC_09_004_008_pp Prerequisite/Precondition
 * OSAL is initialized.
 * @subsection MmngrDealloc_TC_09_004_008_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrAlloc and R_OSAL_MmngrDealloc with abnormal condition in OSAL_MMNGR_ALLOC_MODE_STACK mode.
 * - Test09_004_008: confirm the use case the buffer object is not managed by Memory Manager hndl_mngr
 * @subsection MmngrDealloc_TC_09_004_008_tpts Test Procedure/Test Steps
 * -# Open the handle using R_OSAL_MmngrOpen with config:
 *      - config.max_allowed_allocations = 4
 *      - config.max_registered_monitors_cbs = 0
 *      - config.memory_limit = 10MB
 *      - config.mode = OSAL_MMNGR_ALLOC_MODE_STACK
 * -# Call R_OSAL_MmngrAlloc to allocate buffer with size is 1KB and align is 64.
 * -# Allocate "tmp_hndl_mngr" by using malloc function.
 * -# Copy the memory pointed by hndl_mmngr into tmp_hndl_mmngr.
 * -# Call R_OSAL_MmngrClose to close the handle.
 * -# Call R_OSAL_MmngrDealloc to deallocate the buffer using tmp_hndl_mmngr.
 * -# Free "tmp_hndl_mmngr".
 * @subsection MmngrDealloc_TC_09_004_008_ereb Expected Result/Behavior
 * -# The return value of R_OSAL_MmngrOpen is OSAL_RETURN_OK.<br>
 * The return of handle is not OSAL_MEMORY_MANAGER_HANDLE_INVALID.
 * -# The return value of the R_OSAL_MmngrAlloc is OSAL_RETURN_OK.
 * -# Memory allocation succeeded (Pointer to buffer != Nullpointer)
 * -# Copy memory into tmp_hndl_mmngr successfully.
 * -# The return value of R_OSAL_MmngrClose is OSAL_RETURN_OK.
 * -# The return value when calling R_OSAL_MmngrDealloc is OSAL_RETURN_STATE.
 * -# Allocated memory free succeeded.
 * @subsection MmngrDealloc_TC_09_004_008_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrDealloc_TC_09_004_008
 */
// [MmngrDealloc_TC_09_004_008]
TEST_F(MemoryApiTest, MmngrDealloc_TC_09_004_008)
{
    osal_memory_manager_handle_t tmp_hndl_mmngr;

    // Test09_004_008
    // @brief: abnormal case: the buffer object is not managed by Memory Manager hndl_mngr
    config.max_allowed_allocations     = 4;
    config.max_registered_monitors_cbs = 0;
    config.memory_limit = 10 * 1024 * 1024;
    config.mode = OSAL_MMNGR_ALLOC_MODE_STACK;
    EXPECT_EQ(R_OSAL_MmngrOpen(&config, &hndl_mmngr), OSAL_RETURN_OK) << "Test09_004_008 failed";
    EXPECT_NE(hndl_mmngr, OSAL_MEMORY_MANAGER_HANDLE_INVALID) << "Test09_004_008 failed";

    size = 1024;
    alignment = 64;
    EXPECT_EQ(R_OSAL_MmngrAlloc(hndl_mmngr, size, alignment, &buffer_obj), OSAL_RETURN_OK) << "Test09_004_008 failed";
    tmp_hndl_mmngr = (osal_memory_manager_handle_t)malloc (sizeof(st_osal_memory_manager_obj));
    EXPECT_NE(tmp_hndl_mmngr, NULL_PTR);
    memcpy(tmp_hndl_mmngr, hndl_mmngr, sizeof(st_osal_memory_manager_obj));
    EXPECT_EQ(R_OSAL_MmngrClose(hndl_mmngr), OSAL_RETURN_OK) << "Test09_004_008 failed";
    EXPECT_EQ(R_OSAL_MmngrDealloc(tmp_hndl_mmngr, buffer_obj), OSAL_RETURN_STATE) << "Test09_004_008 failed";
    free(tmp_hndl_mmngr);
}
// [MmngrDealloc_TC_09_004_008]

/**
 * @page MM_API Memory API Test
 * @section OsalMemoryApiTest_MmngrDealloc_TC_09_004_009 OsalMemoryApiTest.MmngrDealloc_TC_09_004_009
 * @subsection MmngrDealloc_TC_09_004_009_tsi Test Suite ID
 * OsalMemoryApiTest
 * @subsection MmngrDealloc_TC_09_004_009_tci Test Case ID
 * MmngrDealloc_S3_N_TC_09_004_009
 * @subsection MmngrDealloc_TC_09_004_009_rr Related Requirement(s)
 * \#276412
 * @subsection MmngrDealloc_TC_09_004_009_pp Prerequisite/Precondition
 * R_OSAL_Initialize is already called
 * @subsection MmngrDealloc_TC_09_004_009_tcs Test Case Summary
 * This test shall verify the functionality of the Memory APIs with the buffer which size is max in OSAL_MMNGR_ALLOC_MODE_STACK mode.
 * - Test09_004_009: Allocate and use the buffer which size is max.
 * @subsection MmngrDealloc_TC_09_004_009_tpts Test Procedure/Test Steps
 * -# Init the memory configuration object by using R_OSAL_MmngrInitializeMmngrConfigSt
 * -# Get the maximum memory configuration by using R_OSAL_MmngrGetOsalMaxConfig
 * -# Open new memory manager by using R_OSAL_MmngrOpen
 * -# Register callback function for event OSAL_MMNGR_EVENT_ALLOCATE by using R_OSAL_MmngrRegisterMonitor
 * -# Register callback function for event OSAL_MMNGR_EVENT_DEALLOCATE by using R_OSAL_MmngrRegisterMonitor
 * -# Register callback function for event OSAL_MMNGR_EVENT_OVERFLOW_DETECTED by using R_OSAL_MmngrRegisterMonitor
 * -# Register callback function for event OSAL_MMNGR_EVENT_UNDERFLOW_DETECTED by using R_OSAL_MmngrRegisterMonitor
 * -# Allocate memory buffer which size is 86114304 and alignment is 1MB by using R_OSAL_MmngrAlloc
 * -# Get the pointer of allocated buffer by using R_OSAL_MmngrGetCpuPtr
 * -# Modify the data of allocated buffer by known value
 * -# Call R_OSAL_MmngrFlush with offset is 0 and size is 10MB
 * -# Get hardware address by using R_OSAL_MmngrGetHwAddr
 * -# Call R_OSAL_MmngrInvalidate with offset is 0 and size is 10MB
 * -# Deallocate allocated buffer by using R_OSAL_MmngrDealloc
 * -# Close opened memory manager by using R_OSAL_MmngrClose
 * @subsection MmngrDealloc_TC_09_004_009_ereb Expected Result/Behavior
 * -# R_OSAL_MmngrInitializeMmngrConfigSt return OSAL_RETURN_OK
 * -# R_OSAL_MmngrGetOsalMaxConfig return OSAL_RETURN_OK
 * -# R_OSAL_MmngrOpen return OSAL_RETURN_OK.<br>
 * Value of "hndl_mmngr" is not OSAL_MEMORY_MANAGER_HANDLE_INVALID
 * -# R_OSAL_MmngrRegisterMonitor return OSAL_RETURN_OK
 * -# R_OSAL_MmngrRegisterMonitor return OSAL_RETURN_OK
 * -# R_OSAL_MmngrRegisterMonitor return OSAL_RETURN_OK
 * -# R_OSAL_MmngrRegisterMonitor return OSAL_RETURN_OK
 * -# R_OSAL_MmngrAlloc return OSAL_RETURN_OK.<br>
 * Value of "buffer_obj" is not OSAL_MEMORY_BUFFER_HANDLE_INVALID
 * -# R_OSAL_MmngrGetCpuPtr return OSAL_RETURN_OK.<br>
 * Value of "cpu_ptr" is not NULL_PTR
 * -# The modification is successful
 * -# R_OSAL_MmngrFlush return OSAL_RETURN_OK
 * -# R_OSAL_MmngrGetHwAddr return OSAL_RETURN_OK
 * -# R_OSAL_MmngrInvalidate return OSAL_RETURN_OK
 * -# R_OSAL_MmngrDealloc return OSAL_RETURN_OK
 * -# R_OSAL_MmngrClose return OSAL_RETURN_OK
 * @subsection MmngrDealloc_TC_09_004_009_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrDealloc_TC_09_004_009
 */
// [MmngrDealloc_TC_09_004_009]
TEST(OsalMemoryApiTest, MmngrDealloc_TC_09_004_009)
{
    st_osal_mmngr_config_t config;
    osal_memory_manager_handle_t hndl_mmngr = OSAL_MEMORY_MANAGER_HANDLE_INVALID;
    osal_memory_buffer_handle_t  buffer_obj = OSAL_MEMORY_BUFFER_HANDLE_INVALID;
    size_t size;
    size_t alignment;
    void* cpu_ptr = NULL_PTR;
    uint8_t known_data = 29;
    uintptr_t hw_addr;
    size_t offset = 0;
    osal_axi_bus_id_t axi_id;

    MockMonitorHelper  allocationEventMonitor;
    auto NormalmonitorCb = cb_wrapper<decltype(
        &MonitorHelper::NormalmonitorCb)>::make_cb<&MonitorHelper::NormalmonitorCb>();

    // Test09_004_009
    // @brief: normal case: deallocate a buffer when the full buffer has been initialized / used
    EXPECT_CALL(allocationEventMonitor, NormalmonitorCb(OSAL_MMNGR_EVENT_ALLOCATE, _, _)).Times(1);
    EXPECT_CALL(allocationEventMonitor, NormalmonitorCb(OSAL_MMNGR_EVENT_DEALLOCATE, _, _)).Times(1);
    EXPECT_CALL(allocationEventMonitor, NormalmonitorCb(OSAL_MMNGR_EVENT_OVERFLOW_DETECTED, _, _)).Times(0);
    EXPECT_CALL(allocationEventMonitor, NormalmonitorCb(OSAL_MMNGR_EVENT_UNDERFLOW_DETECTED, _, _)).Times(0);
    EXPECT_EQ(R_OSAL_MmngrInitializeMmngrConfigSt(&config), OSAL_RETURN_OK) << "Test09_004_009 failed";
    EXPECT_EQ(R_OSAL_MmngrGetOsalMaxConfig(&config), OSAL_RETURN_OK) << "Test09_004_009 failed";
    config.mode = OSAL_MMNGR_ALLOC_MODE_STACK;
    EXPECT_EQ(R_OSAL_MmngrOpen(&config, &hndl_mmngr), OSAL_RETURN_OK) << "Test09_004_009 failed";
    EXPECT_NE(hndl_mmngr, OSAL_MEMORY_MANAGER_HANDLE_INVALID) << "Test09_004_009 failed";
    EXPECT_EQ(R_OSAL_MmngrRegisterMonitor(hndl_mmngr, OSAL_MMNGR_EVENT_ALLOCATE, NormalmonitorCb, &allocationEventMonitor), OSAL_RETURN_OK) << "Test09_004_009 failed";
    EXPECT_EQ(R_OSAL_MmngrRegisterMonitor(hndl_mmngr, OSAL_MMNGR_EVENT_DEALLOCATE, NormalmonitorCb, &allocationEventMonitor), OSAL_RETURN_OK) << "Test09_004_009 failed";
    EXPECT_EQ(R_OSAL_MmngrRegisterMonitor(hndl_mmngr, OSAL_MMNGR_EVENT_OVERFLOW_DETECTED, NormalmonitorCb, &allocationEventMonitor), OSAL_RETURN_OK) << "Test09_004_009 failed";
    EXPECT_EQ(R_OSAL_MmngrRegisterMonitor(hndl_mmngr, OSAL_MMNGR_EVENT_UNDERFLOW_DETECTED, NormalmonitorCb, &allocationEventMonitor), OSAL_RETURN_OK) << "Test09_004_009 failed";
    size = 86114304;
    alignment = 1 * 1024 * 1024; // 1MB
    EXPECT_EQ(R_OSAL_MmngrAlloc(hndl_mmngr, size, alignment, &buffer_obj), OSAL_RETURN_OK) << "Test09_004_009 failed";
    EXPECT_NE(buffer_obj, OSAL_MEMORY_BUFFER_HANDLE_INVALID) << "Test09_004_009 failed";
    EXPECT_EQ(R_OSAL_MmngrGetCpuPtr(buffer_obj, &cpu_ptr), OSAL_RETURN_OK) << "Test09_004_009 failed";
    EXPECT_NE(cpu_ptr,NULL_PTR) << "Test09_004_009 failed";
    (void)memset(cpu_ptr, known_data, size);
    size = 10 * 1024 * 1024; // 10MB
    EXPECT_EQ(R_OSAL_MmngrFlush(buffer_obj, offset , size), OSAL_RETURN_OK) << "Test09_004_009 failed";
    axi_id = OSAL_AXI_BUS_ID_IPA_MAIN_MEMORY + 1;
    EXPECT_EQ(R_OSAL_MmngrGetHwAddr(buffer_obj, axi_id, &hw_addr), OSAL_RETURN_OK) << "Test09_004_009 failed";
    EXPECT_EQ(R_OSAL_MmngrInvalidate(buffer_obj, offset, size), OSAL_RETURN_OK) << "Test09_004_009 failed";
    EXPECT_EQ(R_OSAL_MmngrDealloc(hndl_mmngr, buffer_obj), OSAL_RETURN_OK) << "Test09_004_009 failed";
    EXPECT_EQ(R_OSAL_MmngrClose(hndl_mmngr), OSAL_RETURN_OK) << "Test09_004_009 failed";
}
// [MmngrDealloc_TC_09_004_009]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrDealloc_TC_09_004_010 MemoryApiTest.MmngrDealloc_TC_09_004_010
 * @subsection MmngrDealloc_TC_09_004_010_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrDealloc_TC_09_004_010_tci Test Case ID
 * MmngrDealloc_S3_N_TC_09_004_010
 * @subsection MmngrDealloc_TC_09_004_010_rr Related Requirement(s)
 * \#276412
 * @subsection MmngrDealloc_TC_09_004_010_pp Prerequisite/Precondition
 * OSAL is initialized.
 * @subsection MmngrDealloc_TC_09_004_010_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrAlloc and R_OSAL_MmngrDealloc with normal condition in OSAL_MMNGR_ALLOC_MODE_FREE_LIST mode.
 * - Test09_004_026: confirm that allocated areas are released by Dealloc
 * @subsection MmngrDealloc_TC_09_004_010_tpts Test Procedure/Test Steps
 * -# Get the memory max configuration by using R_OSAL_MmngrGetOsalMaxConfig
 * -# Open memory manager by using R_OSAL_MmngrOpen with "config.memory_limit" is 11MB and OSAL_MMNGR_ALLOC_MODE_FREE_LIST mode
 * -# Use the "for" loop with the following steps:
 *      - Allocate 10 buffers, the size of each buffer is 1MB by using R_OSAL_MmngrAlloc
 *      - Deallocate 10 buffers above by using R_OSAL_MmngrDealloc
 * -# Call R_OSAL_MmngrClose to close the handle.
 * @subsection MmngrDealloc_TC_09_004_010_ereb Expected Result/Behavior
 * -# The return value of R_OSAL_MmngrGetOsalMaxConfig is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrOpen is OSAL_RETURN_OK.
 * -# In "for" loop, the expected return code is:
 *      - The return value of all R_OSAL_MmngrAlloc functions is OSAL_RETURN_OK
 *      - The return value of all R_OSAL_MmngrDealloc functions is OSAL_RETURN_OK
 * -# The return value of R_OSAL_MmngrClose is OSAL_RETURN_OK.
 * @subsection MmngrDealloc_TC_09_004_010_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrDealloc_TC_09_004_010
 */
// [MmngrDealloc_TC_09_004_010]
TEST_F(MemoryApiTest, MmngrDealloc_TC_09_004_010)
{
    osal_memory_buffer_handle_t  buffer_obj_array[10]
        = {OSAL_MEMORY_BUFFER_HANDLE_INVALID, OSAL_MEMORY_BUFFER_HANDLE_INVALID,
           OSAL_MEMORY_BUFFER_HANDLE_INVALID, OSAL_MEMORY_BUFFER_HANDLE_INVALID,
           OSAL_MEMORY_BUFFER_HANDLE_INVALID, OSAL_MEMORY_BUFFER_HANDLE_INVALID,
           OSAL_MEMORY_BUFFER_HANDLE_INVALID, OSAL_MEMORY_BUFFER_HANDLE_INVALID,
           OSAL_MEMORY_BUFFER_HANDLE_INVALID, OSAL_MEMORY_BUFFER_HANDLE_INVALID};

    // Test09_004_010
    // @brief: confirm that allocated areas are released by Dealloc
    EXPECT_EQ(R_OSAL_MmngrGetOsalMaxConfig(&config), OSAL_RETURN_OK) << "Test09_004_010 failed";
    memset(buffer_obj_array, 0, sizeof(buffer_obj_array));
    config.memory_limit = 11 * 1024 * 1024;
    config.mode = OSAL_MMNGR_ALLOC_MODE_FREE_LIST;
    EXPECT_EQ(R_OSAL_MmngrOpen(&config, &hndl_mmngr), OSAL_RETURN_OK) << "Test09_004_010 failed";
    size = 1 * 1024 * 1024;
    alignment = 64;
    for (int i = 0; i < 100; i++)
    {
        for (int j = 0; j < 10; j++)
        {
            EXPECT_EQ(R_OSAL_MmngrAlloc(hndl_mmngr, size, alignment, &buffer_obj_array[j]), OSAL_RETURN_OK) << "Test09_004_010 failed";
        }

        for (int k = 9; k >= 0; k--)
        {
            EXPECT_EQ(R_OSAL_MmngrDealloc(hndl_mmngr, buffer_obj_array[k]), OSAL_RETURN_OK) << "Test09_004_010 failed";
        }
    }

    EXPECT_EQ(R_OSAL_MmngrClose(hndl_mmngr), OSAL_RETURN_OK) << "Test09_004_010 failed";
}
// [MmngrDealloc_TC_09_004_010]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrDealloc_TC_09_004_011 MemoryApiTest.MmngrDealloc_TC_09_004_011
 * @subsection MmngrDealloc_TC_09_004_011_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrDealloc_TC_09_004_011_tci Test Case ID
 * MmngrDealloc_S3_N_TC_09_004_011
 * @subsection MmngrDealloc_TC_09_004_011_rr Related Requirement(s)
 * \#276402, \#276412
 * @subsection MmngrDealloc_TC_09_004_011_pp Prerequisite/Precondition
 * OSAL is initialized.
 * @subsection MmngrDealloc_TC_09_004_011_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrAlloc and R_OSAL_MmngrDealloc with normal condition in OSAL_MMNGR_ALLOC_MODE_STACK_PROT mode.
 * - pre-process: Open new memory manager
 * - Test09_004_011: dealloc with all valid parameters.
 * - post-process: close memory manager
 * @subsection MmngrDealloc_TC_09_004_011_tpts Test Procedure/Test Steps
 * -# Open the handle using R_OSAL_MmngrOpen with config:
 *      - config.max_allowed_allocations = 4
 *      - config.max_registered_monitors_cbs = 0
 *      - config.memory_limit = 10MB
 *      - config.mode = OSAL_MMNGR_ALLOC_MODE_STACK_PROT
 * -# Call R_OSAL_MmngrAlloc with "size" is 128 byte and the "alignment" is 128 byte.
 * -# Call R_OSAL_MmngrDealloc to deallocate the buffer.
 * -# Call R_OSAL_MmngrClose to close the handle.
 * @subsection MmngrDealloc_TC_09_004_011_ereb Expected Result/Behavior
 * -# The return of R_OSAL_MmngrOpen is OSAL_RETURN_OK.<br>
 * The return handle is not OSAL_MEMORY_MANAGER_HANDLE_INVALID.
 * -# The return value of R_OSAL_MmngrAlloc is OSAL_RETURN_OK.<br>
 * The return buffer is not OSAL_MEMORY_BUFFER_HANDLE_INVALID.
 * -# The return value of R_OSAL_MmngrDealloc is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrClose is OSAL_RETURN_OK.
 * @subsection MmngrDealloc_TC_09_004_011_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrDealloc_TC_09_004_011
 */
// [MmngrDealloc_TC_09_004_011]
TEST_F(MemoryApiTest, MmngrDealloc_TC_09_004_011)
{
    //pre-process: open new memory manager
    config.max_allowed_allocations     = 4;
    config.max_registered_monitors_cbs = 0;
    config.memory_limit = 10 * 1024 * 1024;
    config.mode = OSAL_MMNGR_ALLOC_MODE_STACK_PROT;
    EXPECT_EQ(R_OSAL_MmngrOpen(&config, &hndl_mmngr), OSAL_RETURN_OK) << "pre-process failed";
    EXPECT_NE(hndl_mmngr, OSAL_MEMORY_MANAGER_HANDLE_INVALID) << "pre-process failed";

    // Test09_004_011: dealloc with all valid argument
    size = 128;
    alignment = 128;
    EXPECT_EQ(R_OSAL_MmngrAlloc(hndl_mmngr, size, alignment, &buffer_obj), OSAL_RETURN_OK) << "Test09_004_011 failed";
    EXPECT_NE(buffer_obj, OSAL_MEMORY_BUFFER_HANDLE_INVALID) << "Test09_004_011 failed";
    EXPECT_EQ(R_OSAL_MmngrDealloc(hndl_mmngr, buffer_obj), OSAL_RETURN_OK) << "Test09_004_011 failed";

    //post-process: close memory manager
    EXPECT_EQ(R_OSAL_MmngrClose(hndl_mmngr), OSAL_RETURN_OK) << "post-process failed";
}
// [MmngrDealloc_TC_09_004_011]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrDealloc_TC_09_004_012 MemoryApiTest.MmngrDealloc_TC_09_004_012
 * @subsection MmngrDealloc_TC_09_004_012_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrDealloc_TC_09_004_012_tci Test Case ID
 * MmngrDealloc_S4_A_TC_09_004_012
 * @subsection MmngrDealloc_TC_09_004_012_rr Related Requirement(s)
 * \#276412
 * @subsection MmngrDealloc_TC_09_004_012_pp Prerequisite/Precondition
 * OSAL is initialized.
 * @subsection MmngrDealloc_TC_09_004_012_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrAlloc and R_OSAL_MmngrDealloc with abnormal condition in OSAL_MMNGR_ALLOC_MODE_STACK_PROT mode.
 * - pre-process: open new memory manager
 * - Test09_004_012: handle is not support deallocation.
 * - post-process: close opened memory manager
 * @subsection MmngrDealloc_TC_09_004_012_tpts Test Procedure/Test Steps
 * -# Open the handle using R_OSAL_MmngrOpen with config:
 *      - config.max_allowed_allocations = 4
 *      - config.max_registered_monitors_cbs = 0
 *      - config.memory_limit = 10MB
 *      - config.mode = OSAL_MMNGR_ALLOC_MODE_STACK_PROT
 * -# Allocate "tmp_hndl_mmngr" by using malloc function.
 * -# Call R_OSAL_MmngrAlloc with "size" is 64 byte and "alignment" is 64 byte.<br>
 * Store "hndl_mmngr->p_deallocate" to a temporary memory handle "tmp_hndl_mmngr->p_deallocate".<br>
 * Set "hndl_mmngr->p_deallocate" to NULL
 * -# Call R_OSAL_MmngrDealloc with the modified memory handle "hndl_mmngr".
 * -# Re-assign "tmp_hndl_mmngr->p_deallocate" to "hndl_mmngr->p_deallocate".<br>
 * Call R_OSAL_MmngrDealloc with this updated memory handle "hndl_mmngr".
 * -# Free "tmp_hndl_mmngr"
 * -# Call R_OSAL_MmngrClose to close the handle.
 * @subsection MmngrDealloc_TC_09_004_012_ereb Expected Result/Behavior
 * -# The return of R_OSAL_MmngrOpen is OSAL_RETURN_OK.<br>
 * The return handle is not OSAL_MEMORY_MANAGER_HANDLE_INVALID.
 * -# Memory allocation succeeded (Pointer to buffer != Nullpointer)
 * -# The return value of R_OSAL_MmngrAlloc is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrDealloc with the changed handle is OSAL_RETURN_HANDLE_NOT_SUPPORTED.
 * -# "hndl_mmngr->p_deallocate" is not NULL_PTR.<br>
 * The return value of R_OSAL_MmngrDealloc with the original handle is OSAL_RETURN_OK.
 * -# Memory freed successfully
 * -# The return value of R_OSAL_MmngrClose is OSAL_RETURN_OK.
 * @subsection MmngrDealloc_TC_09_004_012_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrDealloc_TC_09_004_012
 */
// [MmngrDealloc_TC_09_004_012]
TEST_F(MemoryApiTest, MmngrDealloc_TC_09_004_012)
{
    osal_memory_manager_handle_t tmp_hndl_mmngr;

    // pre-process: open memory manager
    config.max_allowed_allocations     = 4;
    config.max_registered_monitors_cbs = 0;
    config.memory_limit = 10 * 1024 * 1024;
    config.mode = OSAL_MMNGR_ALLOC_MODE_STACK_PROT;
    EXPECT_EQ(R_OSAL_MmngrOpen(&config, &hndl_mmngr), OSAL_RETURN_OK) << "pre-process failed";
    EXPECT_NE(hndl_mmngr, OSAL_MEMORY_MANAGER_HANDLE_INVALID);

    // Test09_004_012
    // @brief: abnormal case: hndl_mmngr not support deallocation
    size = 64;
    alignment = 64;
    tmp_hndl_mmngr = (osal_memory_manager_handle_t)malloc (sizeof(st_osal_memory_manager_obj));
    EXPECT_EQ(R_OSAL_MmngrAlloc(hndl_mmngr, size, alignment, &buffer_obj), OSAL_RETURN_OK) << "Test09_004_012 failed";
    tmp_hndl_mmngr->p_deallocate = hndl_mmngr->p_deallocate;
    hndl_mmngr->p_deallocate = NULL;
    EXPECT_EQ(R_OSAL_MmngrDealloc(hndl_mmngr,buffer_obj ), OSAL_RETURN_HANDLE_NOT_SUPPORTED) << "Test09_004_012 failed";
    hndl_mmngr->p_deallocate = tmp_hndl_mmngr->p_deallocate;
    EXPECT_NE(hndl_mmngr->p_deallocate, NULL_PTR) << "Test09_004_012 failed";
    EXPECT_EQ(R_OSAL_MmngrDealloc(hndl_mmngr,buffer_obj ), OSAL_RETURN_OK) << "Test09_004_012 failed";
    free(tmp_hndl_mmngr);

    // post-process: close memory manager
    EXPECT_EQ(R_OSAL_MmngrClose(hndl_mmngr), OSAL_RETURN_OK) << "post-process failed";
}
// [MmngrDealloc_TC_09_004_012]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrDealloc_TC_09_004_013 MemoryApiTest.MmngrDealloc_TC_09_004_013
 * @subsection MmngrDealloc_TC_09_004_013_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrDealloc_TC_09_004_013_tci Test Case ID
 * MmngrDealloc_S0_A_TC_09_004_013
 * @subsection MmngrDealloc_TC_09_004_013_rr Related Requirement(s)
 * \#276412
 * @subsection MmngrDealloc_TC_09_004_013_pp Prerequisite/Precondition
 * OSAL is initialized.
 * @subsection MmngrDealloc_TC_09_004_013_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrAlloc and R_OSAL_MmngrDealloc with abnormal condition in OSAL_MMNGR_ALLOC_MODE_STACK_PROT mode.
 * - pre-process: open new memory manager
 * - Test09_004_013: dealloc with buffer_obj is invalid (NULL).
 * - post-process: close opened memory manager
 * @subsection MmngrDealloc_TC_09_004_013_tpts Test Procedure/Test Steps
 * -# Open the handle using R_OSAL_MmngrOpen with config:
 *      - config.max_allowed_allocations = 4
 *      - config.max_registered_monitors_cbs = 0
 *      - config.memory_limit = 10MB
 *      - config.mode = OSAL_MMNGR_ALLOC_MODE_STACK_PROT
 * -# Call_OSAL_MmngrDealloc with "buffer_obj" is NULL.
 * -# Call R_OSAL_MmngrClose to close the handle.
 * @subsection MmngrDealloc_TC_09_004_013_ereb Expected Result/Behavior
 * -# The return of R_OSAL_MmngrOpen is OSAL_RETURN_OK.<br>
 * The return handle is not OSAL_MEMORY_MANAGER_HANDLE_INVALID.
 * -# The return value of R_OSAL_MmngrDealloc is OSAL_RETURN_HANDLE.
 * -# The return value of R_OSAL_MmngrClose is OSAL_RETURN_OK.
 * @subsection MmngrDealloc_TC_09_004_013_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrDealloc_TC_09_004_013
 */
// [MmngrDealloc_TC_09_004_013]
TEST_F(MemoryApiTest, MmngrDealloc_TC_09_004_013)
{
    // pre-process: open memory manager
    config.max_allowed_allocations     = 4;
    config.max_registered_monitors_cbs = 0;
    config.memory_limit = 10 * 1024 * 1024;
    config.mode = OSAL_MMNGR_ALLOC_MODE_STACK_PROT;
    EXPECT_EQ(R_OSAL_MmngrOpen(&config, &hndl_mmngr), OSAL_RETURN_OK) << "pre-process failed";
    EXPECT_NE(hndl_mmngr, OSAL_MEMORY_MANAGER_HANDLE_INVALID);

    // Test09_004_013
    // @brief: dealloc with buffer_obj is invalid (NULL)
    EXPECT_EQ(R_OSAL_MmngrDealloc(hndl_mmngr, OSAL_MEMORY_BUFFER_HANDLE_INVALID), OSAL_RETURN_HANDLE) << "Test09_004_013 failed";

    // post-process: close memory manager
    EXPECT_EQ(R_OSAL_MmngrClose(hndl_mmngr), OSAL_RETURN_OK) << "post-process failed";
}
// [MmngrDealloc_TC_09_004_013]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrDealloc_TC_09_004_014 MemoryApiTest.MmngrDealloc_TC_09_004_014
 * @subsection MmngrDealloc_TC_09_004_014_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrDealloc_TC_09_004_014_tci Test Case ID
 * MmngrDealloc_S2_A_TC_09_004_014
 * @subsection MmngrDealloc_TC_09_004_014_rr Related Requirement(s)
 * \#276412
 * @subsection MmngrDealloc_TC_09_004_014_pp Prerequisite/Precondition
 * OSAL is initialized.
 * @subsection MmngrDealloc_TC_09_004_014_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrAlloc and R_OSAL_MmngrDealloc with abnormal condition in OSAL_MMNGR_ALLOC_MODE_STACK_PROT mode.
 * - Test09_004_014: dealloc with handle has already closed.
 * @subsection MmngrDealloc_TC_09_004_014_tpts Test Procedure/Test Steps
 * -# Open the handle using R_OSAL_MmngrOpen with config:
 *      - config.max_allowed_allocations = 4
 *      - config.max_registered_monitors_cbs = 0
 *      - config.memory_limit = 10MB
 *      - config.mode = OSAL_MMNGR_ALLOC_MODE_STACK_PROT
 * -# Call R_OSAL_MmngrClose to close the handle.
 * -# Allocate "buffer_obj" by using malloc function.
 * -# Call R_OSAL_MmngrDealloc with "buffer_obj".<br>
 * -# Free allocated "buffer_obj".
 * @subsection MmngrDealloc_TC_09_004_014_ereb Expected Result/Behavior
 * -# The return of R_OSAL_MmngrOpen is OSAL_RETURN_OK.<br>
 * The return handle is not OSAL_MEMORY_MANAGER_HANDLE_INVALID.
 * -# The return value of R_OSAL_MmngrClose is OSAL_RETURN_OK.
 * -# Memory allocation succeeded (Pointer to buffer != Nullpointer)
 * -# The return value of R_OSAL_MmngrDealloc is OSAL_RETURN_HANDLE_NOT_SUPPORTED.<br>
 * -# Allocated memory free succeeded.
 * @subsection MmngrDealloc_TC_09_004_014_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrDealloc_TC_09_004_014
 */
// [MmngrDealloc_TC_09_004_014]
TEST_F(MemoryApiTest, MmngrDealloc_TC_09_004_014)
{
    // Test09_004_014: dealloc with handle has already closed.
    config.max_allowed_allocations     = 4;
    config.max_registered_monitors_cbs = 0;
    config.memory_limit = 10 * 1024 * 1024;
    config.mode = OSAL_MMNGR_ALLOC_MODE_STACK_PROT;
    EXPECT_EQ(R_OSAL_MmngrOpen(&config, &hndl_mmngr), OSAL_RETURN_OK);
    EXPECT_NE(hndl_mmngr, OSAL_MEMORY_MANAGER_HANDLE_INVALID);
    EXPECT_EQ(R_OSAL_MmngrClose(hndl_mmngr), OSAL_RETURN_OK) << "Test09_004_014 failed";

    buffer_obj = (osal_memory_buffer_handle_t)malloc(sizeof(st_osal_memory_buffer_obj));
    EXPECT_NE(buffer_obj, NULL_PTR);
    EXPECT_EQ(R_OSAL_MmngrDealloc(hndl_mmngr, buffer_obj), OSAL_RETURN_HANDLE_NOT_SUPPORTED) << "Test09_004_014 failed";
    free(buffer_obj);
    buffer_obj = OSAL_MEMORY_BUFFER_HANDLE_INVALID;
}
// [MmngrDealloc_TC_09_004_014]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrDealloc_TC_09_004_015 MemoryApiTest.MmngrDealloc_TC_09_004_015
 * @subsection MmngrDealloc_TC_09_004_015_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrDealloc_TC_09_004_015_tci Test Case ID
 * MmngrDealloc_S3_N_TC_09_004_015
 * @subsection MmngrDealloc_TC_09_004_015_rr Related Requirement(s)
 * \#276412
 * @subsection MmngrDealloc_TC_09_004_015_pp Prerequisite/Precondition
 * OSAL is initialized.
 * @subsection MmngrDealloc_TC_09_004_015_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrAlloc and R_OSAL_MmngrDealloc with normal condition in OSAL_MMNGR_ALLOC_MODE_STACK_PROT mode.
 * - pre-process: Open new memory manager
 * - Test09_004_015: allocate 3 buffers with OSAL_MMNGR_ALLOC_MODE_STACK_PROT mode.<br>
 * Deallocate order is not same as allocation order first, then deallocate as same as the allocation order.
 * - post-process: close memory manager
 * @subsection MmngrDealloc_TC_09_004_015_tpts Test Procedure/Test Steps
 * -# Open the handle using R_OSAL_MmngrOpen with config:
 *      - config.max_allowed_allocations = 4
 *      - config.max_registered_monitors_cbs = 0
 *      - config.memory_limit = 10MB
 *      - config.mode = OSAL_MMNGR_ALLOC_MODE_STACK_PROT
 * -# Call R_OSAL_MmngrAlloc to allocate 1st buffer with size is 1KB and align is 64.
 * -# Call R_OSAL_MmngrAlloc to allocate 2nd buffer with size is 1KB and align is 64.
 * -# Call R_OSAL_MmngrAlloc to allocate 3rd buffer with size is 1KB and align is 64.
 * -# Call R_OSAL_MmngrDealloc to deallocate 2nd buffer with size is 1KB and align is 64.
 * -# Call R_OSAL_MmngrDealloc to deallocate 3rd buffer with size is 1KB and align is 64.
 * -# Call R_OSAL_MmngrDealloc to deallocate 2nd buffer with size is 1KB and align is 64.
 * -# Call R_OSAL_MmngrDealloc to deallocate 1st buffer with size is 1KB and align is 64.
 * -# Call R_OSAL_MmngrClose to close the handle.
 * @subsection MmngrDealloc_TC_09_004_015_ereb Expected Result/Behavior
 * -# The return of R_OSAL_MmngrOpen is OSAL_RETURN_OK.<br>
 * The return handle is not OSAL_MEMORY_MANAGER_HANDLE_INVALID.
 * -# The return value of the 1st R_OSAL_MmngrAlloc is OSAL_RETURN_OK.<br>
 * The return buffer is not OSAL_MEMORY_BUFFER_HANDLE_INVALID.
 * -# The return value of the 2nd R_OSAL_MmngrAlloc is OSAL_RETURN_OK.<br>
 * The return buffer is not OSAL_MEMORY_BUFFER_HANDLE_INVALID.
 * -# The return value of the 3rd R_OSAL_MmngrAlloc is OSAL_RETURN_OK.<br>
 * The return buffer is not OSAL_MEMORY_BUFFER_HANDLE_INVALID.
 * -# The return value when calling R_OSAL_MmngrDealloc to deallocate the 2nd buffer is OSAL_RETURN_MEM.
 * -# The return value of the R_OSAL_MmngrDealloc for 3rd buffer is OSAL_RETURN_OK.
 * -# The return value of the R_OSAL_MmngrDealloc for 2nd buffer is OSAL_RETURN_OK.
 * -# The return value of the R_OSAL_MmngrDealloc for 1st buffer is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrClose is OSAL_RETURN_OK.
 * @subsection MmngrDealloc_TC_09_004_015_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrDealloc_TC_09_004_015
 */
// [MmngrDealloc_TC_09_004_015]
TEST_F(MemoryApiTest, MmngrDealloc_TC_09_004_015)
{
    osal_memory_buffer_handle_t  buffer_obj_array1[5]
        = {OSAL_MEMORY_BUFFER_HANDLE_INVALID, OSAL_MEMORY_BUFFER_HANDLE_INVALID,
           OSAL_MEMORY_BUFFER_HANDLE_INVALID, OSAL_MEMORY_BUFFER_HANDLE_INVALID,
           OSAL_MEMORY_BUFFER_HANDLE_INVALID};

    //pre-process: open new memory manager
    config.max_allowed_allocations     = 4;
    config.max_registered_monitors_cbs = 0;
    config.memory_limit = 10 * 1024 * 1024;
    config.mode = OSAL_MMNGR_ALLOC_MODE_STACK_PROT;
    EXPECT_EQ(R_OSAL_MmngrOpen(&config, &hndl_mmngr), OSAL_RETURN_OK) << "pre-process failed";
    EXPECT_NE(hndl_mmngr, OSAL_MEMORY_MANAGER_HANDLE_INVALID) << "pre-process failed";

    // Test09_004_015
    // @brief: normal case: allocate 3 buffers with OSAL_MMNGR_ALLOC_MODE_STACK_PROT mode. Deallocate order is not same as allocation.
    size = 1024;
    alignment = 64;
    EXPECT_EQ(R_OSAL_MmngrAlloc(hndl_mmngr, size, alignment, buffer_obj_array1), OSAL_RETURN_OK) << "Test09_004_015 failed";
    EXPECT_NE(buffer_obj_array1[0], OSAL_MEMORY_BUFFER_HANDLE_INVALID) << "Test09_004_015 failed";
    EXPECT_EQ(R_OSAL_MmngrAlloc(hndl_mmngr, size, alignment, buffer_obj_array1 + 1), OSAL_RETURN_OK) << "Test09_004_015 failed";
    EXPECT_NE(buffer_obj_array1[1], OSAL_MEMORY_BUFFER_HANDLE_INVALID) << "Test09_004_015 failed";
    EXPECT_EQ(R_OSAL_MmngrAlloc(hndl_mmngr, size, alignment, buffer_obj_array1+ 2), OSAL_RETURN_OK) << "Test09_004_015 failed";
    EXPECT_NE(buffer_obj_array1[2], OSAL_MEMORY_BUFFER_HANDLE_INVALID) << "Test09_004_015 failed";
    EXPECT_EQ(R_OSAL_MmngrDealloc(hndl_mmngr, buffer_obj_array1[1]), OSAL_RETURN_MEM) << "Test09_004_015 failed";
    EXPECT_EQ(R_OSAL_MmngrDealloc(hndl_mmngr, buffer_obj_array1[2]), OSAL_RETURN_OK) << "Test09_004_015 failed";
    EXPECT_EQ(R_OSAL_MmngrDealloc(hndl_mmngr, buffer_obj_array1[1]), OSAL_RETURN_OK) << "Test09_004_015 failed";
    EXPECT_EQ(R_OSAL_MmngrDealloc(hndl_mmngr, buffer_obj_array1[0]), OSAL_RETURN_OK) << "Test09_004_015 failed";

    //post-process: close memory manager
    EXPECT_EQ(R_OSAL_MmngrClose(hndl_mmngr), OSAL_RETURN_OK) << "post-process failed";
}
// [MmngrDealloc_TC_09_004_015]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrDealloc_TC_09_004_016 MemoryApiTest.MmngrDealloc_TC_09_004_016
 * @subsection MmngrDealloc_TC_09_004_016_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrDealloc_TC_09_004_016_tci Test Case ID
 * MmngrDealloc_S2_N_TC_09_004_016
 * @subsection MmngrDealloc_TC_09_004_016_rr Related Requirement(s)
 * \#276412
 * @subsection MmngrDealloc_TC_09_004_016_pp Prerequisite/Precondition
 * OSAL is initialized.
 * @subsection MmngrDealloc_TC_09_004_016_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrAlloc and R_OSAL_MmngrDealloc with abnormal condition in OSAL_MMNGR_ALLOC_MODE_STACK_PROT mode.
 * - Test09_004_016: confirm the use case the buffer object is not managed by Memory Manager hndl_mngr
 * @subsection MmngrDealloc_TC_09_004_016_tpts Test Procedure/Test Steps
 * -# Open the handle using R_OSAL_MmngrOpen with config:
 *      - config.max_allowed_allocations = 4
 *      - config.max_registered_monitors_cbs = 0
 *      - config.memory_limit = 10MB
 *      - config.mode = OSAL_MMNGR_ALLOC_MODE_STACK_PROT
 * -# Call R_OSAL_MmngrAlloc to allocate buffer with size is 1KB and align is 64.
 * -# Allocate "tmp_hndl_mngr" by using malloc function.
 * -# Copy the memory pointed by hndl_mmngr into tmp_hndl_mmngr.
 * -# Call R_OSAL_MmngrClose to close the handle.
 * -# Call R_OSAL_MmngrDealloc to deallocate the buffer using tmp_hndl_mmngr.
 * -# Free "tmp_hndl_mmngr".
 * @subsection MmngrDealloc_TC_09_004_016_ereb Expected Result/Behavior
 * -# The return of R_OSAL_MmngrOpen is OSAL_RETURN_OK.<br>
 * The return handle is not OSAL_MEMORY_MANAGER_HANDLE_INVALID.
 * -# The return value of the R_OSAL_MmngrAlloc is OSAL_RETURN_OK
 * -# Memory allocation succeeded (Pointer to buffer != Nullpointer)
 * -# Copy memory into tmp_hndl_mmngr successfully.
 * -# The return value of R_OSAL_MmngrClose is OSAL_RETURN_OK.
 * -# The return value when calling R_OSAL_MmngrDealloc is OSAL_RETURN_STATE.
 * -# Allocated memory free succeeded.
 * @subsection MmngrDealloc_TC_09_004_016_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrDealloc_TC_09_004_016
 */
// [MmngrDealloc_TC_09_004_016]
TEST_F(MemoryApiTest, MmngrDealloc_TC_09_004_016)
{
    osal_memory_manager_handle_t tmp_hndl_mmngr;

    // Test09_004_016
    // @brief: abnormal case: the buffer object is not managed by Memory Manager hndl_mngr
    config.max_allowed_allocations     = 4;
    config.max_registered_monitors_cbs = 0;
    config.memory_limit = 10 * 1024 * 1024;
    config.mode = OSAL_MMNGR_ALLOC_MODE_STACK;
    EXPECT_EQ(R_OSAL_MmngrOpen(&config, &hndl_mmngr), OSAL_RETURN_OK) << "Test09_004_016 failed";
    EXPECT_NE(hndl_mmngr, OSAL_MEMORY_MANAGER_HANDLE_INVALID) << "Test09_004_016 failed";

    size = 1024;
    alignment = 64;
    EXPECT_EQ(R_OSAL_MmngrAlloc(hndl_mmngr, size, alignment, &buffer_obj), OSAL_RETURN_OK) << "Test09_004_016 failed";
    tmp_hndl_mmngr = (osal_memory_manager_handle_t)malloc (sizeof(st_osal_memory_manager_obj));
    EXPECT_NE(tmp_hndl_mmngr, NULL_PTR);
    memcpy(tmp_hndl_mmngr, hndl_mmngr, sizeof(st_osal_memory_manager_obj));
    EXPECT_EQ(R_OSAL_MmngrClose(hndl_mmngr), OSAL_RETURN_OK) << "Test09_004_016 failed";
    EXPECT_EQ(R_OSAL_MmngrDealloc(tmp_hndl_mmngr, buffer_obj), OSAL_RETURN_STATE) << "Test09_004_016 failed";
    free(tmp_hndl_mmngr);
}
// [MmngrDealloc_TC_09_004_016]

/**
 * @page MM_API Memory API Test
 * @section OsalMemoryApiTest_MmngrDealloc_TC_09_004_017 OsalMemoryApiTest.MmngrDealloc_TC_09_004_017
 * @subsection MmngrDealloc_TC_09_004_017_tsi Test Suite ID
 * OsalMemoryApiTest
 * @subsection MmngrDealloc_TC_09_004_017_tci Test Case ID
 * MmngrDealloc_S3_N_TC_09_004_017
 * @subsection MmngrDealloc_TC_09_004_017_rr Related Requirement(s)
 * \#276412
 * @subsection MmngrDealloc_TC_09_004_017_pp Prerequisite/Precondition
 * R_OSAL_Initialize is already called
 * @subsection MmngrDealloc_TC_09_004_017_tcs Test Case Summary
 * This test shall verify the functionality of the Memory APIs with the buffer which size is max in OSAL_MMNGR_ALLOC_MODE_STACK_PROT mode.
 * - Test09_004_017: Allocate and use the buffer which size is max.
 * @subsection MmngrDealloc_TC_09_004_017_tpts Test Procedure/Test Steps
 * -# Init the memory configuration object by using R_OSAL_MmngrInitializeMmngrConfigSt
 * -# Get the maximum memory configuration by using R_OSAL_MmngrGetOsalMaxConfig
 * -# Open new memory manager by using R_OSAL_MmngrOpen
 * -# Register callback function for event OSAL_MMNGR_EVENT_ALLOCATE by using R_OSAL_MmngrRegisterMonitor
 * -# Register callback function for event OSAL_MMNGR_EVENT_DEALLOCATE by using R_OSAL_MmngrRegisterMonitor
 * -# Register callback function for event OSAL_MMNGR_EVENT_OVERFLOW_DETECTED by using R_OSAL_MmngrRegisterMonitor
 * -# Register callback function for event OSAL_MMNGR_EVENT_UNDERFLOW_DETECTED by using R_OSAL_MmngrRegisterMonitor
 * -# Allocate memory buffer which size is 86114304 and alignment is 1MB by using R_OSAL_MmngrAlloc
 * -# Get the pointer of allocated buffer by using R_OSAL_MmngrGetCpuPtr
 * -# Modify the data of allocated buffer by known value
 * -# Call R_OSAL_MmngrFlush with offset is 0 and size is 10MB
 * -# Get hardware address by using R_OSAL_MmngrGetHwAddr
 * -# Call R_OSAL_MmngrInvalidate with offset is 0 and size is 10MB
 * -# Deallocate allocated buffer by using R_OSAL_MmngrDealloc
 * -# Close opened memory manager by using R_OSAL_MmngrClose
 * @subsection MmngrDealloc_TC_09_004_017_ereb Expected Result/Behavior
 * -# R_OSAL_MmngrInitializeMmngrConfigSt return OSAL_RETURN_OK
 * -# R_OSAL_MmngrGetOsalMaxConfig return OSAL_RETURN_OK
 * -# R_OSAL_MmngrOpen return OSAL_RETURN_OK.<br>
 * Value of "hndl_mmngr" is not OSAL_MEMORY_MANAGER_HANDLE_INVALID
 * -# R_OSAL_MmngrRegisterMonitor return OSAL_RETURN_OK
 * -# R_OSAL_MmngrRegisterMonitor return OSAL_RETURN_OK
 * -# R_OSAL_MmngrRegisterMonitor return OSAL_RETURN_OK
 * -# R_OSAL_MmngrRegisterMonitor return OSAL_RETURN_OK
 * -# R_OSAL_MmngrAlloc return OSAL_RETURN_OK.<br>
 * Value of "buffer_obj" is not OSAL_MEMORY_BUFFER_HANDLE_INVALID
 * -# R_OSAL_MmngrGetCpuPtr return OSAL_RETURN_OK.<br>
 * Value of "cpu_ptr" is not NULL_PTR
 * -# The modification is successful
 * -# R_OSAL_MmngrFlush return OSAL_RETURN_OK
 * -# R_OSAL_MmngrGetHwAddr return OSAL_RETURN_OK
 * -# R_OSAL_MmngrInvalidate return OSAL_RETURN_OK
 * -# R_OSAL_MmngrDealloc return OSAL_RETURN_OK
 * -# R_OSAL_MmngrClose return OSAL_RETURN_OK
 * @subsection MmngrDealloc_TC_09_004_017_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrDealloc_TC_09_004_017
 */
// [MmngrDealloc_TC_09_004_017]
TEST(OsalMemoryApiTest, MmngrDealloc_TC_09_004_017)
{
    st_osal_mmngr_config_t config;
    osal_memory_manager_handle_t hndl_mmngr = OSAL_MEMORY_MANAGER_HANDLE_INVALID;
    osal_memory_buffer_handle_t  buffer_obj = OSAL_MEMORY_BUFFER_HANDLE_INVALID;
    size_t size;
    size_t alignment;
    void* cpu_ptr = NULL_PTR;
    uint8_t known_data = 29;
    uintptr_t hw_addr;
    size_t offset = 0;
    osal_axi_bus_id_t axi_id;

    MockMonitorHelper  allocationEventMonitor;
    auto NormalmonitorCb = cb_wrapper<decltype(
        &MonitorHelper::NormalmonitorCb)>::make_cb<&MonitorHelper::NormalmonitorCb>();

    // Test09_004_017
    // @brief: normal case: deallocate a buffer when the full buffer has been initialized / used
    EXPECT_CALL(allocationEventMonitor, NormalmonitorCb(OSAL_MMNGR_EVENT_ALLOCATE, _, _)).Times(1);
    EXPECT_CALL(allocationEventMonitor, NormalmonitorCb(OSAL_MMNGR_EVENT_DEALLOCATE, _, _)).Times(1);
    EXPECT_CALL(allocationEventMonitor, NormalmonitorCb(OSAL_MMNGR_EVENT_OVERFLOW_DETECTED, _, _)).Times(0);
    EXPECT_CALL(allocationEventMonitor, NormalmonitorCb(OSAL_MMNGR_EVENT_UNDERFLOW_DETECTED, _, _)).Times(0);
    EXPECT_EQ(R_OSAL_MmngrInitializeMmngrConfigSt(&config), OSAL_RETURN_OK) << "Test09_004_017 failed";
    EXPECT_EQ(R_OSAL_MmngrGetOsalMaxConfig(&config), OSAL_RETURN_OK) << "Test09_004_017 failed";
    config.mode = OSAL_MMNGR_ALLOC_MODE_STACK_PROT;
    EXPECT_EQ(R_OSAL_MmngrOpen(&config, &hndl_mmngr), OSAL_RETURN_OK) << "Test09_004_017 failed";
    EXPECT_NE(hndl_mmngr, OSAL_MEMORY_MANAGER_HANDLE_INVALID) << "Test09_004_017 failed";
    EXPECT_EQ(R_OSAL_MmngrRegisterMonitor(hndl_mmngr, OSAL_MMNGR_EVENT_ALLOCATE, NormalmonitorCb, &allocationEventMonitor), OSAL_RETURN_OK) << "Test09_004_017 failed";
    EXPECT_EQ(R_OSAL_MmngrRegisterMonitor(hndl_mmngr, OSAL_MMNGR_EVENT_DEALLOCATE, NormalmonitorCb, &allocationEventMonitor), OSAL_RETURN_OK) << "Test09_004_017 failed";
    EXPECT_EQ(R_OSAL_MmngrRegisterMonitor(hndl_mmngr, OSAL_MMNGR_EVENT_OVERFLOW_DETECTED, NormalmonitorCb, &allocationEventMonitor), OSAL_RETURN_OK) << "Test09_004_017 failed";
    EXPECT_EQ(R_OSAL_MmngrRegisterMonitor(hndl_mmngr, OSAL_MMNGR_EVENT_UNDERFLOW_DETECTED, NormalmonitorCb, &allocationEventMonitor), OSAL_RETURN_OK) << "Test09_004_017 failed";
    size = 86114304;
    alignment = 1 * 1024 * 1024; // 1MB
    EXPECT_EQ(R_OSAL_MmngrAlloc(hndl_mmngr, size, alignment, &buffer_obj), OSAL_RETURN_OK) << "Test09_004_017 failed";
    EXPECT_NE(buffer_obj, OSAL_MEMORY_BUFFER_HANDLE_INVALID) << "Test09_004_017 failed";
    EXPECT_EQ(R_OSAL_MmngrGetCpuPtr(buffer_obj, &cpu_ptr), OSAL_RETURN_OK) << "Test09_004_017 failed";
    EXPECT_NE(cpu_ptr,NULL_PTR) << "Test09_004_017 failed";
    (void)memset(cpu_ptr, known_data, size);
    size = 10 * 1024 * 1024; // 10MB
    EXPECT_EQ(R_OSAL_MmngrFlush(buffer_obj, offset , size), OSAL_RETURN_OK) << "Test09_004_017 failed";
    axi_id = OSAL_AXI_BUS_ID_IPA_MAIN_MEMORY + 1;
    EXPECT_EQ(R_OSAL_MmngrGetHwAddr(buffer_obj, axi_id, &hw_addr), OSAL_RETURN_OK) << "Test09_004_017 failed";
    EXPECT_EQ(R_OSAL_MmngrInvalidate(buffer_obj, offset, size), OSAL_RETURN_OK) << "Test09_004_017 failed";
    EXPECT_EQ(R_OSAL_MmngrDealloc(hndl_mmngr, buffer_obj), OSAL_RETURN_OK) << "Test09_004_017 failed";
    EXPECT_EQ(R_OSAL_MmngrClose(hndl_mmngr), OSAL_RETURN_OK) << "Test09_004_017 failed";
}
// [MmngrDealloc_TC_09_004_017]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrDealloc_TC_09_004_018 MemoryApiTest.MmngrDealloc_TC_09_004_018
 * @subsection MmngrDealloc_TC_09_004_018_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrDealloc_TC_09_004_018_tci Test Case ID
 * MmngrDealloc_S3_N_TC_09_004_018
 * @subsection MmngrDealloc_TC_09_004_018_rr Related Requirement(s)
 * \#276412
 * @subsection MmngrDealloc_TC_09_004_018_pp Prerequisite/Precondition
 * OSAL is initialized.
 * @subsection MmngrDealloc_TC_09_004_018_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrAlloc and R_OSAL_MmngrDealloc with normal condition in OSAL_MMNGR_ALLOC_MODE_STACK_PROT mode.
 * - Test09_004_018: confirm that allocated areas are released by Dealloc
 * @subsection MmngrDealloc_TC_09_004_018_tpts Test Procedure/Test Steps
 * -# Get the memory max configuration by using R_OSAL_MmngrGetOsalMaxConfig
 * -# Open memory manager by using R_OSAL_MmngrOpen with "config.memory_limit" is 11MB and OSAL_MMNGR_ALLOC_MODE_STACK_PROT mode
 * -# Use the "for" loop with the following steps:
 *      - Allocate 10 buffers, the size of each buffer is 1MB by using R_OSAL_MmngrAlloc
 *      - Deallocate 10 buffers above by using R_OSAL_MmngrDealloc
 * -# Call R_OSAL_MmngrClose to close the handle.
 * @subsection MmngrDealloc_TC_09_004_018_ereb Expected Result/Behavior
 * -# The return value of R_OSAL_MmngrGetOsalMaxConfig is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrOpen is OSAL_RETURN_OK.
 * -# In "for" loop, the expected return code is:
 *      - The return value of all R_OSAL_MmngrAlloc functions is OSAL_RETURN_OK
 *      - The return value of all R_OSAL_MmngrDealloc functions is OSAL_RETURN_OK
 * -# The return value of R_OSAL_MmngrClose is OSAL_RETURN_OK.
 * @subsection MmngrDealloc_TC_09_004_018_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrDealloc_TC_09_004_018
 */
// [MmngrDealloc_TC_09_004_018]
TEST_F(MemoryApiTest, MmngrDealloc_TC_09_004_018)
{
    osal_memory_buffer_handle_t  buffer_obj_array[10]
        = {OSAL_MEMORY_BUFFER_HANDLE_INVALID, OSAL_MEMORY_BUFFER_HANDLE_INVALID,
           OSAL_MEMORY_BUFFER_HANDLE_INVALID, OSAL_MEMORY_BUFFER_HANDLE_INVALID,
           OSAL_MEMORY_BUFFER_HANDLE_INVALID, OSAL_MEMORY_BUFFER_HANDLE_INVALID,
           OSAL_MEMORY_BUFFER_HANDLE_INVALID, OSAL_MEMORY_BUFFER_HANDLE_INVALID,
           OSAL_MEMORY_BUFFER_HANDLE_INVALID, OSAL_MEMORY_BUFFER_HANDLE_INVALID};

    // Test09_004_018
    // @brief: confirm that allocated areas are released by Dealloc
    EXPECT_EQ(R_OSAL_MmngrGetOsalMaxConfig(&config), OSAL_RETURN_OK) << "Test09_004_018 failed";
    memset(buffer_obj_array, 0, sizeof(buffer_obj_array));
    config.memory_limit = 11 * 1024 * 1024;
    config.mode = OSAL_MMNGR_ALLOC_MODE_STACK_PROT;
    EXPECT_EQ(R_OSAL_MmngrOpen(&config, &hndl_mmngr), OSAL_RETURN_OK) << "Test09_004_018 failed";
    size = 1 * 1024 * 1024;
    alignment = 64;
    for (int i = 0; i < 100; i++)
    {
        for (int j = 0; j < 10; j++)
        {
            EXPECT_EQ(R_OSAL_MmngrAlloc(hndl_mmngr, size, alignment, &buffer_obj_array[j]), OSAL_RETURN_OK) << "Test09_004_018 failed";
        }

        for (int k = 9; k >= 0; k--)
        {
            EXPECT_EQ(R_OSAL_MmngrDealloc(hndl_mmngr, buffer_obj_array[k]), OSAL_RETURN_OK) << "Test09_004_018 failed";
        }
    }

    EXPECT_EQ(R_OSAL_MmngrClose(hndl_mmngr), OSAL_RETURN_OK) << "Test09_004_018 failed";
}
// [MmngrDealloc_TC_09_004_018]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrDealloc_TC_09_004_019 MemoryApiTest.MmngrDealloc_TC_09_004_019
 * @subsection MmngrDealloc_TC_09_004_019_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrDealloc_TC_09_004_019_tci Test Case ID
 * MmngrDealloc_S3_N_TC_09_004_019
 * @subsection MmngrDealloc_TC_09_004_019_rr Related Requirement(s)
 * \#276402, \#276412
 * @subsection MmngrDealloc_TC_09_004_019_pp Prerequisite/Precondition
 * OSAL is initialized.
 * @subsection MmngrDealloc_TC_09_004_019_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrAlloc and R_OSAL_MmngrDealloc with normal condition in OSAL_MMNGR_ALLOC_MODE_FREE_LIST mode.
 * - pre-process: Open new memory manager
 * - Test09_004_019: dealloc with all valid parameters.
 * - post-process: close memory manager
 * @subsection MmngrDealloc_TC_09_004_019_tpts Test Procedure/Test Steps
 * -# Open the handle using R_OSAL_MmngrOpen with config:
 *      - config.max_allowed_allocations = 4
 *      - config.max_registered_monitors_cbs = 0
 *      - config.memory_limit = 10MB
 *      - config.mode = OSAL_MMNGR_ALLOC_MODE_FREE_LIST
 * -# Call R_OSAL_MmngrAlloc with "size" is 128 byte and the "alignment" is 128 byte.
 * -# Call R_OSAL_MmngrDealloc to deallocate the buffer.
 * -# Call R_OSAL_MmngrClose to close the handle.
 * @subsection MmngrDealloc_TC_09_004_019_ereb Expected Result/Behavior
 * -# The return of R_OSAL_MmngrOpen is OSAL_RETURN_OK.<br>
 * The return handle is not OSAL_MEMORY_MANAGER_HANDLE_INVALID.
 * -# The return value of R_OSAL_MmngrAlloc is OSAL_RETURN_OK.<br>
 * The return buffer is not OSAL_MEMORY_BUFFER_HANDLE_INVALID.
 * -# The return value of R_OSAL_MmngrDealloc is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrClose is OSAL_RETURN_OK.
 * @subsection MmngrDealloc_TC_09_004_019_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrDealloc_TC_09_004_019
 */
// [MmngrDealloc_TC_09_004_019]
TEST_F(MemoryApiTest, MmngrDealloc_TC_09_004_019)
{
    //pre-process: open new memory manager
    config.max_allowed_allocations     = 4;
    config.max_registered_monitors_cbs = 0;
    config.memory_limit = 10 * 1024 * 1024;
    config.mode = OSAL_MMNGR_ALLOC_MODE_FREE_LIST;
    EXPECT_EQ(R_OSAL_MmngrOpen(&config, &hndl_mmngr), OSAL_RETURN_OK) << "pre-process failed";
    EXPECT_NE(hndl_mmngr, OSAL_MEMORY_MANAGER_HANDLE_INVALID) << "pre-process failed";

     // Test09_004_019
    // @brief: normal case: dealloc with all valid argument
    size = 128;
    alignment = 128;
    EXPECT_EQ(R_OSAL_MmngrAlloc(hndl_mmngr, size, alignment, &buffer_obj), OSAL_RETURN_OK) << "Test09_004_019 failed";
    EXPECT_NE(buffer_obj, OSAL_MEMORY_BUFFER_HANDLE_INVALID) << "Test09_004_019 failed";
    EXPECT_EQ(R_OSAL_MmngrDealloc(hndl_mmngr, buffer_obj), OSAL_RETURN_OK) << "Test09_004_019 failed";

    //post-process: close memory manager
    EXPECT_EQ(R_OSAL_MmngrClose(hndl_mmngr), OSAL_RETURN_OK) << "post-process failed";
}
// [MmngrDealloc_TC_09_004_019]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrDealloc_TC_09_004_020 MemoryApiTest.MmngrDealloc_TC_09_004_020
 * @subsection MmngrDealloc_TC_09_004_020_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrDealloc_TC_09_004_020_tci Test Case ID
 * MmngrDealloc_S4_A_TC_09_004_020
 * @subsection MmngrDealloc_TC_09_004_020_rr Related Requirement(s)
 * \#276412
 * @subsection MmngrDealloc_TC_09_004_020_pp Prerequisite/Precondition
 * OSAL is initialized.
 * @subsection MmngrDealloc_TC_09_004_020_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrAlloc and R_OSAL_MmngrDealloc with abnormal condition in OSAL_MMNGR_ALLOC_MODE_FREE_LIST mode.
 * - pre-process: open new memory manager
 * - Test09_004_020: handle is not support deallocation.
 * - post-process: close memory manager
 * @subsection MmngrDealloc_TC_09_004_020_tpts Test Procedure/Test Steps
 * -# Open the handle using R_OSAL_MmngrOpen with config:
 *      - config.max_allowed_allocations = 4
 *      - config.max_registered_monitors_cbs = 0
 *      - config.memory_limit = 10MB
 *      - config.mode = OSAL_MMNGR_ALLOC_MODE_FREE_LIST
 * -# Allocate "tmp_hndl_mmngr" by using malloc function.
 * -# Call R_OSAL_MmngrAlloc with "size" is 64 byte and "alignment" is 64 byte.<br>
 * Store "hndl_mmngr->p_deallocate" to a temporary memory handle "tmp_hndl_mmngr->p_deallocate".<br>
 * Set "hndl_mmngr->p_deallocate" to NULL
 * -# Call R_OSAL_MmngrDealloc with the modified memory handle "hndl_mmngr".
 * -# Re-assign "tmp_hndl_mmngr->p_deallocate" to "hndl_mmngr->p_deallocate".<br>
 * Call R_OSAL_MmngrDealloc with this updated memory handle "hndl_mmngr".
 * -# Free "tmp_hndl_mmngr"
 * -# Call R_OSAL_MmngrClose to close the handle.
 * @subsection MmngrDealloc_TC_09_004_020_ereb Expected Result/Behavior
 * -# The return of R_OSAL_MmngrOpen is OSAL_RETURN_OK.<br>
 * The return handle is not OSAL_MEMORY_MANAGER_HANDLE_INVALID.
 * -# Memory allocation succeeded (Pointer to buffer != Nullpointer)
 * -# The return value of R_OSAL_MmngrAlloc is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrDealloc with the changed handle is OSAL_RETURN_HANDLE_NOT_SUPPORTED.
 * -# "hndl_mmngr->p_deallocate" is not NULL_PTR.<br>
 * The return value of R_OSAL_MmngrDealloc with the original handle is OSAL_RETURN_OK.
 * -# Memory freed successfully
 * -# The return value of R_OSAL_MmngrClose is OSAL_RETURN_OK.
 * @subsection MmngrDealloc_TC_09_004_020_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrDealloc_TC_09_004_020
 */
// [MmngrDealloc_TC_09_004_020]
TEST_F(MemoryApiTest, MmngrDealloc_TC_09_004_020)
{
    osal_memory_manager_handle_t tmp_hndl_mmngr;

    // pre-process: open memory manager
    config.max_allowed_allocations     = 4;
    config.max_registered_monitors_cbs = 0;
    config.memory_limit = 10 * 1024 * 1024;
    config.mode = OSAL_MMNGR_ALLOC_MODE_FREE_LIST;
    EXPECT_EQ(R_OSAL_MmngrOpen(&config, &hndl_mmngr), OSAL_RETURN_OK) << "pre-process failed";
    EXPECT_NE(hndl_mmngr, OSAL_MEMORY_MANAGER_HANDLE_INVALID);

    // Test09_004_020
    // @brief: abnormal case: hndl_mmngr not support deallocation
    size = 64;
    alignment = 64;
    tmp_hndl_mmngr = (osal_memory_manager_handle_t)malloc (sizeof(st_osal_memory_manager_obj));
    EXPECT_EQ(R_OSAL_MmngrAlloc(hndl_mmngr, size, alignment, &buffer_obj), OSAL_RETURN_OK) << "Test09_004_020 failed";
    tmp_hndl_mmngr->p_deallocate = hndl_mmngr->p_deallocate;
    hndl_mmngr->p_deallocate = NULL;
    EXPECT_EQ(R_OSAL_MmngrDealloc(hndl_mmngr,buffer_obj ), OSAL_RETURN_HANDLE_NOT_SUPPORTED) << "Test09_004_020 failed";
    hndl_mmngr->p_deallocate = tmp_hndl_mmngr->p_deallocate;
    EXPECT_NE(hndl_mmngr->p_deallocate, NULL_PTR) << "Test09_004_020 failed";
    EXPECT_EQ(R_OSAL_MmngrDealloc(hndl_mmngr,buffer_obj ), OSAL_RETURN_OK) << "Test09_004_020 failed";
    free(tmp_hndl_mmngr);

    //post-process: close memory manager
    EXPECT_EQ(R_OSAL_MmngrClose(hndl_mmngr), OSAL_RETURN_OK) << "post-process failed";
}
// [MmngrDealloc_TC_09_004_020]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrDealloc_TC_09_004_021 MemoryApiTest.MmngrDealloc_TC_09_004_021
 * @subsection MmngrDealloc_TC_09_004_021_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrDealloc_TC_09_004_021_tci Test Case ID
 * MmngrDealloc_S0_A_TC_09_004_021
 * @subsection MmngrDealloc_TC_09_004_021_rr Related Requirement(s)
 * \#276412
 * @subsection MmngrDealloc_TC_09_004_021_pp Prerequisite/Precondition
 * OSAL is initialized.
 * @subsection MmngrDealloc_TC_09_004_021_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrAlloc and R_OSAL_MmngrDealloc with abnormal condition in OSAL_MMNGR_ALLOC_MODE_FREE_LIST mode.
 * - pre-process: open new memory manager
 * - Test09_004_021: dealloc with buffer_obj is invalid (NULL).
 * - post-process: close memory manager
 * @subsection MmngrDealloc_TC_09_004_021_tpts Test Procedure/Test Steps
 * -# Open the handle using R_OSAL_MmngrOpen with config:
 *      - config.max_allowed_allocations = 4
 *      - config.max_registered_monitors_cbs = 0
 *      - config.memory_limit = 10MB
 *      - config.mode = OSAL_MMNGR_ALLOC_MODE_FREE_LIST
 * -# Call R_OSAL_MmngrDealloc with "buffer_obj" is NULL.
 * -# Call R_OSAL_MmngrClose to close the handle.
 * @subsection MmngrDealloc_TC_09_004_021_ereb Expected Result/Behavior
 * -# The return of R_OSAL_MmngrOpen is OSAL_RETURN_OK.<br>
 * The return handle is not OSAL_MEMORY_MANAGER_HANDLE_INVALID.
 * -# The return value of R_OSAL_MmngrDealloc is OSAL_RETURN_HANDLE.
 * -# The return value of R_OSAL_MmngrClose is OSAL_RETURN_OK.
 * @subsection MmngrDealloc_TC_09_004_021_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrDealloc_TC_09_004_021
 */
// [MmngrDealloc_TC_09_004_021]
TEST_F(MemoryApiTest, MmngrDealloc_TC_09_004_021)
{
    // pre-process: open memory manager
    config.max_allowed_allocations     = 4;
    config.max_registered_monitors_cbs = 0;
    config.memory_limit = 10 * 1024 * 1024;
    config.mode = OSAL_MMNGR_ALLOC_MODE_FREE_LIST;
    EXPECT_EQ(R_OSAL_MmngrOpen(&config, &hndl_mmngr), OSAL_RETURN_OK) << "pre-process failed";
    EXPECT_NE(hndl_mmngr, OSAL_MEMORY_MANAGER_HANDLE_INVALID);

    // Test09_004_021
    // @brief: abnormal case: dealloc with buffer_obj is invalid (NULL)
    EXPECT_EQ(R_OSAL_MmngrDealloc(hndl_mmngr, OSAL_MEMORY_BUFFER_HANDLE_INVALID), OSAL_RETURN_HANDLE) << "Test09_004_021 failed";

    //post-process: close memory manager
    EXPECT_EQ(R_OSAL_MmngrClose(hndl_mmngr), OSAL_RETURN_OK) << "post-process failed";
}
// [MmngrDealloc_TC_09_004_021]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrDealloc_TC_09_004_022 MemoryApiTest.MmngrDealloc_TC_09_004_022
 * @subsection MmngrDealloc_TC_09_004_022_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrDealloc_TC_09_004_022_tci Test Case ID
 * MmngrDealloc_S2_A_TC_09_004_022
 * @subsection MmngrDealloc_TC_09_004_022_rr Related Requirement(s)
 * \#276412
 * @subsection MmngrDealloc_TC_09_004_022_pp Prerequisite/Precondition
 * OSAL is initialized.
 * @subsection MmngrDealloc_TC_09_004_022_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrAlloc and R_OSAL_MmngrDealloc with abnormal condition in OSAL_MMNGR_ALLOC_MODE_FREE_LIST mode.
 * - Test09_004_022: dealloc with handle has already closed.
 * @subsection MmngrDealloc_TC_09_004_022_tpts Test Procedure/Test Steps
 * -# Open the handle using R_OSAL_MmngrOpen with config:
 *      - config.max_allowed_allocations = 4
 *      - config.max_registered_monitors_cbs = 0
 *      - config.memory_limit = 10MB
 *      - config.mode = OSAL_MMNGR_ALLOC_MODE_FREE_LIST
 * -# Call R_OSAL_MmngrClose to close the handle.
 * -# Allocate "buffer_obj" by using malloc function.
 * -# Call R_OSAL_MmngrDealloc with "buffer_obj".<br>
 * -# Free allocated "buffer_obj".
 * @subsection MmngrDealloc_TC_09_004_022_ereb Expected Result/Behavior
 * -# The return of R_OSAL_MmngrOpen is OSAL_RETURN_OK.<br>
 * The return handle is not OSAL_MEMORY_MANAGER_HANDLE_INVALID.
 * -# The return value of R_OSAL_MmngrClose is OSAL_RETURN_OK.
 * -# Memory allocation succeeded (Pointer to buffer != Nullpointer)
 * -# The return value of R_OSAL_MmngrDealloc is OSAL_RETURN_HANDLE_NOT_SUPPORTED.<br>
 * -# Allocated memory free succeeded.
 * @subsection MmngrDealloc_TC_09_004_022_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrDealloc_TC_09_004_022
 */
// [MmngrDealloc_TC_09_004_022]
TEST_F(MemoryApiTest, MmngrDealloc_TC_09_004_022)
{
    // Test09_004_022
    // @brief: abnormal case: dealloc with hndl_mmngr has already closed
    config.max_allowed_allocations     = 4;
    config.max_registered_monitors_cbs = 0;
    config.memory_limit = 10 * 1024 * 1024;
    config.mode = OSAL_MMNGR_ALLOC_MODE_FREE_LIST;
    EXPECT_EQ(R_OSAL_MmngrOpen(&config, &hndl_mmngr), OSAL_RETURN_OK) << "Test09_004_022 failed";
    EXPECT_NE(hndl_mmngr, OSAL_MEMORY_MANAGER_HANDLE_INVALID);
    EXPECT_EQ(R_OSAL_MmngrClose(hndl_mmngr), OSAL_RETURN_OK) << "Test09_004_022 failed";

    buffer_obj = (osal_memory_buffer_handle_t)malloc(sizeof(st_osal_memory_buffer_obj));
    EXPECT_NE(buffer_obj, NULL_PTR);
    EXPECT_EQ(R_OSAL_MmngrDealloc(hndl_mmngr, buffer_obj), OSAL_RETURN_HANDLE_NOT_SUPPORTED) << "Test09_004_022 failed";
    free(buffer_obj);
    buffer_obj = OSAL_MEMORY_BUFFER_HANDLE_INVALID;
}
// [MmngrDealloc_TC_09_004_022]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrDealloc_TC_09_004_023 MemoryApiTest.MmngrDealloc_TC_09_004_023
 * @subsection MmngrDealloc_TC_09_004_023_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrDealloc_TC_09_004_023_tci Test Case ID
 * MmngrDealloc_S3_N_TC_09_004_023
 * @subsection MmngrDealloc_TC_09_004_023_rr Related Requirement(s)
 * \#276412
 * @subsection MmngrDealloc_TC_09_004_023_pp Prerequisite/Precondition
 * OSAL is initialized.
 * @subsection MmngrDealloc_TC_09_004_023_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrAlloc and R_OSAL_MmngrDealloc with normal condition in OSAL_MMNGR_ALLOC_MODE_STACK mode.
 * - pre-process: Open new memory manager
 * - Test09_004_023: allocate 3 buffers with OSAL_MMNGR_ALLOC_MODE_STACK mode.<br>
 * Deallocate order is not same as allocation order first, then deallocate as same as the allocation order.
 * - post-process: close memory manager
 * @subsection MmngrDealloc_TC_09_004_023_tpts Test Procedure/Test Steps
 * -# Open the handle using R_OSAL_MmngrOpen with config:
 *      - config.max_allowed_allocations = 4
 *      - config.max_registered_monitors_cbs = 0
 *      - config.memory_limit = 10MB
 *      - config.mode = OSAL_MMNGR_ALLOC_MODE_STACK
 * -# Call R_OSAL_MmngrAlloc to allocate 1st buffer with size is 1KB and align is 64.
 * -# Call R_OSAL_MmngrAlloc to allocate 2nd buffer with size is 1KB and align is 64.
 * -# Call R_OSAL_MmngrAlloc to allocate 3rd buffer with size is 1KB and align is 64.
 * -# Call R_OSAL_MmngrDealloc to deallocate 2nd buffer with size is 1KB and align is 64.
 * -# Call R_OSAL_MmngrDealloc to deallocate 3rd buffer with size is 1KB and align is 64.
 * -# Call R_OSAL_MmngrDealloc to deallocate 2nd buffer with size is 1KB and align is 64.
 * -# Call R_OSAL_MmngrDealloc to deallocate 1st buffer with size is 1KB and align is 64.
 * -# Call R_OSAL_MmngrClose to close the handle.
 * @subsection MmngrDealloc_TC_09_004_023_ereb Expected Result/Behavior
 * -# The return of R_OSAL_MmngrOpen is OSAL_RETURN_OK.<br>
 * The return handle is not OSAL_MEMORY_MANAGER_HANDLE_INVALID.
 * -# The return value of the 1st R_OSAL_MmngrAlloc is OSAL_RETURN_OK.<br>
 * The return buffer is not OSAL_MEMORY_BUFFER_HANDLE_INVALID.
 * -# The return value of the 2nd R_OSAL_MmngrAlloc is OSAL_RETURN_OK.<br>
 * The return buffer is not OSAL_MEMORY_BUFFER_HANDLE_INVALID.
 * -# The return value of the 3rd R_OSAL_MmngrAlloc is OSAL_RETURN_OK.<br>
 * The return buffer is not OSAL_MEMORY_BUFFER_HANDLE_INVALID.
 * -# The return value when calling R_OSAL_MmngrDealloc to deallocate the 2nd buffer is OSAL_RETURN_MEM.
 * -# The return value of the R_OSAL_MmngrDealloc for 3rd buffer is OSAL_RETURN_OK.
 * -# The return value of the R_OSAL_MmngrDealloc for 2nd buffer is OSAL_RETURN_OK.
 * -# The return value of the R_OSAL_MmngrDealloc for 1st buffer is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrClose is OSAL_RETURN_OK.
 * @subsection MmngrDealloc_TC_09_004_023_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrDealloc_TC_09_004_023
 */
// [MmngrDealloc_TC_09_004_023]
TEST_F(MemoryApiTest, MmngrDealloc_TC_09_004_023)
{
    osal_memory_buffer_handle_t  buffer_obj_array1[5]
        = {OSAL_MEMORY_BUFFER_HANDLE_INVALID, OSAL_MEMORY_BUFFER_HANDLE_INVALID,
           OSAL_MEMORY_BUFFER_HANDLE_INVALID, OSAL_MEMORY_BUFFER_HANDLE_INVALID,
           OSAL_MEMORY_BUFFER_HANDLE_INVALID};

    //pre-process: open new memory manager
    config.max_allowed_allocations     = 4;
    config.max_registered_monitors_cbs = 0;
    config.memory_limit = 10 * 1024 * 1024;
    config.mode = OSAL_MMNGR_ALLOC_MODE_STACK;
    EXPECT_EQ(R_OSAL_MmngrOpen(&config, &hndl_mmngr), OSAL_RETURN_OK) << "pre-process failed";
    EXPECT_NE(hndl_mmngr, OSAL_MEMORY_MANAGER_HANDLE_INVALID) << "pre-process failed";

    // Test09_004_023
    // @brief: normal case: allocate 3 buffers with OSAL_MMNGR_ALLOC_MODE_STACK mode. Deallocate order is not same as allocation.
    size = 1024;
    alignment = 64;
    EXPECT_EQ(R_OSAL_MmngrAlloc(hndl_mmngr, size, alignment, buffer_obj_array1), OSAL_RETURN_OK) << "Test09_004_023 failed";
    EXPECT_NE(buffer_obj_array1[0], OSAL_MEMORY_BUFFER_HANDLE_INVALID) << "Test09_004_023 failed";
    EXPECT_EQ(R_OSAL_MmngrAlloc(hndl_mmngr, size, alignment, buffer_obj_array1 + 1), OSAL_RETURN_OK) << "Test09_004_023 failed";
    EXPECT_NE(buffer_obj_array1[1], OSAL_MEMORY_BUFFER_HANDLE_INVALID) << "Test09_004_023 failed";
    EXPECT_EQ(R_OSAL_MmngrAlloc(hndl_mmngr, size, alignment, buffer_obj_array1+ 2), OSAL_RETURN_OK) << "Test09_004_023 failed";
    EXPECT_NE(buffer_obj_array1[2], OSAL_MEMORY_BUFFER_HANDLE_INVALID) << "Test09_004_023 failed";
    EXPECT_EQ(R_OSAL_MmngrDealloc(hndl_mmngr, buffer_obj_array1[1]), OSAL_RETURN_MEM) << "Test09_004_023 failed";
    EXPECT_EQ(R_OSAL_MmngrDealloc(hndl_mmngr, buffer_obj_array1[2]), OSAL_RETURN_OK) << "Test09_004_023 failed";
    EXPECT_EQ(R_OSAL_MmngrDealloc(hndl_mmngr, buffer_obj_array1[1]), OSAL_RETURN_OK) << "Test09_004_023 failed";
    EXPECT_EQ(R_OSAL_MmngrDealloc(hndl_mmngr, buffer_obj_array1[0]), OSAL_RETURN_OK) << "Test09_004_023 failed";

    //post-process: close memory manager
    EXPECT_EQ(R_OSAL_MmngrClose(hndl_mmngr), OSAL_RETURN_OK) << "post-process failed";
}
// [MmngrDealloc_TC_09_004_023]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrDealloc_TC_09_004_024 MemoryApiTest.MmngrDealloc_TC_09_004_024
 * @subsection MmngrDealloc_TC_09_004_024_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrDealloc_TC_09_004_024_tci Test Case ID
 * MmngrDealloc_S2_N_TC_09_004_024
 * @subsection MmngrDealloc_TC_09_004_024_rr Related Requirement(s)
 * \#276412
 * @subsection MmngrDealloc_TC_09_004_024_pp Prerequisite/Precondition
 * OSAL is initialized.
 * @subsection MmngrDealloc_TC_09_004_024_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrAlloc and R_OSAL_MmngrDealloc with abnormal condition in OSAL_MMNGR_ALLOC_MODE_FREE_LIST mode.
 * - Test09_004_024: confirm the use case the buffer object is not managed by Memory Manager hndl_mngr
 * @subsection MmngrDealloc_TC_09_004_024_tpts Test Procedure/Test Steps
 * -# Open the handle using R_OSAL_MmngrOpen with config:
 *      - config.max_allowed_allocations = 4
 *      - config.max_registered_monitors_cbs = 0
 *      - config.memory_limit = 10MB
 *      - config.mode = OSAL_MMNGR_ALLOC_MODE_FREE_LIST
 * -# Call R_OSAL_MmngrAlloc to allocate buffer with size is 1KB and align is 64.
 * -# Allocate "tmp_hndl_mngr" by using malloc function.
 * -# Copy the memory pointed by hndl_mmngr into tmp_hndl_mmngr.
 * -# Call R_OSAL_MmngrClose to close the handle.
 * -# Call R_OSAL_MmngrDealloc to deallocate the buffer using tmp_hndl_mmngr.
 * -# Free "tmp_hndl_mmngr".
 * @subsection MmngrDealloc_TC_09_004_024_ereb Expected Result/Behavior
 * -# The return value of R_OSAL_MmngrOpen is OSAL_RETURN_OK.<br>
 * The return of handle is not OSAL_MEMORY_MANAGER_HANDLE_INVALID.
 * -# The return value of the R_OSAL_MmngrAlloc is OSAL_RETURN_OK
 * -# Memory allocation succeeded (Pointer to buffer != Nullpointer)
 * -# Copy memory into tmp_hndl_mmngr successfully.
 * -# The return value of R_OSAL_MmngrClose is OSAL_RETURN_OK.
 * -# The return value when calling R_OSAL_MmngrDealloc is OSAL_RETURN_STATE.
 * -# Allocated memory free succeeded.
 * @subsection MmngrDealloc_TC_09_004_024_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrDealloc_TC_09_004_024
 */
// [MmngrDealloc_TC_09_004_024]
TEST_F(MemoryApiTest, MmngrDealloc_TC_09_004_024)
{
    osal_memory_manager_handle_t tmp_hndl_mmngr;

    // Test09_004_024
    // @brief: abnormal case: the buffer object is not managed by Memory Manager hndl_mngr
    config.max_allowed_allocations     = 4;
    config.max_registered_monitors_cbs = 0;
    config.memory_limit = 10 * 1024 * 1024;
    config.mode = OSAL_MMNGR_ALLOC_MODE_FREE_LIST;
    EXPECT_EQ(R_OSAL_MmngrOpen(&config, &hndl_mmngr), OSAL_RETURN_OK) << "Test09_004_024 failed";
    EXPECT_NE(hndl_mmngr, OSAL_MEMORY_MANAGER_HANDLE_INVALID) << "Test09_004_024 failed";

    size = 1024;
    alignment = 64;
    EXPECT_EQ(R_OSAL_MmngrAlloc(hndl_mmngr, size, alignment, &buffer_obj), OSAL_RETURN_OK) << "Test09_004_024 failed";
    tmp_hndl_mmngr = (osal_memory_manager_handle_t)malloc (sizeof(st_osal_memory_manager_obj));
    EXPECT_NE(tmp_hndl_mmngr, NULL_PTR);
    memcpy(tmp_hndl_mmngr, hndl_mmngr, sizeof(st_osal_memory_manager_obj));
    EXPECT_EQ(R_OSAL_MmngrClose(hndl_mmngr), OSAL_RETURN_OK) << "Test09_004_024 failed";
    EXPECT_EQ(R_OSAL_MmngrDealloc(tmp_hndl_mmngr, buffer_obj), OSAL_RETURN_STATE) << "Test09_004_024 failed";
    free(tmp_hndl_mmngr);
}
// [MmngrDealloc_TC_09_004_024]

/**
 * @page MM_API Memory API Test
 * @section OsalMemoryApiTest_MmngrDealloc_TC_09_004_025 OsalMemoryApiTest.MmngrDealloc_TC_09_004_025
 * @subsection MmngrDealloc_TC_09_004_025_tsi Test Suite ID
 * OsalMemoryApiTest
 * @subsection MmngrDealloc_TC_09_004_025_tci Test Case ID
 * MmngrDealloc_S3_N_TC_09_004_025
 * @subsection MmngrDealloc_TC_09_004_025_rr Related Requirement(s)
 * \#276412
 * @subsection MmngrDealloc_TC_09_004_025_pp Prerequisite/Precondition
 * R_OSAL_Initialize is already called
 * @subsection MmngrDealloc_TC_09_004_025_tcs Test Case Summary
 * This test shall verify the functionality of the Memory APIs with the buffer which size is max in OSAL_MMNGR_ALLOC_MODE_FREE_LIST mode.
 * - Test09_004_025: Allocate and use the buffer which size is max.
 * @subsection MmngrDealloc_TC_09_004_025_tpts Test Procedure/Test Steps
 * -# Init the memory configuration object by using R_OSAL_MmngrInitializeMmngrConfigSt
 * -# Get the maximum memory configuration by using R_OSAL_MmngrGetOsalMaxConfig
 * -# Open new memory manager by using R_OSAL_MmngrOpen
 * -# Register callback function for event OSAL_MMNGR_EVENT_ALLOCATE by using R_OSAL_MmngrRegisterMonitor
 * -# Register callback function for event OSAL_MMNGR_EVENT_DEALLOCATE by using R_OSAL_MmngrRegisterMonitor
 * -# Register callback function for event OSAL_MMNGR_EVENT_OVERFLOW_DETECTED by using R_OSAL_MmngrRegisterMonitor
 * -# Register callback function for event OSAL_MMNGR_EVENT_UNDERFLOW_DETECTED by using R_OSAL_MmngrRegisterMonitor
 * -# Allocate memory buffer which size is 86114304 and alignment is 1MB by using R_OSAL_MmngrAlloc
 * -# Get the pointer of allocated buffer by using R_OSAL_MmngrGetCpuPtr
 * -# Modify the data of allocated buffer by known value
 * -# Call R_OSAL_MmngrFlush with offset is 0 and size is 10MB
 * -# Get hardware address by using R_OSAL_MmngrGetHwAddr
 * -# Call R_OSAL_MmngrInvalidate with offset is 0 and size is 10MB
 * -# Deallocate allocated buffer by using R_OSAL_MmngrDealloc
 * -# Close opened memory manager by using R_OSAL_MmngrClose
 * @subsection MmngrDealloc_TC_09_004_025_ereb Expected Result/Behavior
 * -# R_OSAL_MmngrInitializeMmngrConfigSt return OSAL_RETURN_OK
 * -# R_OSAL_MmngrGetOsalMaxConfig return OSAL_RETURN_OK
 * -# R_OSAL_MmngrOpen return OSAL_RETURN_OK.<br>
 * Value of "hndl_mmngr" is not OSAL_MEMORY_MANAGER_HANDLE_INVALID
 * -# R_OSAL_MmngrRegisterMonitor return OSAL_RETURN_OK
 * -# R_OSAL_MmngrRegisterMonitor return OSAL_RETURN_OK
 * -# R_OSAL_MmngrRegisterMonitor return OSAL_RETURN_OK
 * -# R_OSAL_MmngrRegisterMonitor return OSAL_RETURN_OK
 * -# R_OSAL_MmngrAlloc return OSAL_RETURN_OK.<br>
 * Value of "buffer_obj" is not OSAL_MEMORY_BUFFER_HANDLE_INVALID
 * -# R_OSAL_MmngrGetCpuPtr return OSAL_RETURN_OK.<br>
 * Value of "cpu_ptr" is not NULL_PTR
 * -# The modification is successful
 * -# R_OSAL_MmngrFlush return OSAL_RETURN_OK
 * -# R_OSAL_MmngrGetHwAddr return OSAL_RETURN_OK
 * -# R_OSAL_MmngrInvalidate return OSAL_RETURN_OK
 * -# R_OSAL_MmngrDealloc return OSAL_RETURN_OK
 * -# R_OSAL_MmngrClose return OSAL_RETURN_OK
 * @subsection MmngrDealloc_TC_09_004_025_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrDealloc_TC_09_004_025
 */
// [MmngrDealloc_TC_09_004_025]
TEST(OsalMemoryApiTest, MmngrDealloc_TC_09_004_025)
{
    st_osal_mmngr_config_t config;
    osal_memory_manager_handle_t hndl_mmngr = OSAL_MEMORY_MANAGER_HANDLE_INVALID;
    osal_memory_buffer_handle_t  buffer_obj = OSAL_MEMORY_BUFFER_HANDLE_INVALID;
    size_t size;
    size_t alignment;
    void* cpu_ptr = NULL_PTR;
    uint8_t known_data = 29;
    uintptr_t hw_addr;
    size_t offset = 0;
    osal_axi_bus_id_t axi_id;

    MockMonitorHelper  allocationEventMonitor;
    auto NormalmonitorCb = cb_wrapper<decltype(
        &MonitorHelper::NormalmonitorCb)>::make_cb<&MonitorHelper::NormalmonitorCb>();

    // Test09_004_025
    // @brief: normal case: deallocate a buffer when the full buffer has been initialized / used
    EXPECT_CALL(allocationEventMonitor, NormalmonitorCb(OSAL_MMNGR_EVENT_ALLOCATE, _, _)).Times(1);
    EXPECT_CALL(allocationEventMonitor, NormalmonitorCb(OSAL_MMNGR_EVENT_DEALLOCATE, _, _)).Times(1);
    EXPECT_CALL(allocationEventMonitor, NormalmonitorCb(OSAL_MMNGR_EVENT_OVERFLOW_DETECTED, _, _)).Times(0);
    EXPECT_CALL(allocationEventMonitor, NormalmonitorCb(OSAL_MMNGR_EVENT_UNDERFLOW_DETECTED, _, _)).Times(0);
    EXPECT_EQ(R_OSAL_MmngrInitializeMmngrConfigSt(&config), OSAL_RETURN_OK) << "Test09_004_025 failed";
    EXPECT_EQ(R_OSAL_MmngrGetOsalMaxConfig(&config), OSAL_RETURN_OK) << "Test09_004_025 failed";
    config.mode = OSAL_MMNGR_ALLOC_MODE_FREE_LIST;
    EXPECT_EQ(R_OSAL_MmngrOpen(&config, &hndl_mmngr), OSAL_RETURN_OK) << "Test09_004_025 failed";
    EXPECT_NE(hndl_mmngr, OSAL_MEMORY_MANAGER_HANDLE_INVALID) << "Test09_004_025 failed";
    EXPECT_EQ(R_OSAL_MmngrRegisterMonitor(hndl_mmngr, OSAL_MMNGR_EVENT_ALLOCATE, NormalmonitorCb, &allocationEventMonitor), OSAL_RETURN_OK) << "Test09_004_025 failed";
    EXPECT_EQ(R_OSAL_MmngrRegisterMonitor(hndl_mmngr, OSAL_MMNGR_EVENT_DEALLOCATE, NormalmonitorCb, &allocationEventMonitor), OSAL_RETURN_OK) << "Test09_004_025 failed";
    EXPECT_EQ(R_OSAL_MmngrRegisterMonitor(hndl_mmngr, OSAL_MMNGR_EVENT_OVERFLOW_DETECTED, NormalmonitorCb, &allocationEventMonitor), OSAL_RETURN_OK) << "Test09_004_025 failed";
    EXPECT_EQ(R_OSAL_MmngrRegisterMonitor(hndl_mmngr, OSAL_MMNGR_EVENT_UNDERFLOW_DETECTED, NormalmonitorCb, &allocationEventMonitor), OSAL_RETURN_OK) << "Test09_004_025 failed";
    size = 86114304;
    alignment = 1 * 1024 * 1024; // 1MB
    EXPECT_EQ(R_OSAL_MmngrAlloc(hndl_mmngr, size, alignment, &buffer_obj), OSAL_RETURN_OK) << "Test09_004_025 failed";
    EXPECT_NE(buffer_obj, OSAL_MEMORY_BUFFER_HANDLE_INVALID) << "Test09_004_025 failed";
    EXPECT_EQ(R_OSAL_MmngrGetCpuPtr(buffer_obj, &cpu_ptr), OSAL_RETURN_OK) << "Test09_004_025 failed";
    EXPECT_NE(cpu_ptr,NULL_PTR) << "Test09_004_025 failed";
    (void)memset(cpu_ptr, known_data, size);
    size = 10 * 1024 * 1024; // 10MB
    EXPECT_EQ(R_OSAL_MmngrFlush(buffer_obj, offset , size), OSAL_RETURN_OK) << "Test09_004_025 failed";
    axi_id = OSAL_AXI_BUS_ID_IPA_MAIN_MEMORY + 1;
    EXPECT_EQ(R_OSAL_MmngrGetHwAddr(buffer_obj, axi_id, &hw_addr), OSAL_RETURN_OK) << "Test09_004_025 failed";
    EXPECT_EQ(R_OSAL_MmngrInvalidate(buffer_obj, offset, size), OSAL_RETURN_OK) << "Test09_004_025 failed";
    EXPECT_EQ(R_OSAL_MmngrDealloc(hndl_mmngr, buffer_obj), OSAL_RETURN_OK) << "Test09_004_025 failed";
    EXPECT_EQ(R_OSAL_MmngrClose(hndl_mmngr), OSAL_RETURN_OK) << "Test09_004_025 failed";
}
// [MmngrDealloc_TC_09_004_025]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrDealloc_TC_09_004_026 MemoryApiTest.MmngrDealloc_TC_09_004_026
 * @subsection MmngrDealloc_TC_09_004_026_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrDealloc_TC_09_004_026_tci Test Case ID
 * MmngrDealloc_S3_N_TC_09_004_026
 * @subsection MmngrDealloc_TC_09_004_026_rr Related Requirement(s)
 * \#276412
 * @subsection MmngrDealloc_TC_09_004_026_pp Prerequisite/Precondition
 * OSAL is initialized.
 * @subsection MmngrDealloc_TC_09_004_026_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrAlloc and R_OSAL_MmngrDealloc with normal condition in OSAL_MMNGR_ALLOC_MODE_STACK mode.
 * - pre-process: Open new memory manager
 * - Test09_004_026: confirm that allocated areas are released by Dealloc
 * - post-process: close memory manager
 * @subsection MmngrDealloc_TC_09_004_026_tpts Test Procedure/Test Steps
 * -# Get the memory max configuration by using R_OSAL_MmngrGetOsalMaxConfig
 * -# Open memory manager by using R_OSAL_MmngrOpen with "config.memory_limit" is 11MB and OSAL_MMNGR_ALLOC_MODE_STACK mode
 * -# Use the "for" loop with the following steps:
 *      - Allocate 10 buffers, the size of each buffer is 1MB by using R_OSAL_MmngrAlloc
 *      - Deallocate 10 buffers above by using R_OSAL_MmngrDealloc
 * -# Call R_OSAL_MmngrClose to close the handle.
 * @subsection MmngrDealloc_TC_09_004_026_ereb Expected Result/Behavior
 * -# The return value of R_OSAL_MmngrGetOsalMaxConfig is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrOpen is OSAL_RETURN_OK.
 * -# In "for" loop, the expected return code is:
 *      - The return value of all R_OSAL_MmngrAlloc functions is OSAL_RETURN_OK
 *      - The return value of all R_OSAL_MmngrDealloc functions is OSAL_RETURN_OK
 * -# The return value of R_OSAL_MmngrClose is OSAL_RETURN_OK.
 * @subsection MmngrDealloc_TC_09_004_026_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrDealloc_TC_09_004_026
 */
// [MmngrDealloc_TC_09_004_026]
TEST_F(MemoryApiTest, MmngrDealloc_TC_09_004_026)
{
    osal_memory_buffer_handle_t  buffer_obj_array[10]
        = {OSAL_MEMORY_BUFFER_HANDLE_INVALID, OSAL_MEMORY_BUFFER_HANDLE_INVALID,
           OSAL_MEMORY_BUFFER_HANDLE_INVALID, OSAL_MEMORY_BUFFER_HANDLE_INVALID,
           OSAL_MEMORY_BUFFER_HANDLE_INVALID, OSAL_MEMORY_BUFFER_HANDLE_INVALID,
           OSAL_MEMORY_BUFFER_HANDLE_INVALID, OSAL_MEMORY_BUFFER_HANDLE_INVALID,
           OSAL_MEMORY_BUFFER_HANDLE_INVALID, OSAL_MEMORY_BUFFER_HANDLE_INVALID};

    //pre-process: open new memory managers
    EXPECT_EQ(R_OSAL_MmngrGetOsalMaxConfig(&config), OSAL_RETURN_OK) << "pre-process failed";
    memset(buffer_obj_array, 0, sizeof(buffer_obj_array));
    config.memory_limit = 11 * 1024 * 1024;
    config.mode = OSAL_MMNGR_ALLOC_MODE_STACK;
    EXPECT_EQ(R_OSAL_MmngrOpen(&config, &hndl_mmngr), OSAL_RETURN_OK) << "pre-process failed";

    // Test09_004_026
    // @brief: confirm that allocated areas are released by Dealloc
    size = 1 * 1024 * 1024;
    alignment = 64;
    for (int i = 0; i < 100; i++)
    {
        for (int j = 0; j < 10; j++)
        {
            EXPECT_EQ(R_OSAL_MmngrAlloc(hndl_mmngr, size, alignment, &buffer_obj_array[j]), OSAL_RETURN_OK) << "Test09_004_026 failed";
        }

        for (int k = 9; k >= 0; k--)
        {
            EXPECT_EQ(R_OSAL_MmngrDealloc(hndl_mmngr, buffer_obj_array[k]), OSAL_RETURN_OK) << "Test09_004_026 failed";
        }
    }

    //post-process: close memory manager
    EXPECT_EQ(R_OSAL_MmngrClose(hndl_mmngr), OSAL_RETURN_OK) << "post-process failed";
}
// [MmngrDealloc_TC_09_004_026]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrDealloc_TC_09_004_027 MemoryApiTest.MmngrDealloc_TC_09_004_027
 * @subsection MmngrDealloc_TC_09_004_027_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrDealloc_TC_09_004_027_tci Test Case ID
 * MmngrDealloc_S3_N_TC_09_004_027
 * @subsection MmngrDealloc_TC_09_004_027_rr Related Requirement(s)
 * \#276402, \#276412
 * @subsection MmngrDealloc_TC_09_004_027_pp Prerequisite/Precondition
 * OSAL is initialized.
 * @subsection MmngrDealloc_TC_09_004_027_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrAlloc and R_OSAL_MmngrDealloc with normal condition in OSAL_MMNGR_ALLOC_MODE_FREE_LIST_PROT mode.
 * - pre-process: Open new memory manager
 * - Test09_004_027: dealloc with all valid parameters.
 * - post-process: close memory manager
 * @subsection MmngrDealloc_TC_09_004_027_tpts Test Procedure/Test Steps
 * -# Open the handle using R_OSAL_MmngrOpen with config:
 *      - config.max_allowed_allocations = 4
 *      - config.max_registered_monitors_cbs = 0
 *      - config.memory_limit = 10MB
 *      - config.mode = OSAL_MMNGR_ALLOC_MODE_FREE_LIST_PROT
 * -# Call R_OSAL_MmngrAlloc with "size" is 128 byte and the "alignment" is 128 byte.
 * -# Call R_OSAL_MmngrDealloc to deallocate the buffer.
 * -# Call R_OSAL_MmngrClose to close the handle.
 * @subsection MmngrDealloc_TC_09_004_027_ereb Expected Result/Behavior
 * -# The return of R_OSAL_MmngrOpen is OSAL_RETURN_OK.<br>
 * The return handle is not OSAL_MEMORY_MANAGER_HANDLE_INVALID.
 * -# The return value of R_OSAL_MmngrAlloc is OSAL_RETURN_OK.<br>
 * The return buffer is not OSAL_MEMORY_BUFFER_HANDLE_INVALID.
 * -# The return value of R_OSAL_MmngrDealloc is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrClose is OSAL_RETURN_OK.
 * @subsection MmngrDealloc_TC_09_004_027_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrDealloc_TC_09_004_027
 */
// [MmngrDealloc_TC_09_004_027]
TEST_F(MemoryApiTest, MmngrDealloc_TC_09_004_027)
{
    //pre-process: open new memory manager
    config.max_allowed_allocations     = 4;
    config.max_registered_monitors_cbs = 0;
    config.memory_limit = 10 * 1024 * 1024;
    config.mode = OSAL_MMNGR_ALLOC_MODE_FREE_LIST_PROT;
    EXPECT_EQ(R_OSAL_MmngrOpen(&config, &hndl_mmngr), OSAL_RETURN_OK) << "pre-process failed";
    EXPECT_NE(hndl_mmngr, OSAL_MEMORY_MANAGER_HANDLE_INVALID) << "pre-process failed";

    // @brief: normal case: dealloc with all valid argument
    // Test09_004_027
    size = 128;
    alignment = 128;
    EXPECT_EQ(R_OSAL_MmngrAlloc(hndl_mmngr, size, alignment, &buffer_obj), OSAL_RETURN_OK) << "Test09_004_027 failed";
    EXPECT_NE(buffer_obj, OSAL_MEMORY_BUFFER_HANDLE_INVALID) << "Test09_004_027 failed";
    EXPECT_EQ(R_OSAL_MmngrDealloc(hndl_mmngr, buffer_obj), OSAL_RETURN_OK) << "Test09_004_027 failed";

    //post-process: close memory manager
    EXPECT_EQ(R_OSAL_MmngrClose(hndl_mmngr), OSAL_RETURN_OK) << "post-process failed";
}
// [MmngrDealloc_TC_09_004_027]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrDealloc_TC_09_004_028 MemoryApiTest.MmngrDealloc_TC_09_004_028
 * @subsection MmngrDealloc_TC_09_004_028_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrDealloc_TC_09_004_028_tci Test Case ID
 * MmngrDealloc_S4_A_TC_09_004_028
 * @subsection MmngrDealloc_TC_09_004_028_rr Related Requirement(s)
 * \#276412
 * @subsection MmngrDealloc_TC_09_004_028_pp Prerequisite/Precondition
 * OSAL is initialized.
 * @subsection MmngrDealloc_TC_09_004_028_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrAlloc and R_OSAL_MmngrDealloc with abnormal condition in OSAL_MMNGR_ALLOC_MODE_FREE_LIST_PROT mode.
 * - pre-process: open new memory manager
 * - Test09_004_028: handle is not support deallocation.
 * - post-process: close memory manager
 * @subsection MmngrDealloc_TC_09_004_028_tpts Test Procedure/Test Steps
 * -# Open the handle using R_OSAL_MmngrOpen with config:
 *      - config.max_allowed_allocations = 4
 *      - config.max_registered_monitors_cbs = 0
 *      - config.memory_limit = 10MB
 *      - config.mode = OSAL_MMNGR_ALLOC_MODE_FREE_LIST_PROT
 * -# Allocate "tmp_hndl_mmngr" by using malloc function.
 * -# Call R_OSAL_MmngrAlloc with "size" is 64 byte and "alignment" is 64 byte.<br>
 * Store "hndl_mmngr->p_deallocate" to a temporary memory handle "tmp_hndl_mmngr->p_deallocate".<br>
 * Set "hndl_mmngr->p_deallocate" to NULL
 * -# Call R_OSAL_MmngrDealloc with the modified memory handle "hndl_mmngr".
 * -# Re-assign "tmp_hndl_mmngr->p_deallocate" to "hndl_mmngr->p_deallocate".<br>
 * Call R_OSAL_MmngrDealloc with this updated memory handle "hndl_mmngr".
 * -# Free "tmp_hndl_mmngr"
 * -# Call R_OSAL_MmngrClose to close the handle.
 * @subsection MmngrDealloc_TC_09_004_028_ereb Expected Result/Behavior
 * -# The return of R_OSAL_MmngrOpen is OSAL_RETURN_OK.<br>
 * The return handle is not OSAL_MEMORY_MANAGER_HANDLE_INVALID.
 * -# Memory allocation succeeded (Pointer to buffer != Nullpointer)
 * -# The return value of R_OSAL_MmngrAlloc is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrDealloc with the changed handle is OSAL_RETURN_HANDLE_NOT_SUPPORTED.
 * -# "hndl_mmngr->p_deallocate" is not NULL_PTR.<br>
 * The return value of R_OSAL_MmngrDealloc with the original handle is OSAL_RETURN_OK.
 * -# Memory freed successfully
 * -# The return value of R_OSAL_MmngrClose is OSAL_RETURN_OK.
 * @subsection MmngrDealloc_TC_09_004_028_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrDealloc_TC_09_004_028
 */
// [MmngrDealloc_TC_09_004_028]
TEST_F(MemoryApiTest, MmngrDealloc_TC_09_004_028)
{
    osal_memory_manager_handle_t tmp_hndl_mmngr;

    // pre-process: open memory manager
    config.max_allowed_allocations     = 4;
    config.max_registered_monitors_cbs = 0;
    config.memory_limit = 10 * 1024 * 1024;
    config.mode = OSAL_MMNGR_ALLOC_MODE_FREE_LIST_PROT;
    EXPECT_EQ(R_OSAL_MmngrOpen(&config, &hndl_mmngr), OSAL_RETURN_OK) << "pre-process failed";
    EXPECT_NE(hndl_mmngr, OSAL_MEMORY_MANAGER_HANDLE_INVALID);

    // Test09_004_028
    // @brief: abnormal case: hndl_mmngr not support deallocation
    size = 64;
    alignment = 64;
    tmp_hndl_mmngr = (osal_memory_manager_handle_t)malloc (sizeof(st_osal_memory_manager_obj));
    EXPECT_EQ(R_OSAL_MmngrAlloc(hndl_mmngr, size, alignment, &buffer_obj), OSAL_RETURN_OK) << "Test09_004_028 failed";
    tmp_hndl_mmngr->p_deallocate = hndl_mmngr->p_deallocate;
    hndl_mmngr->p_deallocate = NULL;
    EXPECT_EQ(R_OSAL_MmngrDealloc(hndl_mmngr,buffer_obj ), OSAL_RETURN_HANDLE_NOT_SUPPORTED) << "Test09_004_028 failed";
    hndl_mmngr->p_deallocate = tmp_hndl_mmngr->p_deallocate;
    EXPECT_NE(hndl_mmngr->p_deallocate, NULL_PTR) << "Test09_004_028 failed";
    EXPECT_EQ(R_OSAL_MmngrDealloc(hndl_mmngr,buffer_obj ), OSAL_RETURN_OK) << "Test09_004_028 failed";
    free(tmp_hndl_mmngr);

    //post-process: close memory manager
    EXPECT_EQ(R_OSAL_MmngrClose(hndl_mmngr), OSAL_RETURN_OK) << "post-process failed";
}
// [MmngrDealloc_TC_09_004_028]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrDealloc_TC_09_004_029 MemoryApiTest.MmngrDealloc_TC_09_004_029
 * @subsection MmngrDealloc_TC_09_004_029_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrDealloc_TC_09_004_029_tci Test Case ID
 * MmngrDealloc_S0_A_TC_09_004_029
 * @subsection MmngrDealloc_TC_09_004_029_rr Related Requirement(s)
 * \#276412
 * @subsection MmngrDealloc_TC_09_004_029_pp Prerequisite/Precondition
 * OSAL is initialized.
 * @subsection MmngrDealloc_TC_09_004_029_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrAlloc and R_OSAL_MmngrDealloc with abnormal condition in OSAL_MMNGR_ALLOC_MODE_FREE_LIST_PROT mode.
 * - pre-process: open new memory manager
 * - Test09_004_029: dealloc with buffer_obj is invalid (NULL).
 * - post-process: close memory manager
 * @subsection MmngrDealloc_TC_09_004_029_tpts Test Procedure/Test Steps
 * -# Open the handle using R_OSAL_MmngrOpen with config:
 *      - config.max_allowed_allocations = 4
 *      - config.max_registered_monitors_cbs = 0
 *      - config.memory_limit = 10MB
 *      - config.mode = OSAL_MMNGR_ALLOC_MODE_FREE_LIST_PROT
 * -# Call R_OSAL_MmngrDealloc with "buffer_obj" is NULL.
 * -# Call R_OSAL_MmngrClose to close the handle.
 * @subsection MmngrDealloc_TC_09_004_029_ereb Expected Result/Behavior
 * -# The return of R_OSAL_MmngrOpen is OSAL_RETURN_OK.<br>
 * The return handle is not OSAL_MEMORY_MANAGER_HANDLE_INVALID.
 * -# The return value of R_OSAL_MmngrDealloc is OSAL_RETURN_HANDLE.
 * -# The return value of R_OSAL_MmngrClose is OSAL_RETURN_OK.
 * @subsection MmngrDealloc_TC_09_004_029_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrDealloc_TC_09_004_029
 */
// [MmngrDealloc_TC_09_004_029]
TEST_F(MemoryApiTest, MmngrDealloc_TC_09_004_029)
{
    // pre-process: open memory manager
    config.max_allowed_allocations     = 4;
    config.max_registered_monitors_cbs = 0;
    config.memory_limit = 10 * 1024 * 1024;
    config.mode = OSAL_MMNGR_ALLOC_MODE_FREE_LIST_PROT;
    EXPECT_EQ(R_OSAL_MmngrOpen(&config, &hndl_mmngr), OSAL_RETURN_OK) << "pre-process failed";
    EXPECT_NE(hndl_mmngr, OSAL_MEMORY_MANAGER_HANDLE_INVALID);

    // Test09_004_029
    // @brief: abnormal case: alloc/dealloc with buffer_obj is invalid (NULL)
    EXPECT_EQ(R_OSAL_MmngrDealloc(hndl_mmngr, OSAL_MEMORY_BUFFER_HANDLE_INVALID), OSAL_RETURN_HANDLE) << "Test09_004_029 failed";

    //post-process: close memory manager
    EXPECT_EQ(R_OSAL_MmngrClose(hndl_mmngr), OSAL_RETURN_OK) << "post-process failed";
}
// [MmngrDealloc_TC_09_004_029]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrDealloc_TC_09_004_030 MemoryApiTest.MmngrDealloc_TC_09_004_030
 * @subsection MmngrDealloc_TC_09_004_030_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrDealloc_TC_09_004_030_tci Test Case ID
 * MmngrDealloc_S2_A_TC_09_004_030
 * @subsection MmngrDealloc_TC_09_004_030_rr Related Requirement(s)
 * \#276412
 * @subsection MmngrDealloc_TC_09_004_030_pp Prerequisite/Precondition
 * OSAL is initialized.
 * @subsection MmngrDealloc_TC_09_004_030_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrAlloc and R_OSAL_MmngrDealloc with abnormal condition in OSAL_MMNGR_ALLOC_MODE_FREE_LIST_PROT mode.
 * - Test09_004_030: dealloc with handle has already closed.
 * @subsection MmngrDealloc_TC_09_004_030_tpts Test Procedure/Test Steps
 * -# Open the handle using R_OSAL_MmngrOpen with config:
 *      - config.max_allowed_allocations = 4
 *      - config.max_registered_monitors_cbs = 0
 *      - config.memory_limit = 10MB
 *      - config.mode = OSAL_MMNGR_ALLOC_MODE_FREE_LIST_PROT
 * -# Call R_OSAL_MmngrClose to close the handle.
 * -# Allocate "buffer_obj" by using malloc function.
 * -# Call R_OSAL_MmngrDealloc with "buffer_obj".<br>
 * -# Free allocated "buffer_obj".
 * @subsection MmngrDealloc_TC_09_004_030_ereb Expected Result/Behavior
 * -# The return of R_OSAL_MmngrOpen is OSAL_RETURN_OK.<br>
 * The return handle is not OSAL_MEMORY_MANAGER_HANDLE_INVALID.
 * -# The return value of R_OSAL_MmngrClose is OSAL_RETURN_OK.
 * -# Memory allocation succeeded (Pointer to buffer != Nullpointer)
 * -# The return value of R_OSAL_MmngrDealloc is OSAL_RETURN_HANDLE_NOT_SUPPORTED.
 * -# Allocated memory free succeeded.
 * @subsection MmngrDealloc_TC_09_004_030_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrDealloc_TC_09_004_030
 */
// [MmngrDealloc_TC_09_004_030]
TEST_F(MemoryApiTest, MmngrDealloc_TC_09_004_030)
{
    // Test09_004_030
    // @brief: abnormal case: alloc/dealloc with hndl_mmngr has already closed
    config.max_allowed_allocations     = 4;
    config.max_registered_monitors_cbs = 0;
    config.memory_limit = 10 * 1024 * 1024;
    config.mode = OSAL_MMNGR_ALLOC_MODE_FREE_LIST_PROT;
    EXPECT_EQ(R_OSAL_MmngrOpen(&config, &hndl_mmngr), OSAL_RETURN_OK) << "Test09_004_030 failed";
    EXPECT_NE(hndl_mmngr, OSAL_MEMORY_MANAGER_HANDLE_INVALID);
    EXPECT_EQ(R_OSAL_MmngrClose(hndl_mmngr), OSAL_RETURN_OK) << "Test09_004_030 failed";

    buffer_obj = (osal_memory_buffer_handle_t)malloc(sizeof(st_osal_memory_buffer_obj));
    EXPECT_NE(buffer_obj, NULL_PTR);
    EXPECT_EQ(R_OSAL_MmngrDealloc(hndl_mmngr, buffer_obj), OSAL_RETURN_HANDLE_NOT_SUPPORTED) << "Test09_004_030 failed";
    free(buffer_obj);
    buffer_obj = OSAL_MEMORY_BUFFER_HANDLE_INVALID;
}
// [MmngrDealloc_TC_09_004_030]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrDealloc_TC_09_004_031 MemoryApiTest.MmngrDealloc_TC_09_004_031
 * @subsection MmngrDealloc_TC_09_004_031_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrDealloc_TC_09_004_031_tci Test Case ID
 * MmngrDealloc_S3_N_TC_09_004_031
 * @subsection MmngrDealloc_TC_09_004_031_rr Related Requirement(s)
 * \#276412
 * @subsection MmngrDealloc_TC_09_004_031_pp Prerequisite/Precondition
 * OSAL is initialized.
 * @subsection MmngrDealloc_TC_09_004_031_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrAlloc and R_OSAL_MmngrDealloc with normal condition in OSAL_MMNGR_ALLOC_MODE_FREE_LIST_PROT mode.
 * - pre-process: Open new memory manager
 * - Test09_004_031: allocate 3 buffers with OSAL_MMNGR_ALLOC_MODE_FREE_LIST_PROT mode.<br>
 * Deallocate order is not same as allocation order first, then deallocate as same as the allocation order.
 * - post-process: close memory manager
 * @subsection MmngrDealloc_TC_09_004_031_tpts Test Procedure/Test Steps
 * -# Open the handle using R_OSAL_MmngrOpen with config:
 *      - config.max_allowed_allocations = 4
 *      - config.max_registered_monitors_cbs = 0
 *      - config.memory_limit = 10MB
 *      - config.mode = OSAL_MMNGR_ALLOC_MODE_FREE_LIST_PROT
 * -# Call R_OSAL_MmngrAlloc to allocate 1st buffer with size is 1KB and align is 64.
 * -# Call R_OSAL_MmngrAlloc to allocate 2nd buffer with size is 1KB and align is 64.
 * -# Call R_OSAL_MmngrAlloc to allocate 3rd buffer with size is 1KB and align is 64.
 * -# Call R_OSAL_MmngrDealloc to deallocate 2nd buffer with size is 1KB and align is 64.
 * -# Call R_OSAL_MmngrDealloc to deallocate 3rd buffer with size is 1KB and align is 64.
 * -# Call R_OSAL_MmngrDealloc to deallocate 1st buffer with size is 1KB and align is 64.
 * -# Call R_OSAL_MmngrClose to close the handle.
 * @subsection MmngrDealloc_TC_09_004_031_ereb Expected Result/Behavior
 * -# The return of R_OSAL_MmngrOpen is OSAL_RETURN_OK.<br>
 * The return handle is not OSAL_MEMORY_MANAGER_HANDLE_INVALID.
 * -# The return value of the 1st R_OSAL_MmngrAlloc is OSAL_RETURN_OK.<br>
 * The return buffer is not OSAL_MEMORY_BUFFER_HANDLE_INVALID.
 * -# The return value of the 2nd R_OSAL_MmngrAlloc is OSAL_RETURN_OK.<br>
 * The return buffer is not OSAL_MEMORY_BUFFER_HANDLE_INVALID.
 * -# The return value of the 3rd R_OSAL_MmngrAlloc is OSAL_RETURN_OK.<br>
 * The return buffer is not OSAL_MEMORY_BUFFER_HANDLE_INVALID.
 * -# The return value when calling R_OSAL_MmngrDealloc to deallocate the 2nd buffer is OSAL_RETURN_OK.
 * -# The return value of the R_OSAL_MmngrDealloc for 3rd buffer is OSAL_RETURN_OK.
 * -# The return value of the R_OSAL_MmngrDealloc for 1st buffer is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrClose is OSAL_RETURN_OK.
 * @subsection MmngrDealloc_TC_09_004_031_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrDealloc_TC_09_004_031
 */
// [MmngrDealloc_TC_09_004_031]
TEST_F(MemoryApiTest, MmngrDealloc_TC_09_004_031)
{
    osal_memory_buffer_handle_t  buffer_obj_array1[5]
        = {OSAL_MEMORY_BUFFER_HANDLE_INVALID, OSAL_MEMORY_BUFFER_HANDLE_INVALID,
           OSAL_MEMORY_BUFFER_HANDLE_INVALID, OSAL_MEMORY_BUFFER_HANDLE_INVALID,
           OSAL_MEMORY_BUFFER_HANDLE_INVALID};

    //pre-process: open new memory manager
    config.max_allowed_allocations     = 4;
    config.max_registered_monitors_cbs = 0;
    config.memory_limit = 10 * 1024 * 1024;
    config.mode = OSAL_MMNGR_ALLOC_MODE_FREE_LIST_PROT;
    EXPECT_EQ(R_OSAL_MmngrOpen(&config, &hndl_mmngr), OSAL_RETURN_OK) << "pre-process failed";
    EXPECT_NE(hndl_mmngr, OSAL_MEMORY_MANAGER_HANDLE_INVALID) << "pre-process failed";

    // Test09_004_031
    // @brief: normal case: allocate 3 buffers with OSAL_MMNGR_ALLOC_MODE_FREE_LIST_PROT mode. Deallocate order is not same as allocation.
    size = 1024;
    alignment = 64;
    EXPECT_EQ(R_OSAL_MmngrAlloc(hndl_mmngr, size, alignment, buffer_obj_array1), OSAL_RETURN_OK) << "Test09_004_031 failed";
    EXPECT_NE(buffer_obj_array1[0], OSAL_MEMORY_BUFFER_HANDLE_INVALID) << "Test09_004_031 failed";
    EXPECT_EQ(R_OSAL_MmngrAlloc(hndl_mmngr, size, alignment, buffer_obj_array1 + 1), OSAL_RETURN_OK) << "Test09_004_031 failed";
    EXPECT_NE(buffer_obj_array1[1], OSAL_MEMORY_BUFFER_HANDLE_INVALID) << "Test09_004_031 failed";
    EXPECT_EQ(R_OSAL_MmngrAlloc(hndl_mmngr, size, alignment, buffer_obj_array1+ 2), OSAL_RETURN_OK) << "Test09_004_031 failed";
    EXPECT_NE(buffer_obj_array1[2], OSAL_MEMORY_BUFFER_HANDLE_INVALID) << "Test09_004_031 failed";
    EXPECT_EQ(R_OSAL_MmngrDealloc(hndl_mmngr, buffer_obj_array1[1]), OSAL_RETURN_OK) << "Test09_004_031 failed";
    EXPECT_EQ(R_OSAL_MmngrDealloc(hndl_mmngr, buffer_obj_array1[2]), OSAL_RETURN_OK) << "Test09_004_031 failed";
    EXPECT_EQ(R_OSAL_MmngrDealloc(hndl_mmngr, buffer_obj_array1[0]), OSAL_RETURN_OK) << "Test09_004_031 failed";

    //post-process: close memory manager
    EXPECT_EQ(R_OSAL_MmngrClose(hndl_mmngr), OSAL_RETURN_OK) << "post-process failed";
}
// [MmngrDealloc_TC_09_004_031]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrDealloc_TC_09_004_032 MemoryApiTest.MmngrDealloc_TC_09_004_032
 * @subsection MmngrDealloc_TC_09_004_032_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrDealloc_TC_09_004_032_tci Test Case ID
 * MmngrDealloc_S2_N_TC_09_004_032
 * @subsection MmngrDealloc_TC_09_004_032_rr Related Requirement(s)
 * \#276412
 * @subsection MmngrDealloc_TC_09_004_032_pp Prerequisite/Precondition
 * OSAL is initialized.
 * @subsection MmngrDealloc_TC_09_004_032_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrAlloc and R_OSAL_MmngrDealloc with abnormal condition in OSAL_MMNGR_ALLOC_MODE_FREE_LIST_PROT mode.
 * - Test09_004_032: confirm the use case the buffer object is not managed by Memory Manager hndl_mngr
 * @subsection MmngrDealloc_TC_09_004_032_tpts Test Procedure/Test Steps
 * -# Open the handle using R_OSAL_MmngrOpen with config:
 *      - config.max_allowed_allocations = 4
 *      - config.max_registered_monitors_cbs = 0
 *      - config.memory_limit = 10MB
 *      - config.mode = OSAL_MMNGR_ALLOC_MODE_FREE_LIST_PROT
 * -# Call R_OSAL_MmngrAlloc to allocate buffer with size is 1KB and align is 64.
 * -# Allocate "tmp_hndl_mngr" by using malloc function.
 * -# Copy the memory pointed by hndl_mmngr into tmp_hndl_mmngr.
 * -# Call R_OSAL_MmngrClose to close the handle.
 * -# Call R_OSAL_MmngrDealloc to deallocate the buffer using tmp_hndl_mmngr.
 * -# Free "tmp_hndl_mmngr".
 * @subsection MmngrDealloc_TC_09_004_032_ereb Expected Result/Behavior
 * -# The return value of R_OSAL_MmngrOpen is OSAL_RETURN_OK.<br>
 * The return of handle is not OSAL_MEMORY_MANAGER_HANDLE_INVALID.
 * -# The return value of the R_OSAL_MmngrAlloc is OSAL_RETURN_OK.
 * -# Memory allocation succeeded (Pointer to buffer != Nullpointer)
 * -# Copy memory into tmp_hndl_mmngr successfully.
 * -# The return value of R_OSAL_MmngrClose is OSAL_RETURN_OK.
 * -# The return value when calling R_OSAL_MmngrDealloc is OSAL_RETURN_STATE.
 * -# Allocated memory free succeeded.
 * @subsection MmngrDealloc_TC_09_004_032_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrDealloc_TC_09_004_032
 */
// [MmngrDealloc_TC_09_004_032]
TEST_F(MemoryApiTest, MmngrDealloc_TC_09_004_032)
{
    osal_memory_manager_handle_t tmp_hndl_mmngr;

    // Test09_004_032
    // @brief: abnormal case: the buffer object is not managed by Memory Manager hndl_mngr
    config.max_allowed_allocations     = 4;
    config.max_registered_monitors_cbs = 0;
    config.memory_limit = 10 * 1024 * 1024;
    config.mode = OSAL_MMNGR_ALLOC_MODE_FREE_LIST_PROT;
    EXPECT_EQ(R_OSAL_MmngrOpen(&config, &hndl_mmngr), OSAL_RETURN_OK) << "Test09_004_032 failed";
    EXPECT_NE(hndl_mmngr, OSAL_MEMORY_MANAGER_HANDLE_INVALID) << "Test09_004_032 failed";

    size = 1024;
    alignment = 64;
    EXPECT_EQ(R_OSAL_MmngrAlloc(hndl_mmngr, size, alignment, &buffer_obj), OSAL_RETURN_OK) << "Test09_004_032 failed";
    tmp_hndl_mmngr = (osal_memory_manager_handle_t)malloc (sizeof(st_osal_memory_manager_obj));
    EXPECT_NE(tmp_hndl_mmngr, NULL_PTR);
    memcpy(tmp_hndl_mmngr, hndl_mmngr, sizeof(st_osal_memory_manager_obj));
    EXPECT_EQ(R_OSAL_MmngrClose(hndl_mmngr), OSAL_RETURN_OK) << "Test09_004_032 failed";
    EXPECT_EQ(R_OSAL_MmngrDealloc(tmp_hndl_mmngr, buffer_obj), OSAL_RETURN_STATE) << "Test09_004_032 failed";
    free(tmp_hndl_mmngr);
}
// [MmngrDealloc_TC_09_004_032]

/**
 * @page MM_API Memory API Test
 * @section OsalMemoryApiTest_MmngrDealloc_TC_09_004_033 OsalMemoryApiTest.MmngrDealloc_TC_09_004_033
 * @subsection MmngrDealloc_TC_09_004_033_tsi Test Suite ID
 * OsalMemoryApiTest
 * @subsection MmngrDealloc_TC_09_004_033_tci Test Case ID
 * MmngrDealloc_S3_N_TC_09_004_033
 * @subsection MmngrDealloc_TC_09_004_033_rr Related Requirement(s)
 * \#276412
 * @subsection MmngrDealloc_TC_09_004_033_pp Prerequisite/Precondition
 * R_OSAL_Initialize is already called
 * @subsection MmngrDealloc_TC_09_004_033_tcs Test Case Summary
 * This test shall verify the functionality of the Memory APIs with the buffer which size is max in OSAL_MMNGR_ALLOC_MODE_FREE_LIST_PROT mode.
 * - Test09_004_009: Allocate and use the buffer which size is max.
 * @subsection MmngrDealloc_TC_09_004_033_tpts Test Procedure/Test Steps
 * -# Init the memory configuration object by using R_OSAL_MmngrInitializeMmngrConfigSt
 * -# Get the maximum memory configuration by using R_OSAL_MmngrGetOsalMaxConfig
 * -# Open new memory manager by using R_OSAL_MmngrOpen
 * -# Register callback function for event OSAL_MMNGR_EVENT_ALLOCATE by using R_OSAL_MmngrRegisterMonitor
 * -# Register callback function for event OSAL_MMNGR_EVENT_DEALLOCATE by using R_OSAL_MmngrRegisterMonitor
 * -# Register callback function for event OSAL_MMNGR_EVENT_OVERFLOW_DETECTED by using R_OSAL_MmngrRegisterMonitor
 * -# Register callback function for event OSAL_MMNGR_EVENT_UNDERFLOW_DETECTED by using R_OSAL_MmngrRegisterMonitor
 * -# Allocate memory buffer which size is 86114304 and alignment is 1MB by using R_OSAL_MmngrAlloc
 * -# Get the pointer of allocated buffer by using R_OSAL_MmngrGetCpuPtr
 * -# Modify the data of allocated buffer by known value
 * -# Call R_OSAL_MmngrFlush with offset is 0 and size is 10MB
 * -# Get hardware address by using R_OSAL_MmngrGetHwAddr
 * -# Call R_OSAL_MmngrInvalidate with offset is 0 and size is 10MB
 * -# Deallocate allocated buffer by using R_OSAL_MmngrDealloc
 * -# Close opened memory manager by using R_OSAL_MmngrClose
 * @subsection MmngrDealloc_TC_09_004_033_ereb Expected Result/Behavior
 * -# R_OSAL_MmngrInitializeMmngrConfigSt return OSAL_RETURN_OK
 * -# R_OSAL_MmngrGetOsalMaxConfig return OSAL_RETURN_OK
 * -# R_OSAL_MmngrOpen return OSAL_RETURN_OK.<br>
 * Value of "hndl_mmngr" is not OSAL_MEMORY_MANAGER_HANDLE_INVALID
 * -# R_OSAL_MmngrRegisterMonitor return OSAL_RETURN_OK
 * -# R_OSAL_MmngrRegisterMonitor return OSAL_RETURN_OK
 * -# R_OSAL_MmngrRegisterMonitor return OSAL_RETURN_OK
 * -# R_OSAL_MmngrRegisterMonitor return OSAL_RETURN_OK
 * -# R_OSAL_MmngrAlloc return OSAL_RETURN_OK.<br>
 * Value of "buffer_obj" is not OSAL_MEMORY_BUFFER_HANDLE_INVALID
 * -# R_OSAL_MmngrGetCpuPtr return OSAL_RETURN_OK.<br>
 * Value of "cpu_ptr" is not NULL_PTR
 * -# The modification is successful
 * -# R_OSAL_MmngrFlush return OSAL_RETURN_OK
 * -# R_OSAL_MmngrGetHwAddr return OSAL_RETURN_OK
 * -# R_OSAL_MmngrInvalidate return OSAL_RETURN_OK
 * -# R_OSAL_MmngrDealloc return OSAL_RETURN_OK
 * -# R_OSAL_MmngrClose return OSAL_RETURN_OK
 * @subsection MmngrDealloc_TC_09_004_033_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrDealloc_TC_09_004_033
 */
// [MmngrDealloc_TC_09_004_033]
TEST(OsalMemoryApiTest, MmngrDealloc_TC_09_004_033)
{
    st_osal_mmngr_config_t config;
    osal_memory_manager_handle_t hndl_mmngr = OSAL_MEMORY_MANAGER_HANDLE_INVALID;
    osal_memory_buffer_handle_t  buffer_obj = OSAL_MEMORY_BUFFER_HANDLE_INVALID;
    size_t size;
    size_t alignment;
    void* cpu_ptr = NULL_PTR;
    uint8_t known_data = 29;
    uintptr_t hw_addr;
    size_t offset = 0;
    osal_axi_bus_id_t axi_id;

    MockMonitorHelper  allocationEventMonitor;
    auto NormalmonitorCb = cb_wrapper<decltype(
        &MonitorHelper::NormalmonitorCb)>::make_cb<&MonitorHelper::NormalmonitorCb>();

    // Test09_004_033
    // @brief: normal case: deallocate a buffer when the full buffer has been initialized / used
    EXPECT_CALL(allocationEventMonitor, NormalmonitorCb(OSAL_MMNGR_EVENT_ALLOCATE, _, _)).Times(1);
    EXPECT_CALL(allocationEventMonitor, NormalmonitorCb(OSAL_MMNGR_EVENT_DEALLOCATE, _, _)).Times(1);
    EXPECT_CALL(allocationEventMonitor, NormalmonitorCb(OSAL_MMNGR_EVENT_OVERFLOW_DETECTED, _, _)).Times(0);
    EXPECT_CALL(allocationEventMonitor, NormalmonitorCb(OSAL_MMNGR_EVENT_UNDERFLOW_DETECTED, _, _)).Times(0);
    EXPECT_EQ(R_OSAL_MmngrInitializeMmngrConfigSt(&config), OSAL_RETURN_OK) << "Test09_004_033 failed";
    EXPECT_EQ(R_OSAL_MmngrGetOsalMaxConfig(&config), OSAL_RETURN_OK) << "Test09_004_033 failed";
    config.mode = OSAL_MMNGR_ALLOC_MODE_FREE_LIST_PROT;
    EXPECT_EQ(R_OSAL_MmngrOpen(&config, &hndl_mmngr), OSAL_RETURN_OK) << "Test09_004_033 failed";
    EXPECT_NE(hndl_mmngr, OSAL_MEMORY_MANAGER_HANDLE_INVALID) << "Test09_004_033 failed";
    EXPECT_EQ(R_OSAL_MmngrRegisterMonitor(hndl_mmngr, OSAL_MMNGR_EVENT_ALLOCATE, NormalmonitorCb, &allocationEventMonitor), OSAL_RETURN_OK) << "Test09_004_033 failed";
    EXPECT_EQ(R_OSAL_MmngrRegisterMonitor(hndl_mmngr, OSAL_MMNGR_EVENT_DEALLOCATE, NormalmonitorCb, &allocationEventMonitor), OSAL_RETURN_OK) << "Test09_004_033 failed";
    EXPECT_EQ(R_OSAL_MmngrRegisterMonitor(hndl_mmngr, OSAL_MMNGR_EVENT_OVERFLOW_DETECTED, NormalmonitorCb, &allocationEventMonitor), OSAL_RETURN_OK) << "Test09_004_033 failed";
    EXPECT_EQ(R_OSAL_MmngrRegisterMonitor(hndl_mmngr, OSAL_MMNGR_EVENT_UNDERFLOW_DETECTED, NormalmonitorCb, &allocationEventMonitor), OSAL_RETURN_OK) << "Test09_004_033 failed";
    size = 86114304;
    alignment = 1 * 1024 * 1024; // 1MB
    EXPECT_EQ(R_OSAL_MmngrAlloc(hndl_mmngr, size, alignment, &buffer_obj), OSAL_RETURN_OK) << "Test09_004_033 failed";
    EXPECT_NE(buffer_obj, OSAL_MEMORY_BUFFER_HANDLE_INVALID) << "Test09_004_033 failed";
    EXPECT_EQ(R_OSAL_MmngrGetCpuPtr(buffer_obj, &cpu_ptr), OSAL_RETURN_OK) << "Test09_004_033 failed";
    EXPECT_NE(cpu_ptr,NULL_PTR) << "Test09_004_033 failed";
    (void)memset(cpu_ptr, known_data, size);
    size = 10 * 1024 * 1024; // 10MB
    EXPECT_EQ(R_OSAL_MmngrFlush(buffer_obj, offset , size), OSAL_RETURN_OK) << "Test09_004_033 failed";
    axi_id = OSAL_AXI_BUS_ID_IPA_MAIN_MEMORY + 1;
    EXPECT_EQ(R_OSAL_MmngrGetHwAddr(buffer_obj, axi_id, &hw_addr), OSAL_RETURN_OK) << "Test09_004_033 failed";
    EXPECT_EQ(R_OSAL_MmngrInvalidate(buffer_obj, offset, size), OSAL_RETURN_OK) << "Test09_004_033 failed";
    EXPECT_EQ(R_OSAL_MmngrDealloc(hndl_mmngr, buffer_obj), OSAL_RETURN_OK) << "Test09_004_033 failed";
    EXPECT_EQ(R_OSAL_MmngrClose(hndl_mmngr), OSAL_RETURN_OK) << "Test09_004_033 failed";
}
// [MmngrDealloc_TC_09_004_033]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrDealloc_TC_09_004_034 MemoryApiTest.MmngrDealloc_TC_09_004_034
 * @subsection MmngrDealloc_TC_09_004_034_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrDealloc_TC_09_004_034_tci Test Case ID
 * MmngrDealloc_S3_N_TC_09_004_034
 * @subsection MmngrDealloc_TC_09_004_034_rr Related Requirement(s)
 * \#276412
 * @subsection MmngrDealloc_TC_09_004_034_pp Prerequisite/Precondition
 * OSAL is initialized.
 * @subsection MmngrDealloc_TC_09_004_034_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrAlloc and R_OSAL_MmngrDealloc with normal condition in OSAL_MMNGR_ALLOC_MODE_FREE_LIST_PROT mode.
 * - Test09_004_034: confirm that allocated areas are released by Dealloc
 * @subsection MmngrDealloc_TC_09_004_034_tpts Test Procedure/Test Steps
 * -# Get the memory max configuration by using R_OSAL_MmngrGetOsalMaxConfig
 * -# Open memory manager by using R_OSAL_MmngrOpen with "config.memory_limit" is 11MB and OSAL_MMNGR_ALLOC_MODE_FREE_LIST_PROT mode
 * -# Use the "for" loop with the following steps:
 *      - Allocate 10 buffers, the size of each buffer is 1MB by using R_OSAL_MmngrAlloc
 *      - Deallocate 10 buffers above by using R_OSAL_MmngrDealloc
 * -# Call R_OSAL_MmngrClose to close the handle.
 * @subsection MmngrDealloc_TC_09_004_034_ereb Expected Result/Behavior
 * -# The return value of R_OSAL_MmngrGetOsalMaxConfig is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrOpen is OSAL_RETURN_OK.
 * -# In "for" loop, the expected return code is:
 *      - The return value of all R_OSAL_MmngrAlloc functions is OSAL_RETURN_OK
 *      - The return value of all R_OSAL_MmngrDealloc functions is OSAL_RETURN_OK
 * -# The return value of R_OSAL_MmngrClose is OSAL_RETURN_OK.
 * @subsection MmngrDealloc_TC_09_004_034_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrDealloc_TC_09_004_034
 */
// [MmngrDealloc_TC_09_004_034]
TEST_F(MemoryApiTest, MmngrDealloc_TC_09_004_034)
{
    osal_memory_buffer_handle_t  buffer_obj_array[10]
        = {OSAL_MEMORY_BUFFER_HANDLE_INVALID, OSAL_MEMORY_BUFFER_HANDLE_INVALID,
           OSAL_MEMORY_BUFFER_HANDLE_INVALID, OSAL_MEMORY_BUFFER_HANDLE_INVALID,
           OSAL_MEMORY_BUFFER_HANDLE_INVALID, OSAL_MEMORY_BUFFER_HANDLE_INVALID,
           OSAL_MEMORY_BUFFER_HANDLE_INVALID, OSAL_MEMORY_BUFFER_HANDLE_INVALID,
           OSAL_MEMORY_BUFFER_HANDLE_INVALID, OSAL_MEMORY_BUFFER_HANDLE_INVALID};

    // Test09_004_034
    // @brief: confirm that allocated areas are released by Dealloc
    EXPECT_EQ(R_OSAL_MmngrGetOsalMaxConfig(&config), OSAL_RETURN_OK) << "Test09_004_034 failed";
    memset(buffer_obj_array, 0, sizeof(buffer_obj_array));
    config.memory_limit = 11 * 1024 * 1024;
    config.mode = OSAL_MMNGR_ALLOC_MODE_FREE_LIST_PROT;
    EXPECT_EQ(R_OSAL_MmngrOpen(&config, &hndl_mmngr), OSAL_RETURN_OK) << "Test09_004_034 failed";
    size = 1 * 1024 * 1024;
    alignment = 64;
    for (int i = 0; i < 100; i++)
    {
        for (int j = 0; j < 10; j++)
        {
            EXPECT_EQ(R_OSAL_MmngrAlloc(hndl_mmngr, size, alignment, &buffer_obj_array[j]), OSAL_RETURN_OK) << "Test09_004_034 failed";
        }

        for (int k = 9; k >= 0; k--)
        {
            EXPECT_EQ(R_OSAL_MmngrDealloc(hndl_mmngr, buffer_obj_array[k]), OSAL_RETURN_OK) << "Test09_004_034 failed";
        }
    }

    EXPECT_EQ(R_OSAL_MmngrClose(hndl_mmngr), OSAL_RETURN_OK) << "Test09_004_034 failed";
}
// [MmngrDealloc_TC_09_004_034]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrDealloc_TC_09_004_040 MemoryApiTest.MmngrDealloc_TC_09_004_040
 * @subsection MmngrDealloc_TC_09_004_040_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrDealloc_TC_09_004_040_tci Test Case ID
 * MmngrDealloc_S3_A_TC_09_004_040
 * @subsection MmngrDealloc_TC_09_004_040_rr Related Requirement(s)
 * \#276412
 * @subsection MmngrDealloc_TC_09_004_040_pp Prerequisite/Precondition
 * OSAL is initialized.
 * @subsection MmngrDealloc_TC_09_004_040_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrDealloc with abnormal condition in OSAL_MMNGR_ALLOC_MODE_STACK mode.
 * - Test09_004_040: The buffer object is not managed by Memory Manager hndl_mngr with mode OSAL_MMNGR_ALLOC_MODE_STACK
 * @subsection MmngrDealloc_TC_09_004_040_tpts Test Procedure/Test Steps
 * -# Call R_OSAL_MmngrOpen with valid parameter.
 * -# Allocate buffer with R_OSAL_MmngrAlloc
 * -# Call R_OSAL_MmngrDealloc with broken buffer_obj->mmngr_owner_hndl
 *      - "ptr_owner_ng" is allocated by malloc function.
 *      - buffer obj with mmngr_owner_hndl value changed to ptr_owner_ng
 * -# Close opened memory handle by using R_OSAL_MmngrClose.
 *      - Memory handle with valid mmngr_owner_hndl value
 * @subsection MmngrDealloc_TC_09_004_040_ereb Expected Result/Behavior
 * -# The return value of R_OSAL_MmngrOpen is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrAlloc is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrDealloc is OSAL_RETURN_HANDLE_NOT_SUPPORTED
 * -# The return value of R_OSAL_MmngrClose is OSAL_RETURN_OK.
 * @subsection MmngrDealloc_TC_09_004_040_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrDealloc_TC_09_004_040
 */
// [MmngrDealloc_TC_09_004_040]
TEST_F(MemoryApiTest, MmngrDealloc_TC_09_004_040)
{
    osal_memory_manager_handle_t ptr_owner_bak;
    osal_memory_manager_handle_t ptr_owner_ng;
    size = 64;
    alignment = 64;

    // Test09_004_040
    // @brief: abnormal case: The buffer object is not managed by Memory Manager hndl_mngr.
    EXPECT_EQ(R_OSAL_MmngrGetOsalMaxConfig(&config), OSAL_RETURN_OK);
    config.mode = OSAL_MMNGR_ALLOC_MODE_STACK;
    EXPECT_EQ(R_OSAL_MmngrOpen(&config, &hndl_mmngr), OSAL_RETURN_OK);
    EXPECT_EQ(R_OSAL_MmngrAlloc(hndl_mmngr, size, alignment, &buffer_obj), OSAL_RETURN_OK);
    ptr_owner_bak = buffer_obj->mmngr_owner_hndl;
    ptr_owner_ng = (osal_memory_manager_handle_t)malloc(0x100);
    buffer_obj->mmngr_owner_hndl = ptr_owner_ng;
    EXPECT_EQ(R_OSAL_MmngrDealloc(hndl_mmngr, buffer_obj), OSAL_RETURN_HANDLE_NOT_SUPPORTED) << "Test09_004_040 failed";
    free(ptr_owner_ng);
    buffer_obj->mmngr_owner_hndl = ptr_owner_bak;
    EXPECT_EQ(R_OSAL_MmngrClose(hndl_mmngr), OSAL_RETURN_OK) << "Test09_004_040 failed";
    hndl_mmngr = OSAL_MEMORY_MANAGER_HANDLE_INVALID;
}
// [MmngrDealloc_TC_09_004_040]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrDealloc_TC_09_004_041 MemoryApiTest.MmngrDealloc_TC_09_004_041
 * @subsection MmngrDealloc_TC_09_004_041_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrDealloc_TC_09_004_041_tci Test Case ID
 * MmngrDealloc_S3_A_TC_09_004_041
 * @subsection MmngrDealloc_TC_09_004_041_rr Related Requirement(s)
 * \#276412
 * @subsection MmngrDealloc_TC_09_004_041_pp Prerequisite/Precondition
 * OSAL is initialized.
 * @subsection MmngrDealloc_TC_09_004_041_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrDealloc with abnormal condition in OSAL_MMNGR_ALLOC_MODE_STACK_PROT mode.
 * - Test09_004_041: The buffer object is not managed by Memory Manager hndl_mngr with mode OSAL_MMNGR_ALLOC_MODE_STACK_PROT
 * @subsection MmngrDealloc_TC_09_004_041_tpts Test Procedure/Test Steps
 * -# Call R_OSAL_MmngrOpen with valid parameter.
 * -# Allocate buffer with R_OSAL_MmngrAlloc
 * -# Call R_OSAL_MmngrDealloc with broken buffer_obj->mmngr_owner_hndl
 *      - "ptr_owner_ng" is allocated by malloc function.
 *      - buffer obj with mmngr_owner_hndl value changed to ptr_owner_ng
 * -# Close opened memory handle by using R_OSAL_MmngrClose.
 *      - Memory handle with valid mmngr_owner_hndl value
 * @subsection MmngrDealloc_TC_09_004_041_ereb Expected Result/Behavior
 * -# The return value of R_OSAL_MmngrOpen is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrAlloc is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrDealloc is OSAL_RETURN_HANDLE_NOT_SUPPORTED.
 * -# The return value of R_OSAL_MmngrClose is OSAL_RETURN_OK.
 * @subsection MmngrDealloc_TC_09_004_041_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrDealloc_TC_09_004_041
 */
// [MmngrDealloc_TC_09_004_041]
TEST_F(MemoryApiTest, MmngrDealloc_TC_09_004_041)
{
    osal_memory_manager_handle_t ptr_owner_bak;
    osal_memory_manager_handle_t ptr_owner_ng;
    size = 64;
    alignment = 64;

    // Test09_004_041
    // @brief: abnormal case: The buffer object is not managed by Memory Manager hndl_mngr.
    EXPECT_EQ(R_OSAL_MmngrGetOsalMaxConfig(&config), OSAL_RETURN_OK);
    config.mode = OSAL_MMNGR_ALLOC_MODE_STACK_PROT;
    EXPECT_EQ(R_OSAL_MmngrOpen(&config, &hndl_mmngr), OSAL_RETURN_OK);
    EXPECT_EQ(R_OSAL_MmngrAlloc(hndl_mmngr, size, alignment, &buffer_obj), OSAL_RETURN_OK);
    ptr_owner_bak = buffer_obj->mmngr_owner_hndl;
    ptr_owner_ng = (osal_memory_manager_handle_t)malloc(0x100);
    buffer_obj->mmngr_owner_hndl = ptr_owner_ng;
    EXPECT_EQ(R_OSAL_MmngrDealloc(hndl_mmngr, buffer_obj), OSAL_RETURN_HANDLE_NOT_SUPPORTED) << "Test09_004_041 failed";
    free(ptr_owner_ng);
    buffer_obj->mmngr_owner_hndl = ptr_owner_bak;
    EXPECT_EQ(R_OSAL_MmngrClose(hndl_mmngr), OSAL_RETURN_OK) << "Test09_004_041 failed";
    hndl_mmngr = OSAL_MEMORY_MANAGER_HANDLE_INVALID;
}
// [MmngrDealloc_TC_09_004_041]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrDealloc_TC_09_004_042 MemoryApiTest.MmngrDealloc_TC_09_004_042
 * @subsection MmngrDealloc_TC_09_004_042_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrDealloc_TC_09_004_042_tci Test Case ID
 * MmngrDealloc_S3_A_TC_09_004_042
 * @subsection MmngrDealloc_TC_09_004_042_rr Related Requirement(s)
 * \#276412
 * @subsection MmngrDealloc_TC_09_004_042_pp Prerequisite/Precondition
 * OSAL is initialized.
 * @subsection MmngrDealloc_TC_09_004_042_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrDealloc with abnormal condition in OSAL_MMNGR_ALLOC_MODE_FREE_LIST mode.
 * - Test09_004_042: The buffer object is not managed by Memory Manager hndl_mngr with mode OSAL_MMNGR_ALLOC_MODE_FREE_LIST
 * @subsection MmngrDealloc_TC_09_004_042_tpts Test Procedure/Test Steps
 * -# Call R_OSAL_MmngrOpen with valid parameter.
 * -# Allocate buffer with R_OSAL_MmngrAlloc
 * -# Call R_OSAL_MmngrDealloc with broken buffer_obj->mmngr_owner_hndl
 *      - "ptr_owner_ng" is allocated by malloc function.
 *      - buffer obj with mmngr_owner_hndl value changed to ptr_owner_ng
 * -# Close opened memory handle by using R_OSAL_MmngrClose.
 *      - Memory handle with valid mmngr_owner_hndl value
 * @subsection MmngrDealloc_TC_09_004_042_ereb Expected Result/Behavior
 * -# The return value of R_OSAL_MmngrOpen is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrAlloc is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrDealloc is OSAL_RETURN_HANDLE_NOT_SUPPORTED.
 * -# The return value of R_OSAL_MmngrClose is OSAL_RETURN_OK.
 * @subsection MmngrDealloc_TC_09_004_042_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrDealloc_TC_09_004_042
 */
// [MmngrDealloc_TC_09_004_042]
TEST_F(MemoryApiTest, MmngrDealloc_TC_09_004_042)
{
    osal_memory_manager_handle_t ptr_owner_bak;
    osal_memory_manager_handle_t ptr_owner_ng;
    size = 64;
    alignment = 64;

    // Test09_004_042
    // @brief: abnormal case: The buffer object is not managed by Memory Manager hndl_mngr.
    EXPECT_EQ(R_OSAL_MmngrGetOsalMaxConfig(&config), OSAL_RETURN_OK);
    config.mode = OSAL_MMNGR_ALLOC_MODE_FREE_LIST;
    EXPECT_EQ(R_OSAL_MmngrOpen(&config, &hndl_mmngr), OSAL_RETURN_OK);
    EXPECT_EQ(R_OSAL_MmngrAlloc(hndl_mmngr, size, alignment, &buffer_obj), OSAL_RETURN_OK);
    ptr_owner_bak = buffer_obj->mmngr_owner_hndl;
    ptr_owner_ng = (osal_memory_manager_handle_t)malloc(0x100);
    buffer_obj->mmngr_owner_hndl = ptr_owner_ng;
    EXPECT_EQ(R_OSAL_MmngrDealloc(hndl_mmngr, buffer_obj), OSAL_RETURN_HANDLE_NOT_SUPPORTED) << "Test09_004_042 failed";
    free(ptr_owner_ng);
    buffer_obj->mmngr_owner_hndl = ptr_owner_bak;
    EXPECT_EQ(R_OSAL_MmngrClose(hndl_mmngr), OSAL_RETURN_OK) << "Test09_004_042 failed";
    hndl_mmngr = OSAL_MEMORY_MANAGER_HANDLE_INVALID;
}
// [MmngrDealloc_TC_09_004_042]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrDealloc_TC_09_004_043 MemoryApiTest.MmngrDealloc_TC_09_004_043
 * @subsection MmngrDealloc_TC_09_004_043_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrDealloc_TC_09_004_043_tci Test Case ID
 * MmngrDealloc_S3_A_TC_09_004_043
 * @subsection MmngrDealloc_TC_09_004_043_rr Related Requirement(s)
 * \#276412
 * @subsection MmngrDealloc_TC_09_004_043_pp Prerequisite/Precondition
 * OSAL is initialized.
 * @subsection MmngrDealloc_TC_09_004_043_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrDealloc with abnormal condition in OSAL_MMNGR_ALLOC_MODE_FREE_LIST_PROT mode.
 * - Test09_004_043: The buffer object is not managed by Memory Manager hndl_mngr with mode OSAL_MMNGR_ALLOC_MODE_FREE_LIST_PROT
 * @subsection MmngrDealloc_TC_09_004_043_tpts Test Procedure/Test Steps
 * -# Call R_OSAL_MmngrOpen with valid parameter.
 * -# Allocate buffer with R_OSAL_MmngrAlloc
 * -# Call R_OSAL_MmngrDealloc with broken buffer_obj->mmngr_owner_hndl
 *      - "ptr_owner_ng" is allocated by malloc function.
 *      - buffer obj with mmngr_owner_hndl value changed to ptr_owner_ng
 * -# Close opened memory handle by using R_OSAL_MmngrClose.
 *      - Memory handle with valid mmngr_owner_hndl value
 * @subsection MmngrDealloc_TC_09_004_043_ereb Expected Result/Behavior
 * -# The return value of R_OSAL_MmngrOpen is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngAlloc is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrDealloc is OSAL_RETURN_HANDLE_NOT_SUPPORTED.
 * -# The return value of R_OSAL_MmngrClose is OSAL_RETURN_OK.
 * @subsection MmngrDealloc_TC_09_004_043_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrDealloc_TC_09_004_043
 */
// [MmngrDealloc_TC_09_004_043]
TEST_F(MemoryApiTest, MmngrDealloc_TC_09_004_043)
{
    osal_memory_manager_handle_t ptr_owner_bak;
    osal_memory_manager_handle_t ptr_owner_ng;
    size = 64;
    alignment = 64;

    // Test09_004_043
    // @brief: abnormal case: The buffer object is not managed by Memory Manager hndl_mngr.
    EXPECT_EQ(R_OSAL_MmngrGetOsalMaxConfig(&config), OSAL_RETURN_OK);
    config.mode = OSAL_MMNGR_ALLOC_MODE_FREE_LIST_PROT;
    EXPECT_EQ(R_OSAL_MmngrOpen(&config, &hndl_mmngr), OSAL_RETURN_OK);
    EXPECT_EQ(R_OSAL_MmngrAlloc(hndl_mmngr, size, alignment, &buffer_obj), OSAL_RETURN_OK);
    ptr_owner_bak = buffer_obj->mmngr_owner_hndl;
    ptr_owner_ng = (osal_memory_manager_handle_t)malloc(0x100);
    buffer_obj->mmngr_owner_hndl = ptr_owner_ng;
    EXPECT_EQ(R_OSAL_MmngrDealloc(hndl_mmngr, buffer_obj), OSAL_RETURN_HANDLE_NOT_SUPPORTED) << "Test09_004_043 failed";
    free(ptr_owner_ng);
    buffer_obj->mmngr_owner_hndl = ptr_owner_bak;
    EXPECT_EQ(R_OSAL_MmngrClose(hndl_mmngr), OSAL_RETURN_OK) << "Test09_004_043 failed";
    hndl_mmngr = OSAL_MEMORY_MANAGER_HANDLE_INVALID;
}
// [MmngrDealloc_TC_09_004_043]
#endif

#ifndef SKIP_MEMORY_GetConfig
/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrDealloc_TC_09_004_044 MemoryApiTest.MmngrDealloc_TC_09_004_044
 * @subsection MmngrDealloc_TC_09_004_044_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrDealloc_TC_09_004_044_tci Test Case ID
 * MmngrDealloc_S4_A_TC_09_004_044
 * @subsection MmngrDealloc_TC_09_004_044_rr Related Requirement(s)
 * \#276412
 * @subsection MmngrDealloc_TC_09_004_044_pp Prerequisite/Precondition
 * OSAL is initialized.
 * @subsection MmngrDealloc_TC_09_004_044_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrDeallocate with abnormal condition in OSAL_MMNGR_ALLOC_MODE_STACK mode.
 * - pre-process: open memory manager
 * - Test09_004_044: "buffer_obj->p_ptr_self" is invalid.
 * - post-process: close memory manager
 * @subsection MmngrDealloc_TC_09_004_044_tpts Test Procedure/Test Steps
 * -# Call R_OSAL_MmngrGetOsalMaxConfig to get the max config then set mode to OSAL_MMNGR_ALLOC_MODE_STACK
 * -# Call R_OSAL_MmngrOpen with valid parameter.
 * -# Call R_OSAL_MmngrAlloc with valid parameter
 * -# Call R_OSAL_MmngrDeallocate with an invalid buffer_obj->p_ptr_self:
 *      - buffer_obj with p_ptr_self value changed to p_ptr_self_ng
 *      - "p_ptr_self_ng" is allocated by malloc function.
 * -# Deallocate buffer_obj by using R_OSAL_MmngrDeallocate.
 *      - buffer_obj with valid p_ptr_self value
 * -# Call R_OSAL_MmngrClose to close the memory manager.
 * @subsection MmngrDealloc_TC_09_004_044_ereb Expected Result/Behavior
 * -# The return value of R_OSAL_MmngrGetOsalMaxConfig is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrOpen is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrAlloc is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrDeallocate is OSAL_RETURN_HANDLE.
 * -# The return value of R_OSAL_MmngrDeallocate is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrClose is OSAL_RETURN_OK.
 * @subsection MmngrDealloc_TC_09_004_044_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrDealloc_TC_09_004_044
 */
// [MmngrDealloc_TC_09_004_044]
TEST_F(MemoryApiTest, MmngrDealloc_TC_09_004_044)
{
    void* ptr_self_bak;
    void* ptr_self_ng;
    size = 64;
    alignment = 64;

    // Test09_004_044
    // @brief: abnormal case: "buffer_obj->p_ptr_self" is invalid.
    EXPECT_EQ(R_OSAL_MmngrGetOsalMaxConfig(&config), OSAL_RETURN_OK);
    config.mode = OSAL_MMNGR_ALLOC_MODE_STACK;
    EXPECT_EQ(R_OSAL_MmngrOpen(&config, &hndl_mmngr), OSAL_RETURN_OK);
    EXPECT_EQ(R_OSAL_MmngrAlloc(hndl_mmngr, size, alignment, &buffer_obj), OSAL_RETURN_OK);
    ptr_self_bak = buffer_obj->p_ptr_self;
    ptr_self_ng = malloc(0x100);
    memset(ptr_self_ng, 0x0, 0x100);
    buffer_obj->p_ptr_self = ptr_self_ng;
    EXPECT_EQ(R_OSAL_MmngrDealloc(hndl_mmngr, buffer_obj), OSAL_RETURN_HANDLE) << "Test09_004_044 failed";
    free(ptr_self_ng);
    buffer_obj->p_ptr_self = ptr_self_bak;
    EXPECT_EQ(R_OSAL_MmngrDealloc(hndl_mmngr, buffer_obj), OSAL_RETURN_OK) << "Test09_004_044 failed";
    EXPECT_EQ(R_OSAL_MmngrClose(hndl_mmngr), OSAL_RETURN_OK) << "Test09_004_044 failed";
    hndl_mmngr = OSAL_MEMORY_MANAGER_HANDLE_INVALID;
    buffer_obj = OSAL_MEMORY_BUFFER_HANDLE_INVALID;
}
// [MmngrDealloc_TC_09_004_044]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrDealloc_TC_09_004_045 MemoryApiTest.MmngrDealloc_TC_09_004_045
 * @subsection MmngrDealloc_TC_09_004_045_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrDealloc_TC_09_004_045_tci Test Case ID
 * MmngrDealloc_S4_A_TC_09_004_045
 * @subsection MmngrDealloc_TC_09_004_045_rr Related Requirement(s)
 * \#276412
 * @subsection MmngrDealloc_TC_09_004_045_pp Prerequisite/Precondition
 * OSAL is initialized.
 * @subsection MmngrDealloc_TC_09_004_045_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrDeallocate with abnormal condition in OSAL_MMNGR_ALLOC_MODE_STACK_PROT mode.
 * - pre-process: open memory manager
 * - Test09_004_045: "buffer_obj->p_ptr_self" is invalid.
 * - post-process: close memory manager
 * @subsection MmngrDealloc_TC_09_004_045_tpts Test Procedure/Test Steps
 * -# Call R_OSAL_MmngrGetOsalMaxConfig to get the max config then set mode to OSAL_MMNGR_ALLOC_MODE_STACK_PROT
 * -# Call R_OSAL_MmngrOpen with valid parameter.
 * -# Call R_OSAL_MmngrAlloc with valid parameter
 * -# Call R_OSAL_MmngrDeallocate with an invalid buffer_obj->p_ptr_self:
 *      - buffer_obj with p_ptr_self value changed to p_ptr_self_ng
 *      - "p_ptr_self_ng" is allocated by malloc function.
 * -# Deallocate buffer_obj by using R_OSAL_MmngrDeallocate.
 *      - buffer_obj with valid p_ptr_self value
 * -# Call R_OSAL_MmngrClose to close the memory manager.
 * @subsection MmngrDealloc_TC_09_004_045_ereb Expected Result/Behavior
 * -# The return value of R_OSAL_MmngrGetOsalMaxConfig is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrOpen is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrAlloc is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrDeallocate is OSAL_RETURN_HANDLE.
 * -# The return value of R_OSAL_MmngrDeallocate is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrClose is OSAL_RETURN_OK.
 * @subsection MmngrDealloc_TC_09_004_045_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrDealloc_TC_09_004_045
 */
// [MmngrDealloc_TC_09_004_045]
TEST_F(MemoryApiTest, MmngrDealloc_TC_09_004_045)
{
    void* ptr_self_bak;
    void* ptr_self_ng;
    size = 64;
    alignment = 64;

    // Test09_004_045
    // @brief: abnormal case: "buffer_obj->p_ptr_self" is invalid.
    EXPECT_EQ(R_OSAL_MmngrGetOsalMaxConfig(&config), OSAL_RETURN_OK);
    config.mode = OSAL_MMNGR_ALLOC_MODE_STACK_PROT;
    EXPECT_EQ(R_OSAL_MmngrOpen(&config, &hndl_mmngr), OSAL_RETURN_OK);
    EXPECT_EQ(R_OSAL_MmngrAlloc(hndl_mmngr, size, alignment, &buffer_obj), OSAL_RETURN_OK);
    ptr_self_bak = buffer_obj->p_ptr_self;
    ptr_self_ng = malloc(0x100);
    memset(ptr_self_ng, 0x0, 0x100);
    buffer_obj->p_ptr_self = ptr_self_ng;
    EXPECT_EQ(R_OSAL_MmngrDealloc(hndl_mmngr, buffer_obj), OSAL_RETURN_HANDLE) << "Test09_004_045 failed";
    free(ptr_self_ng);
    buffer_obj->p_ptr_self = ptr_self_bak;
    EXPECT_EQ(R_OSAL_MmngrDealloc(hndl_mmngr, buffer_obj), OSAL_RETURN_OK) << "Test09_004_045 failed";
    EXPECT_EQ(R_OSAL_MmngrClose(hndl_mmngr), OSAL_RETURN_OK) << "Test09_004_045 failed";
    hndl_mmngr = OSAL_MEMORY_MANAGER_HANDLE_INVALID;
    buffer_obj = OSAL_MEMORY_BUFFER_HANDLE_INVALID;
}
// [MmngrDealloc_TC_09_004_045]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrDealloc_TC_09_004_046 MemoryApiTest.MmngrDealloc_TC_09_004_046
 * @subsection MmngrDealloc_TC_09_004_046_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrDealloc_TC_09_004_046_tci Test Case ID
 * MmngrDealloc_S4_A_TC_09_004_046
 * @subsection MmngrDealloc_TC_09_004_046_rr Related Requirement(s)
 * \#276412
 * @subsection MmngrDealloc_TC_09_004_046_pp Prerequisite/Precondition
 * OSAL is initialized.
 * @subsection MmngrDealloc_TC_09_004_046_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrDeallocate with abnormal condition in OSAL_MMNGR_ALLOC_MODE_FREE_LIST mode.
 * - pre-process: open memory manager
 * - Test09_004_046: "buffer_obj->p_ptr_self" is invalid.
 * - post-process: close memory manager
 * @subsection MmngrDealloc_TC_09_004_046_tpts Test Procedure/Test Steps
 * -# Call R_OSAL_MmngrGetOsalMaxConfig to get the max config then set mode to OSAL_MMNGR_ALLOC_MODE_FREE_LIST
 * -# Call R_OSAL_MmngrOpen with valid parameter.
 * -# Call R_OSAL_MmngrAlloc with valid parameter
 * -# Call R_OSAL_MmngrDeallocate with an invalid buffer_obj->p_ptr_self:
 *      - buffer_obj with p_ptr_self value changed to p_ptr_self_ng
 *      - "p_ptr_self_ng" is allocated by malloc function.
 * -# Deallocate buffer_obj by using R_OSAL_MmngrDeallocate.
 *      - buffer_obj with valid p_ptr_self value
 * -# Call R_OSAL_MmngrClose to close the memory manager.
 * @subsection MmngrDealloc_TC_09_004_046_ereb Expected Result/Behavior
 * -# The return value of R_OSAL_MmngrGetOsalMaxConfig is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrOpen is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrAlloc is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrDeallocate is OSAL_RETURN_HANDLE.
 * -# The return value of R_OSAL_MmngrDeallocate is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrClose is OSAL_RETURN_OK.
 * @subsection MmngrDealloc_TC_09_004_046_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrDealloc_TC_09_004_046
 */
// [MmngrDealloc_TC_09_004_046]
TEST_F(MemoryApiTest, MmngrDealloc_TC_09_004_046)
{
    void* ptr_self_bak;
    void* ptr_self_ng;
    size = 64;
    alignment = 64;

    // Test09_004_046
    // @brief: abnormal case: "buffer_obj->p_ptr_self" is invalid.
    EXPECT_EQ(R_OSAL_MmngrGetOsalMaxConfig(&config), OSAL_RETURN_OK);
    config.mode = OSAL_MMNGR_ALLOC_MODE_FREE_LIST;
    EXPECT_EQ(R_OSAL_MmngrOpen(&config, &hndl_mmngr), OSAL_RETURN_OK);
    EXPECT_EQ(R_OSAL_MmngrAlloc(hndl_mmngr, size, alignment, &buffer_obj), OSAL_RETURN_OK);
    ptr_self_bak = buffer_obj->p_ptr_self;
    ptr_self_ng = malloc(0x100);
    memset(ptr_self_ng, 0x0, 0x100);
    buffer_obj->p_ptr_self = ptr_self_ng;
    EXPECT_EQ(R_OSAL_MmngrDealloc(hndl_mmngr, buffer_obj), OSAL_RETURN_HANDLE) << "Test09_004_046 failed";
    free(ptr_self_ng);
    buffer_obj->p_ptr_self = ptr_self_bak;
    EXPECT_EQ(R_OSAL_MmngrDealloc(hndl_mmngr, buffer_obj), OSAL_RETURN_OK) << "Test09_004_046 failed";
    EXPECT_EQ(R_OSAL_MmngrClose(hndl_mmngr), OSAL_RETURN_OK) << "Test09_004_046 failed";
    hndl_mmngr = OSAL_MEMORY_MANAGER_HANDLE_INVALID;
    buffer_obj = OSAL_MEMORY_BUFFER_HANDLE_INVALID;
}
// [MmngrDealloc_TC_09_004_046]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrDealloc_TC_09_004_047 MemoryApiTest.MmngrDealloc_TC_09_004_047
 * @subsection MmngrDealloc_TC_09_004_047_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrDealloc_TC_09_004_047_tci Test Case ID
 * MmngrDealloc_S4_A_TC_09_004_047
 * @subsection MmngrDealloc_TC_09_004_047_rr Related Requirement(s)
 * \#276412
 * @subsection MmngrDealloc_TC_09_004_047_pp Prerequisite/Precondition
 * OSAL is initialized.
 * @subsection MmngrDealloc_TC_09_004_047_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrDeallocate with abnormal condition in OSAL_MMNGR_ALLOC_MODE_FREE_LIST_PROT mode.
 * - pre-process: open memory manager
 * - Test09_004_047: "buffer_obj->p_ptr_self" is invalid.
 * - post-process: close memory manager
 * @subsection MmngrDealloc_TC_09_004_047_tpts Test Procedure/Test Steps
 * -# Call R_OSAL_MmngrGetOsalMaxConfig to get the max config then set mode to OSAL_MMNGR_ALLOC_MODE_FREE_LIST_PROT
 * -# Call R_OSAL_MmngrOpen with valid parameter.
 * -# Call R_OSAL_MmngrAlloc with valid parameter
 * -# Call R_OSAL_MmngrDeallocate with an invalid buffer_obj->p_ptr_self:
 *      - buffer_obj with p_ptr_self value changed to p_ptr_self_ng
 *      - "p_ptr_self_ng" is allocated by malloc function.
 * -# Deallocate buffer_obj by using R_OSAL_MmngrDeallocate.
 *      - buffer_obj with valid p_ptr_self value
 * -# Call R_OSAL_MmngrClose to close the memory manager.
 * @subsection MmngrDealloc_TC_09_004_047_ereb Expected Result/Behavior
 * -# The return value of R_OSAL_MmngrGetOsalMaxConfig is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrOpen is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrAlloc is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrDeallocate is OSAL_RETURN_HANDLE.
 * -# The return value of R_OSAL_MmngrDeallocate is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrClose is OSAL_RETURN_OK.
 * @subsection MmngrDealloc_TC_09_004_047_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrDealloc_TC_09_004_047
 */
// [MmngrDealloc_TC_09_004_047]
TEST_F(MemoryApiTest, MmngrDealloc_TC_09_004_047)
{
    void* ptr_self_bak;
    void* ptr_self_ng;
    size = 64;
    alignment = 64;

    // Test09_004_047
    // @brief: abnormal case: "buffer_obj->p_ptr_self" is invalid.
    EXPECT_EQ(R_OSAL_MmngrGetOsalMaxConfig(&config), OSAL_RETURN_OK);
    config.mode = OSAL_MMNGR_ALLOC_MODE_FREE_LIST_PROT;
    EXPECT_EQ(R_OSAL_MmngrOpen(&config, &hndl_mmngr), OSAL_RETURN_OK);
    EXPECT_EQ(R_OSAL_MmngrAlloc(hndl_mmngr, size, alignment, &buffer_obj), OSAL_RETURN_OK);
    ptr_self_bak = buffer_obj->p_ptr_self;
    ptr_self_ng = malloc(0x100);
    memset(ptr_self_ng, 0x0, 0x100);
    buffer_obj->p_ptr_self = ptr_self_ng;
    EXPECT_EQ(R_OSAL_MmngrDealloc(hndl_mmngr, buffer_obj), OSAL_RETURN_HANDLE) << "Test09_004_047 failed";
    free(ptr_self_ng);
    buffer_obj->p_ptr_self = ptr_self_bak;
    EXPECT_EQ(R_OSAL_MmngrDealloc(hndl_mmngr, buffer_obj), OSAL_RETURN_OK) << "Test09_004_047 failed";
    EXPECT_EQ(R_OSAL_MmngrClose(hndl_mmngr), OSAL_RETURN_OK) << "Test09_004_047 failed";
    hndl_mmngr = OSAL_MEMORY_MANAGER_HANDLE_INVALID;
    buffer_obj = OSAL_MEMORY_BUFFER_HANDLE_INVALID;
}
// [MmngrDealloc_TC_09_004_047]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrDealloc_TC_09_004_048 MemoryApiTest.MmngrDealloc_TC_09_004_048
 * @subsection MmngrDealloc_TC_09_004_048_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrDealloc_TC_09_004_048_tci Test Case ID
 * MmngrDealloc_S4_A_TC_09_004_048
 * @subsection MmngrDealloc_TC_09_004_048_rr Related Requirement(s)
 * \#276412
 * @subsection MmngrDealloc_TC_09_004_048_pp Prerequisite/Precondition
 * OSAL is initialized.
 * @subsection MmngrDealloc_TC_09_004_048_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrDeallocate with abnormal condition in OSAL_MMNGR_ALLOC_MODE_STACK mode.
 * - pre-process: open memory manager
 * - Test09_004_048: "hndl_mmngr->p_ptr_self" is invalid.
 * - post-process: close memory manager
 * @subsection MmngrDealloc_TC_09_004_048_tpts Test Procedure/Test Steps
 * -# Call R_OSAL_MmngrGetOsalMaxConfig to get the max config then set mode to OSAL_MMNGR_ALLOC_MODE_STACK
 * -# Call R_OSAL_MmngrOpen with valid parameter and above config.
 * -# Call R_OSAL_MmngrAlloc with valid parameter
 * -# Call R_OSAL_MmngrDeallocate with an invalid hndl_mmngr->p_ptr_self:
 *      - hndl_mmngr with p_ptr_self value changed to p_ptr_self_ng
 *      - "p_ptr_self_ng" is allocated by malloc function.
 * -# Deallocate hndl_mmngr by using R_OSAL_MmngrDeallocate.
 *      - hndl_mmngr with valid p_ptr_self value
 * -# Call R_OSAL_MmngrClose to close the memory manager.
 * @subsection MmngrDealloc_TC_09_004_048_ereb Expected Result/Behavior
 * -# The return value of R_OSAL_MmngrGetOsalMaxConfig is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrOpen is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrAlloc is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrDeallocate is OSAL_RETURN_HANDLE.
 * -# The return value of R_OSAL_MmngrDeallocate is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrClose is OSAL_RETURN_OK.
 * @subsection MmngrDealloc_TC_09_004_048_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrDealloc_TC_09_004_048
 */
// [MmngrDealloc_TC_09_004_048]
TEST_F(MemoryApiTest, MmngrDealloc_TC_09_004_048)
{
    void* ptr_self_bak;
    void* ptr_self_ng;
    size = 64;
    alignment = 64;

    // Test09_004_048
    // @brief: abnormal case: hndl_mmngr->p_ptr_self is invalid
    EXPECT_EQ(R_OSAL_MmngrGetOsalMaxConfig(&config), OSAL_RETURN_OK);
    config.mode = OSAL_MMNGR_ALLOC_MODE_STACK;
    EXPECT_EQ(R_OSAL_MmngrOpen(&config, &hndl_mmngr), OSAL_RETURN_OK);
    EXPECT_EQ(R_OSAL_MmngrAlloc(hndl_mmngr, size, alignment, &buffer_obj), OSAL_RETURN_OK);
    ptr_self_bak = hndl_mmngr->p_ptr_self;
    ptr_self_ng = malloc(0x100);
    memset(ptr_self_ng, 0x0, 0x100);
    hndl_mmngr->p_ptr_self = ptr_self_ng;
    EXPECT_EQ(R_OSAL_MmngrDealloc(hndl_mmngr, buffer_obj), OSAL_RETURN_HANDLE) << "Test09_004_048 failed";
    free(ptr_self_ng);
    hndl_mmngr->p_ptr_self = ptr_self_bak;
    EXPECT_EQ(R_OSAL_MmngrDealloc(hndl_mmngr, buffer_obj), OSAL_RETURN_OK) << "Test09_004_048 failed";
    EXPECT_EQ(R_OSAL_MmngrClose(hndl_mmngr), OSAL_RETURN_OK) << "Test09_004_048 failed";
    hndl_mmngr = OSAL_MEMORY_MANAGER_HANDLE_INVALID;
    buffer_obj = OSAL_MEMORY_BUFFER_HANDLE_INVALID;
}
// [MmngrDealloc_TC_09_004_048]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrDealloc_TC_09_004_049 MemoryApiTest.MmngrDealloc_TC_09_004_049
 * @subsection MmngrDealloc_TC_09_004_049_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrDealloc_TC_09_004_049_tci Test Case ID
 * MmngrDealloc_S4_A_TC_09_004_049
 * @subsection MmngrDealloc_TC_09_004_049_rr Related Requirement(s)
 * \#276412
 * @subsection MmngrDealloc_TC_09_004_049_pp Prerequisite/Precondition
 * OSAL is initialized.
 * @subsection MmngrDealloc_TC_09_004_049_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrDeallocate with abnormal condition in OSAL_MMNGR_ALLOC_MODE_STACK_PROT mode.
 * - pre-process: open memory manager
 * - Test09_004_049: "hndl_mmngr->p_ptr_self" is invalid.
 * - post-process: close memory manager
 * @subsection MmngrDealloc_TC_09_004_049_tpts Test Procedure/Test Steps
 * -# Call R_OSAL_MmngrGetOsalMaxConfig to get the max config then set mode to OSAL_MMNGR_ALLOC_MODE_STACK_PROT
 * -# Call R_OSAL_MmngrOpen with valid parameter and above config.
 * -# Call R_OSAL_MmngrAlloc with valid parameter
 * -# Call R_OSAL_MmngrDeallocate with an invalid hndl_mmngr->p_ptr_self:
 *      - hndl_mmngr with p_ptr_self value changed to p_ptr_self_ng
 *      - "p_ptr_self_ng" is allocated by malloc function.
 * -# Deallocate hndl_mmngr by using R_OSAL_MmngrDeallocate.
 *      - hndl_mmngr with valid p_ptr_self value
 * -# Call R_OSAL_MmngrClose to close the memory manager.
 * @subsection MmngrDealloc_TC_09_004_049_ereb Expected Result/Behavior
 * -# The return value of R_OSAL_MmngrGetOsalMaxConfig is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrOpen is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrAlloc is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrDeallocate is OSAL_RETURN_HANDLE.
 * -# The return value of R_OSAL_MmngrDeallocate is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrClose is OSAL_RETURN_OK.
 * @subsection MmngrDealloc_TC_09_004_049_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrDealloc_TC_09_004_049
 */
// [MmngrDealloc_TC_09_004_049]
TEST_F(MemoryApiTest, MmngrDealloc_TC_09_004_049)
{
    void* ptr_self_bak;
    void* ptr_self_ng;
    size = 64;
    alignment = 64;

    // Test09_004_049
    // @brief: abnormal case: hndl_mmngr->p_ptr_self is invalid
    EXPECT_EQ(R_OSAL_MmngrGetOsalMaxConfig(&config), OSAL_RETURN_OK);
    config.mode = OSAL_MMNGR_ALLOC_MODE_STACK_PROT;
    EXPECT_EQ(R_OSAL_MmngrOpen(&config, &hndl_mmngr), OSAL_RETURN_OK);
    EXPECT_EQ(R_OSAL_MmngrAlloc(hndl_mmngr, size, alignment, &buffer_obj), OSAL_RETURN_OK);
    ptr_self_bak = hndl_mmngr->p_ptr_self;
    ptr_self_ng = malloc(0x100);
    memset(ptr_self_ng, 0x0, 0x100);
    hndl_mmngr->p_ptr_self = ptr_self_ng;
    EXPECT_EQ(R_OSAL_MmngrDealloc(hndl_mmngr, buffer_obj), OSAL_RETURN_HANDLE) << "Test09_004_049 failed";
    free(ptr_self_ng);
    hndl_mmngr->p_ptr_self = ptr_self_bak;
    EXPECT_EQ(R_OSAL_MmngrDealloc(hndl_mmngr, buffer_obj), OSAL_RETURN_OK) << "Test09_004_049 failed";
    EXPECT_EQ(R_OSAL_MmngrClose(hndl_mmngr), OSAL_RETURN_OK) << "Test09_004_049 failed";
    hndl_mmngr = OSAL_MEMORY_MANAGER_HANDLE_INVALID;
    buffer_obj = OSAL_MEMORY_BUFFER_HANDLE_INVALID;
}
// [MmngrDealloc_TC_09_004_049]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrDealloc_TC_09_004_050 MemoryApiTest.MmngrDealloc_TC_09_004_050
 * @subsection MmngrDealloc_TC_09_004_050_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrDealloc_TC_09_004_050_tci Test Case ID
 * MmngrDealloc_S4_A_TC_09_004_050
 * @subsection MmngrDealloc_TC_09_004_050_rr Related Requirement(s)
 * \#276412
 * @subsection MmngrDealloc_TC_09_004_050_pp Prerequisite/Precondition
 * OSAL is initialized.
 * @subsection MmngrDealloc_TC_09_004_050_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrDeallocate with abnormal condition in OSAL_MMNGR_ALLOC_MODE_FREE_LIST mode.
 * - pre-process: open memory manager
 * - Test09_004_050: "hndl_mmngr->p_ptr_self" is invalid.
 * - post-process: close memory manager
 * @subsection MmngrDealloc_TC_09_004_050_tpts Test Procedure/Test Steps
 * -# Call R_OSAL_MmngrGetOsalMaxConfig to get the max config then set mode to OSAL_MMNGR_ALLOC_MODE_FREE_LIST
 * -# Call R_OSAL_MmngrOpen with valid parameter and above config.
 * -# Call R_OSAL_MmngrAlloc with valid parameter
 * -# Call R_OSAL_MmngrDeallocate with an invalid hndl_mmngr->p_ptr_self:
 *      - hndl_mmngr with p_ptr_self value changed to p_ptr_self_ng
 *      - "p_ptr_self_ng" is allocated by malloc function.
 * -# Deallocate hndl_mmngr by using R_OSAL_MmngrDeallocate.
 *      - hndl_mmngr with valid p_ptr_self value
 * -# Call R_OSAL_MmngrClose to close the memory manager.
 * @subsection MmngrDealloc_TC_09_004_050_ereb Expected Result/Behavior
 * -# The return value of R_OSAL_MmngrGetOsalMaxConfig is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrOpen is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrAlloc is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrDeallocate is OSAL_RETURN_HANDLE.
 * -# The return value of R_OSAL_MmngrDeallocate is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrClose is OSAL_RETURN_OK.
 * @subsection MmngrDealloc_TC_09_004_050_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrDealloc_TC_09_004_050
 */
// [MmngrDealloc_TC_09_004_050]
TEST_F(MemoryApiTest, MmngrDealloc_TC_09_004_050)
{
    void* ptr_self_bak;
    void* ptr_self_ng;
    size = 64;
    alignment = 64;

    // Test09_004_050
    // @brief: abnormal case: hndl_mmngr->p_ptr_self is invalid
    EXPECT_EQ(R_OSAL_MmngrGetOsalMaxConfig(&config), OSAL_RETURN_OK);
    config.mode = OSAL_MMNGR_ALLOC_MODE_FREE_LIST;
    EXPECT_EQ(R_OSAL_MmngrOpen(&config, &hndl_mmngr), OSAL_RETURN_OK);
    EXPECT_EQ(R_OSAL_MmngrAlloc(hndl_mmngr, size, alignment, &buffer_obj), OSAL_RETURN_OK);
    ptr_self_bak = hndl_mmngr->p_ptr_self;
    ptr_self_ng = malloc(0x100);
    memset(ptr_self_ng, 0x0, 0x100);
    hndl_mmngr->p_ptr_self = ptr_self_ng;
    EXPECT_EQ(R_OSAL_MmngrDealloc(hndl_mmngr, buffer_obj), OSAL_RETURN_HANDLE) << "Test09_004_050 failed";
    free(ptr_self_ng);
    hndl_mmngr->p_ptr_self = ptr_self_bak;
    EXPECT_EQ(R_OSAL_MmngrDealloc(hndl_mmngr, buffer_obj), OSAL_RETURN_OK) << "Test09_004_050 failed";
    EXPECT_EQ(R_OSAL_MmngrClose(hndl_mmngr), OSAL_RETURN_OK) << "Test09_004_050 failed";
    hndl_mmngr = OSAL_MEMORY_MANAGER_HANDLE_INVALID;
    buffer_obj = OSAL_MEMORY_BUFFER_HANDLE_INVALID;
}
// [MmngrDealloc_TC_09_004_050]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrDealloc_TC_09_004_051 MemoryApiTest.MmngrDealloc_TC_09_004_051
 * @subsection MmngrDealloc_TC_09_004_051_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrDealloc_TC_09_004_051_tci Test Case ID
 * MmngrDealloc_S4_A_TC_09_004_051
 * @subsection MmngrDealloc_TC_09_004_051_rr Related Requirement(s)
 * \#276412
 * @subsection MmngrDealloc_TC_09_004_051_pp Prerequisite/Precondition
 * OSAL is initialized.
 * @subsection MmngrDealloc_TC_09_004_051_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrDeallocate with abnormal condition in OSAL_MMNGR_ALLOC_MODE_FREE_LIST_PROT mode.
 * - pre-process: open memory manager
 * - Test09_004_051: "hndl_mmngr->p_ptr_self" is invalid.
 * - post-process: close memory manager
 * @subsection MmngrDealloc_TC_09_004_051_tpts Test Procedure/Test Steps
 * -# Call R_OSAL_MmngrGetOsalMaxConfig to get the max config then set mode to OSAL_MMNGR_ALLOC_MODE_FREE_LIST_PROT
 * -# Call R_OSAL_MmngrOpen with valid parameter and above config.
 * -# Call R_OSAL_MmngrAlloc with valid parameter
 * -# Call R_OSAL_MmngrDeallocate with an invalid hndl_mmngr->p_ptr_self:
 *      - hndl_mmngr with p_ptr_self value changed to p_ptr_self_ng
 *      - "p_ptr_self_ng" is allocated by malloc function.
 * -# Deallocate hndl_mmngr by using R_OSAL_MmngrDeallocate.
 *      - hndl_mmngr with valid p_ptr_self value
 * -# Call R_OSAL_MmngrClose to close the memory manager.
 * @subsection MmngrDealloc_TC_09_004_051_ereb Expected Result/Behavior
 * -# The return value of R_OSAL_MmngrGetOsalMaxConfig is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrOpen is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrAlloc is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrDeallocate is OSAL_RETURN_HANDLE.
 * -# The return value of R_OSAL_MmngrDeallocate is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrClose is OSAL_RETURN_OK.
 * @subsection MmngrDealloc_TC_09_004_051_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrDealloc_TC_09_004_051
 */
// [MmngrDealloc_TC_09_004_051]
TEST_F(MemoryApiTest, MmngrDealloc_TC_09_004_051)
{
    void* ptr_self_bak;
    void* ptr_self_ng;
    size = 64;
    alignment = 64;

    // Test09_004_051
    // @brief: abnormal case: hndl_mmngr->p_ptr_self is invalid
    EXPECT_EQ(R_OSAL_MmngrGetOsalMaxConfig(&config), OSAL_RETURN_OK);
    config.mode = OSAL_MMNGR_ALLOC_MODE_FREE_LIST_PROT;
    EXPECT_EQ(R_OSAL_MmngrOpen(&config, &hndl_mmngr), OSAL_RETURN_OK);
    EXPECT_EQ(R_OSAL_MmngrAlloc(hndl_mmngr, size, alignment, &buffer_obj), OSAL_RETURN_OK);
    ptr_self_bak = hndl_mmngr->p_ptr_self;
    ptr_self_ng = malloc(0x100);
    memset(ptr_self_ng, 0x0, 0x100);
    hndl_mmngr->p_ptr_self = ptr_self_ng;
    EXPECT_EQ(R_OSAL_MmngrDealloc(hndl_mmngr, buffer_obj), OSAL_RETURN_HANDLE) << "Test09_004_051 failed";
    free(ptr_self_ng);
    hndl_mmngr->p_ptr_self = ptr_self_bak;
    EXPECT_EQ(R_OSAL_MmngrDealloc(hndl_mmngr, buffer_obj), OSAL_RETURN_OK) << "Test09_004_051 failed";
    EXPECT_EQ(R_OSAL_MmngrClose(hndl_mmngr), OSAL_RETURN_OK) << "Test09_004_051 failed";
    hndl_mmngr = OSAL_MEMORY_MANAGER_HANDLE_INVALID;
    buffer_obj = OSAL_MEMORY_BUFFER_HANDLE_INVALID;
}
// [MmngrDealloc_TC_09_004_051]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrGetConfig_TC_09_005_001 MemoryApiTest.MmngrGetConfig_TC_09_005_001
 * @subsection MmngrGetConfig_TC_09_005_001_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrGetConfig_TC_09_005_001_tci Test Case ID
 * MmngrGetConfig_S1_N_TC_09_005_001
 * @subsection MmngrGetConfig_TC_09_005_001_rr Related Requirement(s)
 * \#276402, \#276544, \#276744
 * @subsection MmngrGetConfig_TC_09_005_001_pp Prerequisite/Precondition
 * OSAL is initialized.
 * @subsection MmngrGetConfig_TC_09_005_001_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrGetConfig with normal condition
 * - pre-process: open new memory manager
 * - Test09_005_001: with all valid parameters.
 * - post-process: close memory manager
 * @subsection MmngrGetConfig_TC_09_005_001_tpts Test Procedure/Test Steps
 * -# Open the handle using R_OSAL_MmngrOpen with config:
 *      - config.max_allowed_allocations = 1
 *      - config.max_registered_monitors_cbs = 0
 *      - config.memory_limit = 4096
 *      - config.mode = OSAL_MMNGR_ALLOC_MODE_STACK
 * -# Call R_OSAL_MmngrGetConfig with all valid parameters.
 * -# Call R_OSAL_MmngrClose to close memory handle.
 * @subsection MmngrGetConfig_TC_09_005_001_ereb Expected Result/Behavior
 * -# The return of R_OSAL_MmngrOpen is OSAL_RETURN_OK.<br>
 * The return handle is not OSAL_MEMORY_MANAGER_HANDLE_INVALID.
 * -# The return value of R_OSAL_MmngrGetConfig is OSAL_RETURN_OK.<br>
 * The return config is the same as the config in R_OSAL_MmngrOpen step.
 * -# The return value of R_OSAL_MmngrClose is OSAL_RETURN_OK.
 * @subsection MmngrGetConfig_TC_09_005_001_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrGetConfig_TC_09_005_001
 */
// [MmngrGetConfig_TC_09_005_001]
TEST_F(MemoryApiTest, MmngrGetConfig_TC_09_005_001)
{
    st_osal_mmngr_config_t output_config;

    // pre-process: open new memory manager
    config.memory_limit                = 4096;
    config.max_allowed_allocations     = 1;
    config.max_registered_monitors_cbs = 0;
    config.mode = OSAL_MMNGR_ALLOC_MODE_STACK;

    EXPECT_EQ(R_OSAL_MmngrOpen(&config, &hndl_mmngr), OSAL_RETURN_OK) << "pre-process failed";
    EXPECT_NE(hndl_mmngr, OSAL_MEMORY_MANAGER_HANDLE_INVALID) << "pre-process failed";

    //Test09_005_001
    // @brief: normal case: all valid argument
    EXPECT_EQ(R_OSAL_MmngrGetConfig(hndl_mmngr, &output_config), OSAL_RETURN_OK) << "Test09_005_001 failed";
    EXPECT_EQ(output_config.memory_limit,4096) << "Test09_005_001 failed";
    EXPECT_EQ(output_config.max_allowed_allocations,1) << "Test09_005_001 failed";
    EXPECT_EQ(output_config.max_registered_monitors_cbs, 0) << "Test09_005_001 failed";
    EXPECT_EQ(output_config.mode,OSAL_MMNGR_ALLOC_MODE_STACK) << "Test09_005_001 failed";

    // post-process: close memory manager
    EXPECT_EQ(R_OSAL_MmngrClose(hndl_mmngr), OSAL_RETURN_OK) << "post-process failed";
    hndl_mmngr = OSAL_MEMORY_MANAGER_HANDLE_INVALID;
}
// [MmngrGetConfig_TC_09_005_001]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrGetConfig_TC_09_005_002 MemoryApiTest.MmngrGetConfig_TC_09_005_002
 * @subsection MmngrGetConfig_TC_09_005_002_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrGetConfig_TC_09_005_002_tci Test Case ID
 * MmngrGetConfig_S1_A_TC_09_005_002
 * @subsection MmngrGetConfig_TC_09_005_002_rr Related Requirement(s)
 * \#276402
 * @subsection MmngrGetConfig_TC_09_005_002_pp Prerequisite/Precondition
 * OSAL is initialized.
 * @subsection MmngrGetConfig_TC_09_005_002_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrGetConfig with normal condition
 * - Test09_005_002: memory handle is OSAL_MEMORY_MANAGER_HANDLE_INVALID.
 * @subsection MmngrGetConfig_TC_09_005_002_tpts Test Procedure/Test Steps
 * -# Call R_OSAL_MmngrGetConfig with handle is OSAL_MEMORY_MANAGER_HANDLE_INVALID.
 * @subsection MmngrGetConfig_TC_09_005_002_ereb Expected Result/Behavior
 * -# The return value of R_OSAL_MmngrGetConfig is OSAL_RETURN_OK.<br>
 * The return config is not the default/maximum config of OSAL Memory manager.
 * @subsection MmngrGetConfig_TC_09_005_002_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrGetConfig_TC_09_005_002
 */
// [MmngrGetConfig_TC_09_005_002]
TEST_F(MemoryApiTest, MmngrGetConfig_TC_09_005_002)
{
    st_osal_mmngr_config_t output_config;

    // Test09_005_002
    // @brief: normal case: hndl_mmngr = OSAL_MEMORY_MANAGER_HANDLE_INVALID
    EXPECT_EQ(R_OSAL_MmngrGetConfig(OSAL_MEMORY_MANAGER_HANDLE_INVALID, &output_config), OSAL_RETURN_OK) << "Test09_005_002 failed";
    EXPECT_NE(output_config.memory_limit,0) << "Test09_005_002 failed";
    EXPECT_TRUE(output_config.max_allowed_allocations != 0) << "Test09_005_002 failed";
    EXPECT_NE(output_config.mode, OSAL_MMNGR_ALLOC_MODE_INVALID) << "Test09_005_002 failed";
}
// [MmngrGetConfig_TC_09_005_002]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrGetConfig_TC_09_005_003 MemoryApiTest.MmngrGetConfig_TC_09_005_003
 * @subsection MmngrGetConfig_TC_09_005_003_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrGetConfig_TC_09_005_003_tci Test Case ID
 * MmngrGetConfig_S4_A_TC_09_005_003
 * @subsection MmngrGetConfig_TC_09_005_003_rr Related Requirement(s)
 * \#276544
 * @subsection MmngrGetConfig_TC_09_005_003_pp Prerequisite/Precondition
 * OSAL is initialized.
 * @subsection MmngrGetConfig_TC_09_005_003_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrGetConfig with abnormal condition
 * - pre-process: open new memory manager
 * - Test09_005_003: handle does not support get configuration.
 * - post-process: close memory manager
 * @subsection MmngrGetConfig_TC_09_005_003_tpts Test Procedure/Test Steps
 * -# Open the handle using R_OSAL_MmngrOpen with config:
 *      - config.max_allowed_allocations = 1
 *      - config.max_registered_monitors_cbs = 0
 *      - config.memory_limit = 4096
 *      - config.mode = OSAL_MMNGR_ALLOC_MODE_STACK
 * -# Allocate "tmp_hndl_mmngr" by using malloc function.
 * -# Store "hndl_mmngr->p_getConfig" to "tmp_hndl_mmngr->p_getConfig".<br>
 * Set "hndl_mmngr->p_getConfig" to NULL. <br>
 * Call R_OSAL_MmngrGetConfig with the changed memory handle "hndl_mmngr".<br>
 * Re-assign "tmp_hndl_mmngr->p_getConfig" to "hndl_mmngr->p_getConfig".
 * -# Free buffer pointed by "tmp_hndl_mmngr"
 * -# Call R_OSAL_MmngrClose to close memory manager
 * @subsection MmngrGetConfig_TC_09_005_003_ereb Expected Result/Behavior
 * -# The return of R_OSAL_MmngrOpen is OSAL_RETURN_OK.<br>
 * The return handle is not OSAL_MEMORY_MANAGER_HANDLE_INVALID.
 * -# Memory allocation succeeded (Pointer to buffer != Nullpointer)
 * -# The return value of R_OSAL_MmngrGetConfig is OSAL_RETURN_HANDLE_NOT_SUPPORTED.
 * -# Allocated memory free succeeded.
 * -# R_OSAL_MmngrClose return OSAL_RETURN_OK
 * @subsection MmngrGetConfig_TC_09_005_003_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrGetConfig_TC_09_005_003
 */
// [MmngrGetConfig_TC_09_005_003]
TEST_F(MemoryApiTest, MmngrGetConfig_TC_09_005_003)
{
    st_osal_mmngr_config_t output_config;
    osal_memory_manager_handle_t tmp_hndl_mmngr;

    // pre-process: open memory manager
    config.memory_limit                = 4096;
    config.max_allowed_allocations     = 1;
    config.max_registered_monitors_cbs = 0;
    config.mode = OSAL_MMNGR_ALLOC_MODE_STACK;

    EXPECT_EQ(R_OSAL_MmngrOpen(&config, &hndl_mmngr), OSAL_RETURN_OK)  << "pre-process failed";
    EXPECT_NE(hndl_mmngr, OSAL_MEMORY_MANAGER_HANDLE_INVALID) << "pre-process failed";

    // Test09_005_003
    // @brief: abnormal case: hndl_mmngr does not support get configuration
    tmp_hndl_mmngr = (osal_memory_manager_handle_t)malloc (sizeof(st_osal_memory_manager_obj));
    EXPECT_NE(tmp_hndl_mmngr, NULL_PTR);
    tmp_hndl_mmngr->p_getConfig = hndl_mmngr->p_getConfig;
    hndl_mmngr->p_getConfig = NULL;
    EXPECT_EQ(R_OSAL_MmngrGetConfig(hndl_mmngr, &output_config), OSAL_RETURN_HANDLE_NOT_SUPPORTED) << "Test09_005_003 failed";
    hndl_mmngr->p_getConfig = tmp_hndl_mmngr->p_getConfig;
    free(tmp_hndl_mmngr);

    // post-process: close memory manager
    EXPECT_EQ(R_OSAL_MmngrClose(hndl_mmngr), OSAL_RETURN_OK) << "post-process failed";
    hndl_mmngr = OSAL_MEMORY_MANAGER_HANDLE_INVALID;
}
// [MmngrGetConfig_TC_09_005_003]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrGetConfig_TC_09_005_004 MemoryApiTest.MmngrGetConfig_TC_09_005_004
 * @subsection MmngrGetConfig_TC_09_005_004_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrGetConfig_TC_09_005_004_tci Test Case ID
 * MmngrGetConfig_S4_A_TC_09_005_004
 * @subsection MmngrGetConfig_TC_09_005_004_rr Related Requirement(s)
 * \#276544
 * @subsection MmngrGetConfig_TC_09_005_004_pp Prerequisite/Precondition
 * OSAL is initialized.
 * @subsection MmngrGetConfig_TC_09_005_004_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrGetConfig with abnormal condition
 * - pre-process: open new memory manager
 * - Test09_005_004: internal handle parameter is invalid (p_ptr_self).
 * - post-process: close memory manager
 * @subsection MmngrGetConfig_TC_09_005_004_tpts Test Procedure/Test Steps
 * -# Open the handle using R_OSAL_MmngrOpen with config:
 *      - config.max_allowed_allocations = 1
 *      - config.max_registered_monitors_cbs = 0
 *      - config.memory_limit = 4096
 *      - config.mode = OSAL_MMNGR_ALLOC_MODE_STACK
 * -# Allocate "tmp_hndl_mmngr" by using malloc function.
 * -# Store "hndl_mmngr->p_ptr_self" to "tmp_hndl_mmngr->p_ptr_self".<br>
 * Set "hndl_mmngr->p_ptr_self" to NULL. <br>
 * Call R_OSAL_MmngrGetConfig with the changed handle.<br>
 * Re-assign "tmp_hndl_mmngr->p_ptr_self" to "hndl_mmngr->p_ptr_self".
 * -# Free buffer pointed by "tmp_hndl_mmngr"
 * -# Call R_OSAL_MmngrClose to close memory manager
 * @subsection MmngrGetConfig_TC_09_005_004_ereb Expected Result/Behavior
 * -# The return of R_OSAL_MmngrOpen is OSAL_RETURN_OK.<br>
 * The return handle is not OSAL_MEMORY_MANAGER_HANDLE_INVALID.
 * -# Memory allocation succeeded (Pointer to buffer != Nullpointer)
 * -# The return value of R_OSAL_MmngrGetConfig is OSAL_RETURN_HANDLE.
 * -# Allocated memory free succeeded.
 * -# R_OSAL_MmngrClose return OSAL_RETURN_OK
 * @subsection MmngrGetConfig_TC_09_005_004_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrGetConfig_TC_09_005_004
 */
// [MmngrGetConfig_TC_09_005_004]
TEST_F(MemoryApiTest, MmngrGetConfig_TC_09_005_004)
{
    st_osal_mmngr_config_t output_config;
    osal_memory_manager_handle_t tmp_hndl_mmngr;

    // pre-process: open memory manager
    config.memory_limit                = 4096;
    config.max_allowed_allocations     = 1;
    config.max_registered_monitors_cbs = 0;
    config.mode = OSAL_MMNGR_ALLOC_MODE_STACK;

    EXPECT_EQ(R_OSAL_MmngrOpen(&config, &hndl_mmngr), OSAL_RETURN_OK) << "pre-process failed";
    EXPECT_NE(hndl_mmngr, OSAL_MEMORY_MANAGER_HANDLE_INVALID) << "pre-process failed";

    // Test09_005_004
    // @brief: abnormal case: internal handle parameter is invalid (p_ptr_self)
    tmp_hndl_mmngr = (osal_memory_manager_handle_t)malloc (sizeof(st_osal_memory_manager_obj));
    EXPECT_NE(tmp_hndl_mmngr, NULL_PTR);
    tmp_hndl_mmngr->p_ptr_self = hndl_mmngr->p_ptr_self;
    hndl_mmngr->p_ptr_self = NULL;
    EXPECT_EQ(R_OSAL_MmngrGetConfig(hndl_mmngr, &output_config), OSAL_RETURN_HANDLE) << "Test09_005_004 failed";
    hndl_mmngr->p_ptr_self = tmp_hndl_mmngr->p_ptr_self;
    free(tmp_hndl_mmngr);

    // post-process: close memory manager
    EXPECT_EQ(R_OSAL_MmngrClose(hndl_mmngr), OSAL_RETURN_OK) << "post-process failed";
    hndl_mmngr = OSAL_MEMORY_MANAGER_HANDLE_INVALID;
}
// [MmngrGetConfig_TC_09_005_004]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrGetConfig_TC_09_005_005 MemoryApiTest.MmngrGetConfig_TC_09_005_005
 * @subsection MmngrGetConfig_TC_09_005_005_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrGetConfig_TC_09_005_005_tci Test Case ID
 * MmngrGetConfig_S1_N_TC_09_005_005
 * @subsection MmngrGetConfig_TC_09_005_005_rr Related Requirement(s)
 * \#276544
 * @subsection MmngrGetConfig_TC_09_005_005_pp Prerequisite/Precondition
 * OSAL is initialized.
 * @subsection MmngrGetConfig_TC_09_005_005_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrGetConfig with abnormal condition
 * - pre-process: open new memory manager
 * - Test09_005_005: internal handle parameter is invalid (p_allocate).
 * - post-process: close memory manager
 * @subsection MmngrGetConfig_TC_09_005_005_tpts Test Procedure/Test Steps
 * -# Open the handle using R_OSAL_MmngrOpen with config:
 *      - config.max_allowed_allocations = 1
 *      - config.max_registered_monitors_cbs = 0
 *      - config.memory_limit = 4096
 *      - config.mode = OSAL_MMNGR_ALLOC_MODE_STACK
 * -# Allocate "tmp_hndl_mmngr" by using malloc function.
 * -# Store "hndl_mmngr->p_allocate" to "tmp_hndl_mmngr->p_allocate".<br>
 * Set "hndl_mmngr->p_allocate" to NULL. <br>
 * Call R_OSAL_MmngrGetConfig with the changed handle.<br>
 * Re-assign "tmp_hndl_mmngr->p_allocate" to "hndl_mmngr->p_allocate".
 * -# Free buffer pointed by "tmp_hndl_mmngr"
 * -# Call R_OSAL_MmngrClose to close memory manager
 * @subsection MmngrGetConfig_TC_09_005_005_ereb Expected Result/Behavior
 * -# The return of R_OSAL_MmngrOpen is OSAL_RETURN_OK.<br>
 * The return handle is not OSAL_MEMORY_MANAGER_HANDLE_INVALID.
 * -# Memory allocation succeeded (Pointer to buffer != Nullpointer)
 * -# The return value of R_OSAL_MmngrGetConfig is OSAL_RETURN_OK.
 * -# Allocated memory free succeeded.
 * -# R_OSAL_MmngrClose return OSAL_RETURN_OK
 * @subsection MmngrGetConfig_TC_09_005_005_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrGetConfig_TC_09_005_005
 */
// [MmngrGetConfig_TC_09_005_005]
TEST_F(MemoryApiTest, MmngrGetConfig_TC_09_005_005)
{
    st_osal_mmngr_config_t output_config;
    osal_memory_manager_handle_t tmp_hndl_mmngr;

    // pre-process: open memory manager
    config.memory_limit                = 4096;
    config.max_allowed_allocations     = 1;
    config.max_registered_monitors_cbs = 0;
    config.mode = OSAL_MMNGR_ALLOC_MODE_STACK;

    EXPECT_EQ(R_OSAL_MmngrOpen(&config, &hndl_mmngr), OSAL_RETURN_OK) << "pre-process failed";
    EXPECT_NE(hndl_mmngr, OSAL_MEMORY_MANAGER_HANDLE_INVALID) << "pre-process failed";

    // Test09_005_005
    // @brief: abnormal case: internal handle parameter is invalid (p_allocate)
    tmp_hndl_mmngr = (osal_memory_manager_handle_t)malloc (sizeof(st_osal_memory_manager_obj));
    EXPECT_NE(tmp_hndl_mmngr, NULL_PTR);
    tmp_hndl_mmngr->p_allocate = hndl_mmngr->p_allocate;
    hndl_mmngr->p_allocate = NULL;
    EXPECT_EQ(R_OSAL_MmngrGetConfig(hndl_mmngr, &output_config), OSAL_RETURN_OK) << "Test09_005_005 failed";
    hndl_mmngr->p_allocate = tmp_hndl_mmngr->p_allocate;
    free(tmp_hndl_mmngr);

    // post-process: close memory manager
    EXPECT_EQ(R_OSAL_MmngrClose(hndl_mmngr), OSAL_RETURN_OK) << "post-process failed";
    hndl_mmngr = OSAL_MEMORY_MANAGER_HANDLE_INVALID;
}
// [MmngrGetConfig_TC_09_005_005]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrGetConfig_TC_09_005_006 MemoryApiTest.MmngrGetConfig_TC_09_005_006
 * @subsection MmngrGetConfig_TC_09_005_006_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrGetConfig_TC_09_005_006_tci Test Case ID
 * MmngrGetConfig_S0_A_TC_09_005_006
 * @subsection MmngrGetConfig_TC_09_005_006_rr Related Requirement(s)
 * \#276544
 * @subsection MmngrGetConfig_TC_09_005_006_pp Prerequisite/Precondition
 * OSAL is initialized.
 * @subsection MmngrGetConfig_TC_09_005_006_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrGetConfig with abnormal condition
 * - pre-process: open new memory manager
 * - Test09_005_006: config is NULL.
 * - post-process: close memory manager
 * @subsection MmngrGetConfig_TC_09_005_006_tpts Test Procedure/Test Steps
 * -# Open the handle using R_OSAL_MmngrOpen with config:
 *      - config.max_allowed_allocations = 1
 *      - config.max_registered_monitors_cbs = 0
 *      - config.memory_limit = 4096
 *      - config.mode = OSAL_MMNGR_ALLOC_MODE_STACK
 * -# Call R_OSAL_MmngrGetConfig with the arguments as below:
 *      - Memory handle "hndl_mmngr"
 *      - NULL
 * -# Call R_OSAL_MmngrClose to close memory manager
 * @subsection MmngrGetConfig_TC_09_005_006_ereb Expected Result/Behavior
 * -# The return of R_OSAL_MmngrOpen is OSAL_RETURN_OK.<br>
 * The return handle is not OSAL_MEMORY_MANAGER_HANDLE_INVALID.
 * -# The return value of R_OSAL_MmngrGetConfig is OSAL_RETURN_PAR.
 * -# R_OSAL_MmngrClose return OSAL_RETURN_OK
 * @subsection MmngrGetConfig_TC_09_005_006_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrGetConfig_TC_09_005_006
 */
// [MmngrGetConfig_TC_09_005_006]
TEST_F(MemoryApiTest, MmngrGetConfig_TC_09_005_006)
{
    st_osal_mmngr_config_t *output_config = NULL;

    // pre-process: open memory manager
    config.memory_limit                = 4096;
    config.max_allowed_allocations     = 1;
    config.max_registered_monitors_cbs = 0;
    config.mode = OSAL_MMNGR_ALLOC_MODE_STACK;

    EXPECT_EQ(R_OSAL_MmngrOpen(&config, &hndl_mmngr), OSAL_RETURN_OK) << "pre-process failed";
    EXPECT_NE(hndl_mmngr, OSAL_MEMORY_MANAGER_HANDLE_INVALID) << "pre-process failed";

    // Test09_005_006
    // @brief: abnormal case: config is NULL
    EXPECT_EQ(R_OSAL_MmngrGetConfig(hndl_mmngr, output_config), OSAL_RETURN_PAR) << "Test09_005_006 failed";

    // post-process: close memory manager
    EXPECT_EQ(R_OSAL_MmngrClose(hndl_mmngr), OSAL_RETURN_OK) << "post-process failed";
    hndl_mmngr = OSAL_MEMORY_MANAGER_HANDLE_INVALID;
}
// [MmngrGetConfig_TC_09_005_006]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrGetConfig_TC_09_005_007 MemoryApiTest.MmngrGetConfig_TC_09_005_007
 * @subsection MmngrGetConfig_TC_09_005_007_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrGetConfig_TC_09_005_007_tci Test Case ID
 * MmngrGetConfig_S1_N_TC_09_005_007
 * @subsection MmngrGetConfig_TC_09_005_007_rr Related Requirement(s)
 * \#276544, \#276744
 * @subsection MmngrGetConfig_TC_09_005_007_pp Prerequisite/Precondition
 * OSAL is initialized.
 * @subsection MmngrGetConfig_TC_09_005_007_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrGetConfig with normal condition
 * - pre-process: open new memory manager
 * - Test09_005_007: call R_OSAL_MmngrGetConfig after R_OSAL_MmngrAlloc/Dealloc.
 * - post-process: close memory manager
 * @subsection MmngrGetConfig_TC_09_005_007_tpts Test Procedure/Test Steps
 * -# Open the handle using R_OSAL_MmngrOpen with config:
 *      - config.max_allowed_allocations = 1
 *      - config.max_registered_monitors_cbs = 0
 *      - config.memory_limit = 4096
 *      - config.mode = OSAL_MMNGR_ALLOC_MODE_STACK
 * -# Call R_OSAL_MmngrAlloc with size is 64 and alignment is 64.
 * -# Call R_OSAL_MmngrGetConfig to get the return config.
 * -# Call R_OSAL_MmngrDealloc to deallocated the allocated buffer.
 * -# Call R_OSAL_MmngrGetConfig to get the return config.
 * -# Call R_OSAL_MmngrClose to close the memory handle.
 * @subsection MmngrGetConfig_TC_09_005_007_ereb Expected Result/Behavior
 * -# The return of R_OSAL_MmngrOpen is OSAL_RETURN_OK.<br>
 * The return handle is not OSAL_MEMORY_MANAGER_HANDLE_INVALID.
 * -# The return value of R_OSAL_MmngrAlloc is OSAL_RETURN_OK.<br>
 * The return buffer is not OSAL_MEMORY_BUFFER_HANDLE_INVALID.
 * -# The return value of R_OSAL_MmngrGetConfig is OSAL_RETURN_OK.<br>
 * The return config is the same as the config in R_OSAL_MmngrOpen step.
 * -# The return value of R_OSAL_MmngrDealloc is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrGetConfig is OSAL_RETURN_OK.<br>
 * The return config is the same as the config in R_OSAL_MmngrOpen step.
 * -# The return value of R_OSAL_MmngrClose is OSAL_RETURN_OK.
 * @subsection MmngrGetConfig_TC_09_005_007_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrGetConfig_TC_09_005_007
 */
// [MmngrGetConfig_TC_09_005_007]
TEST_F(MemoryApiTest, MmngrGetConfig_TC_09_005_007)
{
    st_osal_mmngr_config_t output_config;

    // pre-process: open new memory manager
    config.memory_limit                = 4096;
    config.max_allowed_allocations     = 1;
    config.max_registered_monitors_cbs = 0;
    config.mode = OSAL_MMNGR_ALLOC_MODE_STACK;

    EXPECT_EQ(R_OSAL_MmngrOpen(&config, &hndl_mmngr), OSAL_RETURN_OK) << "pre-process failed";
    EXPECT_NE(hndl_mmngr, OSAL_MEMORY_MANAGER_HANDLE_INVALID) << "pre-process failed";

    // Test09_005_007
    // @brief: normal case: R_OSAL_MmngrGetConfig after R_OSAL_MmngrAlloc/Dealloc
    size = 64;
    alignment = 64;
    EXPECT_EQ(R_OSAL_MmngrAlloc(hndl_mmngr, size, alignment, &buffer_obj), OSAL_RETURN_OK);
    EXPECT_NE(buffer_obj, OSAL_MEMORY_BUFFER_HANDLE_INVALID);
    EXPECT_EQ(R_OSAL_MmngrGetConfig(hndl_mmngr, &output_config), OSAL_RETURN_OK) << "Test09_005_007 failed";
    EXPECT_EQ(output_config.memory_limit,4096) << "Test09_005_007 failed";
    EXPECT_EQ(output_config.max_allowed_allocations,1) << "Test09_005_007 failed";
    EXPECT_EQ(output_config.max_registered_monitors_cbs, 0) << "Test09_005_007 failed";
    EXPECT_EQ(output_config.mode,OSAL_MMNGR_ALLOC_MODE_STACK) << "Test09_005_007 failed";
    EXPECT_EQ(R_OSAL_MmngrDealloc(hndl_mmngr, buffer_obj), OSAL_RETURN_OK);
    buffer_obj = OSAL_MEMORY_BUFFER_HANDLE_INVALID;
    EXPECT_EQ(R_OSAL_MmngrGetConfig(hndl_mmngr, &output_config), OSAL_RETURN_OK) << "Test09_005_007 failed";
    EXPECT_EQ(output_config.memory_limit,4096) << "Test09_005_007 failed";
    EXPECT_EQ(output_config.max_allowed_allocations,1) << "Test09_005_007 failed";
    EXPECT_EQ(output_config.max_registered_monitors_cbs, 0) << "Test09_005_007 failed";
    EXPECT_EQ(output_config.mode,OSAL_MMNGR_ALLOC_MODE_STACK) << "Test09_005_007 failed";
    
    // post-process: close memory manager
    EXPECT_EQ(R_OSAL_MmngrClose(hndl_mmngr), OSAL_RETURN_OK) << "post-process failed";
    hndl_mmngr = OSAL_MEMORY_MANAGER_HANDLE_INVALID;
}
// [MmngrGetConfig_TC_09_005_007]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrGetConfig_TC_09_005_008 MemoryApiTest.MmngrGetConfig_TC_09_005_008
 * @subsection MmngrGetConfig_TC_09_005_008_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrGetConfig_TC_09_005_008_tci Test Case ID
 * MmngrGetConfig_S1_N_TC_09_005_008
 * @subsection MmngrGetConfig_TC_09_005_008_rr Related Requirement(s)
 * \#276544, \#276744
 * @subsection MmngrGetConfig_TC_09_005_008_pp Prerequisite/Precondition
 * OSAL is initialized.
 * @subsection MmngrGetConfig_TC_09_005_008_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrGetConfig with normal condition
 * - pre-process: open new memory manager
 * - Test09_005_008: get memory configuration with the memory handle which opened with OSAL_MMNGR_ALLOC_MODE_FREE_LIST mode.
 * - post-process: close memory manager
 * @subsection MmngrGetConfig_TC_09_005_008_tpts Test Procedure/Test Steps
 * -# Open the handle using R_OSAL_MmngrOpen with config:
 *      - config.max_allowed_allocations = 1
 *      - config.max_registered_monitors_cbs = 0
 *      - config.memory_limit = 4096
 *      - config.mode = OSAL_MMNGR_ALLOC_MODE_FREE_LIST
 * -# Call R_OSAL_MmngrGetConfig with memory handle at step above.
 * -# Call R_OSAL_MmngrClose to close memory handle.
 * @subsection MmngrGetConfig_TC_09_005_008_ereb Expected Result/Behavior
 * -# The return of R_OSAL_MmngrOpen is OSAL_RETURN_OK.<br>
 * The return handle is not OSAL_MEMORY_MANAGER_HANDLE_INVALID.
 * -# The return value of R_OSAL_MmngrGetConfig is OSAL_RETURN_OK.<br>
 * The return config is the same as the config in R_OSAL_MmngrOpen step.
 * -# The return value of R_OSAL_MmngrClose is OSAL_RETURN_OK.
 * @subsection MmngrGetConfig_TC_09_005_008_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrGetConfig_TC_09_005_008
 */
// [MmngrGetConfig_TC_09_005_008]
TEST_F(MemoryApiTest, MmngrGetConfig_TC_09_005_008)
{
    st_osal_mmngr_config_t output_config;

    // pre-process: open new memory manager
    config.memory_limit                = 4096;
    config.max_allowed_allocations     = 1;
    config.max_registered_monitors_cbs = 0;
    config.mode = OSAL_MMNGR_ALLOC_MODE_FREE_LIST;

    EXPECT_EQ(R_OSAL_MmngrOpen(&config, &hndl_mmngr), OSAL_RETURN_OK) << "pre-process failed";
    EXPECT_NE(hndl_mmngr, OSAL_MEMORY_MANAGER_HANDLE_INVALID) << "pre-process failed";

    // Test09_005_008
    // @brief: normal case: confirm with OSAL_MMNGR_ALLOC_MODE_FREE_LIST mode
    EXPECT_EQ(R_OSAL_MmngrGetConfig(hndl_mmngr, &output_config), OSAL_RETURN_OK) << "Test09_005_008 failed";
    EXPECT_EQ(output_config.memory_limit,4096) << "Test09_005_008 failed";
    EXPECT_EQ(output_config.max_allowed_allocations,1) << "Test09_005_008 failed";
    EXPECT_EQ(output_config.max_registered_monitors_cbs, 0) << "Test09_005_008 failed";
    EXPECT_EQ(output_config.mode,OSAL_MMNGR_ALLOC_MODE_FREE_LIST) << "Test09_005_008 failed";

    // post-process: close memory manager
    EXPECT_EQ(R_OSAL_MmngrClose(hndl_mmngr), OSAL_RETURN_OK) << "post-process failed";
    hndl_mmngr = OSAL_MEMORY_MANAGER_HANDLE_INVALID;
}
// [MmngrGetConfig_TC_09_005_008]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrGetConfig_TC_09_005_010 MemoryApiTest.MmngrGetConfig_TC_09_005_010
 * @subsection MmngrGetConfig_TC_09_005_010_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrGetConfig_TC_09_005_010_tci Test Case ID
 * MmngrGetConfig_S2_A_TC_09_005_010
 * @subsection MmngrGetConfig_TC_09_005_010_rr Related Requirement(s)
 * \#276544
 * @subsection MmngrGetConfig_TC_09_005_010_pp Prerequisite/Precondition
 * - A dummy handle is created by copy the data from a valid handle in SetUpTestSuite()
 * - The dummy handle will be free after all test cases was executed.
 * - OSAL is initialized.
 * @subsection MmngrGetConfig_TC_09_005_010_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrGetConfig and R_OSAL_MmngrGetConfig with abnormal condition.
 * - Test09_005_010: confirm the use case the of R_OSAL_MmngrGetConfig when Memory Manager is not opened
 * @subsection MmngrGetConfig_TC_09_005_010_tpts Test Procedure/Test Steps
 * -# Call R_OSAL_MmngrGetConfig to allocate the buffer using the dummy handle.
 * @subsection MmngrGetConfig_TC_09_005_010_ereb Expected Result/Behavior
 * -# The return value when calling R_OSAL_MmngrGetConfig is OSAL_RETURN_STATE.
 * @subsection MmngrGetConfig_TC_09_005_010_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrGetConfig_TC_09_005_010
 */
// [MmngrGetConfig_TC_09_005_010]
TEST_F(MemoryApiTest, MmngrGetConfig_TC_09_005_010)
{
    st_osal_mmngr_config_t p_config;

    // Test09_005_010
    // @brief: abnormal case: confirm the use case the of R_OSAL_MmngrGetConfig when Memory Manager is not opened
    EXPECT_EQ(R_OSAL_MmngrGetConfig(dummy_hndl_mmngr, &p_config), OSAL_RETURN_STATE) << "Test09_005_010 failed";
}
// [MmngrGetConfig_TC_09_005_010]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrGetConfig_TC_09_005_011 MemoryApiTest.MmngrGetConfig_TC_09_005_011
 * @subsection MmngrGetConfig_TC_09_005_011_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrGetConfig_TC_09_005_011_tci Test Case ID
 * MmngrGetConfig_S4_A_TC_09_005_011
 * @subsection MmngrGetConfig_TC_09_005_011_rr Related Requirement(s)
 * \#276544
 * @subsection MmngrGetConfig_TC_09_005_011_pp Prerequisite/Precondition
 * OSAL is initialized.
 * @subsection MmngrGetConfig_TC_09_005_011_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrGetConfig with abnormal condition in OSAL_MMNGR_ALLOC_MODE_STACK_PROT mode
 * - pre-process: open new memory manager
 * - Test09_005_011: hndl_mmngr->p_ptr_self is invalid (NULL)
 * - post-process: close memory manager
 * @subsection MmngrGetConfig_TC_09_005_011_tpts Test Procedure/Test Steps
 * -# Open the handle using R_OSAL_MmngrOpen with config:
 *      - config.max_allowed_allocations = 1
 *      - config.max_registered_monitors_cbs = 0
 *      - config.memory_limit = 4096
 *      - config.mode = OSAL_MMNGR_ALLOC_MODE_STACK_PROT
 * -# Call R_OSAL_MmngrGetConfig with the hndl_mmngr->p_ptr_self is NULL
 * -# Call R_OSAL_MmngrClose to close memory manager
 * @subsection MmngrGetConfig_TC_09_005_011_ereb Expected Result/Behavior
 * -# The return of R_OSAL_MmngrOpen is OSAL_RETURN_OK.<br>
 * The return handle is not OSAL_MEMORY_MANAGER_HANDLE_INVALID.
 * -# The return value of R_OSAL_MmngrGetConfig is OSAL_RETURN_HANDLE.
 * -# R_OSAL_MmngrClose return OSAL_RETURN_OK
 * @subsection MmngrGetConfig_TC_09_005_011_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrGetConfig_TC_09_005_011
 */
// [MmngrGetConfig_TC_09_005_011]
TEST_F(MemoryApiTest, MmngrGetConfig_TC_09_005_011)
{
    st_osal_mmngr_config_t output_config;
    void* bk_ptr_self;

    // Test09_005_011
    // @brief: abnormal case: hndl_mmngr->p_ptr_self is invalid (NULL)
    config.memory_limit                = 4096;
    config.max_allowed_allocations     = 1;
    config.max_registered_monitors_cbs = 0;
    config.mode = OSAL_MMNGR_ALLOC_MODE_STACK_PROT;
    EXPECT_EQ(R_OSAL_MmngrOpen(&config, &hndl_mmngr), OSAL_RETURN_OK) << "Test09_005_011 failed";
    EXPECT_NE(hndl_mmngr, OSAL_MEMORY_MANAGER_HANDLE_INVALID) << "Test09_005_011 failed";
    bk_ptr_self = hndl_mmngr->p_ptr_self;
    hndl_mmngr->p_ptr_self = NULL;
    EXPECT_EQ(R_OSAL_MmngrGetConfig(hndl_mmngr, &output_config), OSAL_RETURN_HANDLE) << "Test09_005_011 failed";
    hndl_mmngr->p_ptr_self = bk_ptr_self;
    EXPECT_EQ(R_OSAL_MmngrClose(hndl_mmngr), OSAL_RETURN_OK) << "Test09_005_011 failed";
    hndl_mmngr = OSAL_MEMORY_MANAGER_HANDLE_INVALID;
}
// [MmngrGetConfig_TC_09_005_011]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrGetConfig_TC_09_005_012 MemoryApiTest.MmngrGetConfig_TC_09_005_012
 * @subsection MmngrGetConfig_TC_09_005_012_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrGetConfig_TC_09_005_012_tci Test Case ID
 * MmngrGetConfig_S4_A_TC_09_005_012
 * @subsection MmngrGetConfig_TC_09_005_012_rr Related Requirement(s)
 * \#276544
 * @subsection MmngrGetConfig_TC_09_005_012_pp Prerequisite/Precondition
 * OSAL is initialized.
 * @subsection MmngrGetConfig_TC_09_005_012_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrGetConfig with abnormal condition in OSAL_MMNGR_ALLOC_MODE_FREE_LIST mode
 * - pre-process: open new memory manager
 * - Test09_005_012: hndl_mmngr->p_ptr_self is invalid (NULL)
 * - post-process: close memory manager
 * @subsection MmngrGetConfig_TC_09_005_012_tpts Test Procedure/Test Steps
 * -# Open the handle using R_OSAL_MmngrOpen with config:
 *      - config.max_allowed_allocations = 1
 *      - config.max_registered_monitors_cbs = 0
 *      - config.memory_limit = 4096
 *      - config.mode = OSAL_MMNGR_ALLOC_MODE_FREE_LIST
 * -# Call R_OSAL_MmngrGetConfig with the hndl_mmngr->p_ptr_self is NULL
 * -# Call R_OSAL_MmngrClose to close memory manager
 * @subsection MmngrGetConfig_TC_09_005_012_ereb Expected Result/Behavior
 * -# The return of R_OSAL_MmngrOpen is OSAL_RETURN_OK.<br>
 * The return handle is not OSAL_MEMORY_MANAGER_HANDLE_INVALID.
 * -# The return value of R_OSAL_MmngrGetConfig is OSAL_RETURN_HANDLE.
 * -# R_OSAL_MmngrClose return OSAL_RETURN_OK
 * @subsection MmngrGetConfig_TC_09_005_012_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrGetConfig_TC_09_005_012
 */
// [MmngrGetConfig_TC_09_005_012]
TEST_F(MemoryApiTest, MmngrGetConfig_TC_09_005_012)
{
    st_osal_mmngr_config_t output_config;
    void* bk_ptr_self;

    // Test09_005_012
    // @brief: abnormal case: hndl_mmngr->p_ptr_self is invalid (NULL)
    config.memory_limit                = 4096;
    config.max_allowed_allocations     = 1;
    config.max_registered_monitors_cbs = 0;
    config.mode = OSAL_MMNGR_ALLOC_MODE_FREE_LIST;
    EXPECT_EQ(R_OSAL_MmngrOpen(&config, &hndl_mmngr), OSAL_RETURN_OK) << "Test09_005_012 failed";
    EXPECT_NE(hndl_mmngr, OSAL_MEMORY_MANAGER_HANDLE_INVALID) << "Test09_005_012 failed";
    bk_ptr_self = hndl_mmngr->p_ptr_self;
    hndl_mmngr->p_ptr_self = NULL;
    EXPECT_EQ(R_OSAL_MmngrGetConfig(hndl_mmngr, &output_config), OSAL_RETURN_HANDLE) << "Test09_005_012 failed";
    hndl_mmngr->p_ptr_self = bk_ptr_self;
    EXPECT_EQ(R_OSAL_MmngrClose(hndl_mmngr), OSAL_RETURN_OK) << "Test09_005_012 failed";
    hndl_mmngr = OSAL_MEMORY_MANAGER_HANDLE_INVALID;
}
// [MmngrGetConfig_TC_09_005_012]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrGetConfig_TC_09_005_013 MemoryApiTest.MmngrGetConfig_TC_09_005_013
 * @subsection MmngrGetConfig_TC_09_005_013_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrGetConfig_TC_09_005_013_tci Test Case ID
 * MmngrGetConfig_S4_A_TC_09_005_013
 * @subsection MmngrGetConfig_TC_09_005_013_rr Related Requirement(s)
 * \#276544
 * @subsection MmngrGetConfig_TC_09_005_013_pp Prerequisite/Precondition
 * OSAL is initialized.
 * @subsection MmngrGetConfig_TC_09_005_013_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrGetConfig with abnormal condition in OSAL_MMNGR_ALLOC_MODE_FREE_LIST_PROT mode
 * - pre-process: open new memory manager
 * - Test09_005_013: hndl_mmngr->p_ptr_self is invalid (NULL)
 * - post-process: close memory manager
 * @subsection MmngrGetConfig_TC_09_005_013_tpts Test Procedure/Test Steps
 * -# Open the handle using R_OSAL_MmngrOpen with config:
 *      - config.max_allowed_allocations = 1
 *      - config.max_registered_monitors_cbs = 0
 *      - config.memory_limit = 4096
 *      - config.mode = OSAL_MMNGR_ALLOC_MODE_FREE_LIST_PROT
 * -# Call R_OSAL_MmngrGetConfig with the hndl_mmngr->p_ptr_self is NULL
 * -# Call R_OSAL_MmngrClose to close memory manager
 * @subsection MmngrGetConfig_TC_09_005_013_ereb Expected Result/Behavior
 * -# The return of R_OSAL_MmngrOpen is OSAL_RETURN_OK.<br>
 * The return handle is not OSAL_MEMORY_MANAGER_HANDLE_INVALID.
 * -# The return value of R_OSAL_MmngrGetConfig is OSAL_RETURN_HANDLE.
 * -# R_OSAL_MmngrClose return OSAL_RETURN_OK
 * @subsection MmngrGetConfig_TC_09_005_013_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrGetConfig_TC_09_005_013
 */
// [MmngrGetConfig_TC_09_005_013]
TEST_F(MemoryApiTest, MmngrGetConfig_TC_09_005_013)
{
    st_osal_mmngr_config_t output_config;
    void* bk_ptr_self;

    // Test09_005_013
    // @brief: abnormal case: hndl_mmngr->p_ptr_self is invalid (NULL)
    config.memory_limit                = 4096;
    config.max_allowed_allocations     = 1;
    config.max_registered_monitors_cbs = 0;
    config.mode = OSAL_MMNGR_ALLOC_MODE_FREE_LIST_PROT;
    EXPECT_EQ(R_OSAL_MmngrOpen(&config, &hndl_mmngr), OSAL_RETURN_OK) << "Test09_005_013 failed";
    EXPECT_NE(hndl_mmngr, OSAL_MEMORY_MANAGER_HANDLE_INVALID) << "Test09_005_013 failed";
    bk_ptr_self = hndl_mmngr->p_ptr_self;
    hndl_mmngr->p_ptr_self = NULL;
    EXPECT_EQ(R_OSAL_MmngrGetConfig(hndl_mmngr, &output_config), OSAL_RETURN_HANDLE) << "Test09_005_013 failed";
    hndl_mmngr->p_ptr_self = bk_ptr_self;
    EXPECT_EQ(R_OSAL_MmngrClose(hndl_mmngr), OSAL_RETURN_OK) << "Test09_005_013 failed";
    hndl_mmngr = OSAL_MEMORY_MANAGER_HANDLE_INVALID;
}
// [MmngrGetConfig_TC_09_005_013]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrGetConfig_TC_09_005_014 MemoryApiTest.MmngrGetConfig_TC_09_005_014
 * @subsection MmngrGetConfig_TC_09_005_014_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrGetConfig_TC_09_005_014_tci Test Case ID
 * MmngrGetConfig_S4_A_TC_09_005_014
 * @subsection MmngrGetConfig_TC_09_005_014_rr Related Requirement(s)
 * \#276544
 * @subsection MmngrGetConfig_TC_09_005_014_pp Prerequisite/Precondition
 * OSAL is initialized.
 * @subsection MmngrGetConfig_TC_09_005_014_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrGetConfig with abnormal condition in OSAL_MMNGR_ALLOC_MODE_STACK mode
 * - pre-process: open new memory manager
 * - Test09_005_014: hndl_mmngr->p_ptr_self is invalid (not NULL)
 * - post-process: close memory manager
 * @subsection MmngrGetConfig_TC_09_005_014_tpts Test Procedure/Test Steps
 * -# Open the handle using R_OSAL_MmngrOpen with config:
 *      - config.max_allowed_allocations = 1
 *      - config.max_registered_monitors_cbs = 0
 *      - config.memory_limit = 4096
 *      - config.mode = OSAL_MMNGR_ALLOC_MODE_STACK
 * -# Call R_OSAL_MmngrGetConfig with the hndl_mmngr->p_ptr_self is invalid (not NULL)
 * -# Call R_OSAL_MmngrClose to close memory manager
 * @subsection MmngrGetConfig_TC_09_005_014_ereb Expected Result/Behavior
 * -# The return of R_OSAL_MmngrOpen is OSAL_RETURN_OK.<br>
 * The return handle is not OSAL_MEMORY_MANAGER_HANDLE_INVALID.
 * -# The return value of R_OSAL_MmngrGetConfig is OSAL_RETURN_HANDLE.
 * -# R_OSAL_MmngrClose return OSAL_RETURN_OK
 * @subsection MmngrGetConfig_TC_09_005_014_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrGetConfig_TC_09_005_014
 */
// [MmngrGetConfig_TC_09_005_014]
TEST_F(MemoryApiTest, MmngrGetConfig_TC_09_005_014)
{
    st_osal_mmngr_config_t output_config;
    void* bk_ptr_self;
    void* ng_ptr_self;

    // Test09_005_014
    // @brief: abnormal case: hndl_mmngr->p_ptr_self is invalid (not NULL)
    config.memory_limit                = 4096;
    config.max_allowed_allocations     = 1;
    config.max_registered_monitors_cbs = 0;
    config.mode = OSAL_MMNGR_ALLOC_MODE_STACK;
    EXPECT_EQ(R_OSAL_MmngrOpen(&config, &hndl_mmngr), OSAL_RETURN_OK) << "Test09_005_014 failed";
    EXPECT_NE(hndl_mmngr, OSAL_MEMORY_MANAGER_HANDLE_INVALID) << "Test09_005_014 failed";
    ng_ptr_self = malloc(0x100);
    EXPECT_NE(ng_ptr_self, NULL_PTR) << "Test09_005_014 failed";
    memset(ng_ptr_self, 0x1, 0x100);
    bk_ptr_self = hndl_mmngr->p_ptr_self;
    hndl_mmngr->p_ptr_self = ng_ptr_self;
    EXPECT_EQ(R_OSAL_MmngrGetConfig(hndl_mmngr, &output_config), OSAL_RETURN_HANDLE) << "Test09_005_014 failed";
    hndl_mmngr->p_ptr_self = bk_ptr_self;
    EXPECT_EQ(R_OSAL_MmngrClose(hndl_mmngr), OSAL_RETURN_OK) << "Test09_005_014 failed";
    hndl_mmngr = OSAL_MEMORY_MANAGER_HANDLE_INVALID;
    free(ng_ptr_self);
}
// [MmngrGetConfig_TC_09_005_014]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrGetConfig_TC_09_005_015 MemoryApiTest.MmngrGetConfig_TC_09_005_015
 * @subsection MmngrGetConfig_TC_09_005_015_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrGetConfig_TC_09_005_015_tci Test Case ID
 * MmngrGetConfig_S4_A_TC_09_005_015
 * @subsection MmngrGetConfig_TC_09_005_015_rr Related Requirement(s)
 * \#276544
 * @subsection MmngrGetConfig_TC_09_005_015_pp Prerequisite/Precondition
 * OSAL is initialized.
 * @subsection MmngrGetConfig_TC_09_005_015_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrGetConfig with abnormal condition in OSAL_MMNGR_ALLOC_MODE_STACK_PROT mode
 * - pre-process: open new memory manager
 * - Test09_005_015: hndl_mmngr->p_ptr_self is invalid (not NULL)
 * - post-process: close memory manager
 * @subsection MmngrGetConfig_TC_09_005_015_tpts Test Procedure/Test Steps
 * -# Open the handle using R_OSAL_MmngrOpen with config:
 *      - config.max_allowed_allocations = 1
 *      - config.max_registered_monitors_cbs = 0
 *      - config.memory_limit = 4096
 *      - config.mode = OSAL_MMNGR_ALLOC_MODE_STACK_PROT
 * -# Call R_OSAL_MmngrGetConfig with the hndl_mmngr->p_ptr_self is invalid (not NULL)
 * -# Call R_OSAL_MmngrClose to close memory manager
 * @subsection MmngrGetConfig_TC_09_005_015_ereb Expected Result/Behavior
 * -# The return of R_OSAL_MmngrOpen is OSAL_RETURN_OK.<br>
 * The return handle is not OSAL_MEMORY_MANAGER_HANDLE_INVALID.
 * -# The return value of R_OSAL_MmngrGetConfig is OSAL_RETURN_HANDLE.
 * -# R_OSAL_MmngrClose return OSAL_RETURN_OK
 * @subsection MmngrGetConfig_TC_09_005_015_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrGetConfig_TC_09_005_015
 */
// [MmngrGetConfig_TC_09_005_015]
TEST_F(MemoryApiTest, MmngrGetConfig_TC_09_005_015)
{
    st_osal_mmngr_config_t output_config;
    void* bk_ptr_self;
    void* ng_ptr_self;

    // Test09_005_015
    // @brief: abnormal case: hndl_mmngr->p_ptr_self is invalid (not NULL)
    config.memory_limit                = 4096;
    config.max_allowed_allocations     = 1;
    config.max_registered_monitors_cbs = 0;
    config.mode = OSAL_MMNGR_ALLOC_MODE_STACK_PROT;
    EXPECT_EQ(R_OSAL_MmngrOpen(&config, &hndl_mmngr), OSAL_RETURN_OK) << "Test09_005_015 failed";
    EXPECT_NE(hndl_mmngr, OSAL_MEMORY_MANAGER_HANDLE_INVALID) << "Test09_005_015 failed";
    ng_ptr_self = malloc(0x100);
    EXPECT_NE(ng_ptr_self, NULL_PTR) << "Test09_005_015 failed";
    memset(ng_ptr_self, 0x1, 0x100);
    bk_ptr_self = hndl_mmngr->p_ptr_self;
    hndl_mmngr->p_ptr_self = ng_ptr_self;
    EXPECT_EQ(R_OSAL_MmngrGetConfig(hndl_mmngr, &output_config), OSAL_RETURN_HANDLE) << "Test09_005_015 failed";
    hndl_mmngr->p_ptr_self = bk_ptr_self;
    EXPECT_EQ(R_OSAL_MmngrClose(hndl_mmngr), OSAL_RETURN_OK) << "Test09_005_015 failed";
    hndl_mmngr = OSAL_MEMORY_MANAGER_HANDLE_INVALID;
    free(ng_ptr_self);
}
// [MmngrGetConfig_TC_09_005_015]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrGetConfig_TC_09_005_016 MemoryApiTest.MmngrGetConfig_TC_09_005_016
 * @subsection MmngrGetConfig_TC_09_005_016_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrGetConfig_TC_09_005_016_tci Test Case ID
 * MmngrGetConfig_S4_A_TC_09_005_016
 * @subsection MmngrGetConfig_TC_09_005_016_rr Related Requirement(s)
 * \#276544
 * @subsection MmngrGetConfig_TC_09_005_016_pp Prerequisite/Precondition
 * OSAL is initialized.
 * @subsection MmngrGetConfig_TC_09_005_016_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrGetConfig with abnormal condition in OSAL_MMNGR_ALLOC_MODE_FREE_LIST mode
 * - pre-process: open new memory manager
 * - Test09_005_016: hndl_mmngr->p_ptr_self is invalid (not NULL)
 * - post-process: close memory manager
 * @subsection MmngrGetConfig_TC_09_005_016_tpts Test Procedure/Test Steps
 * -# Open the handle using R_OSAL_MmngrOpen with config:
 *      - config.max_allowed_allocations = 1
 *      - config.max_registered_monitors_cbs = 0
 *      - config.memory_limit = 4096
 *      - config.mode = OSAL_MMNGR_ALLOC_MODE_FREE_LIST
 * -# Call R_OSAL_MmngrGetConfig with the hndl_mmngr->p_ptr_self is invalid (not NULL)
 * -# Call R_OSAL_MmngrClose to close memory manager
 * @subsection MmngrGetConfig_TC_09_005_016_ereb Expected Result/Behavior
 * -# The return of R_OSAL_MmngrOpen is OSAL_RETURN_OK.<br>
 * The return handle is not OSAL_MEMORY_MANAGER_HANDLE_INVALID.
 * -# The return value of R_OSAL_MmngrGetConfig is OSAL_RETURN_HANDLE.
 * -# R_OSAL_MmngrClose return OSAL_RETURN_OK
 * @subsection MmngrGetConfig_TC_09_005_016_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrGetConfig_TC_09_005_016
 */
// [MmngrGetConfig_TC_09_005_016]
TEST_F(MemoryApiTest, MmngrGetConfig_TC_09_005_016)
{
    st_osal_mmngr_config_t output_config;
    void* bk_ptr_self;
    void* ng_ptr_self;

    // Test09_005_016
    // @brief: abnormal case: hndl_mmngr->p_ptr_self is invalid (not NULL)
    config.memory_limit                = 4096;
    config.max_allowed_allocations     = 1;
    config.max_registered_monitors_cbs = 0;
    config.mode = OSAL_MMNGR_ALLOC_MODE_FREE_LIST;
    EXPECT_EQ(R_OSAL_MmngrOpen(&config, &hndl_mmngr), OSAL_RETURN_OK) << "Test09_005_016 failed";
    EXPECT_NE(hndl_mmngr, OSAL_MEMORY_MANAGER_HANDLE_INVALID) << "Test09_005_016 failed";
    ng_ptr_self = malloc(0x100);
    EXPECT_NE(ng_ptr_self, NULL_PTR) << "Test09_005_016 failed";
    memset(ng_ptr_self, 0x1, 0x100);
    bk_ptr_self = hndl_mmngr->p_ptr_self;
    hndl_mmngr->p_ptr_self = ng_ptr_self;
    EXPECT_EQ(R_OSAL_MmngrGetConfig(hndl_mmngr, &output_config), OSAL_RETURN_HANDLE) << "Test09_005_016 failed";
    hndl_mmngr->p_ptr_self = bk_ptr_self;
    EXPECT_EQ(R_OSAL_MmngrClose(hndl_mmngr), OSAL_RETURN_OK) << "Test09_005_016 failed";
    hndl_mmngr = OSAL_MEMORY_MANAGER_HANDLE_INVALID;
    free(ng_ptr_self);
}
// [MmngrGetConfig_TC_09_005_016]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrGetConfig_TC_09_005_017 MemoryApiTest.MmngrGetConfig_TC_09_005_017
 * @subsection MmngrGetConfig_TC_09_005_017_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrGetConfig_TC_09_005_017_tci Test Case ID
 * MmngrGetConfig_S4_A_TC_09_005_017
 * @subsection MmngrGetConfig_TC_09_005_017_rr Related Requirement(s)
 * \#276544
 * @subsection MmngrGetConfig_TC_09_005_017_pp Prerequisite/Precondition
 * OSAL is initialized.
 * @subsection MmngrGetConfig_TC_09_005_017_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrGetConfig with abnormal condition in OSAL_MMNGR_ALLOC_MODE_FREE_LIST_PROT mode
 * - pre-process: open new memory manager
 * - Test09_005_017: hndl_mmngr->p_ptr_self is invalid (not NULL)
 * - post-process: close memory manager
 * @subsection MmngrGetConfig_TC_09_005_017_tpts Test Procedure/Test Steps
 * -# Open the handle using R_OSAL_MmngrOpen with config:
 *      - config.max_allowed_allocations = 1
 *      - config.max_registered_monitors_cbs = 0
 *      - config.memory_limit = 4096
 *      - config.mode = OSAL_MMNGR_ALLOC_MODE_FREE_LIST_PROT
 * -# Call R_OSAL_MmngrGetConfig with the hndl_mmngr->p_ptr_self is invalid (not NULL)
 * -# Call R_OSAL_MmngrClose to close memory manager
 * @subsection MmngrGetConfig_TC_09_005_017_ereb Expected Result/Behavior
 * -# The return of R_OSAL_MmngrOpen is OSAL_RETURN_OK.<br>
 * The return handle is not OSAL_MEMORY_MANAGER_HANDLE_INVALID.
 * -# The return value of R_OSAL_MmngrGetConfig is OSAL_RETURN_HANDLE.
 * -# R_OSAL_MmngrClose return OSAL_RETURN_OK
 * @subsection MmngrGetConfig_TC_09_005_017_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrGetConfig_TC_09_005_017
 */
// [MmngrGetConfig_TC_09_005_017]
TEST_F(MemoryApiTest, MmngrGetConfig_TC_09_005_017)
{
    st_osal_mmngr_config_t output_config;
    void* bk_ptr_self;
    void* ng_ptr_self;

    // Test09_005_017
    // @brief: abnormal case: hndl_mmngr->p_ptr_self is invalid (not NULL)
    config.memory_limit                = 4096;
    config.max_allowed_allocations     = 1;
    config.max_registered_monitors_cbs = 0;
    config.mode = OSAL_MMNGR_ALLOC_MODE_FREE_LIST_PROT;
    EXPECT_EQ(R_OSAL_MmngrOpen(&config, &hndl_mmngr), OSAL_RETURN_OK) << "Test09_005_017 failed";
    EXPECT_NE(hndl_mmngr, OSAL_MEMORY_MANAGER_HANDLE_INVALID) << "Test09_005_017 failed";
    ng_ptr_self = malloc(0x100);
    EXPECT_NE(ng_ptr_self, NULL_PTR) << "Test09_005_017 failed";
    memset(ng_ptr_self, 0x1, 0x100);
    bk_ptr_self = hndl_mmngr->p_ptr_self;
    hndl_mmngr->p_ptr_self = ng_ptr_self;
    EXPECT_EQ(R_OSAL_MmngrGetConfig(hndl_mmngr, &output_config), OSAL_RETURN_HANDLE) << "Test09_005_017 failed";
    hndl_mmngr->p_ptr_self = bk_ptr_self;
    EXPECT_EQ(R_OSAL_MmngrClose(hndl_mmngr), OSAL_RETURN_OK) << "Test09_005_017 failed";
    hndl_mmngr = OSAL_MEMORY_MANAGER_HANDLE_INVALID;
    free(ng_ptr_self);
}
// [MmngrGetConfig_TC_09_005_017]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrGetOsalMaxConfig_TC_09_006_001 MemoryApiTest.MmngrGetOsalMaxConfig_TC_09_006_001
 * @subsection MmngrGetOsalMaxConfig_TC_09_006_001_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrGetOsalMaxConfig_TC_09_006_001_tci Test Case ID
 * MmngrGetOsalMaxConfig_S1_N_TC_09_006_001
 * @subsection MmngrGetOsalMaxConfig_TC_09_006_001_rr Related Requirement(s)
 * \#276544, \#276744
 * @subsection MmngrGetOsalMaxConfig_TC_09_006_001_pp Prerequisite/Precondition
 * OSAL is initialized.
 * @subsection MmngrGetOsalMaxConfig_TC_09_006_001_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrGetOsalMaxConfig with normal condition.
 * - Test09_006_001: with all valid parameters.
 * @subsection MmngrGetOsalMaxConfig_TC_09_006_001_tpts Test Procedure/Test Steps
 * -# Call R_OSAL_MmngrGetOsalMaxConfig with all valid parameters.
 * @subsection MmngrGetOsalMaxConfig_TC_09_006_001_ereb Expected Result/Behavior
 * -# The return of R_OSAL_MmngrGetOsalMaxConfig is OSAL_RETURN_OK and the return config is as bellow:
 *  - config.max_allowed_allocations is less than or equal to OSAL_MEMORY_MANAGER_CFG_UNLIMITED.
 *  - config.max_allowed_allocations is bigger than or equal to 1.
 *  - config.max_registered_monitors_cbs is less than or equal to OSAL_MEMORY_MANAGER_CFG_UNLIMITED.
 *  - config.max_registered_monitors_cbs is bigger than or equal to 0.
 *  - config.memory_limit is less than or equal to OSAL_MEMORY_MANAGER_CFG_UNLIMITED.
 *  - config.memory_limit is bigger than or equal to 4KB.
 *  - config.mode is not OSAL_MMNGR_ALLOC_MODE_INVALID
 * @subsection MmngrGetOsalMaxConfig_TC_09_006_001_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrGetOsalMaxConfig_TC_09_006_001
 */
// [MmngrGetOsalMaxConfig_TC_09_006_001]
TEST_F(MemoryApiTest, MmngrGetOsalMaxConfig_TC_09_006_001)
{
    // Test09_006_001
    // @brief: normal case: config is not NULL
    EXPECT_EQ(R_OSAL_MmngrGetOsalMaxConfig(&config), OSAL_RETURN_OK) << "Test09_006_001 failed";
    EXPECT_LE(config.max_allowed_allocations,OSAL_MEMORY_MANAGER_CFG_UNLIMITED) << "Test09_006_001 failed";
    EXPECT_GE(config.max_allowed_allocations,1) << "Test09_006_001 failed";
    EXPECT_LE(config.max_registered_monitors_cbs, OSAL_MEMORY_MANAGER_CFG_UNLIMITED) << "Test09_006_001 failed";
    EXPECT_GE(config.max_registered_monitors_cbs, 0) << "Test09_006_001 failed";
    EXPECT_LE(config.memory_limit, OSAL_MEMORY_MANAGER_CFG_UNLIMITED) << "Test09_006_001 failed";
    EXPECT_GE(config.memory_limit, (4 * 1024)) << "Test09_006_001 failed";
    EXPECT_NE(config.mode,OSAL_MMNGR_ALLOC_MODE_INVALID) << "Test09_006_001 failed";
}
// [MmngrGetOsalMaxConfig_TC_09_006_001]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrGetOsalMaxConfig_TC_09_006_002 MemoryApiTest.MmngrGetOsalMaxConfig_TC_09_006_002
 * @subsection MmngrGetOsalMaxConfig_TC_09_006_002_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrGetOsalMaxConfig_TC_09_006_002_tci Test Case ID
 * MmngrGetOsalMaxConfig_S0_A_TC_09_006_002
 * @subsection MmngrGetOsalMaxConfig_TC_09_006_002_rr Related Requirement(s)
 * \#276544
 * @subsection MmngrGetOsalMaxConfig_TC_09_006_002_pp Prerequisite/Precondition
 * OSAL is initialized.
 * @subsection MmngrGetOsalMaxConfig_TC_09_006_002_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrGetOsalMaxConfig with abnormal condition.
 * - Test09_006_002: config is NULL
 * @subsection MmngrGetOsalMaxConfig_TC_09_006_002_tpts Test Procedure/Test Steps
 * -# Call R_OSAL_MmngrGetOsalMaxConfig with p_config is NULL.
 * @subsection MmngrGetOsalMaxConfig_TC_09_006_002_ereb Expected Result/Behavior
 * -# The return value of R_OSAL_MmngrGetOsalMaxConfig is OSAL_RETURN_PAR.
 * @subsection MmngrGetOsalMaxConfig_TC_09_006_002_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrGetOsalMaxConfig_TC_09_006_002
 */
// [MmngrGetOsalMaxConfig_TC_09_006_002]
TEST_F(MemoryApiTest, MmngrGetOsalMaxConfig_TC_09_006_002)
{
    st_osal_mmngr_config_t* p_config = NULL;

    // Test09_006_002
    // @brief: abnormal case: config is NULL
    EXPECT_EQ(R_OSAL_MmngrGetOsalMaxConfig(p_config), OSAL_RETURN_PAR) << "Test09_006_002 failed";
}
// [MmngrGetOsalMaxConfig_TC_09_006_002]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrGetOsalMaxConfig_TC_09_006_003 MemoryApiTest.MmngrGetOsalMaxConfig_TC_09_006_003
 * @subsection MmngrGetOsalMaxConfig_TC_09_006_003_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrGetOsalMaxConfig_TC_09_006_003_tci Test Case ID
 * MmngrGetOsalMaxConfig_S1_A_TC_09_006_003
 * @subsection MmngrGetOsalMaxConfig_TC_09_006_003_rr Related Requirement(s)
 * \#276544, \#276744
 * @subsection MmngrGetOsalMaxConfig_TC_09_006_003_pp Prerequisite/Precondition
 * OSAL is initialized.
 * @subsection MmngrGetOsalMaxConfig_TC_09_006_003_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrGetOsalMaxConfig with normal condition.
 * - Test09_006_003: confirm the max config returned from R_OSAL_MmngrGetOsalMaxConfig can be used in R_OSAL_MmngrOpen.
 * @subsection MmngrGetOsalMaxConfig_TC_09_006_003_tpts Test Procedure/Test Steps
 * -# Call R_OSAL_MmngrGetOsalMaxConfig with all valid parameters.
 * -# Call R_OSAL_MmngrOpen with the returned config from R_OSAL_MmngrGetOsalMaxConfig.
 * -# Call R_OSAL_MmngrClose to close the handle.
 * @subsection MmngrGetOsalMaxConfig_TC_09_006_003_ereb Expected Result/Behavior
 * -# The return value of R_OSAL_MmngrGetOsalMaxConfig is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrOpen is OSAL_RETURN_OK. <br>
 * The return handle is not OSAL_MEMORY_MANAGER_HANDLE_INVALID.
 * -# The return value of R_OSAL_MmngrClose is OSAL_RETURN_OK.
 * @subsection MmngrGetOsalMaxConfig_TC_09_006_003_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrGetOsalMaxConfig_TC_09_006_003
 */
// [MmngrGetOsalMaxConfig_TC_09_006_003]
TEST_F(MemoryApiTest, MmngrGetOsalMaxConfig_TC_09_006_003)
{
    // Test09_006_003
    // @brief: normal case: Confirm the returned max config can be used in R_OSAL_MmngrOpen function
    EXPECT_EQ(R_OSAL_MmngrGetOsalMaxConfig(&config), OSAL_RETURN_OK) << "Test09_006_003 failed";
    EXPECT_EQ(R_OSAL_MmngrOpen(&config, &hndl_mmngr), OSAL_RETURN_OK) << "Test09_006_003 failed";
    EXPECT_NE(hndl_mmngr, OSAL_MEMORY_MANAGER_HANDLE_INVALID) << "Test09_006_003 failed";
    EXPECT_EQ(R_OSAL_MmngrClose(hndl_mmngr), OSAL_RETURN_OK) << "Test09_006_003 failed";
}
// [MmngrGetOsalMaxConfig_TC_09_006_003]
#endif

#ifndef SKIP_MEMORY_REGISTER
/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrRegisterMonitor_TC_09_007_001 MemoryApiTest.MmngrRegisterMonitor_TC_09_007_001
 * @subsection MmngrRegisterMonitor_TC_09_007_001_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrRegisterMonitor_TC_09_007_001_tci Test Case ID
 * MmngrRegisterMonitor_S3_N_TC_09_007_001
 * @subsection MmngrRegisterMonitor_TC_09_007_001_rr Related Requirement(s)
 * \#276740, \#276743, \#276549
 * @subsection MmngrRegisterMonitor_TC_09_007_001_pp Prerequisite/Precondition
 * OSAL is initialized.
 * @subsection MmngrRegisterMonitor_TC_09_007_001_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrRegisterMonitor with normal condition.
 * - pre-process: open new memory manager
 * - Test09_007_001: with all valid parameters.
 * - post-process: close memory manager
 * @subsection MmngrRegisterMonitor_TC_09_007_001_tpts Test Procedure/Test Steps
 * -# Call R_OSAL_MmngrOpen with bellow config:
 *  - config.memory_limit                = 4096
 *  - config.max_allowed_allocations     = 1
 *  - config.max_registered_monitors_cbs = 10
 *  - config.mode = OSAL_MMNGR_ALLOC_MODE_STACK_PROT
 * -# Call R_OSAL_MmngrRegisterMonitor with the event is OSAL_MMNGR_EVENT_ALLOCATE.
 * -# Call R_OSAL_MmngrAlloc to allocate a memory buffer.
 * -# Call R_OSAL_MmngrDealloc to deallocate the allocated memory buffer.
 * -# Call R_OSAL_MmngrClose to close memory handle.
 * @subsection MmngrRegisterMonitor_TC_09_007_001_ereb Expected Result/Behavior
 * -# The return of R_OSAL_MmngrOpen is OSAL_RETURN_OK.<br>
 * The return handle is not OSAL_MEMORY_MANAGER_HANDLE_INVALID.
 * -# The return value of R_OSAL_MmngrRegisterMonitor is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrAlloc is OSAL_RETURN_OK.<br>
 * A callback event will be appeart after that.
 * -# The return value of R_OSAL_MmngrDealloc is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrClose is OSAL_RETURN_OK.
 * @subsection MmngrRegisterMonitor_TC_09_007_001_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrRegisterMonitor_TC_09_007_001
 */
// [MmngrRegisterMonitor_TC_09_007_001]
TEST_F(MemoryApiTest, MmngrRegisterMonitor_TC_09_007_001)
{
    MockMonitorHelper  allocationEventMonitor;
    auto NormalmonitorCb = cb_wrapper<decltype(&MonitorHelper::NormalmonitorCb)>::make_cb<&MonitorHelper::NormalmonitorCb>();

    EXPECT_CALL(allocationEventMonitor, NormalmonitorCb(OSAL_MMNGR_EVENT_ALLOCATE, _, _)).Times(AtLeast(1));
    // pre-process: open new memory manager
    config.memory_limit                = 4096;
    config.max_allowed_allocations     = 1;
    config.max_registered_monitors_cbs = 10;
    config.mode = OSAL_MMNGR_ALLOC_MODE_STACK_PROT;
    size = 64;
    alignment = 64;

    EXPECT_EQ(R_OSAL_MmngrOpen(&config, &hndl_mmngr), OSAL_RETURN_OK) << "pre-process failed";
    EXPECT_NE(hndl_mmngr,OSAL_MEMORY_MANAGER_HANDLE_INVALID) << "pre-process failed";

    // Test09_007_001
    // @brief: normal case: all valid argument
    EXPECT_EQ(R_OSAL_MmngrRegisterMonitor(hndl_mmngr, OSAL_MMNGR_EVENT_ALLOCATE, NormalmonitorCb, &allocationEventMonitor), OSAL_RETURN_OK) << "Test09_007_001 failed";
    EXPECT_EQ(R_OSAL_MmngrAlloc(hndl_mmngr, size, alignment, &buffer_obj), OSAL_RETURN_OK);
    EXPECT_EQ(R_OSAL_MmngrDealloc(hndl_mmngr, buffer_obj), OSAL_RETURN_OK);
    buffer_obj = OSAL_MEMORY_BUFFER_HANDLE_INVALID;

     // post-process: close memory manager
    EXPECT_EQ(R_OSAL_MmngrClose(hndl_mmngr), OSAL_RETURN_OK) << "post-process failed";
    hndl_mmngr = OSAL_MEMORY_MANAGER_HANDLE_INVALID;
}
// [MmngrRegisterMonitor_TC_09_007_001]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrRegisterMonitor_TC_09_007_002 MemoryApiTest.MmngrRegisterMonitor_TC_09_007_002
 * @subsection MmngrRegisterMonitor_TC_09_007_002_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrRegisterMonitor_TC_09_007_002_tci Test Case ID
 * MmngrRegisterMonitor_S0_A_TC_09_007_002
 * @subsection MmngrRegisterMonitor_TC_09_007_002_rr Related Requirement(s)
 * \#276549
 * @subsection MmngrRegisterMonitor_TC_09_007_002_pp Prerequisite/Precondition
 * OSAL is initialized.
 * @subsection MmngrRegisterMonitor_TC_09_007_002_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrRegisterMonitor with normal condition.
 * - pre-process: open new memory manager
 * - Test09_007_002: register with the same event.
 * - post-process: close memory manager
 * @subsection MmngrRegisterMonitor_TC_09_007_002_tpts Test Procedure/Test Steps
 * -# Call R_OSAL_MmngrOpen with bellow config:
 *  - config.memory_limit                = 4096
 *  - config.max_allowed_allocations     = 1
 *  - config.max_registered_monitors_cbs = 10
 *  - config.mode = OSAL_MMNGR_ALLOC_MODE_STACK_PROT
 * -# Call R_OSAL_MmngrRegisterMonitor with the event is OSAL_MMNGR_EVENT_ALLOCATE.
 * -# Call R_OSAL_MmngrRegisterMonitor again with the event is OSAL_MMNGR_EVENT_ALLOCATE.
 * -# Call R_OSAL_MmngrAlloc to allocate a memory buffer.
 * -# Call R_OSAL_MmngrDealloc to deallocate the allocated memory buffer.
 * -# Call R_OSAL_MmngrClose to close memory handle.
 * @subsection MmngrRegisterMonitor_TC_09_007_002_ereb Expected Result/Behavior
 * -# The return of R_OSAL_MmngrOpen is OSAL_RETURN_OK.<br>
 * The return handle is not OSAL_MEMORY_MANAGER_HANDLE_INVALID.
 * -# The return value of R_OSAL_MmngrRegisterMonitor is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrRegisterMonitor is OSAL_RETURN_PAR.
 * -# The return value of R_OSAL_MmngrAlloc is OSAL_RETURN_OK.<br>
 * A callback event will be appeart after that.
 * -# The return value of R_OSAL_MmngrDealloc is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrClose is OSAL_RETURN_OK.
 * @subsection MmngrRegisterMonitor_TC_09_007_002_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrRegisterMonitor_TC_09_007_002
 */
// [MmngrRegisterMonitor_TC_09_007_002]
TEST_F(MemoryApiTest, MmngrRegisterMonitor_TC_09_007_002)
{
    MockMonitorHelper  allocationEventMonitor;
    auto NormalmonitorCb = cb_wrapper<decltype(&MonitorHelper::NormalmonitorCb)>::make_cb<&MonitorHelper::NormalmonitorCb>();

    EXPECT_CALL(allocationEventMonitor, NormalmonitorCb(OSAL_MMNGR_EVENT_ALLOCATE, _, _)).Times(AtLeast(1));
    // pre-process: open new memory manager
    config.memory_limit                = 4096;
    config.max_allowed_allocations     = 1;
    config.max_registered_monitors_cbs = 10;
    config.mode = OSAL_MMNGR_ALLOC_MODE_STACK_PROT;
    size = 64;
    alignment = 64;

    EXPECT_EQ(R_OSAL_MmngrOpen(&config, &hndl_mmngr), OSAL_RETURN_OK) << "pre-process failed";
    EXPECT_NE(hndl_mmngr,OSAL_MEMORY_MANAGER_HANDLE_INVALID) << "pre-process failed";

    // Test09_007_002
    // @brief: normal case: register monitorCb with the same event
    EXPECT_EQ(R_OSAL_MmngrRegisterMonitor(hndl_mmngr, OSAL_MMNGR_EVENT_ALLOCATE, NormalmonitorCb, &allocationEventMonitor), OSAL_RETURN_OK);
    EXPECT_EQ(R_OSAL_MmngrRegisterMonitor(hndl_mmngr, OSAL_MMNGR_EVENT_ALLOCATE, NormalmonitorCb, &allocationEventMonitor ), OSAL_RETURN_PAR) << "Test09_007_002 failed";
    EXPECT_EQ(R_OSAL_MmngrAlloc(hndl_mmngr, size, alignment, &buffer_obj), OSAL_RETURN_OK);
    EXPECT_EQ(R_OSAL_MmngrDealloc(hndl_mmngr, buffer_obj), OSAL_RETURN_OK);
    buffer_obj = OSAL_MEMORY_BUFFER_HANDLE_INVALID;

    // post-process: close memory manager
    EXPECT_EQ(R_OSAL_MmngrClose(hndl_mmngr), OSAL_RETURN_OK) << "post-process failed";
    hndl_mmngr = OSAL_MEMORY_MANAGER_HANDLE_INVALID;
}
// [MmngrRegisterMonitor_TC_09_007_002]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrRegisterMonitor_TC_09_007_003 MemoryApiTest.MmngrRegisterMonitor_TC_09_007_003
 * @subsection MmngrRegisterMonitor_TC_09_007_003_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrRegisterMonitor_TC_09_007_003_tci Test Case ID
 * MmngrRegisterMonitor_S3_N_TC_09_007_003
 * @subsection MmngrRegisterMonitor_TC_09_007_003_rr Related Requirement(s)
 * \#276740, \#276743, \#276549
 * @subsection MmngrRegisterMonitor_TC_09_007_003_pp Prerequisite/Precondition
 * OSAL is initialized.
 * @subsection MmngrRegisterMonitor_TC_09_007_003_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrRegisterMonitor with normal condition.
 * - pre-process: open new memory manager
 * - Test09_007_003: register with event is OSAL_MMNGR_EVENT_DEALLOCATE.
 * - post-process: close memory manager
 * @subsection MmngrRegisterMonitor_TC_09_007_003_tpts Test Procedure/Test Steps
 * -# Call R_OSAL_MmngrOpen with bellow config:
 *  - config.memory_limit                = 4096
 *  - config.max_allowed_allocations     = 1
 *  - config.max_registered_monitors_cbs = 10
 *  - config.mode = OSAL_MMNGR_ALLOC_MODE_STACK_PROT
 * -# Call R_OSAL_MmngrRegisterMonitor with the event is OSAL_MMNGR_EVENT_DEALLOCATE.
 * -# Call R_OSAL_MmngrAlloc to allocate a memory buffer.
 * -# Call R_OSAL_MmngrDealloc to deallocate the allocated memory buffer. 
 * -# Call R_OSAL_MmngrClose to close memory handle.
 * @subsection MmngrRegisterMonitor_TC_09_007_003_ereb Expected Result/Behavior
 * -# The return of R_OSAL_MmngrOpen is OSAL_RETURN_OK.<br>
 * The return handle is not OSAL_MEMORY_MANAGER_HANDLE_INVALID.
 * -# The return value of R_OSAL_MmngrRegisterMonitor is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrAlloc is OSAL_RETURN_OK.<br>
 * A callback for OSAL_MMNGR_EVENT_ALLOCATE event will be appeart after that.
 * -# The return value of R_OSAL_MmngrDealloc is OSAL_RETURN_OK.<br>
 * A callback for OSAL_MMNGR_EVENT_DEALLOCATE event will be appeart after that.
 * -# The return value of R_OSAL_MmngrClose is OSAL_RETURN_OK.
 * @subsection MmngrRegisterMonitor_TC_09_007_003_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrRegisterMonitor_TC_09_007_003
 */
// [MmngrRegisterMonitor_TC_09_007_003]
TEST_F(MemoryApiTest, MmngrRegisterMonitor_TC_09_007_003)
{
    MockMonitorHelper  allocationEventMonitor;
    auto NormalmonitorCb = cb_wrapper<decltype(&MonitorHelper::NormalmonitorCb)>::make_cb<&MonitorHelper::NormalmonitorCb>();

    EXPECT_CALL(allocationEventMonitor, NormalmonitorCb(OSAL_MMNGR_EVENT_DEALLOCATE, _, _)).Times(AtLeast(1));
    // pre-process: open new memory manager
    config.memory_limit                = 4096;
    config.max_allowed_allocations     = 1;
    config.max_registered_monitors_cbs = 10;
    config.mode = OSAL_MMNGR_ALLOC_MODE_STACK_PROT;
    size = 64;
    alignment = 64;

    EXPECT_EQ(R_OSAL_MmngrOpen(&config, &hndl_mmngr), OSAL_RETURN_OK) << "pre-process failed";
    EXPECT_NE(hndl_mmngr,OSAL_MEMORY_MANAGER_HANDLE_INVALID) << "pre-process failed";

    // Test09_007_003
    // @brief: normal case: monitored_event = OSAL_MMNGR_EVENT_DEALLOCATE
    EXPECT_EQ(R_OSAL_MmngrRegisterMonitor(hndl_mmngr, OSAL_MMNGR_EVENT_DEALLOCATE, NormalmonitorCb, &allocationEventMonitor ), OSAL_RETURN_OK) << "Test09_007_003 failed";
    EXPECT_EQ(R_OSAL_MmngrAlloc(hndl_mmngr, size, alignment, &buffer_obj), OSAL_RETURN_OK);
    EXPECT_EQ(R_OSAL_MmngrDealloc(hndl_mmngr,buffer_obj), OSAL_RETURN_OK);
    buffer_obj = OSAL_MEMORY_BUFFER_HANDLE_INVALID;

    // post-process: close memory manager
    EXPECT_EQ(R_OSAL_MmngrClose(hndl_mmngr), OSAL_RETURN_OK) << "post-process failed";
    hndl_mmngr = OSAL_MEMORY_MANAGER_HANDLE_INVALID;
}
// [MmngrRegisterMonitor_TC_09_007_003]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrRegisterMonitor_TC_09_007_004 MemoryApiTest.MmngrRegisterMonitor_TC_09_007_004
 * @subsection MmngrRegisterMonitor_TC_09_007_004_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrRegisterMonitor_TC_09_007_004_tci Test Case ID
 * MmngrRegisterMonitor_S3_N_TC_09_007_004
 * @subsection MmngrRegisterMonitor_TC_09_007_004_rr Related Requirement(s)
 * \#276740, \#276743, \#276549
 * @subsection MmngrRegisterMonitor_TC_09_007_004_pp Prerequisite/Precondition
 * OSAL is initialized.
 * @subsection MmngrRegisterMonitor_TC_09_007_004_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrRegisterMonitor with normal condition.
 * - pre-process: open new memory manager
 * - Test09_007_004: register with event is OSAL_MMNGR_EVENT_OVERFLOW_DETECTED.
 * - post-process: close memory manager
 * @subsection MmngrRegisterMonitor_TC_09_007_004_tpts Test Procedure/Test Steps
 * -# Call R_OSAL_MmngrOpen with bellow config:
 *  - config.memory_limit                = 4096
 *  - config.max_allowed_allocations     = 1
 *  - config.max_registered_monitors_cbs = 10
 *  - config.mode = OSAL_MMNGR_ALLOC_MODE_STACK_PROT
 * -# Call R_OSAL_MmngrRegisterMonitor with the event is OSAL_MMNGR_EVENT_OVERFLOW_DETECTED.
 * -# Call R_OSAL_MmngrAlloc to allocate a memory buffer.
 * -# Call R_OSAL_MmngrCheckBuffer with input is allocated buffer
 * -# Call R_OSAL_MmngrDealloc to deallocate the allocated memory buffer. 
 * -# Call R_OSAL_MmngrClose to close memory handle.
 * @subsection MmngrRegisterMonitor_TC_09_007_004_ereb Expected Result/Behavior
 * -# The return of R_OSAL_MmngrOpen is OSAL_RETURN_OK.<br>
 * The return handle is not OSAL_MEMORY_MANAGER_HANDLE_INVALID.
 * -# The return value of R_OSAL_MmngrRegisterMonitor is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrCheckBuffer is OSAL_RETURN_OK.<br>
 * A callback for OSAL_MMNGR_EVENT_OVERFLOW_DETECTED event will be appear if the buffer was overflow.
 * -# The return value of R_OSAL_MmngrAlloc is OSAL_RETURN_OK.<br>
 * A callback for OSAL_MMNGR_EVENT_ALLOCATE event will be appeart after that.
 * -# The return value of R_OSAL_MmngrDealloc is OSAL_RETURN_OK.<br>
 * A callback for OSAL_MMNGR_EVENT_DEALLOCATE event will be appeart after that.
 * -# The return value of R_OSAL_MmngrClose is OSAL_RETURN_OK.
 * @subsection MmngrRegisterMonitor_TC_09_007_004_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrRegisterMonitor_TC_09_007_004
 */
// [MmngrRegisterMonitor_TC_09_007_004]
TEST_F(MemoryApiTest, MmngrRegisterMonitor_TC_09_007_004)
{
    MockMonitorHelper  allocationEventMonitor;
    auto NormalmonitorCb = cb_wrapper<decltype(&MonitorHelper::NormalmonitorCb)>::make_cb<&MonitorHelper::NormalmonitorCb>();

    EXPECT_CALL(allocationEventMonitor, NormalmonitorCb(OSAL_MMNGR_EVENT_OVERFLOW_DETECTED, _, _)).Times(0);
    // pre-process: open new memory manager
    config.memory_limit                = 4096;
    config.max_allowed_allocations     = 1;
    config.max_registered_monitors_cbs = 10;
    config.mode = OSAL_MMNGR_ALLOC_MODE_STACK_PROT;
    size = 64;
    alignment = 64;

    EXPECT_EQ(R_OSAL_MmngrOpen(&config, &hndl_mmngr), OSAL_RETURN_OK) << "pre-process failed";
    EXPECT_NE(hndl_mmngr,OSAL_MEMORY_MANAGER_HANDLE_INVALID) << "pre-process failed";

    // Test09_007_004
    // @brief: normal case: monitored_event = OSAL_MMNGR_EVENT_OVERFLOW_DETECTED
    EXPECT_EQ(R_OSAL_MmngrRegisterMonitor(hndl_mmngr, OSAL_MMNGR_EVENT_OVERFLOW_DETECTED, NormalmonitorCb, &allocationEventMonitor ), OSAL_RETURN_OK) << "Test09_007_004 failed";
    EXPECT_EQ(R_OSAL_MmngrAlloc(hndl_mmngr, size, alignment, &buffer_obj), OSAL_RETURN_OK);
    EXPECT_EQ(R_OSAL_MmngrCheckBuffer(buffer_obj), OSAL_RETURN_OK);
    EXPECT_EQ(R_OSAL_MmngrDealloc(hndl_mmngr,buffer_obj), OSAL_RETURN_OK);
    buffer_obj = OSAL_MEMORY_BUFFER_HANDLE_INVALID;

    // post-process: close memory manager
    EXPECT_EQ(R_OSAL_MmngrClose(hndl_mmngr), OSAL_RETURN_OK) << "post-process failed";
    hndl_mmngr = OSAL_MEMORY_MANAGER_HANDLE_INVALID;
}
// [MmngrRegisterMonitor_TC_09_007_004]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrRegisterMonitor_TC_09_007_005 MemoryApiTest.MmngrRegisterMonitor_TC_09_007_005
 * @subsection MmngrRegisterMonitor_TC_09_007_005_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrRegisterMonitor_TC_09_007_005_tci Test Case ID
 * MmngrRegisterMonitor_S3_N_TC_09_007_005
 * @subsection MmngrRegisterMonitor_TC_09_007_005_rr Related Requirement(s)
 * \#276740, \#276743, \#276549
 * @subsection MmngrRegisterMonitor_TC_09_007_005_pp Prerequisite/Precondition
 * OSAL is initialized.
 * @subsection MmngrRegisterMonitor_TC_09_007_005_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrRegisterMonitor with normal condition.
 * - pre-process: open new memory manager
 * - Test09_007_005: register with event is OSAL_MMNGR_EVENT_UNDERFLOW_DETECTED.
 * - post-process: close memory manager
 * @subsection MmngrRegisterMonitor_TC_09_007_005_tpts Test Procedure/Test Steps
 * -# Call R_OSAL_MmngrOpen with bellow config:
 *  - config.memory_limit                = 4096
 *  - config.max_allowed_allocations     = 1
 *  - config.max_registered_monitors_cbs = 10
 *  - config.mode = OSAL_MMNGR_ALLOC_MODE_STACK_PROT
 * -# Call R_OSAL_MmngrRegisterMonitor with the event is OSAL_MMNGR_EVENT_UNDERFLOW_DETECTED.
 * -# Call R_OSAL_MmngrAlloc to allocate a memory buffer.
 * -# Call R_OSAL_MmngrCheckBuffer with input is allocated buffer
 * -# Call R_OSAL_MmngrDealloc to deallocate the allocated memory buffer.
 * -# Close memory handle by calling R_OSAL_MmngrClose.
 * @subsection MmngrRegisterMonitor_TC_09_007_005_ereb Expected Result/Behavior
 * -# The return of R_OSAL_MmngrOpen is OSAL_RETURN_OK.<br>
 * The return handle is not OSAL_MEMORY_MANAGER_HANDLE_INVALID.
 * -# The return value of R_OSAL_MmngrRegisterMonitor is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrCheckBuffer is OSAL_RETURN_OK.<br>
 * A callback for OSAL_MMNGR_EVENT_UNDERFLOW_DETECTED event will be appear if the buffer was underflow.
 * -# The return value of R_OSAL_MmngrAlloc is OSAL_RETURN_OK.<br>
 * A callback for OSAL_MMNGR_EVENT_ALLOCATE event will be appeart after that.
 * -# The return value of R_OSAL_MmngrDealloc is OSAL_RETURN_OK.<br>
 * A callback for OSAL_MMNGR_EVENT_DEALLOCATE event will be appeart after that.
 * -# The return value of R_OSAL_MmngrClose is OSAL_RETURN_OK.
 * @subsection MmngrRegisterMonitor_TC_09_007_005_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrRegisterMonitor_TC_09_007_005
 */
// [MmngrRegisterMonitor_TC_09_007_005]
TEST_F(MemoryApiTest, MmngrRegisterMonitor_TC_09_007_005)
{
    MockMonitorHelper  allocationEventMonitor;
    auto NormalmonitorCb = cb_wrapper<decltype(&MonitorHelper::NormalmonitorCb)>::make_cb<&MonitorHelper::NormalmonitorCb>();

    EXPECT_CALL(allocationEventMonitor, NormalmonitorCb(OSAL_MMNGR_EVENT_UNDERFLOW_DETECTED, _, _)).Times(0);
    // pre-process: open new memory manager
    config.memory_limit                = 4096;
    config.max_allowed_allocations     = 1;
    config.max_registered_monitors_cbs = 10;
    config.mode = OSAL_MMNGR_ALLOC_MODE_STACK_PROT;
    size = 64;
    alignment = 64;

    EXPECT_EQ(R_OSAL_MmngrOpen(&config, &hndl_mmngr), OSAL_RETURN_OK) << "pre-process failed";
    EXPECT_NE(hndl_mmngr,OSAL_MEMORY_MANAGER_HANDLE_INVALID) << "pre-process failed";

    // Test09_007_005
    // @brief: normal case: monitored_event = OSAL_MMNGR_EVENT_UNDERFLOW_DETECTED
    EXPECT_EQ(R_OSAL_MmngrRegisterMonitor(hndl_mmngr, OSAL_MMNGR_EVENT_UNDERFLOW_DETECTED, NormalmonitorCb, &allocationEventMonitor ), OSAL_RETURN_OK) << "Test09_007_005 failed";
    EXPECT_EQ(R_OSAL_MmngrAlloc(hndl_mmngr, size, alignment, &buffer_obj), OSAL_RETURN_OK);
    EXPECT_EQ(R_OSAL_MmngrCheckBuffer(buffer_obj), OSAL_RETURN_OK);
    EXPECT_EQ(R_OSAL_MmngrDealloc(hndl_mmngr,buffer_obj), OSAL_RETURN_OK);
    buffer_obj = OSAL_MEMORY_BUFFER_HANDLE_INVALID;

    // post-process: close memory manager
    EXPECT_EQ(R_OSAL_MmngrClose(hndl_mmngr), OSAL_RETURN_OK) << "post-process failed";
    hndl_mmngr = OSAL_MEMORY_MANAGER_HANDLE_INVALID;
}
// [MmngrRegisterMonitor_TC_09_007_005]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrRegisterMonitor_TC_09_007_006 MemoryApiTest.MmngrRegisterMonitor_TC_09_007_006
 * @subsection MmngrRegisterMonitor_TC_09_007_006_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrRegisterMonitor_TC_09_007_006_tci Test Case ID
 * MmngrRegisterMonitor_S3_N_TC_09_007_006
 * @subsection MmngrRegisterMonitor_TC_09_007_006_rr Related Requirement(s)
 * \#276740, \#276743, \#276549
 * @subsection MmngrRegisterMonitor_TC_09_007_006_pp Prerequisite/Precondition
 * OSAL is initialized.
 * @subsection MmngrRegisterMonitor_TC_09_007_006_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrRegisterMonitor with abnormal condition.
 * - pre-process: open new memory manager
 * - Test09_007_006: call R_OSAL_MmngrAlloc before register event OSAL_MMNGR_EVENT_ALLOCATE
 * - post-process: close memory manager
 * @subsection MmngrRegisterMonitor_TC_09_007_006_tpts Test Procedure/Test Steps
 * -# Call R_OSAL_MmngrOpen with bellow config:
 *  - config.memory_limit                = 4096
 *  - config.max_allowed_allocations     = 1
 *  - config.max_registered_monitors_cbs = 1
 *  - config.mode = OSAL_MMNGR_ALLOC_MODE_STACK_PROT
 * -# Call R_OSAL_MmngrAlloc with valid paramater.
 * -# Call R_OSAL_MmngrRegisterMonitor with the event is OSAL_MMNGR_EVENT_ALLOCATE.
 * -# Call R_OSAL_MmngrDealloc with valid paramater.
 * -# Call R_OSAL_MmngrClose to close the memory handle.
 * @subsection MmngrRegisterMonitor_TC_09_007_006_ereb Expected Result/Behavior
 * -# The return of R_OSAL_MmngrOpen is OSAL_RETURN_OK.<br>
 * The return handle is not OSAL_MEMORY_MANAGER_HANDLE_INVALID.
 * -# The return value of R_OSAL_MmngrAlloc is OSAL_RETURN_OK but no callback appeared.
 * -# The return value of R_OSAL_MmngrRegisterMonitor is OSAL_RETURN_OK and no callback appeared.
 * -# The return value of R_OSAL_MmngrDealloc is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrClose is OSAL_RETURN_OK.
 * @subsection MmngrRegisterMonitor_TC_09_007_006_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrRegisterMonitor_TC_09_007_006
 */
// [MmngrRegisterMonitor_TC_09_007_006]
TEST_F(MemoryApiTest, MmngrRegisterMonitor_TC_09_007_006)
{
    MockMonitorHelper  allocationEventMonitor;
    auto AbnormalmonitorCb = cb_wrapper<decltype(&MonitorHelper::AbnormalmonitorCb)>::make_cb<&MonitorHelper::AbnormalmonitorCb>();

    EXPECT_CALL(allocationEventMonitor, AbnormalmonitorCb(OSAL_MMNGR_EVENT_ALLOCATE, _, _)).Times(0);
    // pre-process: open new memory manager
    config.memory_limit                = 4096;
    config.max_allowed_allocations     = 1;
    config.max_registered_monitors_cbs = 1;
    config.mode = OSAL_MMNGR_ALLOC_MODE_STACK_PROT;
    size = 64;
    alignment = 64;

    EXPECT_EQ(R_OSAL_MmngrOpen(&config, &hndl_mmngr), OSAL_RETURN_OK) << "pre-process failed";
    EXPECT_NE(hndl_mmngr,OSAL_MEMORY_MANAGER_HANDLE_INVALID) << "pre-process failed";

    // Test09_007_006
    // @brief: abnormal case: call R_OSAL_MmngrAlloc before register monitored_event = OSAL_MMNGR_EVENT_ALLOCATE
    EXPECT_EQ(R_OSAL_MmngrAlloc(hndl_mmngr, size, alignment, &buffer_obj), OSAL_RETURN_OK);
    EXPECT_EQ(R_OSAL_MmngrRegisterMonitor(hndl_mmngr, OSAL_MMNGR_EVENT_ALLOCATE, AbnormalmonitorCb, &allocationEventMonitor ), OSAL_RETURN_OK) << "Test09_007_006 failed";
    EXPECT_EQ(R_OSAL_MmngrDealloc(hndl_mmngr,buffer_obj), OSAL_RETURN_OK);
    buffer_obj = OSAL_MEMORY_BUFFER_HANDLE_INVALID;
 
    //post-process: close memory manager
    EXPECT_EQ(R_OSAL_MmngrClose(hndl_mmngr), OSAL_RETURN_OK) << "post-process failed";
    hndl_mmngr = OSAL_MEMORY_MANAGER_HANDLE_INVALID;
}
// [MmngrRegisterMonitor_TC_09_007_006]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrRegisterMonitor_TC_09_007_007 MemoryApiTest.MmngrRegisterMonitor_TC_09_007_007
 * @subsection MmngrRegisterMonitor_TC_09_007_007_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrRegisterMonitor_TC_09_007_007_tci Test Case ID
 * MmngrRegisterMonitor_S0_A_TC_09_007_007
 * @subsection MmngrRegisterMonitor_TC_09_007_007_rr Related Requirement(s)
 * \#276402, \#276549
 * @subsection MmngrRegisterMonitor_TC_09_007_007_pp Prerequisite/Precondition
 * OSAL is initialized.
 * @subsection MmngrRegisterMonitor_TC_09_007_007_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrRegisterMonitor with abnormal condition.
 * - Test09_007_007: handle is NULL.
 * @subsection MmngrRegisterMonitor_TC_09_007_007_tpts Test Procedure/Test Steps
 * -# Call R_OSAL_MmngrRegisterMonitor with handle is NULL.
 * @subsection MmngrRegisterMonitor_TC_09_007_007_ereb Expected Result/Behavior
 * -# The return value of R_OSAL_MmngrRegisterMonitor is OSAL_RETURN_HANDLE.
 * @subsection MmngrRegisterMonitor_TC_09_007_007_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrRegisterMonitor_TC_09_007_007
 */
// [MmngrRegisterMonitor_TC_09_007_007]
TEST_F(MemoryApiTest, MmngrRegisterMonitor_TC_09_007_007)
{
    MockMonitorHelper  allocationEventMonitor;
    auto AbnormalmonitorCb = cb_wrapper<decltype(&MonitorHelper::AbnormalmonitorCb)>::make_cb<&MonitorHelper::AbnormalmonitorCb>();

    EXPECT_CALL(allocationEventMonitor, AbnormalmonitorCb(OSAL_MMNGR_EVENT_ALLOCATE, _, _)).Times(0);

    // Test09_007_007
    // @brief: abnormal case: hndl_mmngr = NULL
    EXPECT_EQ(R_OSAL_MmngrRegisterMonitor(OSAL_MEMORY_MANAGER_HANDLE_INVALID, OSAL_MMNGR_EVENT_ALLOCATE, AbnormalmonitorCb, &allocationEventMonitor ), OSAL_RETURN_HANDLE) << "Test09_007_007 failed";
}
// [MmngrRegisterMonitor_TC_09_007_007]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrRegisterMonitor_TC_09_007_008 MemoryApiTest.MmngrRegisterMonitor_TC_09_007_008
 * @subsection MmngrRegisterMonitor_TC_09_007_008_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrRegisterMonitor_TC_09_007_008_tci Test Case ID
 * MmngrRegisterMonitor_S4_A_TC_09_007_008
 * @subsection MmngrRegisterMonitor_TC_09_007_008_rr Related Requirement(s)
 * \#276549
 * @subsection MmngrRegisterMonitor_TC_09_007_008_pp Prerequisite/Precondition
 * OSAL is initialized.
 * @subsection MmngrRegisterMonitor_TC_09_007_008_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrRegisterMonitor with abnormal condition.
 * - pre-process: open new memory manager
 * - Test09_007_008: handle is not support to register monitor.
 * - post-process: close memory manager
 * @subsection MmngrRegisterMonitor_TC_09_007_008_tpts Test Procedure/Test Steps
 * -# Call R_OSAL_MmngrOpen with bellow config:
 *  - config.memory_limit                = 4096
 *  - config.max_allowed_allocations     = 1
 *  - config.max_registered_monitors_cbs = 1
 *  - config.mode = OSAL_MMNGR_ALLOC_MODE_STACK_PROT
 * -# Allocate "tmp_hndl_mmngr" by using malloc function.
 * -# Store "hndl_mmngr->p_registerMonitor" to "tmp_hndl_mmngr->p_registerMonitor".<br>
 * Set "hndl_mmngr->p_registerMonitor" to NULL. <br>
 * Call R_OSAL_MmngrRegisterMonitor with the changed memory handle "hndl_mmngr".<br>
 * Re-assign "tmp_hndl_mmngr->p_registerMonitor" to "hndl_mmngr->p_registerMonitor".
 * -# Free buffer pointed by "tmp_hndl_mmngr"
 * -# Call R_OSAL_MmngrClose to close the memory handle.
 * @subsection MmngrRegisterMonitor_TC_09_007_008_ereb Expected Result/Behavior
 * -# The return of R_OSAL_MmngrOpen is OSAL_RETURN_OK.<br>
 * The return handle is not OSAL_MEMORY_MANAGER_HANDLE_INVALID.
 * -# Memory allocation succeeded (Pointer to buffer != Nullpointer)
 * -# The return value of R_OSAL_MmngrRegisterMonitor is OSAL_RETURN_HANDLE_NOT_SUPPORTED.
 * -# Allocated memory free succeeded.
 * -# The return value of R_OSAL_MmngrClose is OSAL_RETURN_OK.
 * @subsection MmngrRegisterMonitor_TC_09_007_008_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrRegisterMonitor_TC_09_007_008
 */
// [MmngrRegisterMonitor_TC_09_007_008]
TEST_F(MemoryApiTest, MmngrRegisterMonitor_TC_09_007_008)
{
    osal_memory_manager_handle_t tmp_hndl_mmngr;
    MockMonitorHelper  allocationEventMonitor;
    auto AbnormalmonitorCb = cb_wrapper<decltype(&MonitorHelper::AbnormalmonitorCb)>::make_cb<&MonitorHelper::AbnormalmonitorCb>();

    EXPECT_CALL(allocationEventMonitor, AbnormalmonitorCb(OSAL_MMNGR_EVENT_DEALLOCATE, _, _)).Times(0);
    // pre-process: open new memory manager
    config.memory_limit                = 4096;
    config.max_allowed_allocations     = 1;
    config.max_registered_monitors_cbs = 1;
    config.mode = OSAL_MMNGR_ALLOC_MODE_STACK_PROT;
    size = 64;
    alignment = 64;

    EXPECT_EQ(R_OSAL_MmngrOpen(&config, &hndl_mmngr), OSAL_RETURN_OK) << "pre-process failed";
    EXPECT_NE(hndl_mmngr,OSAL_MEMORY_MANAGER_HANDLE_INVALID) << "pre-process failed";

    // Test09_007_008
    // @brief: abnormal case: hndl_mmngr->registerMonitor = NULL
    tmp_hndl_mmngr = (osal_memory_manager_handle_t)malloc (sizeof(st_osal_memory_manager_obj));
    EXPECT_NE(tmp_hndl_mmngr, NULL_PTR);
    tmp_hndl_mmngr->p_registerMonitor = hndl_mmngr->p_registerMonitor;
    hndl_mmngr->p_registerMonitor = NULL;
    EXPECT_EQ(R_OSAL_MmngrRegisterMonitor(hndl_mmngr, OSAL_MMNGR_EVENT_DEALLOCATE, AbnormalmonitorCb, &allocationEventMonitor ), OSAL_RETURN_HANDLE_NOT_SUPPORTED) << "Test09_007_008 failed";
    hndl_mmngr->p_registerMonitor = tmp_hndl_mmngr->p_registerMonitor;
    free(tmp_hndl_mmngr);

    //post-process: close memory manager
    EXPECT_EQ(R_OSAL_MmngrClose(hndl_mmngr), OSAL_RETURN_OK) << "post-process failed";
    hndl_mmngr = OSAL_MEMORY_MANAGER_HANDLE_INVALID;
}
// [MmngrRegisterMonitor_TC_09_007_008]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrRegisterMonitor_TC_09_007_009 MemoryApiTest.MmngrRegisterMonitor_TC_09_007_009
 * @subsection MmngrRegisterMonitor_TC_09_007_009_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrRegisterMonitor_TC_09_007_009_tci Test Case ID
 * MmngrRegisterMonitor_S0_BA_TC_09_007_009
 * @subsection MmngrRegisterMonitor_TC_09_007_009_rr Related Requirement(s)
 * \#276549
 * @subsection MmngrRegisterMonitor_TC_09_007_009_pp Prerequisite/Precondition
 * OSAL is initialized.
 * @subsection MmngrRegisterMonitor_TC_09_007_009_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrRegisterMonitor with abnormal condition.
 * - pre-process: open new memory manager
 * - Test09_007_009: register monitor with event is OSAL_MMNGR_EVENT_INVALID.
 * - post-process: close memory manager
 * @subsection MmngrRegisterMonitor_TC_09_007_009_tpts Test Procedure/Test Steps
 * -# Call R_OSAL_MmngrOpen with bellow config:
 *  - config.memory_limit                = 4096
 *  - config.max_allowed_allocations     = 1
 *  - config.max_registered_monitors_cbs = 1
 *  - config.mode = OSAL_MMNGR_ALLOC_MODE_STACK_PROT
 * -# Call R_OSAL_MmngrRegisterMonitor with event is OSAL_MMNGR_EVENT_INVALID. 
 * -# Call R_OSAL_MmngrClose to close the memory handle.
 * @subsection MmngrRegisterMonitor_TC_09_007_009_ereb Expected Result/Behavior
 * -# The return of R_OSAL_MmngrOpen is OSAL_RETURN_OK.<br>
 * The return handle is not OSAL_MEMORY_MANAGER_HANDLE_INVALID.
 * -# The return value of R_OSAL_MmngrRegisterMonitor is OSAL_RETURN_PAR.
 * -# The return value of R_OSAL_MmngrClose is OSAL_RETURN_OK.
 * @subsection MmngrRegisterMonitor_TC_09_007_009_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrRegisterMonitor_TC_09_007_009
 */
// [MmngrRegisterMonitor_TC_09_007_009]
TEST_F(MemoryApiTest, MmngrRegisterMonitor_TC_09_007_009)
{
    MockMonitorHelper  allocationEventMonitor;
    auto AbnormalmonitorCb = cb_wrapper<decltype(&MonitorHelper::AbnormalmonitorCb)>::make_cb<&MonitorHelper::AbnormalmonitorCb>();

    // pre-process: open new memory manager
    config.memory_limit                = 4096;
    config.max_allowed_allocations     = 1;
    config.max_registered_monitors_cbs = 1;
    config.mode = OSAL_MMNGR_ALLOC_MODE_STACK_PROT;
    size = 64;
    alignment = 64;

    EXPECT_EQ(R_OSAL_MmngrOpen(&config, &hndl_mmngr), OSAL_RETURN_OK) << "pre-process failed";
    EXPECT_NE(hndl_mmngr,OSAL_MEMORY_MANAGER_HANDLE_INVALID) << "pre-process failed";

    // Test09_007_009
    // @brief: abnormal case: monitored_event = OSAL_MMNGR_EVENT_INVALID;
    EXPECT_EQ(R_OSAL_MmngrRegisterMonitor(hndl_mmngr, OSAL_MMNGR_EVENT_INVALID, AbnormalmonitorCb, &allocationEventMonitor ), OSAL_RETURN_PAR) << "Test09_007_009 failed";

    //post-process: close memory manager
    EXPECT_EQ(R_OSAL_MmngrClose(hndl_mmngr), OSAL_RETURN_OK) << "post-process failed";
    hndl_mmngr = OSAL_MEMORY_MANAGER_HANDLE_INVALID;
}
// [MmngrRegisterMonitor_TC_09_007_009]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrRegisterMonitor_TC_09_007_010 MemoryApiTest.MmngrRegisterMonitor_TC_09_007_010
 * @subsection MmngrRegisterMonitor_TC_09_007_010_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrRegisterMonitor_TC_09_007_010_tci Test Case ID
 * MmngrRegisterMonitor_S0_A_TC_09_007_010
 * @subsection MmngrRegisterMonitor_TC_09_007_010_rr Related Requirement(s)
 * \#276549
 * @subsection MmngrRegisterMonitor_TC_09_007_010_pp Prerequisite/Precondition
 * OSAL is initialized.
 * @subsection MmngrRegisterMonitor_TC_09_007_010_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrRegisterMonitor with abnormal condition.
 * - pre-process: open new memory manager
 * - Test09_007_010: register monitor with monitor_handler paramater is NULL
 * - post-process: close memory manager
 * @subsection MmngrRegisterMonitor_TC_09_007_010_tpts Test Procedure/Test Steps
 * -# Call R_OSAL_MmngrOpen with bellow config:
 *  - config.memory_limit                = 4096
 *  - config.max_allowed_allocations     = 1
 *  - config.max_registered_monitors_cbs = 1
 *  - config.mode = OSAL_MMNGR_ALLOC_MODE_STACK_PROT
 * -# Call R_OSAL_MmngrRegisterMonitor with monitor_handler is NULL.  
 * -# Call R_OSAL_MmngrClose to close the memory handle.
 * @subsection MmngrRegisterMonitor_TC_09_007_010_ereb Expected Result/Behavior
 * -# The return of R_OSAL_MmngrOpen is OSAL_RETURN_OK.<br>
 * The return handle is not OSAL_MEMORY_MANAGER_HANDLE_INVALID.
 * -# The return value of R_OSAL_MmngrRegisterMonitor is OSAL_RETURN_PAR.
 * -# The return value of R_OSAL_MmngrClose is OSAL_RETURN_OK.
 * @subsection MmngrRegisterMonitor_TC_09_007_010_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrRegisterMonitor_TC_09_007_010
 */
// [MmngrRegisterMonitor_TC_09_007_010]
TEST_F(MemoryApiTest, MmngrRegisterMonitor_TC_09_007_010)
{
    MockMonitorHelper  allocationEventMonitor;
    auto AbnormalmonitorCb = cb_wrapper<decltype(&MonitorHelper::AbnormalmonitorCb)>::make_cb<&MonitorHelper::AbnormalmonitorCb>();

    EXPECT_CALL(allocationEventMonitor, AbnormalmonitorCb(OSAL_MMNGR_EVENT_ALLOCATE, _, _)).Times(0);
    // pre-process: open new memory manager
    config.memory_limit                = 4096;
    config.max_allowed_allocations     = 1;
    config.max_registered_monitors_cbs = 1;
    config.mode = OSAL_MMNGR_ALLOC_MODE_STACK_PROT;
    size = 64;
    alignment = 64;

    EXPECT_EQ(R_OSAL_MmngrOpen(&config, &hndl_mmngr), OSAL_RETURN_OK) << "pre-process failed";
    EXPECT_NE(hndl_mmngr,OSAL_MEMORY_MANAGER_HANDLE_INVALID) << "pre-process failed";

    // Test09_007_010
    // @brief: abnormal case: monitored_handler = NULL
    fp_osal_memory_mngr_cb_t *monitor_handler = NULL;
    EXPECT_EQ(R_OSAL_MmngrRegisterMonitor(hndl_mmngr, OSAL_MMNGR_EVENT_ALLOCATE, monitor_handler, &allocationEventMonitor ), OSAL_RETURN_PAR) << "Test09_007_010 failed";

    //post-process: close memory manager
    EXPECT_EQ(R_OSAL_MmngrClose(hndl_mmngr), OSAL_RETURN_OK) << "post-process failed";
    hndl_mmngr = OSAL_MEMORY_MANAGER_HANDLE_INVALID;
}
// [MmngrRegisterMonitor_TC_09_007_010]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrRegisterMonitor_TC_09_007_011 MemoryApiTest.MmngrRegisterMonitor_TC_09_007_011
 * @subsection MmngrRegisterMonitor_TC_09_007_011_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrRegisterMonitor_TC_09_007_011_tci Test Case ID
 * MmngrRegisterMonitor_S2_A_TC_09_007_011
 * @subsection MmngrRegisterMonitor_TC_09_007_011_rr Related Requirement(s)
 * \#276549
 * @subsection MmngrRegisterMonitor_TC_09_007_011_pp Prerequisite/Precondition
 * OSAL is initialized.
 * @subsection MmngrRegisterMonitor_TC_09_007_011_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrRegisterMonitor with abnormal condition.
 * - pre-process: open new memory manager
 * - Test09_007_011: only allow register 1 event but call R_OSAL_MmngrRegisterMonitor 2 times with 2 different event.
 * - post-process: close memory manager
 * @subsection MmngrRegisterMonitor_TC_09_007_011_tpts Test Procedure/Test Steps
 * -# Call R_OSAL_MmngrOpen with bellow config:
 *  - config.memory_limit                = 4096
 *  - config.max_allowed_allocations     = 1
 *  - config.max_registered_monitors_cbs = 1
 *  - config.mode = OSAL_MMNGR_ALLOC_MODE_STACK_PROT
 * -# Call R_OSAL_MmngrRegisterMonitor with event OSAL_MMNGR_EVENT_ALLOCATE.
 * -# Continue to call R_OSAL_MmngrRegisterMonitor with event OSAL_MMNGR_EVENT_DEALLOCATE.
 * -# Call R_OSAL_MmngrClose to close the memory handle.
 * @subsection MmngrRegisterMonitor_TC_09_007_011_ereb Expected Result/Behavior
 * -# The return of R_OSAL_MmngrOpen is OSAL_RETURN_OK.<br>
 * The return handle is not OSAL_MEMORY_MANAGER_HANDLE_INVALID.
 * -# The return value of the 1st R_OSAL_MmngrRegisterMonitor is OSAL_RETURN_OK
 * -# The return value of the 2nd R_OSAL_MmngrRegisterMonitor is OSAL_RETURN_PROHIBITED.
 * -# The return value of R_OSAL_MmngrClose is OSAL_RETURN_OK.
 * @subsection MmngrRegisterMonitor_TC_09_007_011_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrRegisterMonitor_TC_09_007_011
 */
// [MmngrRegisterMonitor_TC_09_007_011]
TEST_F(MemoryApiTest, MmngrRegisterMonitor_TC_09_007_011)
{
    MockMonitorHelper  allocationEventMonitor;
    auto AbnormalmonitorCb = cb_wrapper<decltype(&MonitorHelper::AbnormalmonitorCb)>::make_cb<&MonitorHelper::AbnormalmonitorCb>();

    EXPECT_CALL(allocationEventMonitor, AbnormalmonitorCb(OSAL_MMNGR_EVENT_ALLOCATE, _, _)).Times(0);
    EXPECT_CALL(allocationEventMonitor, AbnormalmonitorCb(OSAL_MMNGR_EVENT_DEALLOCATE, _, _)).Times(0);
    // pre-process: open new memory manager
    config.memory_limit                = 4096;
    config.max_allowed_allocations     = 1;
    config.max_registered_monitors_cbs = 1;
    config.mode = OSAL_MMNGR_ALLOC_MODE_STACK_PROT;
    size = 64;
    alignment = 64;

    EXPECT_EQ(R_OSAL_MmngrOpen(&config, &hndl_mmngr), OSAL_RETURN_OK) << "pre-process failed";
    EXPECT_NE(hndl_mmngr,OSAL_MEMORY_MANAGER_HANDLE_INVALID) << "pre-process failed";

    // Test09_007_011
    // @brief: abnormal case: config.max_registered_monitors_cbs = 1; call R_OSAL_MmngrRegisterMonitor twice
    EXPECT_EQ(R_OSAL_MmngrRegisterMonitor(hndl_mmngr, OSAL_MMNGR_EVENT_ALLOCATE, AbnormalmonitorCb, &allocationEventMonitor ), OSAL_RETURN_OK) << "Test09_007_011 failed";
    EXPECT_EQ(R_OSAL_MmngrRegisterMonitor(hndl_mmngr, OSAL_MMNGR_EVENT_DEALLOCATE, AbnormalmonitorCb, &allocationEventMonitor ), OSAL_RETURN_PROHIBITED) << "Test09_007_011 failed";

    //post-process: close memory manager
    EXPECT_EQ(R_OSAL_MmngrClose(hndl_mmngr), OSAL_RETURN_OK) << "post-process failed";
    hndl_mmngr = OSAL_MEMORY_MANAGER_HANDLE_INVALID;
}
// [MmngrRegisterMonitor_TC_09_007_011]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrRegisterMonitor_TC_09_007_012 MemoryApiTest.MmngrRegisterMonitor_TC_09_007_012
 * @subsection MmngrRegisterMonitor_TC_09_007_012_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrRegisterMonitor_TC_09_007_012_tci Test Case ID
 * MmngrRegisterMonitor_S3_N_TC_09_007_012
 * @subsection MmngrRegisterMonitor_TC_09_007_012_rr Related Requirement(s)
 * \#276740, \#276743, \#276549
 * @subsection MmngrRegisterMonitor_TC_09_007_012_pp Prerequisite/Precondition
 * OSAL is initialized.
 * @subsection MmngrRegisterMonitor_TC_09_007_012_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrRegisterMonitor with normal condition.
 * - pre-process: open new memory manager
 * - Test09_007_012: confirm with memory handle which opened with OSAL_MMNGR_ALLOC_MODE_FREE_LIST mode.
 * - post-process: close memory manager
 * @subsection MmngrRegisterMonitor_TC_09_007_012_tpts Test Procedure/Test Steps
 * -# Call R_OSAL_MmngrOpen with bellow config:
 *  - config.memory_limit                = 4096
 *  - config.max_allowed_allocations     = 1
 *  - config.max_registered_monitors_cbs = 10
 *  - config.mode = OSAL_MMNGR_ALLOC_MODE_FREE_LIST
 * -# Call R_OSAL_MmngrRegisterMonitor with event OSAL_MMNGR_EVENT_ALLOCATE.
 * -# Call R_OSAL_MmngrAlloc to allocate a memory buffer.
 * -# Call R_OSAL_MmngrDealloc to deallocate the allocated memory buffer.
 * -# Call R_OSAL_MmngrClose to close memory handle.
 * @subsection MmngrRegisterMonitor_TC_09_007_012_ereb Expected Result/Behavior
 * -# The return of R_OSAL_MmngrOpen is OSAL_RETURN_OK.<br>
 * The return handle is not OSAL_MEMORY_MANAGER_HANDLE_INVALID.
 * -# The return value of R_OSAL_MmngrRegisterMonitor is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrAlloc is OSAL_RETURN_OK.<br>
 * A callback for OSAL_MMNGR_EVENT_ALLOCATE event appeared.
 * -# The return value of R_OSAL_MmngrDealloc is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrClose is OSAL_RETURN_OK.
 * @subsection MmngrRegisterMonitor_TC_09_007_012_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrRegisterMonitor_TC_09_007_012
 */
// [MmngrRegisterMonitor_TC_09_007_012]
TEST_F(MemoryApiTest, MmngrRegisterMonitor_TC_09_007_012)
{
    MockMonitorHelper  allocationEventMonitor;
    auto FreelistmonitorCb = cb_wrapper<decltype(&MonitorHelper::FreelistmonitorCb)>::make_cb<&MonitorHelper::FreelistmonitorCb>();

    EXPECT_CALL(allocationEventMonitor, FreelistmonitorCb(OSAL_MMNGR_EVENT_ALLOCATE, _, _)).Times(1);
    // pre-process: open new memory manager
    config.memory_limit                = 4096;
    config.max_allowed_allocations     = 1;
    config.max_registered_monitors_cbs = 10;
    config.mode = OSAL_MMNGR_ALLOC_MODE_FREE_LIST;
    size = 64;
    alignment = 64;

    EXPECT_EQ(R_OSAL_MmngrOpen(&config, &hndl_mmngr), OSAL_RETURN_OK) << "pre-process failed";
    EXPECT_NE(hndl_mmngr,OSAL_MEMORY_MANAGER_HANDLE_INVALID) << "pre-process failed";

    // Test09_007_012
    // @brief: normal case: confirm with OSAL_MMNGR_ALLOC_MODE_FREE_LIST mode
    EXPECT_EQ(R_OSAL_MmngrRegisterMonitor(hndl_mmngr, OSAL_MMNGR_EVENT_ALLOCATE, FreelistmonitorCb, &allocationEventMonitor ), OSAL_RETURN_OK) << "Test09_007_012 failed";
    EXPECT_EQ(R_OSAL_MmngrAlloc(hndl_mmngr, size, alignment, &buffer_obj), OSAL_RETURN_OK);
    EXPECT_EQ(R_OSAL_MmngrDealloc(hndl_mmngr, buffer_obj), OSAL_RETURN_OK);
    buffer_obj = OSAL_MEMORY_BUFFER_HANDLE_INVALID;

    // post-process: close memory manager
    EXPECT_EQ(R_OSAL_MmngrClose(hndl_mmngr), OSAL_RETURN_OK) << "post-process failed";
    hndl_mmngr = OSAL_MEMORY_MANAGER_HANDLE_INVALID;
}
// [MmngrRegisterMonitor_TC_09_007_012]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrRegisterMonitor_TC_09_007_014 MemoryApiTest.MmngrRegisterMonitor_TC_09_007_014
 * @subsection MmngrRegisterMonitor_TC_09_007_014_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrRegisterMonitor_TC_09_007_014_tci Test Case ID
 * MmngrRegisterMonitor_S2_A_TC_09_007_014
 * @subsection MmngrRegisterMonitor_TC_09_007_014_rr Related Requirement(s)
 * \#276549
 * @subsection MmngrRegisterMonitor_TC_09_007_014_pp Prerequisite/Precondition
 * - A dummy handle is created by copy the data from a valid handle in SetUpTestSuite()
 * - The dummy handle will be free after all test cases was executed.
 * - OSAL is initialized.
 * @subsection MmngrRegisterMonitor_TC_09_007_014_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrRegisterMonitor and R_OSAL_MmngrRegisterMonitor with abnormal condition.
 * - Test09_007_014: confirm the use case the of R_OSAL_MmngrRegisterMonitor when Memory Manager is not opened
 * @subsection MmngrRegisterMonitor_TC_09_007_014_tpts Test Procedure/Test Steps
 * -# Call R_OSAL_MmngrRegisterMonitor to allocate the buffer using the dummy handle.
 * @subsection MmngrRegisterMonitor_TC_09_007_014_ereb Expected Result/Behavior
 * -# The return value when calling R_OSAL_MmngrRegisterMonitor is OSAL_RETURN_STATE.
 * @subsection MmngrRegisterMonitor_TC_09_007_014_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrRegisterMonitor_TC_09_007_014
 */
// [MmngrRegisterMonitor_TC_09_007_014]
TEST_F(MemoryApiTest, MmngrRegisterMonitor_TC_09_007_014)
{
    MockMonitorHelper  allocationEventMonitor;
    auto AbnormalmonitorCb = cb_wrapper<decltype(&MonitorHelper::AbnormalmonitorCb)>::make_cb<&MonitorHelper::AbnormalmonitorCb>();

    EXPECT_CALL(allocationEventMonitor, AbnormalmonitorCb(OSAL_MMNGR_EVENT_ALLOCATE, _, _)).Times(0);

    // Test09_007_014
    // @brief: abnormal case: confirm the use case the of R_OSAL_MmngrRegisterMonitor when Memory Manager is not opened
    EXPECT_EQ(R_OSAL_MmngrRegisterMonitor(dummy_hndl_mmngr, OSAL_MMNGR_EVENT_ALLOCATE, AbnormalmonitorCb, &allocationEventMonitor), OSAL_RETURN_STATE) << "Test09_007_014 failed";
}
// [MmngrRegisterMonitor_TC_09_007_014]
#endif

#ifndef SKIP_MEMORY_GETCPUPTR
/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrRegisterMonitor_TC_09_007_015 MemoryApiTest.MmngrRegisterMonitor_TC_09_007_015
 * @subsection MmngrRegisterMonitor_TC_09_007_015_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrRegisterMonitor_TC_09_007_015_tci Test Case ID
 * MmngrRegisterMonitor_S0_BA_TC_09_007_015
 * @subsection MmngrRegisterMonitor_TC_09_007_015_rr Related Requirement(s)
 * \#276549
 * @subsection MmngrRegisterMonitor_TC_09_007_015_pp Prerequisite/Precondition
 * OSAL is initialized.
 * @subsection MmngrRegisterMonitor_TC_09_007_015_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrRegisterMonitor with abnormal condition.
 * - pre-process: open new memory manager
 * - Test09_007_015: register monitor with event is OSAL_MMNGR_EVENT_INVALID - 1.
 * - post-process: close memory manager
 * @subsection MmngrRegisterMonitor_TC_09_007_015_tpts Test Procedure/Test Steps
 * -# Call R_OSAL_MmngrOpen with bellow config:
 *  - config.memory_limit                = 4096
 *  - config.max_allowed_allocations     = 1
 *  - config.max_registered_monitors_cbs = 1
 *  - config.mode = OSAL_MMNGR_ALLOC_MODE_STACK
 * -# Call R_OSAL_MmngrRegisterMonitor with event is OSAL_MMNGR_EVENT_INVALID - 1. 
 * -# Call R_OSAL_MmngrClose to close the memory handle.
 * @subsection MmngrRegisterMonitor_TC_09_007_015_ereb Expected Result/Behavior
 * -# The return of R_OSAL_MmngrOpen is OSAL_RETURN_OK.<br>
 * The return handle is not OSAL_MEMORY_MANAGER_HANDLE_INVALID.
 * -# The return value of R_OSAL_MmngrRegisterMonitor is OSAL_RETURN_PAR.
 * -# The return value of R_OSAL_MmngrClose is OSAL_RETURN_OK.
 * @subsection MmngrRegisterMonitor_TC_09_007_015_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrRegisterMonitor_TC_09_007_015
 */
// [MmngrRegisterMonitor_TC_09_007_015]
TEST_F(MemoryApiTest, MmngrRegisterMonitor_TC_09_007_015)
{
    MockMonitorHelper  allocationEventMonitor;
    auto AbnormalmonitorCb = cb_wrapper<decltype(&MonitorHelper::AbnormalmonitorCb)>::make_cb<&MonitorHelper::AbnormalmonitorCb>();

    // pre-process: open new memory manager
    config.memory_limit                = 4096;
    config.max_allowed_allocations     = 1;
    config.max_registered_monitors_cbs = 1;
    config.mode = OSAL_MMNGR_ALLOC_MODE_STACK;

    EXPECT_EQ(R_OSAL_MmngrOpen(&config, &hndl_mmngr), OSAL_RETURN_OK) << "pre-process failed";
    EXPECT_NE(hndl_mmngr,OSAL_MEMORY_MANAGER_HANDLE_INVALID) << "pre-process failed";

    // Test09_007_015
    // @brief: abnormal case: monitored_event = OSAL_MMNGR_EVENT_INVALID - 1;
    EXPECT_EQ(R_OSAL_MmngrRegisterMonitor(hndl_mmngr, e_osal_mmngr_event_t (OSAL_MMNGR_EVENT_INVALID - 1), AbnormalmonitorCb, &allocationEventMonitor ), OSAL_RETURN_PAR) << "Test09_007_015 failed";

    //post-process: close memory manager
    EXPECT_EQ(R_OSAL_MmngrClose(hndl_mmngr), OSAL_RETURN_OK) << "post-process failed";
    hndl_mmngr = OSAL_MEMORY_MANAGER_HANDLE_INVALID;
}
// [MmngrRegisterMonitor_TC_09_007_015]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrRegisterMonitor_TC_09_007_016 MemoryApiTest.MmngrRegisterMonitor_TC_09_007_016
 * @subsection MmngrRegisterMonitor_TC_09_007_016_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrRegisterMonitor_TC_09_007_016_tci Test Case ID
 * MmngrRegisterMonitor_S0_BA_TC_09_007_016
 * @subsection MmngrRegisterMonitor_TC_09_007_016_rr Related Requirement(s)
 * \#276549
 * @subsection MmngrRegisterMonitor_TC_09_007_016_pp Prerequisite/Precondition
 * OSAL is initialized.
 * @subsection MmngrRegisterMonitor_TC_09_007_016_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrRegisterMonitor with abnormal condition.
 * - pre-process: open new memory manager
 * - Test09_007_016: register monitor with event is OSAL_MMNGR_EVENT_ERROR + 1.
 * - post-process: close memory manager
 * @subsection MmngrRegisterMonitor_TC_09_007_016_tpts Test Procedure/Test Steps
 * -# Call R_OSAL_MmngrOpen with bellow config:
 *  - config.memory_limit                = 4096
 *  - config.max_allowed_allocations     = 1
 *  - config.max_registered_monitors_cbs = 1
 *  - config.mode = OSAL_MMNGR_ALLOC_MODE_STACK
 * -# Call R_OSAL_MmngrRegisterMonitor with event is OSAL_MMNGR_EVENT_ERROR + 1. 
 * -# Call R_OSAL_MmngrClose to close the memory handle.
 * @subsection MmngrRegisterMonitor_TC_09_007_016_ereb Expected Result/Behavior
 * -# The return of R_OSAL_MmngrOpen is OSAL_RETURN_OK.<br>
 * The return handle is not OSAL_MEMORY_MANAGER_HANDLE_INVALID.
 * -# The return value of R_OSAL_MmngrRegisterMonitor is OSAL_RETURN_PAR.
 * -# The return value of R_OSAL_MmngrClose is OSAL_RETURN_OK.
 * @subsection MmngrRegisterMonitor_TC_09_007_016_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrRegisterMonitor_TC_09_007_016
 */
// [MmngrRegisterMonitor_TC_09_007_016]
TEST_F(MemoryApiTest, MmngrRegisterMonitor_TC_09_007_016)
{
    MockMonitorHelper  allocationEventMonitor;
    auto AbnormalmonitorCb = cb_wrapper<decltype(&MonitorHelper::AbnormalmonitorCb)>::make_cb<&MonitorHelper::AbnormalmonitorCb>();

    // pre-process: open new memory manager
    config.memory_limit                = 4096;
    config.max_allowed_allocations     = 1;
    config.max_registered_monitors_cbs = 1;
    config.mode = OSAL_MMNGR_ALLOC_MODE_STACK;

    EXPECT_EQ(R_OSAL_MmngrOpen(&config, &hndl_mmngr), OSAL_RETURN_OK) << "pre-process failed";
    EXPECT_NE(hndl_mmngr,OSAL_MEMORY_MANAGER_HANDLE_INVALID) << "pre-process failed";

    // Test09_007_016
    // @brief: abnormal case: monitored_event = OSAL_MMNGR_EVENT_ERROR + 1;
    EXPECT_EQ(R_OSAL_MmngrRegisterMonitor(hndl_mmngr, (e_osal_mmngr_event_t )(OSAL_MMNGR_EVENT_ERROR + 1), AbnormalmonitorCb, &allocationEventMonitor ), OSAL_RETURN_PAR) << "Test09_007_016 failed";

    //post-process: close memory manager
    EXPECT_EQ(R_OSAL_MmngrClose(hndl_mmngr), OSAL_RETURN_OK) << "post-process failed";
    hndl_mmngr = OSAL_MEMORY_MANAGER_HANDLE_INVALID;
}
// [MmngrRegisterMonitor_TC_09_007_016]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrRegisterMonitor_TC_09_007_017 MemoryApiTest.MmngrRegisterMonitor_TC_09_007_017
 * @subsection MmngrRegisterMonitor_TC_09_007_017_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrRegisterMonitor_TC_09_007_017_tci Test Case ID
 * MmngrRegisterMonitor_S4_A_TC_09_007_017
 * @subsection MmngrRegisterMonitor_TC_09_007_017_rr Related Requirement(s)
 * \#276549
 * @subsection MmngrRegisterMonitor_TC_09_007_017_pp Prerequisite/Precondition
 * OSAL is initialized.
 * @subsection MmngrRegisterMonitor_TC_09_007_017_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrRegisterMonitor with abnormal condition in OSAL_MMNGR_ALLOC_MODE_STACK mode.
 * - pre-process: open memory manager
 * - Test09_007_017: "hndl_mmngr-> p_ptr_self" is invalid.
 * - post-process: close memory manager
 * @subsection MmngrRegisterMonitor_TC_09_007_017_tpts Test Procedure/Test Steps
 * -# Get the OSAL Mmngr max config by calling R_OSAL_MmngrGetOsalMaxConfig then set the mode to OSAL_MMNGR_ALLOC_MODE_STACK
 * -# Call R_OSAL_MmngrOpen with valid parameter.
 * -# Call R_OSAL_MmngrRegisterMonitor with an invalid hndl_mmngr->p_ptr_self:
 *      - hndl_mmngr with p_ptr_self value changed to p_ptr_self_ng
 *      - "p_ptr_self_ng" is allocated by malloc function.
 * -# Call R_OSAL_MmngrClose to close the memory manager.
 *      - hndl_mmngr with valid p_ptr_self value
 * @subsection MmngrRegisterMonitor_TC_09_007_017_ereb Expected Result/Behavior
 * -# The return value of R_OSAL_MmngrGetOsalMaxConfig is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrOpen is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrRegisterMonitor is OSAL_RETURN_HANDLE.
 * -# The return value of R_OSAL_MmngrClose is OSAL_RETURN_OK.
 * @subsection MmngrRegisterMonitor_TC_09_007_017_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrRegisterMonitor_TC_09_007_017
 */
// [MmngrRegisterMonitor_TC_09_007_017]
TEST_F(MemoryApiTest, MmngrRegisterMonitor_TC_09_007_017)
{
    void* ptr_self_bak;
    void* ptr_self_ng;
    MockMonitorHelper  allocationEventMonitor;
    auto AbnormalmonitorCb = cb_wrapper<decltype(&MonitorHelper::AbnormalmonitorCb)>::make_cb<&MonitorHelper::AbnormalmonitorCb>();

    // Test09_007_017
    // @brief: abnormal case: hndl_mmngr->p_ptr_self is invalid
    EXPECT_EQ(R_OSAL_MmngrGetOsalMaxConfig(&config), OSAL_RETURN_OK);
    config.mode = OSAL_MMNGR_ALLOC_MODE_STACK;
    EXPECT_EQ(R_OSAL_MmngrOpen(&config, &hndl_mmngr), OSAL_RETURN_OK);
    ptr_self_bak = hndl_mmngr->p_ptr_self;
    ptr_self_ng = malloc(0x100);
    memset(ptr_self_ng, 0x0, 0x100);
    hndl_mmngr->p_ptr_self = ptr_self_ng;
    EXPECT_EQ(R_OSAL_MmngrRegisterMonitor(hndl_mmngr, OSAL_MMNGR_EVENT_ALLOCATE, AbnormalmonitorCb, &allocationEventMonitor), OSAL_RETURN_HANDLE) << "Test09_007_017 failed";
    free(ptr_self_ng);
    hndl_mmngr->p_ptr_self = ptr_self_bak;
    EXPECT_EQ(R_OSAL_MmngrClose(hndl_mmngr), OSAL_RETURN_OK) << "Test09_007_017 failed";
    hndl_mmngr = OSAL_MEMORY_MANAGER_HANDLE_INVALID;
}
// [MmngrRegisterMonitor_TC_09_007_017]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrRegisterMonitor_TC_09_007_018 MemoryApiTest.MmngrRegisterMonitor_TC_09_007_018
 * @subsection MmngrRegisterMonitor_TC_09_007_018_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrRegisterMonitor_TC_09_007_018_tci Test Case ID
 * MmngrRegisterMonitor_S4_A_TC_09_007_018
 * @subsection MmngrRegisterMonitor_TC_09_007_018_rr Related Requirement(s)
 * \#276549
 * @subsection MmngrRegisterMonitor_TC_09_007_018_pp Prerequisite/Precondition
 * OSAL is initialized.
 * @subsection MmngrRegisterMonitor_TC_09_007_018_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrRegisterMonitor with abnormal condition in OSAL_MMNGR_ALLOC_MODE_STACK_PROT mode.
 * - pre-process: open memory manager
 * - Test09_007_018: "hndl_mmngr-> p_ptr_self" is invalid.
 * - post-process: close memory manager
 * @subsection MmngrRegisterMonitor_TC_09_007_018_tpts Test Procedure/Test Steps
 * -# Call R_OSAL_MmngrGetOsalMaxConfig to get the max config then set mode to OSAL_MMNGR_ALLOC_MODE_STACK_PROT
 * -# Call R_OSAL_MmngrOpen with valid parameter.
 * -# Call R_OSAL_MmngrRegisterMonitor with an invalid hndl_mmngr->p_ptr_self:
 *      - hndl_mmngr with p_ptr_self value changed to p_ptr_self_ng
 *      - "p_ptr_self_ng" is allocated by malloc function.
 * -# Call R_OSAL_MmngrClose to close the memory manager.
 *      - hndl_mmngr with valid p_ptr_self value
 * @subsection MmngrRegisterMonitor_TC_09_007_018_ereb Expected Result/Behavior
 * -# The return value of R_OSAL_MmngrGetOsalMaxConfig is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrOpen is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrRegisterMonitor is OSAL_RETURN_HANDLE.
 * -# The return value of R_OSAL_MmngrClose is OSAL_RETURN_OK.
 * @subsection MmngrRegisterMonitor_TC_09_007_018_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrRegisterMonitor_TC_09_007_018
 */
// [MmngrRegisterMonitor_TC_09_007_018]
TEST_F(MemoryApiTest, MmngrRegisterMonitor_TC_09_007_018)
{
    void* ptr_self_bak;
    void* ptr_self_ng;
    MockMonitorHelper  allocationEventMonitor;
    auto AbnormalmonitorCb = cb_wrapper<decltype(&MonitorHelper::AbnormalmonitorCb)>::make_cb<&MonitorHelper::AbnormalmonitorCb>();

    // Test09_007_018
    // @brief: abnormal case: hndl_mmngr->p_ptr_self is invalid
    EXPECT_EQ(R_OSAL_MmngrGetOsalMaxConfig(&config), OSAL_RETURN_OK);
    config.mode = OSAL_MMNGR_ALLOC_MODE_STACK_PROT;
    EXPECT_EQ(R_OSAL_MmngrOpen(&config, &hndl_mmngr), OSAL_RETURN_OK);
    ptr_self_bak = hndl_mmngr->p_ptr_self;
    ptr_self_ng = malloc(0x100);
    memset(ptr_self_ng, 0x0, 0x100);
    hndl_mmngr->p_ptr_self = ptr_self_ng;
    EXPECT_EQ(R_OSAL_MmngrRegisterMonitor(hndl_mmngr, OSAL_MMNGR_EVENT_ALLOCATE, AbnormalmonitorCb, &allocationEventMonitor), OSAL_RETURN_HANDLE) << "Test09_007_018 failed";
    free(ptr_self_ng);
    hndl_mmngr->p_ptr_self = ptr_self_bak;
    EXPECT_EQ(R_OSAL_MmngrClose(hndl_mmngr), OSAL_RETURN_OK) << "Test09_007_018 failed";
    hndl_mmngr = OSAL_MEMORY_MANAGER_HANDLE_INVALID;
}
// [MmngrRegisterMonitor_TC_09_007_018]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrRegisterMonitor_TC_09_007_019 MemoryApiTest.MmngrRegisterMonitor_TC_09_007_019
 * @subsection MmngrRegisterMonitor_TC_09_007_019_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrRegisterMonitor_TC_09_007_019_tci Test Case ID
 * MmngrRegisterMonitor_S4_A_TC_09_007_019
 * @subsection MmngrRegisterMonitor_TC_09_007_019_rr Related Requirement(s)
 * \#276549
 * @subsection MmngrRegisterMonitor_TC_09_007_019_pp Prerequisite/Precondition
 * OSAL is initialized.
 * @subsection MmngrRegisterMonitor_TC_09_007_019_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrRegisterMonitor with abnormal condition in OSAL_MMNGR_ALLOC_MODE_FREE_LIST mode.
 * - pre-process: open memory manager
 * - Test09_007_019: "hndl_mmngr-> p_ptr_self" is invalid.
 * - post-process: close memory manager
 * @subsection MmngrRegisterMonitor_TC_09_007_019_tpts Test Procedure/Test Steps
 * -# Call R_OSAL_MmngrGetOsalMaxConfig to get the max config then set mode to OSAL_MMNGR_ALLOC_MODE_FREE_LIST
 * -# Call R_OSAL_MmngrOpen with valid parameter.
 * -# Call R_OSAL_MmngrRegisterMonitor with an invalid hndl_mmngr->p_ptr_self:
 *      - hndl_mmngr with p_ptr_self value changed to p_ptr_self_ng
 *      - "p_ptr_self_ng" is allocated by malloc function.
 * -# Call R_OSAL_MmngrClose to close the memory manager.
 *      - hndl_mmngr with valid p_ptr_self value
 * @subsection MmngrRegisterMonitor_TC_09_007_019_ereb Expected Result/Behavior
 * -# The return value of R_OSAL_MmngrGetOsalMaxConfig is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrOpen is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrRegisterMonitor is OSAL_RETURN_HANDLE.
 * -# The return value of R_OSAL_MmngrClose is OSAL_RETURN_OK.
 * @subsection MmngrRegisterMonitor_TC_09_007_019_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrRegisterMonitor_TC_09_007_019
 */
// [MmngrRegisterMonitor_TC_09_007_019]
TEST_F(MemoryApiTest, MmngrRegisterMonitor_TC_09_007_019)
{
    void* ptr_self_bak;
    void* ptr_self_ng;
    MockMonitorHelper  allocationEventMonitor;
    auto AbnormalmonitorCb = cb_wrapper<decltype(&MonitorHelper::AbnormalmonitorCb)>::make_cb<&MonitorHelper::AbnormalmonitorCb>();

    // Test09_007_019
    // @brief: abnormal case: hndl_mmngr->p_ptr_self is invalid
    EXPECT_EQ(R_OSAL_MmngrGetOsalMaxConfig(&config), OSAL_RETURN_OK);
    config.mode = OSAL_MMNGR_ALLOC_MODE_FREE_LIST;
    EXPECT_EQ(R_OSAL_MmngrOpen(&config, &hndl_mmngr), OSAL_RETURN_OK);
    ptr_self_bak = hndl_mmngr->p_ptr_self;
    ptr_self_ng = malloc(0x100);
    memset(ptr_self_ng, 0x0, 0x100);
    hndl_mmngr->p_ptr_self = ptr_self_ng;
    EXPECT_EQ(R_OSAL_MmngrRegisterMonitor(hndl_mmngr, OSAL_MMNGR_EVENT_ALLOCATE, AbnormalmonitorCb, &allocationEventMonitor), OSAL_RETURN_HANDLE) << "Test09_007_019 failed";
    free(ptr_self_ng);
    hndl_mmngr->p_ptr_self = ptr_self_bak;
    EXPECT_EQ(R_OSAL_MmngrClose(hndl_mmngr), OSAL_RETURN_OK) << "Test09_007_019 failed";
    hndl_mmngr = OSAL_MEMORY_MANAGER_HANDLE_INVALID;
}
// [MmngrRegisterMonitor_TC_09_007_019]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrRegisterMonitor_TC_09_007_020 MemoryApiTest.MmngrRegisterMonitor_TC_09_007_020
 * @subsection MmngrRegisterMonitor_TC_09_007_020_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrRegisterMonitor_TC_09_007_020_tci Test Case ID
 * MmngrRegisterMonitor_S4_A_TC_09_007_020
 * @subsection MmngrRegisterMonitor_TC_09_007_020_rr Related Requirement(s)
 * \#276549
 * @subsection MmngrRegisterMonitor_TC_09_007_020_pp Prerequisite/Precondition
 * OSAL is initialized.
 * @subsection MmngrRegisterMonitor_TC_09_007_020_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrRegisterMonitor with abnormal condition in OSAL_MMNGR_ALLOC_MODE_FREE_LIST_PROT mode.
 * - pre-process: open memory manager
 * - Test09_007_020: "hndl_mmngr-> p_ptr_self" is invalid.
 * - post-process: close memory manager
 * @subsection MmngrRegisterMonitor_TC_09_007_020_tpts Test Procedure/Test Steps
 * -# Call R_OSAL_MmngrGetOsalMaxConfig to get the max config then set mode to OSAL_MMNGR_ALLOC_MODE_FREE_LIST_PROT
 * -# Call R_OSAL_MmngrOpen with valid parameter.
 * -# Call R_OSAL_MmngrRegisterMonitor with an invalid hndl_mmngr->p_ptr_self:
 *      - hndl_mmngr with p_ptr_self value changed to p_ptr_self_ng
 *      - "p_ptr_self_ng" is allocated by malloc function.
 * -# Call R_OSAL_MmngrClose to close the memory manager.
 *      - hndl_mmngr with valid p_ptr_self value
 * @subsection MmngrRegisterMonitor_TC_09_007_020_ereb Expected Result/Behavior
 * -# The return value of R_OSAL_MmngrGetOsalMaxConfig is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrOpen is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrRegisterMonitor is OSAL_RETURN_HANDLE.
 * -# The return value of R_OSAL_MmngrClose is OSAL_RETURN_OK.
 * @subsection MmngrRegisterMonitor_TC_09_007_020_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrRegisterMonitor_TC_09_007_020
 */
// [MmngrRegisterMonitor_TC_09_007_020]
TEST_F(MemoryApiTest, MmngrRegisterMonitor_TC_09_007_020)
{
    void* ptr_self_bak;
    void* ptr_self_ng;
    MockMonitorHelper  allocationEventMonitor;
    auto AbnormalmonitorCb = cb_wrapper<decltype(&MonitorHelper::AbnormalmonitorCb)>::make_cb<&MonitorHelper::AbnormalmonitorCb>();

    // Test09_007_020
    // @brief: abnormal case: hndl_mmngr->p_ptr_self is invalid
    EXPECT_EQ(R_OSAL_MmngrGetOsalMaxConfig(&config), OSAL_RETURN_OK);
    config.mode = OSAL_MMNGR_ALLOC_MODE_FREE_LIST_PROT;
    EXPECT_EQ(R_OSAL_MmngrOpen(&config, &hndl_mmngr), OSAL_RETURN_OK);
    ptr_self_bak = hndl_mmngr->p_ptr_self;
    ptr_self_ng = malloc(0x100);
    memset(ptr_self_ng, 0x0, 0x100);
    hndl_mmngr->p_ptr_self = ptr_self_ng;
    EXPECT_EQ(R_OSAL_MmngrRegisterMonitor(hndl_mmngr, OSAL_MMNGR_EVENT_ALLOCATE, AbnormalmonitorCb, &allocationEventMonitor), OSAL_RETURN_HANDLE) << "Test09_007_020 failed";
    free(ptr_self_ng);
    hndl_mmngr->p_ptr_self = ptr_self_bak;
    EXPECT_EQ(R_OSAL_MmngrClose(hndl_mmngr), OSAL_RETURN_OK) << "Test09_007_020 failed";
    hndl_mmngr = OSAL_MEMORY_MANAGER_HANDLE_INVALID;
}
// [MmngrRegisterMonitor_TC_09_007_020]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrRegisterMonitor_TC_09_007_021 MemoryApiTest.MmngrRegisterMonitor_TC_09_007_021
 * @subsection MmngrRegisterMonitor_TC_09_007_021_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrRegisterMonitor_TC_09_007_021_tci Test Case ID
 * MmngrRegisterMonitor_S4_A_TC_09_007_021
 * @subsection MmngrRegisterMonitor_TC_09_007_021_rr Related Requirement(s)
 * \#276549
 * @subsection MmngrRegisterMonitor_TC_09_007_021_pp Prerequisite/Precondition
 * OSAL is initialized.
 * @subsection MmngrRegisterMonitor_TC_09_007_021_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrRegisterMonitor with abnormal condition in OSAL_MMNGR_ALLOC_MODE_STACK mode.
 * - Test09_007_021: "hndl_mmngr-> p_ptr_self" is invalid.
 * @subsection MmngrRegisterMonitor_TC_09_007_021_tpts Test Procedure/Test Steps
 * -# Call R_OSAL_MmngrGetOsalMaxConfig to get the max config then set mode to OSAL_MMNGR_ALLOC_MODE_STACK
 * -# Call R_OSAL_MmngrOpen with valid parameter configuration above
 * -# Call R_OSAL_MmngrRegisterMonitor with an invalid hndl_mmngr->p_ptr_self
 * -# Call R_OSAL_MmngrClose to close the memory manager.
 * @subsection MmngrRegisterMonitor_TC_09_007_021_ereb Expected Result/Behavior
 * -# The return value of R_OSAL_MmngrGetOsalMaxConfig is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrOpen is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrRegisterMonitor is OSAL_RETURN_HANDLE.
 * -# The return value of R_OSAL_MmngrClose is OSAL_RETURN_OK.
 * @subsection MmngrRegisterMonitor_TC_09_007_021_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrRegisterMonitor_TC_09_007_021
 */
// [MmngrRegisterMonitor_TC_09_007_021]
TEST_F(MemoryApiTest, MmngrRegisterMonitor_TC_09_007_021)
{
    void* ptr_self_bak;
    MockMonitorHelper  allocationEventMonitor;
    auto AbnormalmonitorCb = cb_wrapper<decltype(&MonitorHelper::AbnormalmonitorCb)>::make_cb<&MonitorHelper::AbnormalmonitorCb>();

    // Test09_007_021
    // @brief: abnormal case: hndl_mmngr->p_ptr_self is invalid
    EXPECT_EQ(R_OSAL_MmngrGetOsalMaxConfig(&config), OSAL_RETURN_OK);
    config.mode = OSAL_MMNGR_ALLOC_MODE_STACK;
    EXPECT_EQ(R_OSAL_MmngrOpen(&config, &hndl_mmngr), OSAL_RETURN_OK);
    ptr_self_bak = hndl_mmngr->p_ptr_self;
    hndl_mmngr->p_ptr_self = NULL_PTR;
    EXPECT_EQ(R_OSAL_MmngrRegisterMonitor(hndl_mmngr, OSAL_MMNGR_EVENT_ALLOCATE, AbnormalmonitorCb, &allocationEventMonitor), OSAL_RETURN_HANDLE) << "Test09_007_021 failed";
    hndl_mmngr->p_ptr_self = ptr_self_bak;
    EXPECT_EQ(R_OSAL_MmngrClose(hndl_mmngr), OSAL_RETURN_OK) << "Test09_007_021 failed";
    hndl_mmngr = OSAL_MEMORY_MANAGER_HANDLE_INVALID;
}
// [MmngrRegisterMonitor_TC_09_007_021]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrRegisterMonitor_TC_09_007_022 MemoryApiTest.MmngrRegisterMonitor_TC_09_007_022
 * @subsection MmngrRegisterMonitor_TC_09_007_022_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrRegisterMonitor_TC_09_007_022_tci Test Case ID
 * MmngrRegisterMonitor_S4_A_TC_09_007_022
 * @subsection MmngrRegisterMonitor_TC_09_007_022_rr Related Requirement(s)
 * \#276549
 * @subsection MmngrRegisterMonitor_TC_09_007_022_pp Prerequisite/Precondition
 * OSAL is initialized.
 * @subsection MmngrRegisterMonitor_TC_09_007_022_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrRegisterMonitor with abnormal condition in OSAL_MMNGR_ALLOC_MODE_STACK_PROT mode.
 * - Test09_007_022: "hndl_mmngr-> p_ptr_self" is invalid.
 * @subsection MmngrRegisterMonitor_TC_09_007_022_tpts Test Procedure/Test Steps
 * -# Call R_OSAL_MmngrGetOsalMaxConfig to get the max config then set mode to OSAL_MMNGR_ALLOC_MODE_STACK_PROT
 * -# Call R_OSAL_MmngrOpen with valid parameter configuration above
 * -# Call R_OSAL_MmngrRegisterMonitor with an invalid hndl_mmngr->p_ptr_self
 * -# Call R_OSAL_MmngrClose to close the memory manager.
 * @subsection MmngrRegisterMonitor_TC_09_007_022_ereb Expected Result/Behavior
 * -# The return value of R_OSAL_MmngrGetOsalMaxConfig is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrOpen is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrRegisterMonitor is OSAL_RETURN_HANDLE.
 * -# The return value of R_OSAL_MmngrClose is OSAL_RETURN_OK.
 * @subsection MmngrRegisterMonitor_TC_09_007_022_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrRegisterMonitor_TC_09_007_022
 */
// [MmngrRegisterMonitor_TC_09_007_022]
TEST_F(MemoryApiTest, MmngrRegisterMonitor_TC_09_007_022)
{
    void* ptr_self_bak;
    MockMonitorHelper  allocationEventMonitor;
    auto AbnormalmonitorCb = cb_wrapper<decltype(&MonitorHelper::AbnormalmonitorCb)>::make_cb<&MonitorHelper::AbnormalmonitorCb>();

    // Test09_007_022
    // @brief: abnormal case: hndl_mmngr->p_ptr_self is invalid
    EXPECT_EQ(R_OSAL_MmngrGetOsalMaxConfig(&config), OSAL_RETURN_OK);
    config.mode = OSAL_MMNGR_ALLOC_MODE_STACK_PROT;
    EXPECT_EQ(R_OSAL_MmngrOpen(&config, &hndl_mmngr), OSAL_RETURN_OK);
    ptr_self_bak = hndl_mmngr->p_ptr_self;
    hndl_mmngr->p_ptr_self = NULL_PTR;
    EXPECT_EQ(R_OSAL_MmngrRegisterMonitor(hndl_mmngr, OSAL_MMNGR_EVENT_ALLOCATE, AbnormalmonitorCb, &allocationEventMonitor), OSAL_RETURN_HANDLE) << "Test09_007_022 failed";
    hndl_mmngr->p_ptr_self = ptr_self_bak;
    EXPECT_EQ(R_OSAL_MmngrClose(hndl_mmngr), OSAL_RETURN_OK) << "Test09_007_022 failed";
    hndl_mmngr = OSAL_MEMORY_MANAGER_HANDLE_INVALID;
}
// [MmngrRegisterMonitor_TC_09_007_022]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrRegisterMonitor_TC_09_007_023 MemoryApiTest.MmngrRegisterMonitor_TC_09_007_023
 * @subsection MmngrRegisterMonitor_TC_09_007_023_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrRegisterMonitor_TC_09_007_023_tci Test Case ID
 * MmngrRegisterMonitor_S4_A_TC_09_007_023
 * @subsection MmngrRegisterMonitor_TC_09_007_023_rr Related Requirement(s)
 * \#276549
 * @subsection MmngrRegisterMonitor_TC_09_007_023_pp Prerequisite/Precondition
 * OSAL is initialized.
 * @subsection MmngrRegisterMonitor_TC_09_007_023_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrRegisterMonitor with abnormal condition in OSAL_MMNGR_ALLOC_MODE_FREE_LIST mode.
 * - Test09_007_023: "hndl_mmngr-> p_ptr_self" is invalid.
 * @subsection MmngrRegisterMonitor_TC_09_007_023_tpts Test Procedure/Test Steps
 * -# Call R_OSAL_MmngrGetOsalMaxConfig to get the max config then set mode to OSAL_MMNGR_ALLOC_MODE_FREE_LIST
 * -# Call R_OSAL_MmngrOpen with valid parameter configuration above
 * -# Call R_OSAL_MmngrRegisterMonitor with an invalid hndl_mmngr->p_ptr_self
 * -# Call R_OSAL_MmngrClose to close the memory manager.
 * @subsection MmngrRegisterMonitor_TC_09_007_023_ereb Expected Result/Behavior
 * -# The return value of R_OSAL_MmngrGetOsalMaxConfig is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrOpen is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrRegisterMonitor is OSAL_RETURN_HANDLE.
 * -# The return value of R_OSAL_MmngrClose is OSAL_RETURN_OK.
 * @subsection MmngrRegisterMonitor_TC_09_007_023_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrRegisterMonitor_TC_09_007_023
 */
// [MmngrRegisterMonitor_TC_09_007_023]
TEST_F(MemoryApiTest, MmngrRegisterMonitor_TC_09_007_023)
{
    void* ptr_self_bak;
    MockMonitorHelper  allocationEventMonitor;
    auto AbnormalmonitorCb = cb_wrapper<decltype(&MonitorHelper::AbnormalmonitorCb)>::make_cb<&MonitorHelper::AbnormalmonitorCb>();

    // Test09_007_023
    // @brief: abnormal case: hndl_mmngr->p_ptr_self is invalid
    EXPECT_EQ(R_OSAL_MmngrGetOsalMaxConfig(&config), OSAL_RETURN_OK);
    config.mode = OSAL_MMNGR_ALLOC_MODE_FREE_LIST;
    EXPECT_EQ(R_OSAL_MmngrOpen(&config, &hndl_mmngr), OSAL_RETURN_OK);
    ptr_self_bak = hndl_mmngr->p_ptr_self;
    hndl_mmngr->p_ptr_self = NULL_PTR;
    EXPECT_EQ(R_OSAL_MmngrRegisterMonitor(hndl_mmngr, OSAL_MMNGR_EVENT_ALLOCATE, AbnormalmonitorCb, &allocationEventMonitor), OSAL_RETURN_HANDLE) << "Test09_007_023 failed";
    hndl_mmngr->p_ptr_self = ptr_self_bak;
    EXPECT_EQ(R_OSAL_MmngrClose(hndl_mmngr), OSAL_RETURN_OK) << "Test09_007_023 failed";
    hndl_mmngr = OSAL_MEMORY_MANAGER_HANDLE_INVALID;
}
// [MmngrRegisterMonitor_TC_09_007_023]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrRegisterMonitor_TC_09_007_024 MemoryApiTest.MmngrRegisterMonitor_TC_09_007_024
 * @subsection MmngrRegisterMonitor_TC_09_007_024_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrRegisterMonitor_TC_09_007_024_tci Test Case ID
 * MmngrRegisterMonitor_S4_A_TC_09_007_024
 * @subsection MmngrRegisterMonitor_TC_09_007_024_rr Related Requirement(s)
 * \#276549
 * @subsection MmngrRegisterMonitor_TC_09_007_024_pp Prerequisite/Precondition
 * OSAL is initialized.
 * @subsection MmngrRegisterMonitor_TC_09_007_024_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrRegisterMonitor with abnormal condition in OSAL_MMNGR_ALLOC_MODE_FREE_LIST_PROT mode.
 * - Test09_007_024: "hndl_mmngr-> p_ptr_self" is invalid.
 * @subsection MmngrRegisterMonitor_TC_09_007_024_tpts Test Procedure/Test Steps
 * -# Call R_OSAL_MmngrGetOsalMaxConfig to get the max config then set mode to OSAL_MMNGR_ALLOC_MODE_FREE_LIST_PROT
 * -# Call R_OSAL_MmngrOpen with valid parameter configuration above
 * -# Call R_OSAL_MmngrRegisterMonitor with an invalid hndl_mmngr->p_ptr_self
 * -# Call R_OSAL_MmngrClose to close the memory manager.
 * @subsection MmngrRegisterMonitor_TC_09_007_024_ereb Expected Result/Behavior
 * -# The return value of R_OSAL_MmngrGetOsalMaxConfig is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrOpen is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrRegisterMonitor is OSAL_RETURN_HANDLE.
 * -# The return value of R_OSAL_MmngrClose is OSAL_RETURN_OK.
 * @subsection MmngrRegisterMonitor_TC_09_007_024_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrRegisterMonitor_TC_09_007_024
 */
// [MmngrRegisterMonitor_TC_09_007_024]
TEST_F(MemoryApiTest, MmngrRegisterMonitor_TC_09_007_024)
{
    void* ptr_self_bak;
    MockMonitorHelper  allocationEventMonitor;
    auto AbnormalmonitorCb = cb_wrapper<decltype(&MonitorHelper::AbnormalmonitorCb)>::make_cb<&MonitorHelper::AbnormalmonitorCb>();

    // Test09_007_024
    // @brief: abnormal case: hndl_mmngr->p_ptr_self is invalid
    EXPECT_EQ(R_OSAL_MmngrGetOsalMaxConfig(&config), OSAL_RETURN_OK);
    config.mode = OSAL_MMNGR_ALLOC_MODE_FREE_LIST_PROT;
    EXPECT_EQ(R_OSAL_MmngrOpen(&config, &hndl_mmngr), OSAL_RETURN_OK);
    ptr_self_bak = hndl_mmngr->p_ptr_self;
    hndl_mmngr->p_ptr_self = NULL_PTR;
    EXPECT_EQ(R_OSAL_MmngrRegisterMonitor(hndl_mmngr, OSAL_MMNGR_EVENT_ALLOCATE, AbnormalmonitorCb, &allocationEventMonitor), OSAL_RETURN_HANDLE) << "Test09_007_024 failed";
    hndl_mmngr->p_ptr_self = ptr_self_bak;
    EXPECT_EQ(R_OSAL_MmngrClose(hndl_mmngr), OSAL_RETURN_OK) << "Test09_007_024 failed";
    hndl_mmngr = OSAL_MEMORY_MANAGER_HANDLE_INVALID;
}
// [MmngrRegisterMonitor_TC_09_007_024]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrGetCpuPtr_TC_09_008_001 MemoryApiTest.MmngrGetCpuPtr_TC_09_008_001
 * @subsection MmngrGetCpuPtr_TC_09_008_001_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrGetCpuPtr_TC_09_008_001_tci Test Case ID
 * MmngrGetCpuPtr_S3_N_TC_09_008_001
 * @subsection MmngrGetCpuPtr_TC_09_008_001_rr Related Requirement(s)
 * \#276553
 * @subsection MMmngrGetCpuPtr_TC_09_008_001_pp Prerequisite/Precondition
 * OSAL is initialized.
 * @subsection MmngrGetCpuPtr_TC_09_008_001_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrGetCpuPtr with normal condition and mode is OSAL_MMNGR_ALLOC_MODE_STACK.
 * - pre-process: open new memory manager
 * - Test09_008_001: with all valid parameters.
 * - post-process: close memory manager
 * @subsection MmngrGetCpuPtr_TC_09_008_001_tpts Test Procedure/Test Steps
 * -# Call R_OSAL_MmngrOpen with bellow config:
 *  - config.memory_limit                = 4096
 *  - config.max_allowed_allocations     = 1
 *  - config.max_registered_monitors_cbs = 2
 *  - config.mode = OSAL_MMNGR_ALLOC_MODE_STACK
 * -# Call R_OSAL_MmngrAlloc to allocate a memory buffer.
 * -# Call R_OSAL_MmngrGetCpuPtr with all valid parameters.
 * -# Call R_OSAL_MmngrDealloc to deallocate the allocated memory buffer.
 * -# Call R_OSAL_MmngrClose to close memory manager
 * @subsection MmngrGetCpuPtr_TC_09_008_001_ereb Expected Result/Behavior
 * -# The return of R_OSAL_MmngrOpen is OSAL_RETURN_OK.<br>
 * The returned handle is not OSAL_MEMORY_MANAGER_HANDLE_INVALID.
 * -# The return value of R_OSAL_MmngrAlloc is OSAL_RETURN_OK.<br>
 * The return buffer is not OSAL_MEMORY_BUFFER_HANDLE_INVALID.
 * -# The return value of R_OSAL_MmngrGetCpuPtr is OSAL_RETURN_OK.<br>
 * The return CPU pointer is not NULL_PTR.
 * -# The return value of R_OSAL_MmngrDealloc is OSAL_RETURN_OK.
 * -# R_OSAL_MmngrClose return OSAL_RETURN_OK.
 * @subsection MmngrGetCpuPtr_TC_09_008_001_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrGetCpuPtr_TC_09_008_001
 */
// [MmngrGetCpuPtr_TC_09_008_001]
TEST_F(MemoryApiTest, MmngrGetCpuPtr_TC_09_008_001)
{
    void* cpu_ptr;

    // pre-process: open memory manager
    config.memory_limit                = 4096;
    config.max_allowed_allocations     = 1;
    config.max_registered_monitors_cbs = 2;
    config.mode = OSAL_MMNGR_ALLOC_MODE_STACK;
    size = 4096;
    alignment = 64;

    EXPECT_EQ(R_OSAL_MmngrOpen(&config, &hndl_mmngr), OSAL_RETURN_OK) <<  "pre-process failed";
    EXPECT_NE(hndl_mmngr,OSAL_MEMORY_MANAGER_HANDLE_INVALID) <<  "pre-process failed";

    // Test09_008_001
    // @brief: normal case: all valid argument
    EXPECT_EQ(R_OSAL_MmngrAlloc(hndl_mmngr, size, alignment, &buffer_obj), OSAL_RETURN_OK);
    EXPECT_NE(buffer_obj,OSAL_MEMORY_BUFFER_HANDLE_INVALID);
    EXPECT_EQ(R_OSAL_MmngrGetCpuPtr(buffer_obj, &cpu_ptr ), OSAL_RETURN_OK) << "Test09_008_001 failed";
    EXPECT_NE(cpu_ptr,NULL_PTR);
    EXPECT_EQ(R_OSAL_MmngrDealloc(hndl_mmngr, buffer_obj), OSAL_RETURN_OK);
    buffer_obj = OSAL_MEMORY_BUFFER_HANDLE_INVALID;

    //post-process: close memory manager
    EXPECT_EQ(R_OSAL_MmngrClose(hndl_mmngr), OSAL_RETURN_OK) << "post-process failed";
    hndl_mmngr = OSAL_MEMORY_MANAGER_HANDLE_INVALID;
}
// [MmngrGetCpuPtr_TC_09_008_001]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrGetCpuPtr_TC_09_008_002 MemoryApiTest.MmngrGetCpuPtr_TC_09_008_002
 * @subsection MmngrGetCpuPtr_TC_09_008_002_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrGetCpuPtr_TC_09_008_002_tci Test Case ID
 * MmngrGetCpuPtr_S0_A_TC_09_008_002
 * @subsection MmngrGetCpuPtr_TC_09_008_002_rr Related Requirement(s)
 * \#276553
 * @subsection MmngrGetCpuPtr_TC_09_008_002_pp Prerequisite/Precondition
 * OSAL is initialized.
 * @subsection MmngrGetCpuPtr_TC_09_008_002_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrGetCpuPtr with abnormal condition and mode is OSAL_MMNGR_ALLOC_MODE_STACK.
 * - Test09_008_002: buffer is NULL.
 * @subsection MmngrGetCpuPtr_TC_09_008_002_tpts Test Procedure/Test Steps
 * -# Call R_OSAL_MmngrGetCpuPtr with NULL buffer.
 * @subsection MmngrGetCpuPtr_TC_09_008_002_ereb Expected Result/Behavior
 * -# The return value of R_OSAL_MmngrGetCpuPtr is OSAL_RETURN_HANDLE.
 * @subsection MmngrGetCpuPtr_TC_09_008_002_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrGetCpuPtr_TC_09_008_002
 */
// [MmngrGetCpuPtr_TC_09_008_002]
TEST_F(MemoryApiTest, MmngrGetCpuPtr_TC_09_008_002)
{
    void* cpu_ptr;

    // Test09_008_002
    // @brief: abnormal case: buffer_obj = NULL
    EXPECT_EQ(R_OSAL_MmngrGetCpuPtr(OSAL_MEMORY_BUFFER_HANDLE_INVALID, &cpu_ptr ), OSAL_RETURN_HANDLE) << "Test09_008_002 failed";
}
// [MmngrGetCpuPtr_TC_09_008_002]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrGetCpuPtr_TC_09_008_003 MemoryApiTest.MmngrGetCpuPtr_TC_09_008_003
 * @subsection MmngrGetCpuPtr_TC_09_008_003_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrGetCpuPtr_TC_09_008_003_tci Test Case ID
 * MmngrGetCpuPtr_S2_A_TC_09_008_003
 * @subsection MmngrGetCpuPtr_TC_09_008_003_rr Related Requirement(s)
 * \#276553
 * @subsection MmngrGetCpuPtr_TC_09_008_003_pp Prerequisite/Precondition
 * OSAL is initialized.
 * @subsection MmngrGetCpuPtr_TC_09_008_003_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrGetCpuPtr with abnormal condition and mode is OSAL_MMNGR_ALLOC_MODE_STACK.
 * - pre-process: open new memory manager
 * - Test09_008_003: buffer has already deallocated.
 * - post-process: close memory manager
 * @subsection MmngrGetCpuPtr_TC_09_008_003_tpts Test Procedure/Test Steps
 * -# Call R_OSAL_MmngrOpen with bellow config:
 *  - config.memory_limit                = 4096
 *  - config.max_allowed_allocations     = 1
 *  - config.max_registered_monitors_cbs = 2
 *  - config.mode = OSAL_MMNGR_ALLOC_MODE_STACK
 * -# Call R_OSAL_MmngrAlloc to allocate a memory buffer.
 * -# Call R_OSAL_MmngrDealloc to deallocate the allocated memory buffer.
 * -# Call R_OSAL_MmngrGetCpuPtr with the buffer object which has already been deallocated
 * -# Call R_OSAL_MmngrClose to close the memory handle.
 * @subsection MmngrGetCpuPtr_TC_09_008_003_ereb Expected Result/Behavior
 * -# The return of R_OSAL_MmngrOpen is OSAL_RETURN_OK.<br>
 * The returned handle is not OSAL_MEMORY_MANAGER_HANDLE_INVALID.
 * -# The return value of R_OSAL_MmngrAlloc is OSAL_RETURN_OK.<br>
 * The return buffer is not OSAL_MEMORY_BUFFER_HANDLE_INVALID.
 * -# The return value of R_OSAL_MmngrDealloc is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrGetCpuPtr is OSAL_RETURN_HANDLE.
 * -# The return value of R_OSAL_MmngrClose is OSAL_RETURN_OK.
 * @subsection MmngrGetCpuPtr_TC_09_008_003_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrGetCpuPtr_TC_09_008_003
 */
// [MmngrGetCpuPtr_TC_09_008_003]
TEST_F(MemoryApiTest, MmngrGetCpuPtr_TC_09_008_003)
{
    void* cpu_ptr;

    // pre-process: open memory manager
    config.memory_limit                = 4096;
    config.max_allowed_allocations     = 1;
    config.max_registered_monitors_cbs = 2;
    config.mode = OSAL_MMNGR_ALLOC_MODE_STACK;
    size = 4096;
    alignment = 64;

    EXPECT_EQ(R_OSAL_MmngrOpen(&config, &hndl_mmngr), OSAL_RETURN_OK) <<  "pre-process failed";
    EXPECT_NE(hndl_mmngr,OSAL_MEMORY_MANAGER_HANDLE_INVALID) <<  "pre-process failed";

    // Test09_008_003
    // @brief: abnormal case: buffer_obj has already deallocted
    EXPECT_EQ(R_OSAL_MmngrAlloc(hndl_mmngr, size, alignment, &buffer_obj), OSAL_RETURN_OK);
    EXPECT_NE(buffer_obj, OSAL_MEMORY_BUFFER_HANDLE_INVALID);
    EXPECT_EQ(R_OSAL_MmngrDealloc(hndl_mmngr, buffer_obj), OSAL_RETURN_OK);
    EXPECT_EQ(R_OSAL_MmngrGetCpuPtr(buffer_obj, &cpu_ptr ), OSAL_RETURN_HANDLE) << "Test09_008_003 failed";
    buffer_obj = OSAL_MEMORY_BUFFER_HANDLE_INVALID;

    //post-process: close memory manager
    EXPECT_EQ(R_OSAL_MmngrClose(hndl_mmngr), OSAL_RETURN_OK) << "post-process failed";
    hndl_mmngr = OSAL_MEMORY_MANAGER_HANDLE_INVALID;
}
// [MmngrGetCpuPtr_TC_09_008_003]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrGetCpuPtr_TC_09_008_004 MemoryApiTest.MmngrGetCpuPtr_TC_09_008_004
 * @subsection MmngrGetCpuPtr_TC_09_008_004_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrGetCpuPtr_TC_09_008_004_tci Test Case ID
 * MmngrGetCpuPtr_S4_A_TC_09_008_004
 * @subsection MmngrGetCpuPtr_TC_09_008_004_rr Related Requirement(s)
 * \#276553
 * @subsection MmngrGetCpuPtr_TC_09_008_004_pp Prerequisite/Precondition
 * OSAL is initialized.
 * @subsection MmngrGetCpuPtr_TC_09_008_004_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrGetCpuPtr with abnormal condition and mode is OSAL_MMNGR_ALLOC_MODE_STACK.
 * - pre-process: open new memory manager
 * - Test09_008_004: buffer is not support to get CPU pointer.
 * - post-process: close memory manager
 * @subsection MmngrGetCpuPtr_TC_09_008_004_tpts Test Procedure/Test Steps
 * -# Call R_OSAL_MmngrOpen with bellow config:
 *  - config.memory_limit                = 4096
 *  - config.max_allowed_allocations     = 1
 *  - config.max_registered_monitors_cbs = 2
 *  - config.mode = OSAL_MMNGR_ALLOC_MODE_STACK
 * -# Allocate "tmp_buffer_obj" by using malloc function.
 * -# Call R_OSAL_MmngrAlloc to allocate a memory buffer.
 * -# Store "buffer_obj->p_getCpuPtr" to "tmp_buffer_obj->p_getCpuPtr".<br>
 * Set "buffer_obj->p_getCpuPtr" to NULL. <br>
 * Call R_OSAL_MmngrGetCpuPtr with the changed buffer "buffer_obj".<br>
 * Re-assign "tmp_buffer_obj->p_getCpuPtr" to "buffer_obj->p_getCpuPtr".
 * -# Call R_OSAL_MmngrDealloc to deallocate the original allocated buffer.
 * -# Free buffer pointed by "tmp_buffer_obj"
 * -# Call R_OSAL_MmngrClose to close the memory handle.
 * @subsection MmngrGetCpuPtr_TC_09_008_004_ereb Expected Result/Behavior
 * -# The return of R_OSAL_MmngrOpen is OSAL_RETURN_OK.<br>
 * The returned handle is not OSAL_MEMORY_MANAGER_HANDLE_INVALID.
 * -# Memory allocation succeeded (Pointer to buffer != Nullpointer)
 * -# The return value of R_OSAL_MmngrAlloc is OSAL_RETURN_OK.<br>
 * The return buffer is not OSAL_MEMORY_BUFFER_HANDLE_INVALID.
 * -# The return value of R_OSAL_MmngrGetCpuPtr is OSAL_RETURN_UNSUPPORTED_OPERATION.
 * -# The return value of R_OSAL_MmngrDealloc is OSAL_RETURN_OK.
 * -# Allocated memory free succeeded.
 * -# The return value of R_OSAL_MmngrClose is OSAL_RETURN_OK.
 * @subsection MmngrGetCpuPtr_TC_09_008_004_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrGetCpuPtr_TC_09_008_004
 */
// [MmngrGetCpuPtr_TC_09_008_004]
TEST_F(MemoryApiTest, MmngrGetCpuPtr_TC_09_008_004)
{
    osal_memory_buffer_handle_t tmp_buffer_obj;
    void* cpu_ptr;

    // pre-process: open memory manager
    config.memory_limit                = 4096;
    config.max_allowed_allocations     = 1;
    config.max_registered_monitors_cbs = 2;
    config.mode = OSAL_MMNGR_ALLOC_MODE_STACK;
    size = 4096;
    alignment = 64;

    EXPECT_EQ(R_OSAL_MmngrOpen(&config, &hndl_mmngr), OSAL_RETURN_OK) <<  "pre-process failed";
    EXPECT_NE(hndl_mmngr,OSAL_MEMORY_MANAGER_HANDLE_INVALID) <<  "pre-process failed";

    // Test09_008_004
    // @brief: abnormal case: buffer_obj->getCpuPtr = NULL
    tmp_buffer_obj = (osal_memory_buffer_handle_t)malloc (sizeof(st_osal_memory_buffer_obj));
    EXPECT_EQ(R_OSAL_MmngrAlloc(hndl_mmngr, size, alignment, &buffer_obj), OSAL_RETURN_OK);
    EXPECT_NE(buffer_obj,OSAL_MEMORY_BUFFER_HANDLE_INVALID);
    tmp_buffer_obj->p_getCpuPtr = buffer_obj->p_getCpuPtr;
    buffer_obj->p_getCpuPtr = NULL;
    EXPECT_EQ(R_OSAL_MmngrGetCpuPtr(buffer_obj, &cpu_ptr ), OSAL_RETURN_UNSUPPORTED_OPERATION) << "Test09_008_004 failed";
    buffer_obj->p_getCpuPtr = tmp_buffer_obj->p_getCpuPtr;
    EXPECT_EQ(R_OSAL_MmngrDealloc(hndl_mmngr, buffer_obj), OSAL_RETURN_OK);
    buffer_obj = OSAL_MEMORY_BUFFER_HANDLE_INVALID;
    free(tmp_buffer_obj);

    //post-process: close memory manager
    EXPECT_EQ(R_OSAL_MmngrClose(hndl_mmngr), OSAL_RETURN_OK) << "post-process failed";
    hndl_mmngr = OSAL_MEMORY_MANAGER_HANDLE_INVALID;
}
// [MmngrGetCpuPtr_TC_09_008_004]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrGetCpuPtr_TC_09_008_005 MemoryApiTest.MmngrGetCpuPtr_TC_09_008_005
 * @subsection MmngrGetCpuPtr_TC_09_008_005_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrGetCpuPtr_TC_09_008_005_tci Test Case ID
 * MmngrGetCpuPtr_S0_A_TC_09_008_005
 * @subsection MmngrGetCpuPtr_TC_09_008_005_rr Related Requirement(s)
 * \#276553
 * @subsection MmngrGetCpuPtr_TC_09_008_005_pp Prerequisite/Precondition
 * OSAL is initialized.
 * @subsection MmngrGetCpuPtr_TC_09_008_005_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrGetCpuPtr with abnormal condition and mode is OSAL_MMNGR_ALLOC_MODE_STACK.
 * - pre-process: open new memory manager
 * - Test09_008_005: paramater cpu_ptr is NULL.
 * - post-process: close memory manager
 * @subsection MmngrGetCpuPtr_TC_09_008_005_tpts Test Procedure/Test Steps
 * -# Call R_OSAL_MmngrOpen with bellow config:
 *  - config.memory_limit                = 4096
 *  - config.max_allowed_allocations     = 1
 *  - config.max_registered_monitors_cbs = 2
 *  - config.mode = OSAL_MMNGR_ALLOC_MODE_STACK
 * -# Call R_OSAL_MmngrAlloc to allocate a memory buffer.
 * -# Call R_OSAL_MmngrGetCpuPtr with cpu_ptr is NULL.
 * -# Call R_OSAL_MmngrDealloc to deallocate the original allocated buffer.
 * -# Call R_OSAL_MmngrClose to close the memory handle.
 * @subsection MmngrGetCpuPtr_TC_09_008_005_ereb Expected Result/Behavior
 * -# The return of R_OSAL_MmngrOpen is OSAL_RETURN_OK.<br>
 * The returned handle is not OSAL_MEMORY_MANAGER_HANDLE_INVALID.
 * -# The return value of R_OSAL_MmngrAlloc is OSAL_RETURN_OK.<br>
 * The return buffer is not OSAL_MEMORY_BUFFER_HANDLE_INVALID.
 * -# The return value of R_OSAL_MmngrGetCpuPtr is OSAL_RETURN_PAR.
 * -# The return value of R_OSAL_MmngrDealloc is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrClose is OSAL_RETURN_OK.
 * @subsection MmngrGetCpuPtr_TC_09_008_005_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrGetCpuPtr_TC_09_008_005
 */
// [MmngrGetCpuPtr_TC_09_008_005]
TEST_F(MemoryApiTest, MmngrGetCpuPtr_TC_09_008_005)
{
    void** pp_cpu_ptr = NULL;

    // pre-process: open memory manager
    config.memory_limit                = 4096;
    config.max_allowed_allocations     = 1;
    config.max_registered_monitors_cbs = 2;
    config.mode = OSAL_MMNGR_ALLOC_MODE_STACK;
    size = 4096;
    alignment = 64;

    EXPECT_EQ(R_OSAL_MmngrOpen(&config, &hndl_mmngr), OSAL_RETURN_OK) <<  "pre-process failed";
    EXPECT_NE(hndl_mmngr,OSAL_MEMORY_MANAGER_HANDLE_INVALID) <<  "pre-process failed";

    // Test09_008_005
    // @brief: abnormal case: cpu_ptr = NULL
    EXPECT_EQ(R_OSAL_MmngrAlloc(hndl_mmngr, size, alignment, &buffer_obj), OSAL_RETURN_OK);
    EXPECT_NE(buffer_obj,OSAL_MEMORY_BUFFER_HANDLE_INVALID);
    EXPECT_EQ(R_OSAL_MmngrGetCpuPtr(buffer_obj, pp_cpu_ptr), OSAL_RETURN_PAR) << "Test09_008_005 failed";
    EXPECT_EQ(R_OSAL_MmngrDealloc(hndl_mmngr, buffer_obj), OSAL_RETURN_OK);
    buffer_obj = OSAL_MEMORY_BUFFER_HANDLE_INVALID;

    //post-process: close memory manager
    EXPECT_EQ(R_OSAL_MmngrClose(hndl_mmngr), OSAL_RETURN_OK) << "post-process failed";
    hndl_mmngr = OSAL_MEMORY_MANAGER_HANDLE_INVALID;
}
// [MmngrGetCpuPtr_TC_09_008_005]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrGetCpuPtr_TC_09_008_006 MemoryApiTest.MmngrGetCpuPtr_TC_09_008_006
 * @subsection MmngrGetCpuPtr_TC_09_008_006_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrGetCpuPtr_TC_09_008_006_tci Test Case ID
 * MmngrGetCpuPtr_S3_N_TC_09_008_006
 * @subsection MmngrGetCpuPtr_TC_09_008_006_rr Related Requirement(s)
 * \#276553
 * @subsection MMmngrGetCpuPtr_TC_09_008_006_pp Prerequisite/Precondition
 * OSAL is initialized.
 * @subsection MmngrGetCpuPtr_TC_09_008_006_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrGetCpuPtr with normal condition and mode is OSAL_MMNGR_ALLOC_MODE_STACK.
 * - pre-process: open new memory manager
 * - Test09_008_006: confirm with memory handle which opened with OSAL_MMNGR_ALLOC_MODE_FREE_LIST mode.
 * - post-process: close memory manager
 * @subsection MmngrGetCpuPtr_TC_09_008_006_tpts Test Procedure/Test Steps
 * -# Call R_OSAL_MmngrOpen with bellow config:
 *  - config.memory_limit                = 4096
 *  - config.max_allowed_allocations     = 1
 *  - config.max_registered_monitors_cbs = 2
 *  - config.mode = OSAL_MMNGR_ALLOC_MODE_FREE_LIST
 * -# Call R_OSAL_MmngrAlloc to allocate a memory buffer.
 * -# Call R_OSAL_MmngrGetCpuPtr with all valid parameters. 
 * -# Call R_OSAL_MmngrDealloc to deallocate the allocated memory buffer.
 * -# Call R_OSAL_MmngrClose to close memory handle.
 * @subsection MmngrGetCpuPtr_TC_09_008_006_ereb Expected Result/Behavior
 * -# The return of R_OSAL_MmngrOpen is OSAL_RETURN_OK.<br>
 * The returned handle is not OSAL_MEMORY_MANAGER_HANDLE_INVALID.
 * -# The return value of R_OSAL_MmngrAlloc is OSAL_RETURN_OK.<br>
 * The return buffer is not OSAL_MEMORY_BUFFER_HANDLE_INVALID.
 * -# The return value of R_OSAL_MmngrGetCpuPtr is OSAL_RETURN_OK.<br>
 * The return CPU pointer is not NULL_PTR.
 * -# The return value of R_OSAL_MmngrDealloc is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrClose is OSAL_RETURN_OK.
 * @subsection MmngrGetCpuPtr_TC_09_008_006_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrGetCpuPtr_TC_09_008_006
 */
// [MmngrGetCpuPtr_TC_09_008_006]
TEST_F(MemoryApiTest, MmngrGetCpuPtr_TC_09_008_006)
{
    void* cpu_ptr;

    // pre-process: open memory manager
    config.memory_limit                = 4096;
    config.max_allowed_allocations     = 1;
    config.max_registered_monitors_cbs = 2;
    config.mode = OSAL_MMNGR_ALLOC_MODE_FREE_LIST;
    size = 64;
    alignment = 64;

    EXPECT_EQ(R_OSAL_MmngrOpen(&config, &hndl_mmngr), OSAL_RETURN_OK) <<  "pre-process failed";
    EXPECT_NE(hndl_mmngr,OSAL_MEMORY_MANAGER_HANDLE_INVALID) <<  "pre-process failed";

    // Test09_008_006
    // @brief: normal case: confirm with OSAL_MMNGR_ALLOC_MODE_FREE_LIST mode
    EXPECT_EQ(R_OSAL_MmngrAlloc(hndl_mmngr, size, alignment, &buffer_obj), OSAL_RETURN_OK);
    EXPECT_NE(buffer_obj,OSAL_MEMORY_BUFFER_HANDLE_INVALID);
    EXPECT_EQ(R_OSAL_MmngrGetCpuPtr(buffer_obj, &cpu_ptr ), OSAL_RETURN_OK) << "Test09_008_006 failed";
    EXPECT_NE(cpu_ptr,NULL_PTR);
    EXPECT_EQ(R_OSAL_MmngrDealloc(hndl_mmngr, buffer_obj), OSAL_RETURN_OK);
    buffer_obj = OSAL_MEMORY_BUFFER_HANDLE_INVALID;

    //post-process: close memory manager
    EXPECT_EQ(R_OSAL_MmngrClose(hndl_mmngr), OSAL_RETURN_OK) << "post-process failed";
    hndl_mmngr = OSAL_MEMORY_MANAGER_HANDLE_INVALID;
}
// [MmngrGetCpuPtr_TC_09_008_006]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrGetCpuPtr_TC_09_008_007 MemoryApiTest.MmngrGetCpuPtr_TC_09_008_007
 * @subsection MmngrGetCpuPtr_TC_09_008_007_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrGetCpuPtr_TC_09_008_007_tci Test Case ID
 * MmngrGetCpuPtr_S3_N_TC_09_008_007
 * @subsection MmngrGetCpuPtr_TC_09_008_007_rr Related Requirement(s)
 * \#276553
 * @subsection MMmngrGetCpuPtr_TC_09_008_007_pp Prerequisite/Precondition
 * OSAL is initialized.
 * @subsection MmngrGetCpuPtr_TC_09_008_007_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrGetCpuPtr with normal condition and mode is OSAL_MMNGR_ALLOC_MODE_STACK_PROT.
 * - pre-process: open new memory manager
 * - Test09_008_007: with all valid parameters.
 * - post-process: close memory manager
 * @subsection MmngrGetCpuPtr_TC_09_008_007_tpts Test Procedure/Test Steps
 * -# Call R_OSAL_MmngrOpen with bellow config:
 *  - config.memory_limit                = 4096
 *  - config.max_allowed_allocations     = 1
 *  - config.max_registered_monitors_cbs = 2
 *  - config.mode = OSAL_MMNGR_ALLOC_MODE_STACK_PROT
 * -# Call R_OSAL_MmngrAlloc to allocate a memory buffer.
 * -# Call R_OSAL_MmngrGetCpuPtr with all valid parameters.
 * -# Call R_OSAL_MmngrDealloc to deallocate the allocated memory buffer.
 * -# Call R_OSAL_MmngrClose to close memory manager
 * @subsection MmngrGetCpuPtr_TC_09_008_007_ereb Expected Result/Behavior
 * -# The return of R_OSAL_MmngrOpen is OSAL_RETURN_OK.<br>
 * The returned handle is not OSAL_MEMORY_MANAGER_HANDLE_INVALID.
 * -# The return value of R_OSAL_MmngrAlloc is OSAL_RETURN_OK.<br>
 * The return buffer is not OSAL_MEMORY_BUFFER_HANDLE_INVALID.
 * -# The return value of R_OSAL_MmngrGetCpuPtr is OSAL_RETURN_OK.<br>
 * The return CPU pointer is not NULL_PTR.
 * -# The return value of R_OSAL_MmngrDealloc is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrClose is OSAL_RETURN_OK.
 * @subsection MmngrGetCpuPtr_TC_09_008_007_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrGetCpuPtr_TC_09_008_007
 */
// [MmngrGetCpuPtr_TC_09_008_007]
TEST_F(MemoryApiTest, MmngrGetCpuPtr_TC_09_008_007)
{
    void* cpu_ptr;

    // pre-process: open memory manager
    config.memory_limit                = 4096;
    config.max_allowed_allocations     = 1;
    config.max_registered_monitors_cbs = 2;
    config.mode = OSAL_MMNGR_ALLOC_MODE_STACK_PROT;
    size = 4096;
    alignment = 64;

    EXPECT_EQ(R_OSAL_MmngrOpen(&config, &hndl_mmngr), OSAL_RETURN_OK) <<  "pre-process failed";
    EXPECT_NE(hndl_mmngr,OSAL_MEMORY_MANAGER_HANDLE_INVALID) <<  "pre-process failed";

    // Test09_008_007
    // @brief: normal case: all valid argument
    EXPECT_EQ(R_OSAL_MmngrAlloc(hndl_mmngr, size, alignment, &buffer_obj), OSAL_RETURN_OK);
    EXPECT_NE(buffer_obj,OSAL_MEMORY_BUFFER_HANDLE_INVALID);
    EXPECT_EQ(R_OSAL_MmngrGetCpuPtr(buffer_obj, &cpu_ptr ), OSAL_RETURN_OK) << "Test09_008_007 failed";
    EXPECT_NE(cpu_ptr,NULL_PTR);
    EXPECT_EQ(R_OSAL_MmngrDealloc(hndl_mmngr, buffer_obj), OSAL_RETURN_OK);
    buffer_obj = OSAL_MEMORY_BUFFER_HANDLE_INVALID;

    //post-process: close memory manager
    EXPECT_EQ(R_OSAL_MmngrClose(hndl_mmngr), OSAL_RETURN_OK) << "post-process failed";
    hndl_mmngr = OSAL_MEMORY_MANAGER_HANDLE_INVALID;
}
// [MmngrGetCpuPtr_TC_09_008_007]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrGetCpuPtr_TC_09_008_008 MemoryApiTest.MmngrGetCpuPtr_TC_09_008_008
 * @subsection MmngrGetCpuPtr_TC_09_008_008_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrGetCpuPtr_TC_09_008_008_tci Test Case ID
 * MmngrGetCpuPtr_S2_A_TC_09_008_008
 * @subsection MmngrGetCpuPtr_TC_09_008_008_rr Related Requirement(s)
 * \#276553
 * @subsection MmngrGetCpuPtr_TC_09_008_008_pp Prerequisite/Precondition
 * OSAL is initialized.
 * @subsection MmngrGetCpuPtr_TC_09_008_008_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrGetCpuPtr with abnormal condition and mode is OSAL_MMNGR_ALLOC_MODE_STACK_PROT.
 * - pre-process: open new memory manager
 * - Test09_008_008: buffer has already deallocated.
 * - post-process: close memory manager
 * @subsection MmngrGetCpuPtr_TC_09_008_008_tpts Test Procedure/Test Steps
 * -# Call R_OSAL_MmngrOpen with bellow config:
 *  - config.memory_limit                = 4096
 *  - config.max_allowed_allocations     = 1
 *  - config.max_registered_monitors_cbs = 2
 *  - config.mode = OSAL_MMNGR_ALLOC_MODE_STACK_PROT
 * -# Call R_OSAL_MmngrAlloc to allocate a memory buffer.
 * -# Call R_OSAL_MmngrDealloc to deallocate the allocated memory buffer.
 * -# Call R_OSAL_MmngrGetCpuPtr with the buffer object which has already been deallocated
 * -# Call R_OSAL_MmngrClose to close the memory handle.
 * @subsection MmngrGetCpuPtr_TC_09_008_008_ereb Expected Result/Behavior
 * -# The return of R_OSAL_MmngrOpen is OSAL_RETURN_OK.<br>
 * The returned handle is not OSAL_MEMORY_MANAGER_HANDLE_INVALID.
 * -# The return value of R_OSAL_MmngrAlloc is OSAL_RETURN_OK.<br>
 * The return buffer is not OSAL_MEMORY_BUFFER_HANDLE_INVALID.
 * -# The return value of R_OSAL_MmngrDealloc is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrGetCpuPtr is OSAL_RETURN_HANDLE.
 * -# The return value of R_OSAL_MmngrClose is OSAL_RETURN_OK.
 * @subsection MmngrGetCpuPtr_TC_09_008_008_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrGetCpuPtr_TC_09_008_008
 */
// [MmngrGetCpuPtr_TC_09_008_008]
TEST_F(MemoryApiTest, MmngrGetCpuPtr_TC_09_008_008)
{
    void* cpu_ptr;

    // pre-process: open memory manager
    config.memory_limit                = 4096;
    config.max_allowed_allocations     = 1;
    config.max_registered_monitors_cbs = 2;
    config.mode = OSAL_MMNGR_ALLOC_MODE_STACK_PROT;
    size = 4096;
    alignment = 64;

    EXPECT_EQ(R_OSAL_MmngrOpen(&config, &hndl_mmngr), OSAL_RETURN_OK) <<  "pre-process failed";
    EXPECT_NE(hndl_mmngr,OSAL_MEMORY_MANAGER_HANDLE_INVALID) <<  "pre-process failed";

    // Test09_008_008
    // @brief: abnormal case: buffer_obj has already deallocted
    EXPECT_EQ(R_OSAL_MmngrAlloc(hndl_mmngr, size, alignment, &buffer_obj), OSAL_RETURN_OK);
    EXPECT_NE(buffer_obj, OSAL_MEMORY_BUFFER_HANDLE_INVALID);
    EXPECT_EQ(R_OSAL_MmngrDealloc(hndl_mmngr, buffer_obj), OSAL_RETURN_OK);
    EXPECT_EQ(R_OSAL_MmngrGetCpuPtr(buffer_obj, &cpu_ptr ), OSAL_RETURN_HANDLE) << "Test09_008_008 failed";
    buffer_obj = OSAL_MEMORY_BUFFER_HANDLE_INVALID;

    //post-process: close memory manager
    EXPECT_EQ(R_OSAL_MmngrClose(hndl_mmngr), OSAL_RETURN_OK) << "post-process failed";
    hndl_mmngr = OSAL_MEMORY_MANAGER_HANDLE_INVALID;
}
// [MmngrGetCpuPtr_TC_09_008_008]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrGetCpuPtr_TC_09_008_009 MemoryApiTest.MmngrGetCpuPtr_TC_09_008_009
 * @subsection MmngrGetCpuPtr_TC_09_008_009_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrGetCpuPtr_TC_09_008_009_tci Test Case ID
 * MmngrGetCpuPtr_S4_A_TC_09_008_009
 * @subsection MmngrGetCpuPtr_TC_09_008_009_rr Related Requirement(s)
 * \#276553
 * @subsection MmngrGetCpuPtr_TC_09_008_009_pp Prerequisite/Precondition
 * OSAL is initialized.
 * @subsection MmngrGetCpuPtr_TC_09_008_009_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrGetCpuPtr with abnormal condition and mode is OSAL_MMNGR_ALLOC_MODE_STACK_PROT.
 * - pre-process: open new memory manager
 * - Test09_008_009: buffer is not support to get CPU pointer.
 * - post-process: close memory manager
 * @subsection MmngrGetCpuPtr_TC_09_008_009_tpts Test Procedure/Test Steps
 * -# Call R_OSAL_MmngrOpen with bellow config:
 *  - config.memory_limit                = 4096
 *  - config.max_allowed_allocations     = 1
 *  - config.max_registered_monitors_cbs = 2
 *  - config.mode = OSAL_MMNGR_ALLOC_MODE_STACK_PROT
 * -# Allocate "tmp_buffer_obj" by using malloc function.
 * -# Call R_OSAL_MmngrAlloc to allocate a memory buffer.
 * -# Store "buffer_obj->p_getCpuPtr" to "tmp_buffer_obj->p_getCpuPtr".<br>
 * Set "buffer_obj->p_getCpuPtr" to NULL. <br>
 * Call R_OSAL_MmngrGetCpuPtr with the changed buffer "buffer_obj".<br>
 * Re-assign "tmp_buffer_obj->p_getCpuPtr" to "buffer_obj->p_getCpuPtr".
 * -# Call R_OSAL_MmngrDealloc to deallocate the original allocated buffer.
 * -# Free buffer pointed by "tmp_buffer_obj"
 * -# Call R_OSAL_MmngrClose to close the memory handle.
 * @subsection MmngrGetCpuPtr_TC_09_008_009_ereb Expected Result/Behavior
 * -# The return of R_OSAL_MmngrOpen is OSAL_RETURN_OK.<br>
 * The returned handle is not OSAL_MEMORY_MANAGER_HANDLE_INVALID.
 * -# Memory allocation succeeded (Pointer to buffer != Nullpointer)
 * -# The return value of R_OSAL_MmngrAlloc is OSAL_RETURN_OK.<br>
 * The return buffer is not OSAL_MEMORY_BUFFER_HANDLE_INVALID.
 * -# The return value of R_OSAL_MmngrGetCpuPtr is OSAL_RETURN_UNSUPPORTED_OPERATION.
 * -# The return value of R_OSAL_MmngrDealloc is OSAL_RETURN_OK.
 * -# Allocated memory free succeeded.
 * -# The return value of R_OSAL_MmngrClose is OSAL_RETURN_OK.
 * @subsection MmngrGetCpuPtr_TC_09_008_009_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrGetCpuPtr_TC_09_008_009
 */
// [MmngrGetCpuPtr_TC_09_008_009]
TEST_F(MemoryApiTest, MmngrGetCpuPtr_TC_09_008_009)
{
    osal_memory_buffer_handle_t tmp_buffer_obj;
    void* cpu_ptr;

    // pre-process: open memory manager
    config.memory_limit                = 4096;
    config.max_allowed_allocations     = 1;
    config.max_registered_monitors_cbs = 2;
    config.mode = OSAL_MMNGR_ALLOC_MODE_STACK_PROT;
    size = 4096;
    alignment = 64;

    EXPECT_EQ(R_OSAL_MmngrOpen(&config, &hndl_mmngr), OSAL_RETURN_OK) <<  "pre-process failed";
    EXPECT_NE(hndl_mmngr,OSAL_MEMORY_MANAGER_HANDLE_INVALID) <<  "pre-process failed";

    // Test09_008_009
    // @brief: abnormal case: buffer_obj->getCpuPtr = NULL
    tmp_buffer_obj = (osal_memory_buffer_handle_t)malloc (sizeof(st_osal_memory_buffer_obj));
    EXPECT_EQ(R_OSAL_MmngrAlloc(hndl_mmngr, size, alignment, &buffer_obj), OSAL_RETURN_OK);
    EXPECT_NE(buffer_obj,OSAL_MEMORY_BUFFER_HANDLE_INVALID);
    tmp_buffer_obj->p_getCpuPtr = buffer_obj->p_getCpuPtr;
    buffer_obj->p_getCpuPtr = NULL;
    EXPECT_EQ(R_OSAL_MmngrGetCpuPtr(buffer_obj, &cpu_ptr ), OSAL_RETURN_UNSUPPORTED_OPERATION) << "Test09_008_009 failed";
    buffer_obj->p_getCpuPtr = tmp_buffer_obj->p_getCpuPtr;
    EXPECT_EQ(R_OSAL_MmngrDealloc(hndl_mmngr, buffer_obj), OSAL_RETURN_OK);
    buffer_obj = OSAL_MEMORY_BUFFER_HANDLE_INVALID;
    free(tmp_buffer_obj);

    //post-process: close memory manager
    EXPECT_EQ(R_OSAL_MmngrClose(hndl_mmngr), OSAL_RETURN_OK) << "post-process failed";
    hndl_mmngr = OSAL_MEMORY_MANAGER_HANDLE_INVALID;
}
// [MmngrGetCpuPtr_TC_09_008_009]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrGetCpuPtr_TC_09_008_010 MemoryApiTest.MmngrGetCpuPtr_TC_09_008_010
 * @subsection MmngrGetCpuPtr_TC_09_008_010_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrGetCpuPtr_TC_09_008_010_tci Test Case ID
 * MmngrGetCpuPtr_S0_A_TC_09_008_010
 * @subsection MmngrGetCpuPtr_TC_09_008_010_rr Related Requirement(s)
 * \#276553
 * @subsection MmngrGetCpuPtr_TC_09_008_010_pp Prerequisite/Precondition
 * OSAL is initialized.
 * @subsection MmngrGetCpuPtr_TC_09_008_010_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrGetCpuPtr with abnormal condition and mode is OSAL_MMNGR_ALLOC_MODE_STACK_PROT.
 * - pre-process: open new memory manager
 * - Test09_008_010: paramater cpu_ptr is NULL.
 * - post-process: close memory manager
 * @subsection MmngrGetCpuPtr_TC_09_008_010_tpts Test Procedure/Test Steps
 * -# Call R_OSAL_MmngrOpen with bellow config:
 *  - config.memory_limit                = 4096
 *  - config.max_allowed_allocations     = 1
 *  - config.max_registered_monitors_cbs = 2
 *  - config.mode = OSAL_MMNGR_ALLOC_MODE_STACK_PROT
 * -# Call R_OSAL_MmngrAlloc to allocate a memory buffer.
 * -# Call R_OSAL_MmngrGetCpuPtr with cpu_ptr is NULL.
 * -# Call R_OSAL_MmngrDealloc to deallocate the original allocated buffer.
 * -# Call R_OSAL_MmngrClose to close the memory handle.
 * @subsection MmngrGetCpuPtr_TC_09_008_010_ereb Expected Result/Behavior
 * -# The return of R_OSAL_MmngrOpen is OSAL_RETURN_OK.<br>
 * The returned handle is not OSAL_MEMORY_MANAGER_HANDLE_INVALID.
 * -# The return value of R_OSAL_MmngrAlloc is OSAL_RETURN_OK.<br>
 * The return buffer is not OSAL_MEMORY_BUFFER_HANDLE_INVALID.
 * -# The return value of R_OSAL_MmngrGetCpuPtr is OSAL_RETURN_PAR.
 * -# The return value of R_OSAL_MmngrDealloc is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrClose is OSAL_RETURN_OK.
 * @subsection MmngrGetCpuPtr_TC_09_008_010_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrGetCpuPtr_TC_09_008_010
 */
// [MmngrGetCpuPtr_TC_09_008_010]
TEST_F(MemoryApiTest, MmngrGetCpuPtr_TC_09_008_010)
{
    void** pp_cpu_ptr = NULL;

    // pre-process: open memory manager
    config.memory_limit                = 4096;
    config.max_allowed_allocations     = 1;
    config.max_registered_monitors_cbs = 2;
    config.mode = OSAL_MMNGR_ALLOC_MODE_STACK_PROT;
    size = 4096;
    alignment = 64;

    EXPECT_EQ(R_OSAL_MmngrOpen(&config, &hndl_mmngr), OSAL_RETURN_OK) <<  "pre-process failed";
    EXPECT_NE(hndl_mmngr,OSAL_MEMORY_MANAGER_HANDLE_INVALID) <<  "pre-process failed";

    // Test09_008_010
    // @brief: abnormal case: cpu_ptr = NULL
    EXPECT_EQ(R_OSAL_MmngrAlloc(hndl_mmngr, size, alignment, &buffer_obj), OSAL_RETURN_OK);
    EXPECT_NE(buffer_obj,OSAL_MEMORY_BUFFER_HANDLE_INVALID);
    EXPECT_EQ(R_OSAL_MmngrGetCpuPtr(buffer_obj, pp_cpu_ptr), OSAL_RETURN_PAR) << "Test09_008_010 failed";
    EXPECT_EQ(R_OSAL_MmngrDealloc(hndl_mmngr, buffer_obj), OSAL_RETURN_OK);
    buffer_obj = OSAL_MEMORY_BUFFER_HANDLE_INVALID;

    //post-process: close memory manager
    EXPECT_EQ(R_OSAL_MmngrClose(hndl_mmngr), OSAL_RETURN_OK) << "post-process failed";
    hndl_mmngr = OSAL_MEMORY_MANAGER_HANDLE_INVALID;
}
// [MmngrGetCpuPtr_TC_09_008_010]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrGetCpuPtr_TC_09_008_011 MemoryApiTest.MmngrGetCpuPtr_TC_09_008_011
 * @subsection MmngrGetCpuPtr_TC_09_008_011_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrGetCpuPtr_TC_09_008_011_tci Test Case ID
 * MmngrGetCpuPtr_S4_A_TC_09_008_011
 * @subsection MmngrGetCpuPtr_TC_09_008_011_rr Related Requirement(s)
 * \#276553
 * @subsection MmngrGetCpuPtr_TC_09_008_011_pp Prerequisite/Precondition
 * OSAL is initialized.
 * @subsection MmngrGetCpuPtr_TC_09_008_011_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrGetCpuPtr with abnormal condition in OSAL_MMNGR_ALLOC_MODE_STACK mode.
 * - pre-process: open memory manager
 * - Test09_008_011: "buffer_obj->p_ptr_self" is invalid.
 * - post-process: close memory manager
 * @subsection MmngrGetCpuPtr_TC_09_008_011_tpts Test Procedure/Test Steps
 * -# Call R_OSAL_MmngrGetOsalMaxConfig to get the max config then set the mode to OSAL_MMNGR_ALLOC_MODE_STACK
 * -# Call R_OSAL_MmngrOpen with valid parameter.
 * -# Call R_OSAL_MmngrAlloc with valid parameter
 * -# Call R_OSAL_MmngrGetCpuPtr with an invalid buffer_obj->p_ptr_self:
 *      - buffer_obj with p_ptr_self value changed to p_ptr_self_ng
 *      - "p_ptr_self_ng" is allocated by malloc function.
 * -# Deallocate buffer_obj by using R_OSAL_MmngrDeallocate.
 *      - buffer_obj with valid p_ptr_self value
 * -# Call R_OSAL_MmngrClose to close the memory manager.
 * @subsection MmngrGetCpuPtr_TC_09_008_011_ereb Expected Result/Behavior
 * -# The return value of R_OSAL_MmngrGetOsalMaxConfig is OSAL_RETURN_OK
 * -# The return value of R_OSAL_MmngrOpen is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrAlloc is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrGetCpuPtr is OSAL_RETURN_HANDLE.
 * -# The return value of R_OSAL_MmngrDeallocate is OSAL_RETURN_OK.
 * @subsection MmngrGetCpuPtr_TC_09_008_011_testcase Test Case Example
 * -# The return value of R_OSAL_MmngrClose is OSAL_RETURN_OK.
 * @snippet test_memory_api_basic.cpp MmngrGetCpuPtr_TC_09_008_011
 */
// [MmngrGetCpuPtr_TC_09_008_011]
TEST_F(MemoryApiTest, MmngrGetCpuPtr_TC_09_008_011)
{
    void* ptr_self_bak;
    void* ptr_self_ng;
    void* cpu_ptr;

    // Test09_008_011
    // @brief: abnormal case: handle->p_ptr_self is invalid
    EXPECT_EQ(R_OSAL_MmngrGetOsalMaxConfig(&config), OSAL_RETURN_OK);
    config.mode = OSAL_MMNGR_ALLOC_MODE_STACK;
    EXPECT_EQ(R_OSAL_MmngrOpen(&config, &hndl_mmngr), OSAL_RETURN_OK);
    size = 64;
    alignment = 64;
    EXPECT_EQ(R_OSAL_MmngrAlloc(hndl_mmngr, size, alignment, &buffer_obj), OSAL_RETURN_OK);
    ptr_self_bak = buffer_obj->p_ptr_self;
    ptr_self_ng = malloc(0x100);
    memset(ptr_self_ng, 0x0, 0x100);
    buffer_obj->p_ptr_self = ptr_self_ng;
    EXPECT_EQ(R_OSAL_MmngrGetCpuPtr(buffer_obj, &cpu_ptr), OSAL_RETURN_HANDLE) << "Test09_008_011 failed";
    free(ptr_self_ng);
    buffer_obj->p_ptr_self = ptr_self_bak;
    EXPECT_EQ(R_OSAL_MmngrDealloc(hndl_mmngr, buffer_obj), OSAL_RETURN_OK) << "Test09_008_011 failed";
    EXPECT_EQ(R_OSAL_MmngrClose(hndl_mmngr), OSAL_RETURN_OK) << "Test09_008_011 failed";
    hndl_mmngr = OSAL_MEMORY_MANAGER_HANDLE_INVALID;
    buffer_obj = OSAL_MEMORY_BUFFER_HANDLE_INVALID;
}
// [MmngrGetCpuPtr_TC_09_008_011]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrGetCpuPtr_TC_09_008_012 MemoryApiTest.MmngrGetCpuPtr_TC_09_008_012
 * @subsection MmngrGetCpuPtr_TC_09_008_012_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrGetCpuPtr_TC_09_008_012_tci Test Case ID
 * MmngrGetCpuPtr_S4_A_TC_09_008_012
 * @subsection MmngrGetCpuPtr_TC_09_008_012_rr Related Requirement(s)
 * \#276553
 * @subsection MmngrGetCpuPtr_TC_09_008_012_pp Prerequisite/Precondition
 * OSAL is initialized.
 * @subsection MmngrGetCpuPtr_TC_09_008_012_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrGetCpuPtr with abnormal condition in OSAL_MMNGR_ALLOC_MODE_STACK_PROT mode.
 * - pre-process: open memory manager
 * - Test09_008_012: "buffer_obj->p_ptr_self" is invalid.
 * - post-process: close memory manager
 * @subsection MmngrGetCpuPtr_TC_09_008_012_tpts Test Procedure/Test Steps
 * -# Call R_OSAL_MmngrGetOsalMaxConfig to get the max config then set the mode to OSAL_MMNGR_ALLOC_MODE_STACK_PROT
 * -# Call R_OSAL_MmngrOpen with valid parameter.
 * -# Call R_OSAL_MmngrAlloc with valid parameter
 * -# Call R_OSAL_MmngrGetCpuPtr with an invalid buffer_obj->p_ptr_self:
 *      - buffer_obj with p_ptr_self value changed to p_ptr_self_ng
 *      - "p_ptr_self_ng" is allocated by malloc function.
 * -# Deallocate buffer_obj by using R_OSAL_MmngrDeallocate.
 *      - buffer_obj with valid p_ptr_self value
 * -# Call R_OSAL_MmngrClose to close the memory manager.
 * @subsection MmngrGetCpuPtr_TC_09_008_012_ereb Expected Result/Behavior
 * -# The return value of R_OSAL_MmngrGetOsalMaxConfig is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrOpen is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrAlloc is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrGetCpuPtr is OSAL_RETURN_HANDLE.
 * -# The return value of R_OSAL_MmngrDeallocate is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrClose is OSAL_RETURN_OK.
 * @subsection MmngrGetCpuPtr_TC_09_008_012_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrGetCpuPtr_TC_09_008_012
 */
// [MmngrGetCpuPtr_TC_09_008_012]
TEST_F(MemoryApiTest, MmngrGetCpuPtr_TC_09_008_012)
{
    void* ptr_self_bak;
    void* ptr_self_ng;
    const void* cpu_ptr;

    // Test09_008_012
    // @brief: abnormal case: handle->p_ptr_self is invalid
    EXPECT_EQ(R_OSAL_MmngrGetOsalMaxConfig(&config), OSAL_RETURN_OK);
    config.mode = OSAL_MMNGR_ALLOC_MODE_STACK_PROT;
    EXPECT_EQ(R_OSAL_MmngrOpen(&config, &hndl_mmngr), OSAL_RETURN_OK);
    size = 64;
    alignment = 64;
    EXPECT_EQ(R_OSAL_MmngrAlloc(hndl_mmngr, size, alignment, &buffer_obj), OSAL_RETURN_OK);
    ptr_self_bak = buffer_obj->p_ptr_self;
    ptr_self_ng = malloc(0x100);
    memset(ptr_self_ng, 0x0, 0x100);
    buffer_obj->p_ptr_self = ptr_self_ng;
    EXPECT_EQ(R_OSAL_MmngrGetConstCpuPtr(buffer_obj, &cpu_ptr), OSAL_RETURN_HANDLE) << "Test09_008_012 failed";
    free(ptr_self_ng);
    buffer_obj->p_ptr_self = ptr_self_bak;
    EXPECT_EQ(R_OSAL_MmngrDealloc(hndl_mmngr, buffer_obj), OSAL_RETURN_OK) << "Test09_008_012 failed";
    EXPECT_EQ(R_OSAL_MmngrClose(hndl_mmngr), OSAL_RETURN_OK) << "Test09_008_012 failed";
    hndl_mmngr = OSAL_MEMORY_MANAGER_HANDLE_INVALID;
    buffer_obj = OSAL_MEMORY_BUFFER_HANDLE_INVALID;
}
// [MmngrGetCpuPtr_TC_09_008_012]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrGetCpuPtr_TC_09_008_013 MemoryApiTest.MmngrGetCpuPtr_TC_09_008_013
 * @subsection MmngrGetCpuPtr_TC_09_008_013_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrGetCpuPtr_TC_09_008_013_tci Test Case ID
 * MmngrGetCpuPtr_S4_A_TC_09_008_013
 * @subsection MmngrGetCpuPtr_TC_09_008_013_rr Related Requirement(s)
 * \#276553
 * @subsection MmngrGetCpuPtr_TC_09_008_013_pp Prerequisite/Precondition
 * OSAL is initialized.
 * @subsection MmngrGetCpuPtr_TC_09_008_013_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrGetCpuPtr with abnormal condition in OSAL_MMNGR_ALLOC_MODE_FREE_LIST mode.
 * - pre-process: open memory manager
 * - Test09_008_013: "buffer_obj->p_ptr_self" is invalid.
 * - post-process: close memory manager
 * @subsection MmngrGetCpuPtr_TC_09_008_013_tpts Test Procedure/Test Steps
 * -# Call R_OSAL_MmngrGetOsalMaxConfig to get the max config then set the mode to OSAL_MMNGR_ALLOC_MODE_FREE_LIST.
 * -# Call R_OSAL_MmngrOpen with valid parameter and above config.
 * -# Call R_OSAL_MmngrAlloc with valid parameter
 * -# Call R_OSAL_MmngrGetCpuPtr with an invalid buffer_obj->p_ptr_self:
 *      - buffer_obj with p_ptr_self value changed to p_ptr_self_ng
 *      - "p_ptr_self_ng" is allocated by malloc function.
 * -# Deallocate buffer_obj by using R_OSAL_MmngrDeallocate.
 *      - buffer_obj with valid p_ptr_self value
 * -# Call R_OSAL_MmngrClose to close the memory manager.
 * @subsection MmngrGetCpuPtr_TC_09_008_013_ereb Expected Result/Behavior
 * -# The return value of R_OSAL_MmngrGetOsalMaxConfig is OSAL_RETURN_OK
 * -# The return value of R_OSAL_MmngrOpen is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrAlloc is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrGetCpuPtr is OSAL_RETURN_HANDLE.
 * -# The return value of R_OSAL_MmngrDeallocate is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrClose is OSAL_RETURN_OK.
 * @subsection MmngrGetCpuPtr_TC_09_008_013_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrGetCpuPtr_TC_09_008_013
 */
// [MmngrGetCpuPtr_TC_09_008_013]
TEST_F(MemoryApiTest, MmngrGetCpuPtr_TC_09_008_013)
{
    void* ptr_self_bak;
    void* ptr_self_ng;
    const void* cpu_ptr;

    // Test09_008_013
    // @brief: abnormal case: handle->p_ptr_self is invalid
    EXPECT_EQ(R_OSAL_MmngrGetOsalMaxConfig(&config), OSAL_RETURN_OK);
    config.mode = OSAL_MMNGR_ALLOC_MODE_FREE_LIST;
    EXPECT_EQ(R_OSAL_MmngrOpen(&config, &hndl_mmngr), OSAL_RETURN_OK);
    size = 64;
    alignment = 64;
    EXPECT_EQ(R_OSAL_MmngrAlloc(hndl_mmngr, size, alignment, &buffer_obj), OSAL_RETURN_OK);
    ptr_self_bak = buffer_obj->p_ptr_self;
    ptr_self_ng = malloc(0x100);
    memset(ptr_self_ng, 0x0, 0x100);
    buffer_obj->p_ptr_self = ptr_self_ng;
    EXPECT_EQ(R_OSAL_MmngrGetConstCpuPtr(buffer_obj, &cpu_ptr), OSAL_RETURN_HANDLE) << "Test09_008_013 failed";
    free(ptr_self_ng);
    buffer_obj->p_ptr_self = ptr_self_bak;
    EXPECT_EQ(R_OSAL_MmngrDealloc(hndl_mmngr, buffer_obj), OSAL_RETURN_OK) << "Test09_008_013 failed";
    EXPECT_EQ(R_OSAL_MmngrClose(hndl_mmngr), OSAL_RETURN_OK) << "Test09_008_013 failed";
    hndl_mmngr = OSAL_MEMORY_MANAGER_HANDLE_INVALID;
    buffer_obj = OSAL_MEMORY_BUFFER_HANDLE_INVALID;
}
// [MmngrGetCpuPtr_TC_09_008_013]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrGetCpuPtr_TC_09_008_014 MemoryApiTest.MmngrGetCpuPtr_TC_09_008_014
 * @subsection MmngrGetCpuPtr_TC_09_008_014_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrGetCpuPtr_TC_09_008_014_tci Test Case ID
 * MmngrGetCpuPtr_S4_A_TC_09_008_014
 * @subsection MmngrGetCpuPtr_TC_09_008_014_rr Related Requirement(s)
 * \#276553
 * @subsection MmngrGetCpuPtr_TC_09_008_014_pp Prerequisite/Precondition
 * OSAL is initialized.
 * @subsection MmngrGetCpuPtr_TC_09_008_014_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrGetCpuPtr with abnormal condition in OSAL_MMNGR_ALLOC_MODE_FREE_LIST_PROT mode.
 * - pre-process: open memory manager
 * - Test09_008_014: "buffer_obj->p_ptr_self" is invalid.
 * - post-process: close memory manager
 * @subsection MmngrGetCpuPtr_TC_09_008_014_tpts Test Procedure/Test Steps
 * -# Call R_OSAL_MmngrGetOsalMaxConfig to get the max config then set the mode to OSAL_MMNGR_ALLOC_MODE_FREE_LIST_PROT.
 * -# Call R_OSAL_MmngrOpen with valid parameter and above config.
 * -# Call R_OSAL_MmngrAlloc with valid parameter
 * -# Call R_OSAL_MmngrGetCpuPtr with an invalid buffer_obj->p_ptr_self:
 *      - buffer_obj with p_ptr_self value changed to p_ptr_self_ng
 *      - "p_ptr_self_ng" is allocated by malloc function.
 * -# Deallocate buffer_obj by using R_OSAL_MmngrDeallocate.
 *      - buffer_obj with valid p_ptr_self value
 * -# Call R_OSAL_MmngrClose to close the memory manager.
 * @subsection MmngrGetCpuPtr_TC_09_008_014_ereb Expected Result/Behavior
 * -# The return value of R_OSAL_MmngrGetOsalMaxConfig is OSAL_RETURN_OK
 * -# The return value of R_OSAL_MmngrOpen is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrAlloc is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrGetCpuPtr is OSAL_RETURN_HANDLE.
 * -# The return value of R_OSAL_MmngrDeallocate is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrClose is OSAL_RETURN_OK.
 * @subsection MmngrGetCpuPtr_TC_09_008_014_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrGetCpuPtr_TC_09_008_014
 */
// [MmngrGetCpuPtr_TC_09_008_014]
TEST_F(MemoryApiTest, MmngrGetCpuPtr_TC_09_008_014)
{
    void* ptr_self_bak;
    void* ptr_self_ng;
    const void* cpu_ptr;

    // Test09_008_014
    // @brief: abnormal case: handle->p_ptr_self is invalid
    EXPECT_EQ(R_OSAL_MmngrGetOsalMaxConfig(&config), OSAL_RETURN_OK);
    config.mode = OSAL_MMNGR_ALLOC_MODE_FREE_LIST_PROT;
    EXPECT_EQ(R_OSAL_MmngrOpen(&config, &hndl_mmngr), OSAL_RETURN_OK);
    size = 64;
    alignment = 64;
    EXPECT_EQ(R_OSAL_MmngrAlloc(hndl_mmngr, size, alignment, &buffer_obj), OSAL_RETURN_OK);
    ptr_self_bak = buffer_obj->p_ptr_self;
    ptr_self_ng = malloc(0x100);
    memset(ptr_self_ng, 0x0, 0x100);
    buffer_obj->p_ptr_self = ptr_self_ng;
    EXPECT_EQ(R_OSAL_MmngrGetConstCpuPtr(buffer_obj, &cpu_ptr), OSAL_RETURN_HANDLE) << "Test09_008_014 failed";
    free(ptr_self_ng);
    buffer_obj->p_ptr_self = ptr_self_bak;
    EXPECT_EQ(R_OSAL_MmngrDealloc(hndl_mmngr, buffer_obj), OSAL_RETURN_OK) << "Test09_008_014 failed";
    EXPECT_EQ(R_OSAL_MmngrClose(hndl_mmngr), OSAL_RETURN_OK) << "Test09_008_014 failed";
    hndl_mmngr = OSAL_MEMORY_MANAGER_HANDLE_INVALID;
    buffer_obj = OSAL_MEMORY_BUFFER_HANDLE_INVALID;
}
// [MmngrGetCpuPtr_TC_09_008_014]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrGetCpuPtr_TC_09_008_015 MemoryApiTest.MmngrGetCpuPtr_TC_09_008_015
 * @subsection MmngrGetCpuPtr_TC_09_008_015_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrGetCpuPtr_TC_09_008_015_tci Test Case ID
 * MmngrGetCpuPtr_S2_A_TC_09_008_015
 * @subsection MmngrGetCpuPtr_TC_09_008_015_rr Related Requirement(s)
 * \#276553
 * @subsection MmngrGetCpuPtr_TC_09_008_015_pp Prerequisite/Precondition
 * OSAL is initialized.
 * @subsection MmngrGetCpuPtr_TC_09_008_015_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrGetCpuPtr with abnormal condition and mode is OSAL_MMNGR_ALLOC_MODE_FREE_LIST.
 * - Test09_008_015: buffer object has already been deallocated.
 * @subsection MmngrGetCpuPtr_TC_09_008_015_tpts Test Procedure/Test Steps
 * -# Call R_OSAL_MmngrOpen with bellow config:
 *  - config.memory_limit                = 4096
 *  - config.max_allowed_allocations     = 1
 *  - config.max_registered_monitors_cbs = 2
 *  - config.mode = OSAL_MMNGR_ALLOC_MODE_FREE_LIST
 * -# Call R_OSAL_MmngrAlloc to allocate a memory buffer.
 * -# Call R_OSAL_MmngrDealloc to deallocate the allocated memory buffer.
 * -# Call R_OSAL_MmngrGetCpuPtr with the buffer object which has already been deallocated
 * -# Call R_OSAL_MmngrClose to close the memory handle.
 * @subsection MmngrGetCpuPtr_TC_09_008_015_ereb Expected Result/Behavior
 * -# The return of R_OSAL_MmngrOpen is OSAL_RETURN_OK.<br>
 * The returned handle is not OSAL_MEMORY_MANAGER_HANDLE_INVALID.
 * -# The return value of R_OSAL_MmngrAlloc is OSAL_RETURN_OK.<br>
 * The return buffer is not OSAL_MEMORY_BUFFER_HANDLE_INVALID.
 * -# The return value of R_OSAL_MmngrDealloc is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrGetCpuPtr is OSAL_RETURN_HANDLE.
 * -# The return value of R_OSAL_MmngrClose is OSAL_RETURN_OK.
 * @subsection MmngrGetCpuPtr_TC_09_008_015_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrGetCpuPtr_TC_09_008_015
 */
// [MmngrGetCpuPtr_TC_09_008_015]
TEST_F(MemoryApiTest, MmngrGetCpuPtr_TC_09_008_015)
{
    void* cpu_ptr;

    // Test09_008_015
    // @brief: abnormal case: buffer_obj has already been deallocated
    config.memory_limit                = 4096;
    config.max_allowed_allocations     = 1;
    config.max_registered_monitors_cbs = 2;
    config.mode = OSAL_MMNGR_ALLOC_MODE_FREE_LIST;
    size = 4096;
    alignment = 64;

    EXPECT_EQ(R_OSAL_MmngrOpen(&config, &hndl_mmngr), OSAL_RETURN_OK) <<  "pre-process failed";
    EXPECT_NE(hndl_mmngr,OSAL_MEMORY_MANAGER_HANDLE_INVALID) <<  "pre-process failed";
    EXPECT_EQ(R_OSAL_MmngrAlloc(hndl_mmngr, size, alignment, &buffer_obj), OSAL_RETURN_OK);
    EXPECT_NE(buffer_obj, OSAL_MEMORY_BUFFER_HANDLE_INVALID);
    EXPECT_EQ(R_OSAL_MmngrDealloc(hndl_mmngr, buffer_obj), OSAL_RETURN_OK);
    EXPECT_EQ(R_OSAL_MmngrGetCpuPtr(buffer_obj, &cpu_ptr ), OSAL_RETURN_HANDLE) << "Test09_008_015 failed";
    buffer_obj = OSAL_MEMORY_BUFFER_HANDLE_INVALID;
    EXPECT_EQ(R_OSAL_MmngrClose(hndl_mmngr), OSAL_RETURN_OK) << "post-process failed";
    hndl_mmngr = OSAL_MEMORY_MANAGER_HANDLE_INVALID;
}
// [MmngrGetCpuPtr_TC_09_008_015]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrGetCpuPtr_TC_09_008_016 MemoryApiTest.MmngrGetCpuPtr_TC_09_008_016
 * @subsection MmngrGetCpuPtr_TC_09_008_016_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrGetCpuPtr_TC_09_008_016_tci Test Case ID
 * MmngrGetCpuPtr_S2_A_TC_09_008_016
 * @subsection MmngrGetCpuPtr_TC_09_008_016_rr Related Requirement(s)
 * \#276553
 * @subsection MmngrGetCpuPtr_TC_09_008_016_pp Prerequisite/Precondition
 * OSAL is initialized.
 * @subsection MmngrGetCpuPtr_TC_09_008_016_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrGetCpuPtr with abnormal condition and mode is OSAL_MMNGR_ALLOC_MODE_FREE_LIST_PROT.
 * - Test09_008_016: buffer object has already been deallocated.
 * @subsection MmngrGetCpuPtr_TC_09_008_016_tpts Test Procedure/Test Steps
 * -# Call R_OSAL_MmngrOpen with bellow config:
 *  - config.memory_limit                = 4096
 *  - config.max_allowed_allocations     = 1
 *  - config.max_registered_monitors_cbs = 2
 *  - config.mode = OSAL_MMNGR_ALLOC_MODE_FREE_LIST_PROT
 * -# Call R_OSAL_MmngrAlloc to allocate a memory buffer.
 * -# Call R_OSAL_MmngrDealloc to deallocate the allocated memory buffer.
 * -# Call R_OSAL_MmngrGetCpuPtr with the buffer object which has already been deallocated
 * -# Call R_OSAL_MmngrClose to close the memory handle.
 * @subsection MmngrGetCpuPtr_TC_09_008_016_ereb Expected Result/Behavior
 * -# The return of R_OSAL_MmngrOpen is OSAL_RETURN_OK.<br>
 * The returned handle is not OSAL_MEMORY_MANAGER_HANDLE_INVALID.
 * -# The return value of R_OSAL_MmngrAlloc is OSAL_RETURN_OK.<br>
 * The return buffer is not OSAL_MEMORY_BUFFER_HANDLE_INVALID.
 * -# The return value of R_OSAL_MmngrDealloc is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrGetCpuPtr is OSAL_RETURN_HANDLE.
 * -# The return value of R_OSAL_MmngrClose is OSAL_RETURN_OK.
 * @subsection MmngrGetCpuPtr_TC_09_008_016_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrGetCpuPtr_TC_09_008_016
 */
// [MmngrGetCpuPtr_TC_09_008_016]
TEST_F(MemoryApiTest, MmngrGetCpuPtr_TC_09_008_016)
{
    void* cpu_ptr;

    // Test09_008_016
    // @brief: abnormal case: buffer_obj has already been deallocated
    config.memory_limit                = 4096;
    config.max_allowed_allocations     = 1;
    config.max_registered_monitors_cbs = 2;
    config.mode = OSAL_MMNGR_ALLOC_MODE_FREE_LIST_PROT;
    size = 4096;
    alignment = 64;

    EXPECT_EQ(R_OSAL_MmngrOpen(&config, &hndl_mmngr), OSAL_RETURN_OK) <<  "pre-process failed";
    EXPECT_NE(hndl_mmngr,OSAL_MEMORY_MANAGER_HANDLE_INVALID) <<  "pre-process failed";
    EXPECT_EQ(R_OSAL_MmngrAlloc(hndl_mmngr, size, alignment, &buffer_obj), OSAL_RETURN_OK);
    EXPECT_NE(buffer_obj, OSAL_MEMORY_BUFFER_HANDLE_INVALID);
    EXPECT_EQ(R_OSAL_MmngrDealloc(hndl_mmngr, buffer_obj), OSAL_RETURN_OK);
    EXPECT_EQ(R_OSAL_MmngrGetCpuPtr(buffer_obj, &cpu_ptr ), OSAL_RETURN_HANDLE) << "Test09_008_016 failed";
    buffer_obj = OSAL_MEMORY_BUFFER_HANDLE_INVALID;
    EXPECT_EQ(R_OSAL_MmngrClose(hndl_mmngr), OSAL_RETURN_OK) << "post-process failed";
    hndl_mmngr = OSAL_MEMORY_MANAGER_HANDLE_INVALID;
}
// [MmngrGetCpuPtr_TC_09_008_016]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrGetCpuPtr_TC_09_008_017 MemoryApiTest.MmngrGetCpuPtr_TC_09_008_017
 * @subsection MmngrGetCpuPtr_TC_09_008_017_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrGetCpuPtr_TC_09_008_017_tci Test Case ID
 * MmngrGetCpuPtr_S4_A_TC_09_008_017
 * @subsection MmngrGetCpuPtr_TC_09_008_017_rr Related Requirement(s)
 * \#276553
 * @subsection MmngrGetCpuPtr_TC_09_008_017_pp Prerequisite/Precondition
 * OSAL is initialized.
 * @subsection MmngrGetCpuPtr_TC_09_008_017_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrGetCpuPtr with abnormal condition and mode is OSAL_MMNGR_ALLOC_MODE_STACK.
 * - Test09_008_017: buffer_obj->mmngr_owner_hndl->p_ptr_self is invalid (NULL)
 * @subsection MmngrGetCpuPtr_TC_09_008_017_tpts Test Procedure/Test Steps
 * -# Call R_OSAL_MmngrOpen with bellow config:
 *  - config.memory_limit                = 4096
 *  - config.max_allowed_allocations     = 1
 *  - config.max_registered_monitors_cbs = 2
 *  - config.mode = OSAL_MMNGR_ALLOC_MODE_STACK
 * -# Call R_OSAL_MmngrAlloc to allocate a memory buffer.
 * -# Call R_OSAL_MmngrGetCpuPtr with the buffer object which buffer_obj->mmngr_owner_hndl->p_ptr_self is invalid (NULL)
 * -# Call R_OSAL_MmngrDealloc to deallocate the allocated memory buffer.
 * -# Call R_OSAL_MmngrClose to close the memory handle.
 * @subsection MmngrGetCpuPtr_TC_09_008_017_ereb Expected Result/Behavior
 * -# The return of R_OSAL_MmngrOpen is OSAL_RETURN_OK.<br>
 * The returned handle is not OSAL_MEMORY_MANAGER_HANDLE_INVALID.
 * -# The return value of R_OSAL_MmngrAlloc is OSAL_RETURN_OK.<br>
 * The return buffer is not OSAL_MEMORY_BUFFER_HANDLE_INVALID.
 * -# The return value of R_OSAL_MmngrGetCpuPtr is OSAL_RETURN_HANDLE.
 * -# The return value of R_OSAL_MmngrDealloc is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrClose is OSAL_RETURN_OK.
 * @subsection MmngrGetCpuPtr_TC_09_008_017_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrGetCpuPtr_TC_09_008_017
 */
// [MmngrGetCpuPtr_TC_09_008_017]
TEST_F(MemoryApiTest, MmngrGetCpuPtr_TC_09_008_017)
{
    void* cpu_ptr;
    void* bk_ptr_self;

    // Test09_008_017
    // @brief: abnormal case: buffer_obj->mmngr_owner_hndl->p_ptr_self is invalid (NULL)
    config.memory_limit                = 4096;
    config.max_allowed_allocations     = 1;
    config.max_registered_monitors_cbs = 2;
    config.mode = OSAL_MMNGR_ALLOC_MODE_STACK;
    size = 4096;
    alignment = 64;

    EXPECT_EQ(R_OSAL_MmngrOpen(&config, &hndl_mmngr), OSAL_RETURN_OK) << "Test09_008_017 failed";
    EXPECT_NE(hndl_mmngr,OSAL_MEMORY_MANAGER_HANDLE_INVALID) << "Test09_008_017 failed";
    EXPECT_EQ(R_OSAL_MmngrAlloc(hndl_mmngr, size, alignment, &buffer_obj), OSAL_RETURN_OK) << "Test09_008_017 failed";
    EXPECT_NE(buffer_obj, OSAL_MEMORY_BUFFER_HANDLE_INVALID) << "Test09_008_017 failed";
    bk_ptr_self = buffer_obj->mmngr_owner_hndl->p_ptr_self;
    buffer_obj->mmngr_owner_hndl->p_ptr_self = NULL;
    EXPECT_EQ(R_OSAL_MmngrGetCpuPtr(buffer_obj, &cpu_ptr ), OSAL_RETURN_HANDLE) << "Test09_008_017 failed";
    buffer_obj->mmngr_owner_hndl->p_ptr_self = bk_ptr_self;
    EXPECT_EQ(R_OSAL_MmngrDealloc(hndl_mmngr, buffer_obj), OSAL_RETURN_OK) << "Test09_008_017 failed";
    EXPECT_EQ(R_OSAL_MmngrClose(hndl_mmngr), OSAL_RETURN_OK) << "Test09_008_017 failed";
    hndl_mmngr = OSAL_MEMORY_MANAGER_HANDLE_INVALID;
    buffer_obj = OSAL_MEMORY_BUFFER_HANDLE_INVALID;
}
// [MmngrGetCpuPtr_TC_09_008_017]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrGetCpuPtr_TC_09_008_018 MemoryApiTest.MmngrGetCpuPtr_TC_09_008_018
 * @subsection MmngrGetCpuPtr_TC_09_008_018_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrGetCpuPtr_TC_09_008_018_tci Test Case ID
 * MmngrGetCpuPtr_S4_A_TC_09_008_018
 * @subsection MmngrGetCpuPtr_TC_09_008_018_rr Related Requirement(s)
 * \#276553
 * @subsection MmngrGetCpuPtr_TC_09_008_018_pp Prerequisite/Precondition
 * OSAL is initialized.
 * @subsection MmngrGetCpuPtr_TC_09_008_018_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrGetCpuPtr with abnormal condition and mode is OSAL_MMNGR_ALLOC_MODE_STACK_PROT.
 * - Test09_008_018: buffer_obj->mmngr_owner_hndl->p_ptr_self is invalid (NULL)
 * @subsection MmngrGetCpuPtr_TC_09_008_018_tpts Test Procedure/Test Steps
 * -# Call R_OSAL_MmngrOpen with bellow config:
 *  - config.memory_limit                = 4096
 *  - config.max_allowed_allocations     = 1
 *  - config.max_registered_monitors_cbs = 2
 *  - config.mode = OSAL_MMNGR_ALLOC_MODE_STACK_PROT
 * -# Call R_OSAL_MmngrAlloc to allocate a memory buffer.
 * -# Call R_OSAL_MmngrGetCpuPtr with the buffer object which buffer_obj->mmngr_owner_hndl->p_ptr_self is invalid (NULL)
 * -# Call R_OSAL_MmngrDealloc to deallocate the allocated memory buffer.
 * -# Call R_OSAL_MmngrClose to close the memory handle.
 * @subsection MmngrGetCpuPtr_TC_09_008_018_ereb Expected Result/Behavior
 * -# The return of R_OSAL_MmngrOpen is OSAL_RETURN_OK.<br>
 * The returned handle is not OSAL_MEMORY_MANAGER_HANDLE_INVALID.
 * -# The return value of R_OSAL_MmngrAlloc is OSAL_RETURN_OK.<br>
 * The return buffer is not OSAL_MEMORY_BUFFER_HANDLE_INVALID.
 * -# The return value of R_OSAL_MmngrGetCpuPtr is OSAL_RETURN_HANDLE.
 * -# The return value of R_OSAL_MmngrDealloc is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrClose is OSAL_RETURN_OK.
 * @subsection MmngrGetCpuPtr_TC_09_008_018_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrGetCpuPtr_TC_09_008_018
 */
// [MmngrGetCpuPtr_TC_09_008_018]
TEST_F(MemoryApiTest, MmngrGetCpuPtr_TC_09_008_018)
{
    void* cpu_ptr;
    void* bk_ptr_self;

    // Test09_008_018
    // @brief: abnormal case: buffer_obj->mmngr_owner_hndl->p_ptr_self is invalid (NULL)
    config.memory_limit                = 4096;
    config.max_allowed_allocations     = 1;
    config.max_registered_monitors_cbs = 2;
    config.mode = OSAL_MMNGR_ALLOC_MODE_STACK_PROT;
    size = 4096;
    alignment = 64;

    EXPECT_EQ(R_OSAL_MmngrOpen(&config, &hndl_mmngr), OSAL_RETURN_OK) << "Test09_008_018 failed";
    EXPECT_NE(hndl_mmngr,OSAL_MEMORY_MANAGER_HANDLE_INVALID) << "Test09_008_018 failed";
    EXPECT_EQ(R_OSAL_MmngrAlloc(hndl_mmngr, size, alignment, &buffer_obj), OSAL_RETURN_OK) << "Test09_008_018 failed";
    EXPECT_NE(buffer_obj, OSAL_MEMORY_BUFFER_HANDLE_INVALID) << "Test09_008_018 failed";
    bk_ptr_self = buffer_obj->mmngr_owner_hndl->p_ptr_self;
    buffer_obj->mmngr_owner_hndl->p_ptr_self = NULL;
    EXPECT_EQ(R_OSAL_MmngrGetCpuPtr(buffer_obj, &cpu_ptr ), OSAL_RETURN_HANDLE) << "Test09_008_018 failed";
    buffer_obj->mmngr_owner_hndl->p_ptr_self = bk_ptr_self;
    EXPECT_EQ(R_OSAL_MmngrDealloc(hndl_mmngr, buffer_obj), OSAL_RETURN_OK) << "Test09_008_018 failed";
    EXPECT_EQ(R_OSAL_MmngrClose(hndl_mmngr), OSAL_RETURN_OK) << "Test09_008_018 failed";
    hndl_mmngr = OSAL_MEMORY_MANAGER_HANDLE_INVALID;
    buffer_obj = OSAL_MEMORY_BUFFER_HANDLE_INVALID;
}
// [MmngrGetCpuPtr_TC_09_008_018]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrGetCpuPtr_TC_09_008_019 MemoryApiTest.MmngrGetCpuPtr_TC_09_008_019
 * @subsection MmngrGetCpuPtr_TC_09_008_019_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrGetCpuPtr_TC_09_008_019_tci Test Case ID
 * MmngrGetCpuPtr_S4_A_TC_09_008_019
 * @subsection MmngrGetCpuPtr_TC_09_008_019_rr Related Requirement(s)
 * \#276553
 * @subsection MmngrGetCpuPtr_TC_09_008_019_pp Prerequisite/Precondition
 * OSAL is initialized.
 * @subsection MmngrGetCpuPtr_TC_09_008_019_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrGetCpuPtr with abnormal condition and mode is OSAL_MMNGR_ALLOC_MODE_FREE_LIST.
 * - Test09_008_019: buffer_obj->mmngr_owner_hndl->p_ptr_self is invalid (NULL)
 * @subsection MmngrGetCpuPtr_TC_09_008_019_tpts Test Procedure/Test Steps
 * -# Call R_OSAL_MmngrOpen with bellow config:
 *  - config.memory_limit                = 4096
 *  - config.max_allowed_allocations     = 1
 *  - config.max_registered_monitors_cbs = 2
 *  - config.mode = OSAL_MMNGR_ALLOC_MODE_FREE_LIST
 * -# Call R_OSAL_MmngrAlloc to allocate a memory buffer.
 * -# Call R_OSAL_MmngrGetCpuPtr with the buffer object which buffer_obj->mmngr_owner_hndl->p_ptr_self is invalid (NULL)
 * -# Call R_OSAL_MmngrDealloc to deallocate the allocated memory buffer.
 * -# Call R_OSAL_MmngrClose to close the memory handle.
 * @subsection MmngrGetCpuPtr_TC_09_008_019_ereb Expected Result/Behavior
 * -# The return of R_OSAL_MmngrOpen is OSAL_RETURN_OK.<br>
 * The returned handle is not OSAL_MEMORY_MANAGER_HANDLE_INVALID.
 * -# The return value of R_OSAL_MmngrAlloc is OSAL_RETURN_OK.<br>
 * The return buffer is not OSAL_MEMORY_BUFFER_HANDLE_INVALID.
 * -# The return value of R_OSAL_MmngrGetCpuPtr is OSAL_RETURN_HANDLE.
 * -# The return value of R_OSAL_MmngrDealloc is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrClose is OSAL_RETURN_OK.
 * @subsection MmngrGetCpuPtr_TC_09_008_019_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrGetCpuPtr_TC_09_008_019
 */
// [MmngrGetCpuPtr_TC_09_008_019]
TEST_F(MemoryApiTest, MmngrGetCpuPtr_TC_09_008_019)
{
    void* cpu_ptr;
    void* bk_ptr_self;

    // Test09_008_019
    // @brief: abnormal case: buffer_obj->mmngr_owner_hndl->p_ptr_self is invalid (NULL)
    config.memory_limit                = 4096;
    config.max_allowed_allocations     = 1;
    config.max_registered_monitors_cbs = 2;
    config.mode = OSAL_MMNGR_ALLOC_MODE_FREE_LIST;
    size = 4096;
    alignment = 64;

    EXPECT_EQ(R_OSAL_MmngrOpen(&config, &hndl_mmngr), OSAL_RETURN_OK) << "Test09_008_019 failed";
    EXPECT_NE(hndl_mmngr,OSAL_MEMORY_MANAGER_HANDLE_INVALID) << "Test09_008_019 failed";
    EXPECT_EQ(R_OSAL_MmngrAlloc(hndl_mmngr, size, alignment, &buffer_obj), OSAL_RETURN_OK) << "Test09_008_019 failed";
    EXPECT_NE(buffer_obj, OSAL_MEMORY_BUFFER_HANDLE_INVALID) << "Test09_008_019 failed";
    bk_ptr_self = buffer_obj->mmngr_owner_hndl->p_ptr_self;
    buffer_obj->mmngr_owner_hndl->p_ptr_self = NULL;
    EXPECT_EQ(R_OSAL_MmngrGetCpuPtr(buffer_obj, &cpu_ptr ), OSAL_RETURN_HANDLE) << "Test09_008_019 failed";
    buffer_obj->mmngr_owner_hndl->p_ptr_self = bk_ptr_self;
    EXPECT_EQ(R_OSAL_MmngrDealloc(hndl_mmngr, buffer_obj), OSAL_RETURN_OK) << "Test09_008_019 failed";
    EXPECT_EQ(R_OSAL_MmngrClose(hndl_mmngr), OSAL_RETURN_OK) << "Test09_008_019 failed";
    hndl_mmngr = OSAL_MEMORY_MANAGER_HANDLE_INVALID;
    buffer_obj = OSAL_MEMORY_BUFFER_HANDLE_INVALID;
}
// [MmngrGetCpuPtr_TC_09_008_019]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrGetCpuPtr_TC_09_008_020 MemoryApiTest.MmngrGetCpuPtr_TC_09_008_020
 * @subsection MmngrGetCpuPtr_TC_09_008_020_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrGetCpuPtr_TC_09_008_020_tci Test Case ID
 * MmngrGetCpuPtr_S4_A_TC_09_008_020
 * @subsection MmngrGetCpuPtr_TC_09_008_020_rr Related Requirement(s)
 * \#276553
 * @subsection MmngrGetCpuPtr_TC_09_008_020_pp Prerequisite/Precondition
 * OSAL is initialized.
 * @subsection MmngrGetCpuPtr_TC_09_008_020_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrGetCpuPtr with abnormal condition and mode is OSAL_MMNGR_ALLOC_MODE_FREE_LIST_PROT.
 * - Test09_008_020: buffer_obj->mmngr_owner_hndl->p_ptr_self is invalid (NULL)
 * @subsection MmngrGetCpuPtr_TC_09_008_020_tpts Test Procedure/Test Steps
 * -# Call R_OSAL_MmngrOpen with bellow config:
 *  - config.memory_limit                = 4096
 *  - config.max_allowed_allocations     = 1
 *  - config.max_registered_monitors_cbs = 2
 *  - config.mode = OSAL_MMNGR_ALLOC_MODE_FREE_LIST_PROT
 * -# Call R_OSAL_MmngrAlloc to allocate a memory buffer.
 * -# Call R_OSAL_MmngrGetCpuPtr with the buffer object which buffer_obj->mmngr_owner_hndl->p_ptr_self is invalid (NULL)
 * -# Call R_OSAL_MmngrDealloc to deallocate the allocated memory buffer.
 * -# Call R_OSAL_MmngrClose to close the memory handle.
 * @subsection MmngrGetCpuPtr_TC_09_008_020_ereb Expected Result/Behavior
 * -# The return of R_OSAL_MmngrOpen is OSAL_RETURN_OK.<br>
 * The returned handle is not OSAL_MEMORY_MANAGER_HANDLE_INVALID.
 * -# The return value of R_OSAL_MmngrAlloc is OSAL_RETURN_OK.<br>
 * The return buffer is not OSAL_MEMORY_BUFFER_HANDLE_INVALID.
 * -# The return value of R_OSAL_MmngrGetCpuPtr is OSAL_RETURN_HANDLE.
 * -# The return value of R_OSAL_MmngrDealloc is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrClose is OSAL_RETURN_OK.
 * @subsection MmngrGetCpuPtr_TC_09_008_020_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrGetCpuPtr_TC_09_008_020
 */
// [MmngrGetCpuPtr_TC_09_008_020]
TEST_F(MemoryApiTest, MmngrGetCpuPtr_TC_09_008_020)
{
    void* cpu_ptr;
    void* bk_ptr_self;

    // Test09_008_020
    // @brief: abnormal case: buffer_obj->mmngr_owner_hndl->p_ptr_self is invalid (NULL)
    config.memory_limit                = 4096;
    config.max_allowed_allocations     = 1;
    config.max_registered_monitors_cbs = 2;
    config.mode = OSAL_MMNGR_ALLOC_MODE_FREE_LIST_PROT;
    size = 4096;
    alignment = 64;

    EXPECT_EQ(R_OSAL_MmngrOpen(&config, &hndl_mmngr), OSAL_RETURN_OK) <<  "Test09_008_020 failed";
    EXPECT_NE(hndl_mmngr,OSAL_MEMORY_MANAGER_HANDLE_INVALID) <<  "Test09_008_020 failed";
    EXPECT_EQ(R_OSAL_MmngrAlloc(hndl_mmngr, size, alignment, &buffer_obj), OSAL_RETURN_OK) << "Test09_008_020 failed";
    EXPECT_NE(buffer_obj, OSAL_MEMORY_BUFFER_HANDLE_INVALID) <<  "Test09_008_020 failed";
    bk_ptr_self = buffer_obj->mmngr_owner_hndl->p_ptr_self;
    buffer_obj->mmngr_owner_hndl->p_ptr_self = NULL;
    EXPECT_EQ(R_OSAL_MmngrGetCpuPtr(buffer_obj, &cpu_ptr ), OSAL_RETURN_HANDLE) << "Test09_008_020 failed";
    buffer_obj->mmngr_owner_hndl->p_ptr_self = bk_ptr_self;
    EXPECT_EQ(R_OSAL_MmngrDealloc(hndl_mmngr, buffer_obj), OSAL_RETURN_OK) <<  "Test09_008_020 failed";
    EXPECT_EQ(R_OSAL_MmngrClose(hndl_mmngr), OSAL_RETURN_OK) << "Test09_008_020 failed";
    hndl_mmngr = OSAL_MEMORY_MANAGER_HANDLE_INVALID;
    buffer_obj = OSAL_MEMORY_BUFFER_HANDLE_INVALID;
}
// [MmngrGetCpuPtr_TC_09_008_020]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrGetCpuPtr_TC_09_008_021 MemoryApiTest.MmngrGetCpuPtr_TC_09_008_021
 * @subsection MmngrGetCpuPtr_TC_09_008_021_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrGetCpuPtr_TC_09_008_021_tci Test Case ID
 * MmngrGetCpuPtr_S4_A_TC_09_008_021
 * @subsection MmngrGetCpuPtr_TC_09_008_021_rr Related Requirement(s)
 * \#276553
 * @subsection MmngrGetCpuPtr_TC_09_008_021_pp Prerequisite/Precondition
 * OSAL is initialized.
 * @subsection MmngrGetCpuPtr_TC_09_008_021_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrGetCpuPtr with abnormal condition and mode is OSAL_MMNGR_ALLOC_MODE_STACK.
 * - Test09_008_021: hndl_mmngr->p_ptr_self is invalid (NULL)
 * @subsection MmngrGetCpuPtr_TC_09_008_021_tpts Test Procedure/Test Steps
 * -# Call R_OSAL_MmngrOpen with bellow config:
 *  - config.memory_limit                = 4096
 *  - config.max_allowed_allocations     = 1
 *  - config.max_registered_monitors_cbs = 2
 *  - config.mode = OSAL_MMNGR_ALLOC_MODE_STACK
 * -# Call R_OSAL_MmngrAlloc to allocate a memory buffer.
 * -# Call R_OSAL_MmngrGetCpuPtr with the hndl_mmngr->p_ptr_self is invalid (NULL)
 * -# Call R_OSAL_MmngrDealloc to deallocate the allocated memory buffer.
 * -# Call R_OSAL_MmngrClose to close the memory handle.
 * @subsection MmngrGetCpuPtr_TC_09_008_021_ereb Expected Result/Behavior
 * -# The return of R_OSAL_MmngrOpen is OSAL_RETURN_OK.<br>
 * The returned handle is not OSAL_MEMORY_MANAGER_HANDLE_INVALID.
 * -# The return value of R_OSAL_MmngrAlloc is OSAL_RETURN_OK.<br>
 * The return buffer is not OSAL_MEMORY_BUFFER_HANDLE_INVALID.
 * -# The return value of R_OSAL_MmngrGetCpuPtr is OSAL_RETURN_HANDLE.
 * -# The return value of R_OSAL_MmngrDealloc is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrClose is OSAL_RETURN_OK.
 * @subsection MmngrGetCpuPtr_TC_09_008_021_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrGetCpuPtr_TC_09_008_021
 */
// [MmngrGetCpuPtr_TC_09_008_021]
TEST_F(MemoryApiTest, MmngrGetCpuPtr_TC_09_008_021)
{
    void* cpu_ptr;
    void* bk_ptr_self;

    // Test09_008_021
    // @brief: abnormal case: hndl_mmngr->p_ptr_self is invalid (NULL)
    config.memory_limit                = 4096;
    config.max_allowed_allocations     = 1;
    config.max_registered_monitors_cbs = 2;
    config.mode = OSAL_MMNGR_ALLOC_MODE_STACK;
    size = 4096;
    alignment = 64;

    EXPECT_EQ(R_OSAL_MmngrOpen(&config, &hndl_mmngr), OSAL_RETURN_OK) <<  "Test09_008_021 failed";
    EXPECT_NE(hndl_mmngr,OSAL_MEMORY_MANAGER_HANDLE_INVALID) <<  "Test09_008_021 failed";
    EXPECT_EQ(R_OSAL_MmngrAlloc(hndl_mmngr, size, alignment, &buffer_obj), OSAL_RETURN_OK) << "Test09_008_021 failed";
    EXPECT_NE(buffer_obj, OSAL_MEMORY_BUFFER_HANDLE_INVALID);
    bk_ptr_self = hndl_mmngr->p_ptr_self;
    hndl_mmngr->p_ptr_self = NULL;
    EXPECT_EQ(R_OSAL_MmngrGetCpuPtr(buffer_obj, &cpu_ptr ), OSAL_RETURN_HANDLE) << "Test09_008_021 failed";
    hndl_mmngr->p_ptr_self = bk_ptr_self;
    EXPECT_EQ(R_OSAL_MmngrDealloc(hndl_mmngr, buffer_obj), OSAL_RETURN_OK);
    EXPECT_EQ(R_OSAL_MmngrClose(hndl_mmngr), OSAL_RETURN_OK) << "Test09_008_021 failed";
    hndl_mmngr = OSAL_MEMORY_MANAGER_HANDLE_INVALID;
    buffer_obj = OSAL_MEMORY_BUFFER_HANDLE_INVALID;
}
// [MmngrGetCpuPtr_TC_09_008_021]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrGetCpuPtr_TC_09_008_022 MemoryApiTest.MmngrGetCpuPtr_TC_09_008_022
 * @subsection MmngrGetCpuPtr_TC_09_008_022_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrGetCpuPtr_TC_09_008_022_tci Test Case ID
 * MmngrGetCpuPtr_S4_A_TC_09_008_022
 * @subsection MmngrGetCpuPtr_TC_09_008_022_rr Related Requirement(s)
 * \#276553
 * @subsection MmngrGetCpuPtr_TC_09_008_022_pp Prerequisite/Precondition
 * OSAL is initialized.
 * @subsection MmngrGetCpuPtr_TC_09_008_022_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrGetCpuPtr with abnormal condition and mode is OSAL_MMNGR_ALLOC_MODE_STACK_PROT.
 * - Test09_008_022: hndl_mmngr->p_ptr_self is invalid (NULL)
 * @subsection MmngrGetCpuPtr_TC_09_008_022_tpts Test Procedure/Test Steps
 * -# Call R_OSAL_MmngrOpen with bellow config:
 *  - config.memory_limit                = 4096
 *  - config.max_allowed_allocations     = 1
 *  - config.max_registered_monitors_cbs = 2
 *  - config.mode = OSAL_MMNGR_ALLOC_MODE_STACK_PROT
 * -# Call R_OSAL_MmngrAlloc to allocate a memory buffer.
 * -# Call R_OSAL_MmngrGetCpuPtr with the hndl_mmngr->p_ptr_self is invalid (NULL)
 * -# Call R_OSAL_MmngrDealloc to deallocate the allocated memory buffer.
 * -# Call R_OSAL_MmngrClose to close the memory handle.
 * @subsection MmngrGetCpuPtr_TC_09_008_022_ereb Expected Result/Behavior
 * -# The return of R_OSAL_MmngrOpen is OSAL_RETURN_OK.<br>
 * The returned handle is not OSAL_MEMORY_MANAGER_HANDLE_INVALID.
 * -# The return value of R_OSAL_MmngrAlloc is OSAL_RETURN_OK.<br>
 * The return buffer is not OSAL_MEMORY_BUFFER_HANDLE_INVALID.
 * -# The return value of R_OSAL_MmngrGetCpuPtr is OSAL_RETURN_HANDLE.
 * -# The return value of R_OSAL_MmngrDealloc is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrClose is OSAL_RETURN_OK.
 * @subsection MmngrGetCpuPtr_TC_09_008_022_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrGetCpuPtr_TC_09_008_022
 */
// [MmngrGetCpuPtr_TC_09_008_022]
TEST_F(MemoryApiTest, MmngrGetCpuPtr_TC_09_008_022)
{
    void* cpu_ptr;
    void* bk_ptr_self;

    // Test09_008_022
    // @brief: abnormal case: hndl_mmngr->p_ptr_self is invalid (NULL)
    config.memory_limit                = 4096;
    config.max_allowed_allocations     = 1;
    config.max_registered_monitors_cbs = 2;
    config.mode = OSAL_MMNGR_ALLOC_MODE_STACK_PROT;
    size = 4096;
    alignment = 64;

    EXPECT_EQ(R_OSAL_MmngrOpen(&config, &hndl_mmngr), OSAL_RETURN_OK) << "Test09_008_022 failed";
    EXPECT_NE(hndl_mmngr,OSAL_MEMORY_MANAGER_HANDLE_INVALID) << "Test09_008_022 failed";
    EXPECT_EQ(R_OSAL_MmngrAlloc(hndl_mmngr, size, alignment, &buffer_obj), OSAL_RETURN_OK) << "Test09_008_022 failed";
    EXPECT_NE(buffer_obj, OSAL_MEMORY_BUFFER_HANDLE_INVALID) << "Test09_008_022 failed";
    bk_ptr_self = hndl_mmngr->p_ptr_self;
    hndl_mmngr->p_ptr_self = NULL;
    EXPECT_EQ(R_OSAL_MmngrGetCpuPtr(buffer_obj, &cpu_ptr ), OSAL_RETURN_HANDLE) << "Test09_008_022 failed";
    hndl_mmngr->p_ptr_self = bk_ptr_self;
    EXPECT_EQ(R_OSAL_MmngrDealloc(hndl_mmngr, buffer_obj), OSAL_RETURN_OK) << "Test09_008_022 failed";
    EXPECT_EQ(R_OSAL_MmngrClose(hndl_mmngr), OSAL_RETURN_OK) << "Test09_008_022 failed";
    hndl_mmngr = OSAL_MEMORY_MANAGER_HANDLE_INVALID;
    buffer_obj = OSAL_MEMORY_BUFFER_HANDLE_INVALID;
}
// [MmngrGetCpuPtr_TC_09_008_022]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrGetCpuPtr_TC_09_008_023 MemoryApiTest.MmngrGetCpuPtr_TC_09_008_023
 * @subsection MmngrGetCpuPtr_TC_09_008_023_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrGetCpuPtr_TC_09_008_023_tci Test Case ID
 * MmngrGetCpuPtr_S4_A_TC_09_008_023
 * @subsection MmngrGetCpuPtr_TC_09_008_023_rr Related Requirement(s)
 * \#276553
 * @subsection MmngrGetCpuPtr_TC_09_008_023_pp Prerequisite/Precondition
 * OSAL is initialized.
 * @subsection MmngrGetCpuPtr_TC_09_008_023_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrGetCpuPtr with abnormal condition and mode is OSAL_MMNGR_ALLOC_MODE_FREE_LIST.
 * - Test09_008_023: hndl_mmngr->p_ptr_self is invalid (NULL)
 * @subsection MmngrGetCpuPtr_TC_09_008_023_tpts Test Procedure/Test Steps
 * -# Call R_OSAL_MmngrOpen with bellow config:
 *  - config.memory_limit                = 4096
 *  - config.max_allowed_allocations     = 1
 *  - config.max_registered_monitors_cbs = 2
 *  - config.mode = OSAL_MMNGR_ALLOC_MODE_FREE_LIST
 * -# Call R_OSAL_MmngrAlloc to allocate a memory buffer.
 * -# Call R_OSAL_MmngrGetCpuPtr with the hndl_mmngr->p_ptr_self is invalid (NULL)
 * -# Call R_OSAL_MmngrDealloc to deallocate the allocated memory buffer.
 * -# Call R_OSAL_MmngrClose to close the memory handle.
 * @subsection MmngrGetCpuPtr_TC_09_008_023_ereb Expected Result/Behavior
 * -# The return of R_OSAL_MmngrOpen is OSAL_RETURN_OK.<br>
 * The returned handle is not OSAL_MEMORY_MANAGER_HANDLE_INVALID.
 * -# The return value of R_OSAL_MmngrAlloc is OSAL_RETURN_OK.<br>
 * The return buffer is not OSAL_MEMORY_BUFFER_HANDLE_INVALID.
 * -# The return value of R_OSAL_MmngrGetCpuPtr is OSAL_RETURN_HANDLE.
 * -# The return value of R_OSAL_MmngrDealloc is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrClose is OSAL_RETURN_OK.
 * @subsection MmngrGetCpuPtr_TC_09_008_023_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrGetCpuPtr_TC_09_008_023
 */
// [MmngrGetCpuPtr_TC_09_008_023]
TEST_F(MemoryApiTest, MmngrGetCpuPtr_TC_09_008_023)
{
    void* cpu_ptr;
    void* bk_ptr_self;

    // Test09_008_023
    // @brief: abnormal case: hndl_mmngr->p_ptr_self is invalid (NULL)
    config.memory_limit                = 4096;
    config.max_allowed_allocations     = 1;
    config.max_registered_monitors_cbs = 2;
    config.mode = OSAL_MMNGR_ALLOC_MODE_FREE_LIST;
    size = 4096;
    alignment = 64;

    EXPECT_EQ(R_OSAL_MmngrOpen(&config, &hndl_mmngr), OSAL_RETURN_OK) << "Test09_008_023 failed";
    EXPECT_NE(hndl_mmngr,OSAL_MEMORY_MANAGER_HANDLE_INVALID) << "Test09_008_023 failed";
    EXPECT_EQ(R_OSAL_MmngrAlloc(hndl_mmngr, size, alignment, &buffer_obj), OSAL_RETURN_OK) << "Test09_008_023 failed";
    EXPECT_NE(buffer_obj, OSAL_MEMORY_BUFFER_HANDLE_INVALID) << "Test09_008_023 failed";
    bk_ptr_self = hndl_mmngr->p_ptr_self;
    hndl_mmngr->p_ptr_self = NULL;
    EXPECT_EQ(R_OSAL_MmngrGetCpuPtr(buffer_obj, &cpu_ptr ), OSAL_RETURN_HANDLE) << "Test09_008_023 failed";
    hndl_mmngr->p_ptr_self = bk_ptr_self;
    EXPECT_EQ(R_OSAL_MmngrDealloc(hndl_mmngr, buffer_obj), OSAL_RETURN_OK) << "Test09_008_023 failed";
    EXPECT_EQ(R_OSAL_MmngrClose(hndl_mmngr), OSAL_RETURN_OK) << "Test09_008_023 failed";
    hndl_mmngr = OSAL_MEMORY_MANAGER_HANDLE_INVALID;
    buffer_obj = OSAL_MEMORY_BUFFER_HANDLE_INVALID;
}
// [MmngrGetCpuPtr_TC_09_008_023]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrGetCpuPtr_TC_09_008_024 MemoryApiTest.MmngrGetCpuPtr_TC_09_008_024
 * @subsection MmngrGetCpuPtr_TC_09_008_024_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrGetCpuPtr_TC_09_008_024_tci Test Case ID
 * MmngrGetCpuPtr_S4_A_TC_09_008_024
 * @subsection MmngrGetCpuPtr_TC_09_008_024_rr Related Requirement(s)
 * \#276553
 * @subsection MmngrGetCpuPtr_TC_09_008_024_pp Prerequisite/Precondition
 * OSAL is initialized.
 * @subsection MmngrGetCpuPtr_TC_09_008_024_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrGetCpuPtr with abnormal condition and mode is OSAL_MMNGR_ALLOC_MODE_FREE_LIST_PROT.
 * - Test09_008_024: hndl_mmngr->p_ptr_self is invalid (NULL)
 * @subsection MmngrGetCpuPtr_TC_09_008_024_tpts Test Procedure/Test Steps
 * -# Call R_OSAL_MmngrOpen with bellow config:
 *  - config.memory_limit                = 4096
 *  - config.max_allowed_allocations     = 1
 *  - config.max_registered_monitors_cbs = 2
 *  - config.mode = OSAL_MMNGR_ALLOC_MODE_FREE_LIST_PROT
 * -# Call R_OSAL_MmngrAlloc to allocate a memory buffer.
 * -# Call R_OSAL_MmngrGetCpuPtr with the hndl_mmngr->p_ptr_self is invalid (NULL)
 * -# Call R_OSAL_MmngrDealloc to deallocate the allocated memory buffer.
 * -# Call R_OSAL_MmngrClose to close the memory handle.
 * @subsection MmngrGetCpuPtr_TC_09_008_024_ereb Expected Result/Behavior
 * -# The return of R_OSAL_MmngrOpen is OSAL_RETURN_OK.<br>
 * The returned handle is not OSAL_MEMORY_MANAGER_HANDLE_INVALID.
 * -# The return value of R_OSAL_MmngrAlloc is OSAL_RETURN_OK.<br>
 * The return buffer is not OSAL_MEMORY_BUFFER_HANDLE_INVALID.
 * -# The return value of R_OSAL_MmngrGetCpuPtr is OSAL_RETURN_HANDLE.
 * -# The return value of R_OSAL_MmngrDealloc is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrClose is OSAL_RETURN_OK.
 * @subsection MmngrGetCpuPtr_TC_09_008_024_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrGetCpuPtr_TC_09_008_024
 */
// [MmngrGetCpuPtr_TC_09_008_024]
TEST_F(MemoryApiTest, MmngrGetCpuPtr_TC_09_008_024)
{
    void* cpu_ptr;
    void* bk_ptr_self;

    // Test09_008_024
    // @brief: abnormal case: hndl_mmngr->p_ptr_self is invalid (NULL)
    config.memory_limit                = 4096;
    config.max_allowed_allocations     = 1;
    config.max_registered_monitors_cbs = 2;
    config.mode = OSAL_MMNGR_ALLOC_MODE_FREE_LIST_PROT;
    size = 4096;
    alignment = 64;

    EXPECT_EQ(R_OSAL_MmngrOpen(&config, &hndl_mmngr), OSAL_RETURN_OK) << "Test09_008_024 failed";
    EXPECT_NE(hndl_mmngr,OSAL_MEMORY_MANAGER_HANDLE_INVALID) << "Test09_008_024 failed";
    EXPECT_EQ(R_OSAL_MmngrAlloc(hndl_mmngr, size, alignment, &buffer_obj), OSAL_RETURN_OK) << "Test09_008_024 failed";
    EXPECT_NE(buffer_obj, OSAL_MEMORY_BUFFER_HANDLE_INVALID) << "Test09_008_024 failed";
    bk_ptr_self = hndl_mmngr->p_ptr_self;
    hndl_mmngr->p_ptr_self = NULL;
    EXPECT_EQ(R_OSAL_MmngrGetCpuPtr(buffer_obj, &cpu_ptr ), OSAL_RETURN_HANDLE) << "Test09_008_024 failed";
    hndl_mmngr->p_ptr_self = bk_ptr_self;
    EXPECT_EQ(R_OSAL_MmngrDealloc(hndl_mmngr, buffer_obj), OSAL_RETURN_OK) << "Test09_008_024 failed";
    EXPECT_EQ(R_OSAL_MmngrClose(hndl_mmngr), OSAL_RETURN_OK) << "Test09_008_024 failed";
    hndl_mmngr = OSAL_MEMORY_MANAGER_HANDLE_INVALID;
    buffer_obj = OSAL_MEMORY_BUFFER_HANDLE_INVALID;
}
// [MmngrGetCpuPtr_TC_09_008_024]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrGetConstCpuPtr_TC_09_009_001 MemoryApiTest.MmngrGetConstCpuPtr_TC_09_009_001
 * @subsection MmngrGetConstCpuPtr_TC_09_009_001_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrGetConstCpuPtr_TC_09_009_001_tci Test Case ID
 * MmngrGetConstCpuPtr_S3_N_TC_09_009_001
 * @subsection MmngrGetConstCpuPtr_TC_09_009_001_rr Related Requirement(s)
 * \#276554
 * @subsection MmngrGetConstCpuPtr_TC_09_009_001_pp Prerequisite/Precondition
 * OSAL is initialized.
 * @subsection MmngrGetConstCpuPtr_TC_09_009_001_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrGetConstCpuPtr with normal condition and mode is OSAL_MMNGR_ALLOC_MODE_STACK.
 * - pre-process: open new memory manager
 * - Test09_009_001: with all valid parameters.
 * - post-process: close memory manager
 * @subsection MmngrGetConstCpuPtr_TC_09_009_001_tpts Test Procedure/Test Steps
 * -# Call R_OSAL_MmngrOpen with bellow config:
 *  - config.memory_limit                = 4096
 *  - config.max_allowed_allocations     = 1
 *  - config.max_registered_monitors_cbs = 2
 *  - config.mode = OSAL_MMNGR_ALLOC_MODE_STACK
 * -# Call R_OSAL_MmngrAlloc to allocate a memory buffer.
 * -# Call R_OSAL_MmngrGetConstCpuPtr with all valid parameters.  
 * -# Call R_OSAL_MmngrDealloc to deallocate the allocated memory buffer.
 * -# Call R_OSAL_MmngrClose to close memory manager
 * @subsection MmngrGetConstCpuPtr_TC_09_009_001_ereb Expected Result/Behavior
 * -# The return of R_OSAL_MmngrOpen is OSAL_RETURN_OK.<br>
 * The returned handle is not OSAL_MEMORY_MANAGER_HANDLE_INVALID.
 * -# The return value of R_OSAL_MmngrAlloc is OSAL_RETURN_OK.<br>
 * The return buffer is not OSAL_MEMORY_BUFFER_HANDLE_INVALID
 * -# The return value of R_OSAL_MmngrGetConstCpuPtr is OSAL_RETURN_OK.<br>
 * The return CPU pointer is not NULL_PTR
 * -# The return value of R_OSAL_MmngrDealloc is OSAL_RETURN_OK.
 * -# R_OSAL_MmngrClose return OSAL_RETURN_OK.
 * @subsection MmngrGetConstCpuPtr_TC_09_009_001_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrGetConstCpuPtr_TC_09_009_001
 */
// [MmngrGetConstCpuPtr_TC_09_009_001]
TEST_F(MemoryApiTest, MmngrGetConstCpuPtr_TC_09_009_001)
{
    const void* cpu_ptr;

    // pre-process: open memory manager
    config.memory_limit                = 4096;
    config.max_allowed_allocations     = 1;
    config.max_registered_monitors_cbs = 2;
    config.mode = OSAL_MMNGR_ALLOC_MODE_STACK;
    size = 4096;
    alignment = 64;

    EXPECT_EQ(R_OSAL_MmngrOpen(&config, &hndl_mmngr), OSAL_RETURN_OK) <<  "pre-process failed";
    EXPECT_NE(hndl_mmngr,OSAL_MEMORY_MANAGER_HANDLE_INVALID) <<  "pre-process failed";

    // Test09_009_001
    // @brief: normal case: all valid argument
    EXPECT_EQ(R_OSAL_MmngrAlloc(hndl_mmngr, size, alignment, &buffer_obj), OSAL_RETURN_OK);
    EXPECT_NE(buffer_obj,OSAL_MEMORY_BUFFER_HANDLE_INVALID);
    EXPECT_EQ(R_OSAL_MmngrGetConstCpuPtr(buffer_obj, &cpu_ptr ), OSAL_RETURN_OK) << "Test09_009_001 failed";
    EXPECT_NE(cpu_ptr,NULL_PTR);
    EXPECT_EQ(R_OSAL_MmngrDealloc(hndl_mmngr, buffer_obj), OSAL_RETURN_OK);
    buffer_obj = OSAL_MEMORY_BUFFER_HANDLE_INVALID;

    //post-process: close memory manager
    EXPECT_EQ(R_OSAL_MmngrClose(hndl_mmngr), OSAL_RETURN_OK) << "post-process failed";
    hndl_mmngr = OSAL_MEMORY_MANAGER_HANDLE_INVALID;
}
// [MmngrGetConstCpuPtr_TC_09_009_001]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrGetConstCpuPtr_TC_09_009_002 MemoryApiTest.MmngrGetConstCpuPtr_TC_09_009_002
 * @subsection MmngrGetConstCpuPtr_TC_09_009_002_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrGetConstCpuPtr_TC_09_009_002_tci Test Case ID
 * MmngrGetConstCpuPtr_S0_A_TC_09_009_002
 * @subsection MmngrGetConstCpuPtr_TC_09_009_002_rr Related Requirement(s)
 * \#276554
 * @subsection MmngrGetConstCpuPtr_TC_09_009_002_pp Prerequisite/Precondition
 * OSAL is initialized.
 * @subsection MmngrGetConstCpuPtr_TC_09_009_002_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrGetConstCpuPtr with abnormal condition and mode is OSAL_MMNGR_ALLOC_MODE_STACK.
 * - Test09_009_002: buffer is NULL.
 * @subsection MmngrGetConstCpuPtr_TC_09_009_002_tpts Test Procedure/Test Steps
 * -# Call R_OSAL_MmngrGetConstCpuPtr with NULL buffer.
 * @subsection MmngrGetConstCpuPtr_TC_09_009_002_ereb Expected Result/Behavior
 * -# The return value of R_OSAL_MmngrGetConstCpuPtr is OSAL_RETURN_HANDLE.
 * @subsection MmngrGetConstCpuPtr_TC_09_009_002_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrGetConstCpuPtr_TC_09_009_002
 */
// [MmngrGetConstCpuPtr_TC_09_009_002]
TEST_F(MemoryApiTest, MmngrGetConstCpuPtr_TC_09_009_002)
{
    const void* cpu_ptr;

    // Test09_009_002
    // @brief: abnormal case: buffer_obj = NULL
    EXPECT_EQ(R_OSAL_MmngrGetConstCpuPtr(OSAL_MEMORY_BUFFER_HANDLE_INVALID, &cpu_ptr ), OSAL_RETURN_HANDLE) << "Test09_009_002 failed";
}
// [MmngrGetConstCpuPtr_TC_09_009_002]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrGetConstCpuPtr_TC_09_009_003 MemoryApiTest.MmngrGetConstCpuPtr_TC_09_009_003
 * @subsection MmngrGetConstCpuPtr_TC_09_009_003_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrGetConstCpuPtr_TC_09_009_003_tci Test Case ID
 * MmngrGetConstCpuPtr_S2_A_TC_09_009_003
 * @subsection MmngrGetConstCpuPtr_TC_09_009_003_rr Related Requirement(s)
 * \#276554
 * @subsection MmngrGetConstCpuPtr_TC_09_009_003_pp Prerequisite/Precondition
 * OSAL is initialized.
 * @subsection MmngrGetConstCpuPtr_TC_09_009_003_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrGetConstCpuPtr with abnormal condition and mode is OSAL_MMNGR_ALLOC_MODE_STACK.
 * - pre-process: open new memory manager
 * - Test09_009_003: buffer has already deallocated.
 * - post-process: close memory manager
 * @subsection MmngrGetConstCpuPtr_TC_09_009_003_tpts Test Procedure/Test Steps
 * -# Call R_OSAL_MmngrOpen with bellow config:
 *  - config.memory_limit                = 4096
 *  - config.max_allowed_allocations     = 1
 *  - config.max_registered_monitors_cbs = 2
 *  - config.mode = OSAL_MMNGR_ALLOC_MODE_STACK
 * -# Call R_OSAL_MmngrAlloc to allocate a memory buffer.
 * -# Call R_OSAL_MmngrDealloc to deallocate the allocated memory buffer.
 * -# Call R_OSAL_MmngrGetConstCpuPtr with buffer which has already been deallocated.
 * -# Call R_OSAL_MmngrClose to close the memory handle.
 * @subsection MmngrGetConstCpuPtr_TC_09_009_003_ereb Expected Result/Behavior
 * -# The return of R_OSAL_MmngrOpen is OSAL_RETURN_OK.<br>
 * The returned handle is not OSAL_MEMORY_MANAGER_HANDLE_INVALID.
 * -# The return value of R_OSAL_MmngrAlloc is OSAL_RETURN_OK.<br>
 * The return buffer is not OSAL_MEMORY_BUFFER_HANDLE_INVALID
 * -# The return value of R_OSAL_MmngrDealloc is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrGetConstCpuPtr is OSAL_RETURN_HANDLE.
 * -# The return value of R_OSAL_MmngrClose is OSAL_RETURN_OK..
 * @subsection MmngrGetConstCpuPtr_TC_09_009_003_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrGetConstCpuPtr_TC_09_009_003
 */
// [MmngrGetConstCpuPtr_TC_09_009_003]
TEST_F(MemoryApiTest, MmngrGetConstCpuPtr_TC_09_009_003)
{
    const void* cpu_ptr;

    // pre-process: open memory manager
    config.memory_limit                = 4096;
    config.max_allowed_allocations     = 1;
    config.max_registered_monitors_cbs = 2;
    config.mode = OSAL_MMNGR_ALLOC_MODE_STACK;
    size = 4096;
    alignment = 64;

    EXPECT_EQ(R_OSAL_MmngrOpen(&config, &hndl_mmngr), OSAL_RETURN_OK) <<  "pre-process failed";
    EXPECT_NE(hndl_mmngr,OSAL_MEMORY_MANAGER_HANDLE_INVALID) <<  "pre-process failed";

    // Test09_009_003
    // @brief: abnormal case: buffer has already deallocated
    EXPECT_EQ(R_OSAL_MmngrAlloc(hndl_mmngr, size, alignment, &buffer_obj), OSAL_RETURN_OK);
    EXPECT_NE(buffer_obj,OSAL_MEMORY_BUFFER_HANDLE_INVALID);
    EXPECT_EQ(R_OSAL_MmngrDealloc(hndl_mmngr, buffer_obj), OSAL_RETURN_OK);
    EXPECT_EQ(R_OSAL_MmngrGetConstCpuPtr(buffer_obj, &cpu_ptr ), OSAL_RETURN_HANDLE) << "Test09_009_003 failed";

    // post-process: close memory manager
    EXPECT_EQ(R_OSAL_MmngrClose(hndl_mmngr), OSAL_RETURN_OK) << "post-process failed";
    hndl_mmngr = OSAL_MEMORY_MANAGER_HANDLE_INVALID;
}
// [MmngrGetConstCpuPtr_TC_09_009_003]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrGetConstCpuPtr_TC_09_009_004 MemoryApiTest.MmngrGetConstCpuPtr_TC_09_009_004
 * @subsection MmngrGetConstCpuPtr_TC_09_009_004_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrGetConstCpuPtr_TC_09_009_004_tci Test Case ID
 * MmngrGetConstCpuPtr_S4_A_TC_09_009_004
 * @subsection MmngrGetConstCpuPtr_TC_09_009_004_rr Related Requirement(s)
 * \#276554
 * @subsection MmngrGetConstCpuPtr_TC_09_009_004_pp Prerequisite/Precondition
 * OSAL is initialized.
 * @subsection MmngrGetConstCpuPtr_TC_09_009_004_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrGetConstCpuPtr with abnormal condition and mode is OSAL_MMNGR_ALLOC_MODE_STACK.
 * - pre-process: open new memory manager
 * - Test09_009_004: buffer is not support to get Const CPU pointer.
 * - post-process: close memory manager
 * @subsection MmngrGetConstCpuPtr_TC_09_009_004_tpts Test Procedure/Test Steps
 * -# Call R_OSAL_MmngrOpen with bellow config:
 *  - config.memory_limit                = 4096
 *  - config.max_allowed_allocations     = 1
 *  - config.max_registered_monitors_cbs = 2
 *  - config.mode = OSAL_MMNGR_ALLOC_MODE_STACK
 * -# Allocate "tmp_buffer_obj" by using malloc function.
 * -# Call R_OSAL_MmngrAlloc to allocate a memory buffer.
 * -# Store "buffer_obj->p_getConstCpuPtr" to "tmp_buffer_obj->p_getConstCpuPtr".<br>
 * Set "buffer_obj->p_getConstCpuPtr" to NULL. <br>
 * Call R_OSAL_MmngrGetConstCpuPtr with the changed buffer "buffer_obj".<br>
 * Re-assign "tmp_buffer_obj->p_getConstCpuPtr" to "buffer_obj->p_getConstCpuPtr".
 * -# Call R_OSAL_MmngrDealloc to deallocate the original allocated buffer.
 * -# Free buffer pointed by "tmp_buffer_obj"
 * -# Call R_OSAL_MmngrClose to close the memory handle.
 * @subsection MmngrGetConstCpuPtr_TC_09_009_004_ereb Expected Result/Behavior
 * -# The return of R_OSAL_MmngrOpen is OSAL_RETURN_OK.<br>
 * The returned handle is not OSAL_MEMORY_MANAGER_HANDLE_INVALID.
 * -# Memory allocation succeeded (Pointer to buffer != Nullpointer)
 * -# The return value of R_OSAL_MmngrAlloc is OSAL_RETURN_OK.<br>
 * The return buffer is not OSAL_MEMORY_BUFFER_HANDLE_INVALID
 * -# The return value of R_OSAL_MmngrGetConstCpuPtr is OSAL_RETURN_UNSUPPORTED_OPERATION.
 * -# The return value of R_OSAL_MmngrDealloc is OSAL_RETURN_OK.
 * -# Allocated memory free succeeded.
 * -# The return value of R_OSAL_MmngrClose is OSAL_RETURN_OK..
 * @subsection MmngrGetConstCpuPtr_TC_09_009_004_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrGetConstCpuPtr_TC_09_009_004
 */
// [MmngrGetConstCpuPtr_TC_09_009_004]
TEST_F(MemoryApiTest, MmngrGetConstCpuPtr_TC_09_009_004)
{
    osal_memory_buffer_handle_t tmp_buffer_obj;
    const void* cpu_ptr;

    // pre-process: open memory manager
    config.memory_limit                = 4096;
    config.max_allowed_allocations     = 1;
    config.max_registered_monitors_cbs = 2;
    config.mode = OSAL_MMNGR_ALLOC_MODE_STACK;
    size = 4096;
    alignment = 64;

    EXPECT_EQ(R_OSAL_MmngrOpen(&config, &hndl_mmngr), OSAL_RETURN_OK) <<  "pre-process failed";
    EXPECT_NE(hndl_mmngr,OSAL_MEMORY_MANAGER_HANDLE_INVALID) <<  "pre-process failed";

    // Test09_009_004
    // @brief: abnormal case: buffer_obj->getConstCpuPtr = NULL
    tmp_buffer_obj = (osal_memory_buffer_handle_t)malloc (sizeof(st_osal_memory_buffer_obj));
    EXPECT_EQ(R_OSAL_MmngrAlloc(hndl_mmngr, size, alignment, &buffer_obj), OSAL_RETURN_OK);
    EXPECT_NE(buffer_obj,OSAL_MEMORY_BUFFER_HANDLE_INVALID);
    tmp_buffer_obj->p_getConstCpuPtr = buffer_obj->p_getConstCpuPtr;
    buffer_obj->p_getConstCpuPtr = NULL;
    EXPECT_EQ(R_OSAL_MmngrGetConstCpuPtr(buffer_obj, &cpu_ptr ), OSAL_RETURN_UNSUPPORTED_OPERATION) << "Test09_009_004 failed";
    buffer_obj->p_getConstCpuPtr = tmp_buffer_obj->p_getConstCpuPtr;
    EXPECT_EQ(R_OSAL_MmngrDealloc(hndl_mmngr, buffer_obj), OSAL_RETURN_OK);
    buffer_obj = OSAL_MEMORY_BUFFER_HANDLE_INVALID;
    free(tmp_buffer_obj);

    // post-process: close memory manager
    EXPECT_EQ(R_OSAL_MmngrClose(hndl_mmngr), OSAL_RETURN_OK) << "post-process failed";
    hndl_mmngr = OSAL_MEMORY_MANAGER_HANDLE_INVALID;
}
// [MmngrGetConstCpuPtr_TC_09_009_004]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrGetConstCpuPtr_TC_09_009_005 MemoryApiTest.MmngrGetConstCpuPtr_TC_09_009_005
 * @subsection MmngrGetConstCpuPtr_TC_09_009_005_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrGetConstCpuPtr_TC_09_009_005_tci Test Case ID
 * MmngrGetConstCpuPtr_S0_A_TC_09_009_005
 * @subsection MmngrGetConstCpuPtr_TC_09_009_005_rr Related Requirement(s)
 * \#276554
 * @subsection MmngrGetConstCpuPtr_TC_09_009_005_pp Prerequisite/Precondition
 * OSAL is initialized.
 * @subsection MmngrGetConstCpuPtr_TC_09_009_005_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrGetConstCpuPtr with abnormal condition and mode is OSAL_MMNGR_ALLOC_MODE_STACK.
 * - pre-process: open new memory manager
 * - Test09_009_005: paramater cpu_ptr is NULL.
 * - post-process: close memory manager
 * @subsection MmngrGetConstCpuPtr_TC_09_009_005_tpts Test Procedure/Test Steps
 * -# Call R_OSAL_MmngrOpen with bellow config:
 *  - config.memory_limit                = 4096
 *  - config.max_allowed_allocations     = 1
 *  - config.max_registered_monitors_cbs = 2
 *  - config.mode = OSAL_MMNGR_ALLOC_MODE_STACK
 * -# Call R_OSAL_MmngrAlloc to allocate a memory buffer.
 * -# Call R_OSAL_MmngrGetConstCpuPtr with cpu_ptr is NULL.
 * -# Call R_OSAL_MmngrDealloc to deallocate the original allocated buffer.
 * -# Call R_OSAL_MmngrClose to close the memory handle.
 * @subsection MmngrGetConstCpuPtr_TC_09_009_005_ereb Expected Result/Behavior
 * -# The return of R_OSAL_MmngrOpen is OSAL_RETURN_OK.<br>
 * The returned handle is not OSAL_MEMORY_MANAGER_HANDLE_INVALID.
 * -# The return value of R_OSAL_MmngrAlloc is OSAL_RETURN_OK.<br>
 * The return buffer is not OSAL_MEMORY_BUFFER_HANDLE_INVALID
 * -# The return value of R_OSAL_MmngrGetConstCpuPtr is OSAL_RETURN_PAR.
 * -# The return value of R_OSAL_MmngrDealloc is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrClose is OSAL_RETURN_OK..
 * @subsection MmngrGetConstCpuPtr_TC_09_009_005_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrGetConstCpuPtr_TC_09_009_005
 */
// [MmngrGetConstCpuPtr_TC_09_009_005]
TEST_F(MemoryApiTest, MmngrGetConstCpuPtr_TC_09_009_005)
{
    const void** pp_const_cpu_ptr = NULL;

    // pre-process: open memory manager
    config.memory_limit                = 4096;
    config.max_allowed_allocations     = 1;
    config.max_registered_monitors_cbs = 2;
    config.mode = OSAL_MMNGR_ALLOC_MODE_STACK;
    size = 4096;
    alignment = 64;

    EXPECT_EQ(R_OSAL_MmngrOpen(&config, &hndl_mmngr), OSAL_RETURN_OK) <<  "pre-process failed";
    EXPECT_NE(hndl_mmngr,OSAL_MEMORY_MANAGER_HANDLE_INVALID) <<  "pre-process failed";

    // Test09_009_005
    // @brief: abnormal case: cpu_ptr = NULL
    EXPECT_EQ(R_OSAL_MmngrAlloc(hndl_mmngr, size, alignment, &buffer_obj), OSAL_RETURN_OK);
    EXPECT_NE(buffer_obj,OSAL_MEMORY_BUFFER_HANDLE_INVALID);
    EXPECT_EQ(R_OSAL_MmngrGetConstCpuPtr(buffer_obj, pp_const_cpu_ptr), OSAL_RETURN_PAR) << "Test09_009_005 failed";
    EXPECT_EQ(R_OSAL_MmngrDealloc(hndl_mmngr, buffer_obj), OSAL_RETURN_OK);
    buffer_obj = OSAL_MEMORY_BUFFER_HANDLE_INVALID;

    // post-process: close memory manager
    EXPECT_EQ(R_OSAL_MmngrClose(hndl_mmngr), OSAL_RETURN_OK) << "post-process failed";
    hndl_mmngr = OSAL_MEMORY_MANAGER_HANDLE_INVALID;
}
// [MmngrGetConstCpuPtr_TC_09_009_005]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrGetConstCpuPtr_TC_09_009_006 MemoryApiTest.MmngrGetConstCpuPtr_TC_09_009_006
 * @subsection MmngrGetConstCpuPtr_TC_09_009_006_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrGetConstCpuPtr_TC_09_009_006_tci Test Case ID
 * MmngrGetConstCpuPtr_S3_N_TC_09_009_006
 * @subsection MmngrGetConstCpuPtr_TC_09_009_006_rr Related Requirement(s)
 * \#276554
 * @subsection MmngrGetConstCpuPtr_TC_09_009_006_pp Prerequisite/Precondition
 * OSAL is initialized.
 * @subsection MmngrGetConstCpuPtr_TC_09_009_006_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrGetConstCpuPtr with normal condition and mode is OSAL_MMNGR_ALLOC_MODE_STACK.
 * - pre-process: open new memory manager
 * - Test09_009_006: confirm with memory handle which opened with OSAL_MMNGR_ALLOC_MODE_FREE_LIST mode.
 * - post-process: close memory manager
 * @subsection MmngrGetConstCpuPtr_TC_09_009_006_tpts Test Procedure/Test Steps
 * -# Call R_OSAL_MmngrOpen with bellow config:
 *  - config.memory_limit                = 4096
 *  - config.max_allowed_allocations     = 1
 *  - config.max_registered_monitors_cbs = 2
 *  - config.mode = OSAL_MMNGR_ALLOC_MODE_FREE_LIST
 * -# Call R_OSAL_MmngrAlloc to allocate a memory buffer.
 * -# Call R_OSAL_MmngrGetConstCpuPtr with all valid parameters. 
 * -# Call R_OSAL_MmngrDealloc to deallocate the allocated memory buffer.
 * -# Call R_OSAL_MmngrClose to close memory handle.
 * @subsection MmngrGetConstCpuPtr_TC_09_009_006_ereb Expected Result/Behavior
 * -# The return of R_OSAL_MmngrOpen is OSAL_RETURN_OK.<br>
 * The returned handle is not OSAL_MEMORY_MANAGER_HANDLE_INVALID.
 * -# The return value of R_OSAL_MmngrAlloc is OSAL_RETURN_OK.<br>
 * The return buffer is not OSAL_MEMORY_BUFFER_HANDLE_INVALID
 * -# The return value of R_OSAL_MmngrGetConstCpuPtr is OSAL_RETURN_OK.<br>
 * The return CPU pointer is not NULL_PTR
 * -# The return value of R_OSAL_MmngrDealloc is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrClose is OSAL_RETURN_OK.
 * @subsection MmngrGetConstCpuPtr_TC_09_009_006_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrGetConstCpuPtr_TC_09_009_006
 */
// [MmngrGetConstCpuPtr_TC_09_009_006]
TEST_F(MemoryApiTest, MmngrGetConstCpuPtr_TC_09_009_006)
{
    const void* cpu_ptr;

    // pre-process: open memory manager
    config.memory_limit                = 4096;
    config.max_allowed_allocations     = 1;
    config.max_registered_monitors_cbs = 2;
    config.mode = OSAL_MMNGR_ALLOC_MODE_FREE_LIST;
    size = 64;
    alignment = 64;

    EXPECT_EQ(R_OSAL_MmngrOpen(&config, &hndl_mmngr), OSAL_RETURN_OK) <<  "pre-process failed";
    EXPECT_NE(hndl_mmngr,OSAL_MEMORY_MANAGER_HANDLE_INVALID) <<  "pre-process failed";

    // Test09_009_006
    // @brief: config.mode = OSAL_MMNGR_ALLOC_MODE_FREE_LIST;
    EXPECT_EQ(R_OSAL_MmngrAlloc(hndl_mmngr, size, alignment, &buffer_obj), OSAL_RETURN_OK);
    EXPECT_NE(buffer_obj,OSAL_MEMORY_BUFFER_HANDLE_INVALID);
    EXPECT_EQ(R_OSAL_MmngrGetConstCpuPtr(buffer_obj, &cpu_ptr ), OSAL_RETURN_OK) << "Test09_009_006 failed";
    EXPECT_NE(cpu_ptr,NULL_PTR);
    EXPECT_EQ(R_OSAL_MmngrDealloc(hndl_mmngr, buffer_obj), OSAL_RETURN_OK);
    buffer_obj = OSAL_MEMORY_BUFFER_HANDLE_INVALID;

    //post-process: close memory manager
    EXPECT_EQ(R_OSAL_MmngrClose(hndl_mmngr), OSAL_RETURN_OK) << "post-process failed";
    hndl_mmngr = OSAL_MEMORY_MANAGER_HANDLE_INVALID;
}
// [MmngrGetConstCpuPtr_TC_09_009_006]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrGetConstCpuPtr_TC_09_009_007 MemoryApiTest.MmngrGetConstCpuPtr_TC_09_009_007
 * @subsection MmngrGetConstCpuPtr_TC_09_009_007_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrGetConstCpuPtr_TC_09_009_007_tci Test Case ID
 * MmngrGetConstCpuPtr_S3_N_TC_09_009_007
 * @subsection MmngrGetConstCpuPtr_TC_09_009_007_rr Related Requirement(s)
 * \#276554
 * @subsection MmngrGetConstCpuPtr_TC_09_009_007_pp Prerequisite/Precondition
 * OSAL is initialized.
 * @subsection MmngrGetConstCpuPtr_TC_09_009_007_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrGetConstCpuPtr with normal condition and mode is OSAL_MMNGR_ALLOC_MODE_STACK_PROT.
 * - pre-process: open new memory manager
 * - Test09_009_007: with all valid parameters.
 * - post-process: close memory manager
 * @subsection MmngrGetConstCpuPtr_TC_09_009_007_tpts Test Procedure/Test Steps
 * -# Call R_OSAL_MmngrOpen with bellow config:
 *  - config.memory_limit                = 4096
 *  - config.max_allowed_allocations     = 1
 *  - config.max_registered_monitors_cbs = 2
 *  - config.mode = OSAL_MMNGR_ALLOC_MODE_STACK_PROT
 * -# Call R_OSAL_MmngrAlloc to allocate a memory buffer.
 * -# Call R_OSAL_MmngrGetConstCpuPtr with all valid parameters.  
 * -# Call R_OSAL_MmngrDealloc to deallocate the allocated memory buffer.
 * -# Call R_OSAL_MmngrClose to close memory handle.
 * @subsection MmngrGetConstCpuPtr_TC_09_009_007_ereb Expected Result/Behavior
 * -# The return of R_OSAL_MmngrOpen is OSAL_RETURN_OK.<br>
 * The returned handle is not OSAL_MEMORY_MANAGER_HANDLE_INVALID.
 * -# The return value of R_OSAL_MmngrAlloc is OSAL_RETURN_OK.<br>
 * The return buffer is not OSAL_MEMORY_BUFFER_HANDLE_INVALID
 * -# The return value of R_OSAL_MmngrGetConstCpuPtr is OSAL_RETURN_OK.<br>
 * The return CPU pointer is not NULL_PTR
 * -# The return value of R_OSAL_MmngrDealloc is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrClose is OSAL_RETURN_OK.
 * @subsection MmngrGetConstCpuPtr_TC_09_009_007_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrGetConstCpuPtr_TC_09_009_007
 */
// [MmngrGetConstCpuPtr_TC_09_009_007]
TEST_F(MemoryApiTest, MmngrGetConstCpuPtr_TC_09_009_007)
{
    const void* cpu_ptr;

    // pre-process: open memory manager
    config.memory_limit                = 4096;
    config.max_allowed_allocations     = 1;
    config.max_registered_monitors_cbs = 2;
    config.mode = OSAL_MMNGR_ALLOC_MODE_STACK_PROT;
    size = 4096;
    alignment = 64;

    EXPECT_EQ(R_OSAL_MmngrOpen(&config, &hndl_mmngr), OSAL_RETURN_OK) <<  "pre-process failed";
    EXPECT_NE(hndl_mmngr,OSAL_MEMORY_MANAGER_HANDLE_INVALID) <<  "pre-process failed";

    // Test09_009_007
    // @brief: normal case: all valid argument
    EXPECT_EQ(R_OSAL_MmngrAlloc(hndl_mmngr, size, alignment, &buffer_obj), OSAL_RETURN_OK);
    EXPECT_NE(buffer_obj,OSAL_MEMORY_BUFFER_HANDLE_INVALID);
    EXPECT_EQ(R_OSAL_MmngrGetConstCpuPtr(buffer_obj, &cpu_ptr ), OSAL_RETURN_OK) << "Test09_009_007 failed";
    EXPECT_NE(cpu_ptr,NULL_PTR);
    EXPECT_EQ(R_OSAL_MmngrDealloc(hndl_mmngr, buffer_obj), OSAL_RETURN_OK);
    buffer_obj = OSAL_MEMORY_BUFFER_HANDLE_INVALID;

    // post-process: close memory manager
    EXPECT_EQ(R_OSAL_MmngrClose(hndl_mmngr), OSAL_RETURN_OK) << "post-process failed";
    hndl_mmngr = OSAL_MEMORY_MANAGER_HANDLE_INVALID;
}
// [MmngrGetConstCpuPtr_TC_09_009_007]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrGetConstCpuPtr_TC_09_009_008 MemoryApiTest.MmngrGetConstCpuPtr_TC_09_009_008
 * @subsection MmngrGetConstCpuPtr_TC_09_009_008_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrGetConstCpuPtr_TC_09_009_008_tci Test Case ID
 * MmngrGetConstCpuPtr_S2_A_TC_09_009_008
 * @subsection MmngrGetConstCpuPtr_TC_09_009_008_rr Related Requirement(s)
 * \#276554
 * @subsection MmngrGetConstCpuPtr_TC_09_009_008_pp Prerequisite/Precondition
 * OSAL is initialized.
 * @subsection MmngrGetConstCpuPtr_TC_09_009_008_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrGetConstCpuPtr with abnormal condition and mode is OSAL_MMNGR_ALLOC_MODE_STACK_PROT.
 * - pre-process: open new memory manager
 * - Test09_009_008: buffer has already deallocated.
 * - post-process: close memory manager
 * @subsection MmngrGetConstCpuPtr_TC_09_009_008_tpts Test Procedure/Test Steps
 * -# Call R_OSAL_MmngrOpen with bellow config:
 *  - config.memory_limit                = 4096
 *  - config.max_allowed_allocations     = 1
 *  - config.max_registered_monitors_cbs = 2
 *  - config.mode = OSAL_MMNGR_ALLOC_MODE_STACK_PROT
 * -# Call R_OSAL_MmngrAlloc to allocate a memory buffer.
 * -# Call R_OSAL_MmngrDealloc to deallocate the allocated memory buffer.
 * -# Call R_OSAL_MmngrGetConstCpuPtr with buffer which has already been deallocated.
 * -# Call R_OSAL_MmngrClose to close the memory handle.
 * @subsection MmngrGetConstCpuPtr_TC_09_009_008_ereb Expected Result/Behavior
 * -# The return of R_OSAL_MmngrOpen is OSAL_RETURN_OK.<br>
 * The returned handle is not OSAL_MEMORY_MANAGER_HANDLE_INVALID.
 * -# The return value of R_OSAL_MmngrAlloc is OSAL_RETURN_OK.<br>
 * The return buffer is not OSAL_MEMORY_BUFFER_HANDLE_INVALID
 * -# The return value of R_OSAL_MmngrDealloc is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrGetConstCpuPtr is OSAL_RETURN_HANDLE.
 * -# The return value of R_OSAL_MmngrClose is OSAL_RETURN_OK.
 * @subsection MmngrGetConstCpuPtr_TC_09_009_008_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrGetConstCpuPtr_TC_09_009_008
 */
// [MmngrGetConstCpuPtr_TC_09_009_008]
TEST_F(MemoryApiTest, MmngrGetConstCpuPtr_TC_09_009_008)
{
    const void* cpu_ptr;

    // pre-process: open memory manager
    config.memory_limit                = 4096;
    config.max_allowed_allocations     = 1;
    config.max_registered_monitors_cbs = 2;
    config.mode = OSAL_MMNGR_ALLOC_MODE_STACK_PROT;
    size = 4096;
    alignment = 64;

    EXPECT_EQ(R_OSAL_MmngrOpen(&config, &hndl_mmngr), OSAL_RETURN_OK) <<  "pre-process failed";
    EXPECT_NE(hndl_mmngr,OSAL_MEMORY_MANAGER_HANDLE_INVALID) <<  "pre-process failed";

    // Test09_009_008
    // @brief: abnormal case: buffer has already deallocated
    EXPECT_EQ(R_OSAL_MmngrAlloc(hndl_mmngr, size, alignment, &buffer_obj), OSAL_RETURN_OK);
    EXPECT_NE(buffer_obj,OSAL_MEMORY_BUFFER_HANDLE_INVALID);
    EXPECT_EQ(R_OSAL_MmngrDealloc(hndl_mmngr, buffer_obj), OSAL_RETURN_OK);
    EXPECT_EQ(R_OSAL_MmngrGetConstCpuPtr(buffer_obj, &cpu_ptr ), OSAL_RETURN_HANDLE) << "Test09_009_008 failed";

    // post-process: close memory manager
    EXPECT_EQ(R_OSAL_MmngrClose(hndl_mmngr), OSAL_RETURN_OK) << "post-process failed";
    hndl_mmngr = OSAL_MEMORY_MANAGER_HANDLE_INVALID;
}
// [MmngrGetConstCpuPtr_TC_09_009_008]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrGetConstCpuPtr_TC_09_009_009 MemoryApiTest.MmngrGetConstCpuPtr_TC_09_009_009
 * @subsection MmngrGetConstCpuPtr_TC_09_009_009_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrGetConstCpuPtr_TC_09_009_009_tci Test Case ID
 * MmngrGetConstCpuPtr_S4_A_TC_09_009_009
 * @subsection MmngrGetConstCpuPtr_TC_09_009_009_rr Related Requirement(s)
 * \#276554
 * @subsection MmngrGetConstCpuPtr_TC_09_009_009_pp Prerequisite/Precondition
 * OSAL is initialized.
 * @subsection MmngrGetConstCpuPtr_TC_09_009_009_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrGetConstCpuPtr with abnormal condition and mode is OSAL_MMNGR_ALLOC_MODE_STACK_PROT.
 * - pre-process: open new memory manager
 * - Test09_009_009: buffer is not support to get Const CPU pointer.
 * - post-process: close memory manager
 * @subsection MmngrGetConstCpuPtr_TC_09_009_009_tpts Test Procedure/Test Steps
 * -# Call R_OSAL_MmngrOpen with bellow config:
 *  - config.memory_limit                = 4096
 *  - config.max_allowed_allocations     = 1
 *  - config.max_registered_monitors_cbs = 2
 *  - config.mode = OSAL_MMNGR_ALLOC_MODE_STACK_PROT
 * -# Allocate "tmp_buffer_obj" by using malloc function.
 * -# Call R_OSAL_MmngrAlloc to allocate a memory buffer.
 * -# Store "buffer_obj->p_getConstCpuPtr" to "tmp_buffer_obj->p_getConstCpuPtr".<br>
 * Set "buffer_obj->p_getConstCpuPtr" to NULL. <br>
 * Call R_OSAL_MmngrGetConstCpuPtr with the changed buffer "buffer_obj".<br>
 * Re-assign "tmp_buffer_obj->p_getConstCpuPtr" to "buffer_obj->p_getConstCpuPtr".
 * -# Call R_OSAL_MmngrDealloc to deallocate the original allocated buffer.
 * -# Free buffer pointed by "tmp_buffer_obj"
 * -# Call R_OSAL_MmngrClose to close the memory handle.
 * @subsection MmngrGetConstCpuPtr_TC_09_009_009_ereb Expected Result/Behavior
 * -# The return of R_OSAL_MmngrOpen is OSAL_RETURN_OK.<br>
 * The returned handle is not OSAL_MEMORY_MANAGER_HANDLE_INVALID.
 * -# Memory allocation succeeded (Pointer to buffer != Nullpointer)
 * -# The return value of R_OSAL_MmngrAlloc is OSAL_RETURN_OK.<br>
 * The return buffer is not OSAL_MEMORY_BUFFER_HANDLE_INVALID
 * -# The return value of R_OSAL_MmngrGetConstCpuPtr is OSAL_RETURN_UNSUPPORTED_OPERATION.
 * -# The return value of R_OSAL_MmngrDealloc is OSAL_RETURN_OK.
 * -# Allocated memory free succeeded.
 * -# The return value of R_OSAL_MmngrClose is OSAL_RETURN_OK.
 * @subsection MmngrGetConstCpuPtr_TC_09_009_009_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrGetConstCpuPtr_TC_09_009_009
 */
// [MmngrGetConstCpuPtr_TC_09_009_009]
TEST_F(MemoryApiTest, MmngrGetConstCpuPtr_TC_09_009_009)
{
    osal_memory_buffer_handle_t tmp_buffer_obj;
    const void* cpu_ptr;

    // pre-process: open memory manager
    config.memory_limit                = 4096;
    config.max_allowed_allocations     = 1;
    config.max_registered_monitors_cbs = 2;
    config.mode = OSAL_MMNGR_ALLOC_MODE_STACK_PROT;
    size = 4096;
    alignment = 64;

    EXPECT_EQ(R_OSAL_MmngrOpen(&config, &hndl_mmngr), OSAL_RETURN_OK) <<  "pre-process failed";
    EXPECT_NE(hndl_mmngr,OSAL_MEMORY_MANAGER_HANDLE_INVALID) <<  "pre-process failed";

    // Test09_009_009
    // @brief: abnormal case: buffer_obj->getConstCpuPtr = NULL
    tmp_buffer_obj = (osal_memory_buffer_handle_t)malloc (sizeof(st_osal_memory_buffer_obj));
    EXPECT_EQ(R_OSAL_MmngrAlloc(hndl_mmngr, size, alignment, &buffer_obj), OSAL_RETURN_OK);
    EXPECT_NE(buffer_obj,OSAL_MEMORY_BUFFER_HANDLE_INVALID);
    tmp_buffer_obj->p_getConstCpuPtr = buffer_obj->p_getConstCpuPtr;
    buffer_obj->p_getConstCpuPtr = NULL;
    EXPECT_EQ(R_OSAL_MmngrGetConstCpuPtr(buffer_obj, &cpu_ptr ), OSAL_RETURN_UNSUPPORTED_OPERATION) << "Test09_009_009 failed";
    buffer_obj->p_getConstCpuPtr = tmp_buffer_obj->p_getConstCpuPtr;
    EXPECT_EQ(R_OSAL_MmngrDealloc(hndl_mmngr, buffer_obj), OSAL_RETURN_OK);
    buffer_obj = OSAL_MEMORY_BUFFER_HANDLE_INVALID;
    free(tmp_buffer_obj);

    // post-process: close memory manager
    EXPECT_EQ(R_OSAL_MmngrClose(hndl_mmngr), OSAL_RETURN_OK) << "post-process failed";
    hndl_mmngr = OSAL_MEMORY_MANAGER_HANDLE_INVALID;
}
// [MmngrGetConstCpuPtr_TC_09_009_009]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrGetConstCpuPtr_TC_09_009_010 MemoryApiTest.MmngrGetConstCpuPtr_TC_09_009_010
 * @subsection MmngrGetConstCpuPtr_TC_09_009_010_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrGetConstCpuPtr_TC_09_009_010_tci Test Case ID
 * MmngrGetConstCpuPtr_S0_A_TC_09_009_010
 * @subsection MmngrGetConstCpuPtr_TC_09_009_010_rr Related Requirement(s)
 * \#276554
 * @subsection MmngrGetConstCpuPtr_TC_09_009_010_pp Prerequisite/Precondition
 * OSAL is initialized.
 * @subsection MmngrGetConstCpuPtr_TC_09_009_010_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrGetConstCpuPtr with abnormal condition and mode is OSAL_MMNGR_ALLOC_MODE_STACK_PROT.
 * - pre-process: open new memory manager
 * - Test09_009_010: paramater cpu_ptr is NULL.
 * - post-process: close memory manager
 * @subsection MmngrGetConstCpuPtr_TC_09_009_010_tpts Test Procedure/Test Steps
 * -# Call R_OSAL_MmngrOpen with bellow config:
 *  - config.memory_limit                = 4096
 *  - config.max_allowed_allocations     = 1
 *  - config.max_registered_monitors_cbs = 2
 *  - config.mode = OSAL_MMNGR_ALLOC_MODE_STACK_PROT
 * -# Call R_OSAL_MmngrAlloc to allocate a memory buffer.
 * -# Call R_OSAL_MmngrGetConstCpuPtr with cpu_ptr is NULL.
 * -# Call R_OSAL_MmngrDealloc to deallocate the original allocated buffer.
 * -# Call R_OSAL_MmngrClose to close the memory handle.
 * @subsection MmngrGetConstCpuPtr_TC_09_009_010_ereb Expected Result/Behavior
 * -# The return of R_OSAL_MmngrOpen is OSAL_RETURN_OK.<br>
 * The returned handle is not OSAL_MEMORY_MANAGER_HANDLE_INVALID.
 * -# The return value of R_OSAL_MmngrAlloc is OSAL_RETURN_OK.<br>
 * The return buffer is not OSAL_MEMORY_BUFFER_HANDLE_INVALID
 * -# The return value of R_OSAL_MmngrGetConstCpuPtr is OSAL_RETURN_PAR.
 * -# The return value of R_OSAL_MmngrDealloc is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrClose is OSAL_RETURN_OK..
 * @subsection MmngrGetConstCpuPtr_TC_09_009_010_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrGetConstCpuPtr_TC_09_009_010
 */
// [MmngrGetConstCpuPtr_TC_09_009_010]
TEST_F(MemoryApiTest, MmngrGetConstCpuPtr_TC_09_009_010)
{
    const void** pp_const_cpu_ptr = NULL;

    // pre-process: open memory manager
    config.memory_limit                = 4096;
    config.max_allowed_allocations     = 1;
    config.max_registered_monitors_cbs = 2;
    config.mode = OSAL_MMNGR_ALLOC_MODE_STACK_PROT;
    size = 4096;
    alignment = 64;

    EXPECT_EQ(R_OSAL_MmngrOpen(&config, &hndl_mmngr), OSAL_RETURN_OK) <<  "pre-process failed";
    EXPECT_NE(hndl_mmngr,OSAL_MEMORY_MANAGER_HANDLE_INVALID) <<  "pre-process failed";

    // Test09_009_010
    // @brief: abnormal case: cpu_ptr = NULL
    EXPECT_EQ(R_OSAL_MmngrAlloc(hndl_mmngr, size, alignment, &buffer_obj), OSAL_RETURN_OK);
    EXPECT_NE(buffer_obj,OSAL_MEMORY_BUFFER_HANDLE_INVALID);
    EXPECT_EQ(R_OSAL_MmngrGetConstCpuPtr(buffer_obj, pp_const_cpu_ptr), OSAL_RETURN_PAR) << "Test09_009_010 failed";
    EXPECT_EQ(R_OSAL_MmngrDealloc(hndl_mmngr, buffer_obj), OSAL_RETURN_OK);
    buffer_obj = OSAL_MEMORY_BUFFER_HANDLE_INVALID;

    // post-process: close memory manager
    EXPECT_EQ(R_OSAL_MmngrClose(hndl_mmngr), OSAL_RETURN_OK) << "post-process failed";
    hndl_mmngr = OSAL_MEMORY_MANAGER_HANDLE_INVALID;
}
// [MmngrGetConstCpuPtr_TC_09_009_010]
#endif

#ifndef SKIP_MEMORY_FLUSH_INVALIDATE
/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrGetConstCpuPtr_TC_09_009_011 MemoryApiTest.MmngrGetConstCpuPtr_TC_09_009_011
 * @subsection MmngrGetConstCpuPtr_TC_09_009_011_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrGetConstCpuPtr_TC_09_009_011_tci Test Case ID
 * MmngrGetConstCpuPtr_S4_A_TC_09_009_011
 * @subsection MmngrGetConstCpuPtr_TC_09_009_011_rr Related Requirement(s)
 * \#276554
 * @subsection MmngrGetConstCpuPtr_TC_09_009_011_pp Prerequisite/Precondition
 * OSAL is initialized.
 * @subsection MmngrGetConstCpuPtr_TC_09_009_011_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrGetConstCpuPtr with abnormal condition in OSAL_MMNGR_ALLOC_MODE_STACK mode.
 * - pre-process: open memory manager
 * - Test09_009_011: "buffer_obj->p_ptr_self" is invalid.
 * - post-process: close memory manager
 * @subsection MmngrGetConstCpuPtr_TC_09_009_011_tpts Test Procedure/Test Steps
 * -# Call R_OSAL_MmngrGetOsalMaxConfig to get the valid config then set config mode to OSAL_MMNGR_ALLOC_MODE_STACK.
 * -# Call R_OSAL_MmngrOpen with valid parameter and above config.
 * -# Call R_OSAL_MmngrAlloc with valid parameter
 * -# Call R_OSAL_MmngrGetConstCpuPtr with an invalid buffer_obj->p_ptr_self:
 *      - buffer_obj with p_ptr_self value changed to p_ptr_self_ng
 *      - "p_ptr_self_ng" is allocated by malloc function.
 * -# Deallocate buffer_obj by using R_OSAL_MmngrDeallocate.
 *      - buffer_obj with valid p_ptr_self value
 * -# Call R_OSAL_MmngrClose to close the memory manager.
 * @subsection MmngrGetConstCpuPtr_TC_09_009_011_ereb Expected Result/Behavior
 * -# The return value of R_OSAL_MmngrGetOsalMaxConfig is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrOpen is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrAlloc is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrGetConstCpuPtr is OSAL_RETURN_HANDLE.
 * -# The return value of R_OSAL_MmngrDeallocate is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrClose is OSAL_RETURN_OK.
 * @subsection MmngrGetConstCpuPtr_TC_09_009_011_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrGetConstCpuPtr_TC_09_009_011
 */
// [MmngrGetConstCpuPtr_TC_09_009_011]
TEST_F(MemoryApiTest, MmngrGetConstCpuPtr_TC_09_009_011)
{
    void* ptr_self_bak;
    void* ptr_self_ng;
    const void* cpu_ptr;

    // Test09_009_011
    // @brief: abnormal case: handle->p_ptr_self is invalid
    EXPECT_EQ(R_OSAL_MmngrGetOsalMaxConfig(&config), OSAL_RETURN_OK);
    config.mode = OSAL_MMNGR_ALLOC_MODE_STACK;
    EXPECT_EQ(R_OSAL_MmngrOpen(&config, &hndl_mmngr), OSAL_RETURN_OK);
    size = 64;
    alignment = 64;
    EXPECT_EQ(R_OSAL_MmngrAlloc(hndl_mmngr, size, alignment, &buffer_obj), OSAL_RETURN_OK);
    ptr_self_bak = buffer_obj->p_ptr_self;
    ptr_self_ng = malloc(0x100);
    memset(ptr_self_ng, 0x0, 0x100);
    buffer_obj->p_ptr_self = ptr_self_ng;
    EXPECT_EQ(R_OSAL_MmngrGetConstCpuPtr(buffer_obj, &cpu_ptr), OSAL_RETURN_HANDLE) << "Test09_009_011 failed";
    free(ptr_self_ng);
    buffer_obj->p_ptr_self = ptr_self_bak;
    EXPECT_EQ(R_OSAL_MmngrDealloc(hndl_mmngr, buffer_obj), OSAL_RETURN_OK) << "Test09_009_011 failed";
    EXPECT_EQ(R_OSAL_MmngrClose(hndl_mmngr), OSAL_RETURN_OK) << "Test09_009_011 failed";
    hndl_mmngr = OSAL_MEMORY_MANAGER_HANDLE_INVALID;
    buffer_obj = OSAL_MEMORY_BUFFER_HANDLE_INVALID;
}
// [MmngrGetConstCpuPtr_TC_09_009_011]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrGetConstCpuPtr_TC_09_009_012 MemoryApiTest.MmngrGetConstCpuPtr_TC_09_009_012
 * @subsection MmngrGetConstCpuPtr_TC_09_009_012_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrGetConstCpuPtr_TC_09_009_012_tci Test Case ID
 * MmngrGetConstCpuPtr_S4_A_TC_09_009_012
 * @subsection MmngrGetConstCpuPtr_TC_09_009_012_rr Related Requirement(s)
 * \#276554
 * @subsection MmngrGetConstCpuPtr_TC_09_009_012_pp Prerequisite/Precondition
 * OSAL is initialized.
 * @subsection MmngrGetConstCpuPtr_TC_09_009_012_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrGetConstCpuPtr with abnormal condition in OSAL_MMNGR_ALLOC_MODE_STACK_PROT mode.
 * - pre-process: open memory manager
 * - Test09_009_012: "buffer_obj->p_ptr_self" is invalid.
 * - post-process: close memory manager
 * @subsection MmngrGetConstCpuPtr_TC_09_009_012_tpts Test Procedure/Test Steps
 * -# Call R_OSAL_MmngrGetOsalMaxConfig to get the valid config then set config mode to OSAL_MMNGR_ALLOC_MODE_STACK_PROT.
 * -# Call R_OSAL_MmngrOpen with valid parameter and above config.
 * -# Call R_OSAL_MmngrAlloc with valid parameter
 * -# Call R_OSAL_MmngrGetConstCpuPtr with an invalid buffer_obj->p_ptr_self:
 *      - buffer_obj with p_ptr_self value changed to p_ptr_self_ng
 *      - "p_ptr_self_ng" is allocated by malloc function.
 * -# Deallocate buffer_obj by using R_OSAL_MmngrDeallocate.
 *      - buffer_obj with valid p_ptr_self value
 * -# Call R_OSAL_MmngrClose to close the memory manager.
 * @subsection MmngrGetConstCpuPtr_TC_09_009_012_ereb Expected Result/Behavior
 * -# The return value of R_OSAL_MmngrGetOsalMaxConfig is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrOpen is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrAlloc is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrGetConstCpuPtr is OSAL_RETURN_HANDLE.
 * -# The return value of R_OSAL_MmngrDeallocate is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrClose is OSAL_RETURN_OK.
 * @subsection MmngrGetConstCpuPtr_TC_09_009_012_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrGetConstCpuPtr_TC_09_009_012
 */
// [MmngrGetConstCpuPtr_TC_09_009_012]
TEST_F(MemoryApiTest, MmngrGetConstCpuPtr_TC_09_009_012)
{
    void* ptr_self_bak;
    void* ptr_self_ng;
    const void* cpu_ptr;

    // Test09_009_012
    // @brief: abnormal case: handle->p_ptr_self is invalid
    EXPECT_EQ(R_OSAL_MmngrGetOsalMaxConfig(&config), OSAL_RETURN_OK);
    config.mode = OSAL_MMNGR_ALLOC_MODE_STACK_PROT;
    EXPECT_EQ(R_OSAL_MmngrOpen(&config, &hndl_mmngr), OSAL_RETURN_OK);
    size = 64;
    alignment = 64;
    EXPECT_EQ(R_OSAL_MmngrAlloc(hndl_mmngr, size, alignment, &buffer_obj), OSAL_RETURN_OK);
    ptr_self_bak = buffer_obj->p_ptr_self;
    ptr_self_ng = malloc(0x100);
    memset(ptr_self_ng, 0x0, 0x100);
    buffer_obj->p_ptr_self = ptr_self_ng;
    EXPECT_EQ(R_OSAL_MmngrGetConstCpuPtr(buffer_obj, &cpu_ptr), OSAL_RETURN_HANDLE) << "Test09_009_012 failed";
    free(ptr_self_ng);
    buffer_obj->p_ptr_self = ptr_self_bak;
    EXPECT_EQ(R_OSAL_MmngrDealloc(hndl_mmngr, buffer_obj), OSAL_RETURN_OK) << "Test09_009_012 failed";
    EXPECT_EQ(R_OSAL_MmngrClose(hndl_mmngr), OSAL_RETURN_OK) << "Test09_009_012 failed";
    hndl_mmngr = OSAL_MEMORY_MANAGER_HANDLE_INVALID;
    buffer_obj = OSAL_MEMORY_BUFFER_HANDLE_INVALID;
}
// [MmngrGetConstCpuPtr_TC_09_009_012]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrGetConstCpuPtr_TC_09_009_013 MemoryApiTest.MmngrGetConstCpuPtr_TC_09_009_013
 * @subsection MmngrGetConstCpuPtr_TC_09_009_013_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrGetConstCpuPtr_TC_09_009_013_tci Test Case ID
 * MmngrGetConstCpuPtr_S4_A_TC_09_009_013
 * @subsection MmngrGetConstCpuPtr_TC_09_009_013_rr Related Requirement(s)
 * \#276554
 * @subsection MmngrGetConstCpuPtr_TC_09_009_013_pp Prerequisite/Precondition
 * OSAL is initialized.
 * @subsection MmngrGetConstCpuPtr_TC_09_009_013_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrGetConstCpuPtr with abnormal condition in OSAL_MMNGR_ALLOC_MODE_FREE_LIST mode.
 * - pre-process: open memory manager
 * - Test09_009_013: "buffer_obj->p_ptr_self" is invalid.
 * - post-process: close memory manager
 * @subsection MmngrGetConstCpuPtr_TC_09_009_013_tpts Test Procedure/Test Steps
 * -# Call R_OSAL_MmngrGetOsalMaxConfig to get the valid config then set config mode to OSAL_MMNGR_ALLOC_MODE_FREE_LIST.
 * -# Call R_OSAL_MmngrOpen with valid parameter and above config.
 * -# Call R_OSAL_MmngrAlloc with valid parameter
 * -# Call R_OSAL_MmngrGetConstCpuPtr with an invalid buffer_obj->p_ptr_self:
 *      - buffer_obj with p_ptr_self value changed to p_ptr_self_ng
 *      - "p_ptr_self_ng" is allocated by malloc function.
 * -# Deallocate buffer_obj by using R_OSAL_MmngrDeallocate.
 *      - buffer_obj with valid p_ptr_self value
 * -# Call R_OSAL_MmngrClose to close the memory manager.
 * @subsection MmngrGetConstCpuPtr_TC_09_009_013_ereb Expected Result/Behavior
 * -# The return value of R_OSAL_MmngrGetOsalMaxConfig is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrOpen is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrAlloc is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrGetConstCpuPtr is OSAL_RETURN_HANDLE.
 * -# The return value of R_OSAL_MmngrDeallocate is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrClose is OSAL_RETURN_OK.
 * @subsection MmngrGetConstCpuPtr_TC_09_009_013_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrGetConstCpuPtr_TC_09_009_013
 */
// [MmngrGetConstCpuPtr_TC_09_009_013]
TEST_F(MemoryApiTest, MmngrGetConstCpuPtr_TC_09_009_013)
{
    void* ptr_self_bak;
    void* ptr_self_ng;
    const void* cpu_ptr;

    // Test09_009_013
    // @brief: abnormal case: handle->p_ptr_self is invalid
    EXPECT_EQ(R_OSAL_MmngrGetOsalMaxConfig(&config), OSAL_RETURN_OK);
    config.mode = OSAL_MMNGR_ALLOC_MODE_FREE_LIST;
    EXPECT_EQ(R_OSAL_MmngrOpen(&config, &hndl_mmngr), OSAL_RETURN_OK);
    size = 64;
    alignment = 64;
    EXPECT_EQ(R_OSAL_MmngrAlloc(hndl_mmngr, size, alignment, &buffer_obj), OSAL_RETURN_OK);
    ptr_self_bak = buffer_obj->p_ptr_self;
    ptr_self_ng = malloc(0x100);
    memset(ptr_self_ng, 0x0, 0x100);
    buffer_obj->p_ptr_self = ptr_self_ng;
    EXPECT_EQ(R_OSAL_MmngrGetConstCpuPtr(buffer_obj, &cpu_ptr), OSAL_RETURN_HANDLE) << "Test09_009_013 failed";
    free(ptr_self_ng);
    buffer_obj->p_ptr_self = ptr_self_bak;
    EXPECT_EQ(R_OSAL_MmngrDealloc(hndl_mmngr, buffer_obj), OSAL_RETURN_OK) << "Test09_009_013 failed";
    EXPECT_EQ(R_OSAL_MmngrClose(hndl_mmngr), OSAL_RETURN_OK) << "Test09_009_013 failed";
    hndl_mmngr = OSAL_MEMORY_MANAGER_HANDLE_INVALID;
    buffer_obj = OSAL_MEMORY_BUFFER_HANDLE_INVALID;
}
// [MmngrGetConstCpuPtr_TC_09_009_013]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrGetConstCpuPtr_TC_09_009_014 MemoryApiTest.MmngrGetConstCpuPtr_TC_09_009_014
 * @subsection MmngrGetConstCpuPtr_TC_09_009_014_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrGetConstCpuPtr_TC_09_009_014_tci Test Case ID
 * MmngrGetConstCpuPtr_S4_A_TC_09_009_014
 * @subsection MmngrGetConstCpuPtr_TC_09_009_014_rr Related Requirement(s)
 * \#276554
 * @subsection MmngrGetConstCpuPtr_TC_09_009_014_pp Prerequisite/Precondition
 * OSAL is initialized.
 * @subsection MmngrGetConstCpuPtr_TC_09_009_014_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrGetConstCpuPtr with abnormal condition in OSAL_MMNGR_ALLOC_MODE_FREE_LIST_PROT mode.
 * - pre-process: open memory manager
 * - Test09_009_014: "buffer_obj->p_ptr_self" is invalid.
 * - post-process: close memory manager
 * @subsection MmngrGetConstCpuPtr_TC_09_009_014_tpts Test Procedure/Test Steps
 * -# Call R_OSAL_MmngrGetOsalMaxConfig to get the valid config then set config mode to OSAL_MMNGR_ALLOC_MODE_FREE_LIST_PROT.
 * -# Call R_OSAL_MmngrOpen with valid parameter and above config.
 * -# Call R_OSAL_MmngrAlloc with valid parameter
 * -# Call R_OSAL_MmngrGetConstCpuPtr with an invalid buffer_obj->p_ptr_self:
 *      - buffer_obj with p_ptr_self value changed to p_ptr_self_ng
 *      - "p_ptr_self_ng" is allocated by malloc function.
 * -# Deallocate buffer_obj by using R_OSAL_MmngrDeallocate.
 *      - buffer_obj with valid p_ptr_self value
 * -# Call R_OSAL_MmngrClose to close the memory manager.
 * @subsection MmngrGetConstCpuPtr_TC_09_009_014_ereb Expected Result/Behavior
 * -# The return value of R_OSAL_MmngrGetOsalMaxConfig is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrOpen is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrAlloc is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrGetConstCpuPtr is OSAL_RETURN_HANDLE.
 * -# The return value of R_OSAL_MmngrDeallocate is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrClose is OSAL_RETURN_OK.
 * @subsection MmngrGetConstCpuPtr_TC_09_009_014_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrGetConstCpuPtr_TC_09_009_014
 */
// [MmngrGetConstCpuPtr_TC_09_009_014]
TEST_F(MemoryApiTest, MmngrGetConstCpuPtr_TC_09_009_014)
{
    void* ptr_self_bak;
    void* ptr_self_ng;
    const void* cpu_ptr;

    // Test09_009_014
    // @brief: abnormal case: handle->p_ptr_self is invalid
    EXPECT_EQ(R_OSAL_MmngrGetOsalMaxConfig(&config), OSAL_RETURN_OK);
    config.mode = OSAL_MMNGR_ALLOC_MODE_FREE_LIST_PROT;
    EXPECT_EQ(R_OSAL_MmngrOpen(&config, &hndl_mmngr), OSAL_RETURN_OK);
    size = 64;
    alignment = 64;
    EXPECT_EQ(R_OSAL_MmngrAlloc(hndl_mmngr, size, alignment, &buffer_obj), OSAL_RETURN_OK);
    ptr_self_bak = buffer_obj->p_ptr_self;
    ptr_self_ng = malloc(0x100);
    memset(ptr_self_ng, 0x0, 0x100);
    buffer_obj->p_ptr_self = ptr_self_ng;
    EXPECT_EQ(R_OSAL_MmngrGetConstCpuPtr(buffer_obj, &cpu_ptr), OSAL_RETURN_HANDLE) << "Test09_009_014 failed";
    free(ptr_self_ng);
    buffer_obj->p_ptr_self = ptr_self_bak;
    EXPECT_EQ(R_OSAL_MmngrDealloc(hndl_mmngr, buffer_obj), OSAL_RETURN_OK) << "Test09_009_014 failed";
    EXPECT_EQ(R_OSAL_MmngrClose(hndl_mmngr), OSAL_RETURN_OK) << "Test09_009_014 failed";
    hndl_mmngr = OSAL_MEMORY_MANAGER_HANDLE_INVALID;
    buffer_obj = OSAL_MEMORY_BUFFER_HANDLE_INVALID;
}
// [MmngrGetConstCpuPtr_TC_09_009_014]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrGetConstCpuPtr_TC_09_009_015 MemoryApiTest.MmngrGetConstCpuPtr_TC_09_009_015
 * @subsection MmngrGetConstCpuPtr_TC_09_009_015_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrGetConstCpuPtr_TC_09_009_015_tci Test Case ID
 * MmngrGetConstCpuPtr_S2_A_TC_09_009_015
 * @subsection MmngrGetConstCpuPtr_TC_09_009_015_rr Related Requirement(s)
 * \#276554
 * @subsection MmngrGetConstCpuPtr_TC_09_009_015_pp Prerequisite/Precondition
 * OSAL is initialized.
 * @subsection MmngrGetConstCpuPtr_TC_09_009_015_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrGetConstCpuPtr with abnormal condition and mode is OSAL_MMNGR_ALLOC_MODE_FREE_LIST.
 * - pre-process: open new memory manager
 * - Test09_009_015: buffer object has already been deallocated.
 * - post-process: close memory manager
 * @subsection MmngrGetConstCpuPtr_TC_09_009_015_tpts Test Procedure/Test Steps
 * -# Call R_OSAL_MmngrOpen with bellow config:
 *  - config.memory_limit                = 4096
 *  - config.max_allowed_allocations     = 1
 *  - config.max_registered_monitors_cbs = 2
 *  - config.mode = OSAL_MMNGR_ALLOC_MODE_FREE_LIST
 * -# Call R_OSAL_MmngrAlloc to allocate a memory buffer.
 * -# Call R_OSAL_MmngrDealloc to deallocate the allocated memory buffer.
 * -# Call R_OSAL_MmngrGetConstCpuPtr with buffer which has already been deallocated.
 * -# Call R_OSAL_MmngrClose to close the memory handle.
 * @subsection MmngrGetConstCpuPtr_TC_09_009_015_ereb Expected Result/Behavior
 * -# The return of R_OSAL_MmngrOpen is OSAL_RETURN_OK.<br>
 * The returned handle is not OSAL_MEMORY_MANAGER_HANDLE_INVALID.
 * -# The return value of R_OSAL_MmngrAlloc is OSAL_RETURN_OK.<br>
 * The return buffer is not OSAL_MEMORY_BUFFER_HANDLE_INVALID
 * -# The return value of R_OSAL_MmngrDealloc is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrGetConstCpuPtr is OSAL_RETURN_HANDLE.
 * -# The return value of R_OSAL_MmngrClose is OSAL_RETURN_OK.
 * @subsection MmngrGetConstCpuPtr_TC_09_009_015_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrGetConstCpuPtr_TC_09_009_015
 */
// [MmngrGetConstCpuPtr_TC_09_009_015]
TEST_F(MemoryApiTest, MmngrGetConstCpuPtr_TC_09_009_015)
{
    const void* cpu_ptr;

    // Test09_009_015
    // @brief: abnormal case: buffer has already been deallocated
    config.memory_limit                = 4096;
    config.max_allowed_allocations     = 1;
    config.max_registered_monitors_cbs = 2;
    config.mode = OSAL_MMNGR_ALLOC_MODE_FREE_LIST;
    size = 4096;
    alignment = 64;
    EXPECT_EQ(R_OSAL_MmngrOpen(&config, &hndl_mmngr), OSAL_RETURN_OK) << "Test09_009_015 failed";
    EXPECT_NE(hndl_mmngr,OSAL_MEMORY_MANAGER_HANDLE_INVALID) << "Test09_009_015 failed";
    EXPECT_EQ(R_OSAL_MmngrAlloc(hndl_mmngr, size, alignment, &buffer_obj), OSAL_RETURN_OK) << "Test09_009_015 failed";
    EXPECT_NE(buffer_obj,OSAL_MEMORY_BUFFER_HANDLE_INVALID) << "Test09_009_015 failed";
    EXPECT_EQ(R_OSAL_MmngrDealloc(hndl_mmngr, buffer_obj), OSAL_RETURN_OK) << "Test09_009_015 failed";
    EXPECT_EQ(R_OSAL_MmngrGetConstCpuPtr(buffer_obj, &cpu_ptr ), OSAL_RETURN_HANDLE) << "Test09_009_015 failed";
    EXPECT_EQ(R_OSAL_MmngrClose(hndl_mmngr), OSAL_RETURN_OK) << "Test09_009_015 failed";
    hndl_mmngr = OSAL_MEMORY_MANAGER_HANDLE_INVALID;
}
// [MmngrGetConstCpuPtr_TC_09_009_015]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrGetConstCpuPtr_TC_09_009_016 MemoryApiTest.MmngrGetConstCpuPtr_TC_09_009_016
 * @subsection MmngrGetConstCpuPtr_TC_09_009_016_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrGetConstCpuPtr_TC_09_009_016_tci Test Case ID
 * MmngrGetConstCpuPtr_S2_A_TC_09_009_016
 * @subsection MmngrGetConstCpuPtr_TC_09_009_016_rr Related Requirement(s)
 * \#276554
 * @subsection MmngrGetConstCpuPtr_TC_09_009_016_pp Prerequisite/Precondition
 * OSAL is initialized.
 * @subsection MmngrGetConstCpuPtr_TC_09_009_016_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrGetConstCpuPtr with abnormal condition and mode is OSAL_MMNGR_ALLOC_MODE_FREE_LIST_PROT.
 * - pre-process: open new memory manager
 * - Test09_009_016: buffer object has already been deallocated.
 * - post-process: close memory manager
 * @subsection MmngrGetConstCpuPtr_TC_09_009_016_tpts Test Procedure/Test Steps
 * -# Call R_OSAL_MmngrOpen with bellow config:
 *  - config.memory_limit                = 4096
 *  - config.max_allowed_allocations     = 1
 *  - config.max_registered_monitors_cbs = 2
 *  - config.mode = OSAL_MMNGR_ALLOC_MODE_FREE_LIST_PROT
 * -# Call R_OSAL_MmngrAlloc to allocate a memory buffer.
 * -# Call R_OSAL_MmngrDealloc to deallocate the allocated memory buffer.
 * -# Call R_OSAL_MmngrGetConstCpuPtr with buffer which has already been deallocated.
 * -# Call R_OSAL_MmngrClose to close the memory handle.
 * @subsection MmngrGetConstCpuPtr_TC_09_009_016_ereb Expected Result/Behavior
 * -# The return of R_OSAL_MmngrOpen is OSAL_RETURN_OK.<br>
 * The returned handle is not OSAL_MEMORY_MANAGER_HANDLE_INVALID.
 * -# The return value of R_OSAL_MmngrAlloc is OSAL_RETURN_OK.<br>
 * The return buffer is not OSAL_MEMORY_BUFFER_HANDLE_INVALID
 * -# The return value of R_OSAL_MmngrDealloc is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrGetConstCpuPtr is OSAL_RETURN_HANDLE.
 * -# The return value of R_OSAL_MmngrClose is OSAL_RETURN_OK..
 * @subsection MmngrGetConstCpuPtr_TC_09_009_016_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrGetConstCpuPtr_TC_09_009_016
 */
// [MmngrGetConstCpuPtr_TC_09_009_016]
TEST_F(MemoryApiTest, MmngrGetConstCpuPtr_TC_09_009_016)
{
    const void* cpu_ptr;

    // Test09_009_016
    // @brief: abnormal case: buffer has already been deallocated
    config.memory_limit                = 4096;
    config.max_allowed_allocations     = 1;
    config.max_registered_monitors_cbs = 2;
    config.mode = OSAL_MMNGR_ALLOC_MODE_FREE_LIST_PROT;
    size = 4096;
    alignment = 64;
    EXPECT_EQ(R_OSAL_MmngrOpen(&config, &hndl_mmngr), OSAL_RETURN_OK) << "Test09_009_016 failed";
    EXPECT_NE(hndl_mmngr,OSAL_MEMORY_MANAGER_HANDLE_INVALID) << "Test09_009_016 failed";
    EXPECT_EQ(R_OSAL_MmngrAlloc(hndl_mmngr, size, alignment, &buffer_obj), OSAL_RETURN_OK) << "Test09_009_016 failed";
    EXPECT_NE(buffer_obj,OSAL_MEMORY_BUFFER_HANDLE_INVALID) << "Test09_009_016 failed";
    EXPECT_EQ(R_OSAL_MmngrDealloc(hndl_mmngr, buffer_obj), OSAL_RETURN_OK) << "Test09_009_016 failed";
    EXPECT_EQ(R_OSAL_MmngrGetConstCpuPtr(buffer_obj, &cpu_ptr ), OSAL_RETURN_HANDLE) << "Test09_009_016 failed";
    EXPECT_EQ(R_OSAL_MmngrClose(hndl_mmngr), OSAL_RETURN_OK) << "Test09_009_016 failed";
    hndl_mmngr = OSAL_MEMORY_MANAGER_HANDLE_INVALID;
}
// [MmngrGetConstCpuPtr_TC_09_009_016]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrGetConstCpuPtr_TC_09_009_017 MemoryApiTest.MmngrGetConstCpuPtr_TC_09_009_017
 * @subsection MmngrGetConstCpuPtr_TC_09_009_017_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrGetConstCpuPtr_TC_09_009_017_tci Test Case ID
 * MmngrGetConstCpuPtr_S4_A_TC_09_009_017
 * @subsection MmngrGetConstCpuPtr_TC_09_009_017_rr Related Requirement(s)
 * \#276554
 * @subsection MmngrGetConstCpuPtr_TC_09_009_017_pp Prerequisite/Precondition
 * OSAL is initialized.
 * @subsection MmngrGetConstCpuPtr_TC_09_009_017_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrGetConstCpuPtr with abnormal condition and mode is OSAL_MMNGR_ALLOC_MODE_STACK.
 * - pre-process: open new memory manager
 * - Test09_009_017: buffer_obj->mmngr_owner_hndl->p_ptr_self is invalid (NULL)
 * - post-process: close memory manager
 * @subsection MmngrGetConstCpuPtr_TC_09_009_017_tpts Test Procedure/Test Steps
 * -# Call R_OSAL_MmngrOpen with bellow config:
 *  - config.memory_limit                = 4096
 *  - config.max_allowed_allocations     = 1
 *  - config.max_registered_monitors_cbs = 2
 *  - config.mode = OSAL_MMNGR_ALLOC_MODE_STACK
 * -# Call R_OSAL_MmngrAlloc to allocate a memory buffer.
 * -# Call R_OSAL_MmngrGetConstCpuPtr with buffer which buffer_obj->mmngr_owner_hndl->p_ptr_self is invalid (NULL)
 * -# Call R_OSAL_MmngrDealloc to deallocate the allocated memory buffer.
 * -# Call R_OSAL_MmngrClose to close the memory handle.
 * @subsection MmngrGetConstCpuPtr_TC_09_009_017_ereb Expected Result/Behavior
 * -# The return of R_OSAL_MmngrOpen is OSAL_RETURN_OK.<br>
 * The returned handle is not OSAL_MEMORY_MANAGER_HANDLE_INVALID.
 * -# The return value of R_OSAL_MmngrAlloc is OSAL_RETURN_OK.<br>
 * The return buffer is not OSAL_MEMORY_BUFFER_HANDLE_INVALID
 * -# The return value of R_OSAL_MmngrGetConstCpuPtr is OSAL_RETURN_HANDLE.
 * -# The return value of R_OSAL_MmngrDealloc is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrClose is OSAL_RETURN_OK.
 * @subsection MmngrGetConstCpuPtr_TC_09_009_017_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrGetConstCpuPtr_TC_09_009_017
 */
// [MmngrGetConstCpuPtr_TC_09_009_017]
TEST_F(MemoryApiTest, MmngrGetConstCpuPtr_TC_09_009_017)
{
    const void* cpu_ptr;
    void* bk_ptr_self;

    // Test09_009_017
    // @brief: abnormal case: buffer_obj->mmngr_owner_hndl->p_ptr_self is invalid (NULL)
    config.memory_limit                = 4096;
    config.max_allowed_allocations     = 1;
    config.max_registered_monitors_cbs = 2;
    config.mode = OSAL_MMNGR_ALLOC_MODE_STACK;
    size = 4096;
    alignment = 64;
    EXPECT_EQ(R_OSAL_MmngrOpen(&config, &hndl_mmngr), OSAL_RETURN_OK) << "Test09_009_017 failed";
    EXPECT_NE(hndl_mmngr,OSAL_MEMORY_MANAGER_HANDLE_INVALID) << "Test09_009_017 failed";
    EXPECT_EQ(R_OSAL_MmngrAlloc(hndl_mmngr, size, alignment, &buffer_obj), OSAL_RETURN_OK) << "Test09_009_017 failed";
    EXPECT_NE(buffer_obj,OSAL_MEMORY_BUFFER_HANDLE_INVALID) << "Test09_009_017 failed";
    bk_ptr_self = buffer_obj->mmngr_owner_hndl->p_ptr_self;
    buffer_obj->mmngr_owner_hndl->p_ptr_self = NULL;
    EXPECT_EQ(R_OSAL_MmngrGetConstCpuPtr(buffer_obj, &cpu_ptr ), OSAL_RETURN_HANDLE) << "Test09_009_017 failed";
    buffer_obj->mmngr_owner_hndl->p_ptr_self = bk_ptr_self;
    EXPECT_EQ(R_OSAL_MmngrDealloc(hndl_mmngr, buffer_obj), OSAL_RETURN_OK) << "Test09_009_017 failed";
    EXPECT_EQ(R_OSAL_MmngrClose(hndl_mmngr), OSAL_RETURN_OK) << "Test09_009_017 failed";
    hndl_mmngr = OSAL_MEMORY_MANAGER_HANDLE_INVALID;
}
// [MmngrGetConstCpuPtr_TC_09_009_017]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrGetConstCpuPtr_TC_09_009_018 MemoryApiTest.MmngrGetConstCpuPtr_TC_09_009_018
 * @subsection MmngrGetConstCpuPtr_TC_09_009_018_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrGetConstCpuPtr_TC_09_009_018_tci Test Case ID
 * MmngrGetConstCpuPtr_S4_A_TC_09_009_018
 * @subsection MmngrGetConstCpuPtr_TC_09_009_018_rr Related Requirement(s)
 * \#276554
 * @subsection MmngrGetConstCpuPtr_TC_09_009_018_pp Prerequisite/Precondition
 * OSAL is initialized.
 * @subsection MmngrGetConstCpuPtr_TC_09_009_018_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrGetConstCpuPtr with abnormal condition and mode is OSAL_MMNGR_ALLOC_MODE_STACK_PROT.
 * - pre-process: open new memory manager
 * - Test09_009_018: buffer_obj->mmngr_owner_hndl->p_ptr_self is invalid (NULL)
 * - post-process: close memory manager
 * @subsection MmngrGetConstCpuPtr_TC_09_009_018_tpts Test Procedure/Test Steps
 * -# Call R_OSAL_MmngrOpen with bellow config:
 *  - config.memory_limit                = 4096
 *  - config.max_allowed_allocations     = 1
 *  - config.max_registered_monitors_cbs = 2
 *  - config.mode = OSAL_MMNGR_ALLOC_MODE_STACK_PROT
 * -# Call R_OSAL_MmngrAlloc to allocate a memory buffer.
 * -# Call R_OSAL_MmngrGetConstCpuPtr with buffer which buffer_obj->mmngr_owner_hndl->p_ptr_self is invalid (NULL)
 * -# Call R_OSAL_MmngrDealloc to deallocate the allocated memory buffer.
 * -# Call R_OSAL_MmngrClose to close the memory handle.
 * @subsection MmngrGetConstCpuPtr_TC_09_009_018_ereb Expected Result/Behavior
 * -# The return of R_OSAL_MmngrOpen is OSAL_RETURN_OK.<br>
 * The returned handle is not OSAL_MEMORY_MANAGER_HANDLE_INVALID.
 * -# The return value of R_OSAL_MmngrAlloc is OSAL_RETURN_OK.<br>
 * The return buffer is not OSAL_MEMORY_BUFFER_HANDLE_INVALID
 * -# The return value of R_OSAL_MmngrGetConstCpuPtr is OSAL_RETURN_HANDLE.
 * -# The return value of R_OSAL_MmngrDealloc is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrClose is OSAL_RETURN_OK.
 * @subsection MmngrGetConstCpuPtr_TC_09_009_018_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrGetConstCpuPtr_TC_09_009_018
 */
// [MmngrGetConstCpuPtr_TC_09_009_018]
TEST_F(MemoryApiTest, MmngrGetConstCpuPtr_TC_09_009_018)
{
    const void* cpu_ptr;
    void* bk_ptr_self;

    // Test09_009_018
    // @brief: abnormal case: buffer_obj->mmngr_owner_hndl->p_ptr_self is invalid (NULL)
    config.memory_limit                = 4096;
    config.max_allowed_allocations     = 1;
    config.max_registered_monitors_cbs = 2;
    config.mode = OSAL_MMNGR_ALLOC_MODE_STACK_PROT;
    size = 4096;
    alignment = 64;
    EXPECT_EQ(R_OSAL_MmngrOpen(&config, &hndl_mmngr), OSAL_RETURN_OK) << "Test09_009_018 failed";
    EXPECT_NE(hndl_mmngr,OSAL_MEMORY_MANAGER_HANDLE_INVALID) << "Test09_009_018 failed";
    EXPECT_EQ(R_OSAL_MmngrAlloc(hndl_mmngr, size, alignment, &buffer_obj), OSAL_RETURN_OK) << "Test09_009_018 failed";
    EXPECT_NE(buffer_obj,OSAL_MEMORY_BUFFER_HANDLE_INVALID) << "Test09_009_018 failed";
    bk_ptr_self = buffer_obj->mmngr_owner_hndl->p_ptr_self;
    buffer_obj->mmngr_owner_hndl->p_ptr_self = NULL;
    EXPECT_EQ(R_OSAL_MmngrGetConstCpuPtr(buffer_obj, &cpu_ptr ), OSAL_RETURN_HANDLE) << "Test09_009_018 failed";
    buffer_obj->mmngr_owner_hndl->p_ptr_self = bk_ptr_self;
    EXPECT_EQ(R_OSAL_MmngrDealloc(hndl_mmngr, buffer_obj), OSAL_RETURN_OK) << "Test09_009_018 failed";
    EXPECT_EQ(R_OSAL_MmngrClose(hndl_mmngr), OSAL_RETURN_OK) << "Test09_009_018 failed";
    hndl_mmngr = OSAL_MEMORY_MANAGER_HANDLE_INVALID;
}
// [MmngrGetConstCpuPtr_TC_09_009_018]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrGetConstCpuPtr_TC_09_009_019 MemoryApiTest.MmngrGetConstCpuPtr_TC_09_009_019
 * @subsection MmngrGetConstCpuPtr_TC_09_009_019_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrGetConstCpuPtr_TC_09_009_019_tci Test Case ID
 * MmngrGetConstCpuPtr_S4_A_TC_09_009_019
 * @subsection MmngrGetConstCpuPtr_TC_09_009_019_rr Related Requirement(s)
 * \#276554
 * @subsection MmngrGetConstCpuPtr_TC_09_009_019_pp Prerequisite/Precondition
 * OSAL is initialized.
 * @subsection MmngrGetConstCpuPtr_TC_09_009_019_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrGetConstCpuPtr with abnormal condition and mode is OSAL_MMNGR_ALLOC_MODE_FREE_LIST.
 * - pre-process: open new memory manager
 * - Test09_009_019: buffer_obj->mmngr_owner_hndl->p_ptr_self is invalid (NULL)
 * - post-process: close memory manager
 * @subsection MmngrGetConstCpuPtr_TC_09_009_019_tpts Test Procedure/Test Steps
 * -# Call R_OSAL_MmngrOpen with bellow config:
 *  - config.memory_limit                = 4096
 *  - config.max_allowed_allocations     = 1
 *  - config.max_registered_monitors_cbs = 2
 *  - config.mode = OSAL_MMNGR_ALLOC_MODE_FREE_LIST
 * -# Call R_OSAL_MmngrAlloc to allocate a memory buffer.
 * -# Call R_OSAL_MmngrGetConstCpuPtr with buffer which buffer_obj->mmngr_owner_hndl->p_ptr_self is invalid (NULL)
 * -# Call R_OSAL_MmngrDealloc to deallocate the allocated memory buffer.
 * -# Call R_OSAL_MmngrClose to close the memory handle.
 * @subsection MmngrGetConstCpuPtr_TC_09_009_019_ereb Expected Result/Behavior
 * -# The return of R_OSAL_MmngrOpen is OSAL_RETURN_OK.<br>
 * The returned handle is not OSAL_MEMORY_MANAGER_HANDLE_INVALID.
 * -# The return value of R_OSAL_MmngrAlloc is OSAL_RETURN_OK.<br>
 * The return buffer is not OSAL_MEMORY_BUFFER_HANDLE_INVALID
 * -# The return value of R_OSAL_MmngrGetConstCpuPtr is OSAL_RETURN_HANDLE.
 * -# The return value of R_OSAL_MmngrDealloc is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrClose is OSAL_RETURN_OK.
 * @subsection MmngrGetConstCpuPtr_TC_09_009_019_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrGetConstCpuPtr_TC_09_009_019
 */
// [MmngrGetConstCpuPtr_TC_09_009_019]
TEST_F(MemoryApiTest, MmngrGetConstCpuPtr_TC_09_009_019)
{
    const void* cpu_ptr;
    void* bk_ptr_self;

    // Test09_009_019
    // @brief: abnormal case: buffer_obj->mmngr_owner_hndl->p_ptr_self is invalid (NULL)
    config.memory_limit                = 4096;
    config.max_allowed_allocations     = 1;
    config.max_registered_monitors_cbs = 2;
    config.mode = OSAL_MMNGR_ALLOC_MODE_FREE_LIST;
    size = 4096;
    alignment = 64;
    EXPECT_EQ(R_OSAL_MmngrOpen(&config, &hndl_mmngr), OSAL_RETURN_OK) << "Test09_009_019 failed";
    EXPECT_NE(hndl_mmngr,OSAL_MEMORY_MANAGER_HANDLE_INVALID) << "Test09_009_019 failed";
    EXPECT_EQ(R_OSAL_MmngrAlloc(hndl_mmngr, size, alignment, &buffer_obj), OSAL_RETURN_OK) << "Test09_009_019 failed";
    EXPECT_NE(buffer_obj,OSAL_MEMORY_BUFFER_HANDLE_INVALID) << "Test09_009_019 failed";
    bk_ptr_self = buffer_obj->mmngr_owner_hndl->p_ptr_self;
    buffer_obj->mmngr_owner_hndl->p_ptr_self = NULL;
    EXPECT_EQ(R_OSAL_MmngrGetConstCpuPtr(buffer_obj, &cpu_ptr ), OSAL_RETURN_HANDLE) << "Test09_009_019 failed";
    buffer_obj->mmngr_owner_hndl->p_ptr_self = bk_ptr_self;
    EXPECT_EQ(R_OSAL_MmngrDealloc(hndl_mmngr, buffer_obj), OSAL_RETURN_OK) << "Test09_009_019 failed";
    EXPECT_EQ(R_OSAL_MmngrClose(hndl_mmngr), OSAL_RETURN_OK) << "Test09_009_019 failed";
    hndl_mmngr = OSAL_MEMORY_MANAGER_HANDLE_INVALID;
}
// [MmngrGetConstCpuPtr_TC_09_009_019]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrGetConstCpuPtr_TC_09_009_020 MemoryApiTest.MmngrGetConstCpuPtr_TC_09_009_020
 * @subsection MmngrGetConstCpuPtr_TC_09_009_020_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrGetConstCpuPtr_TC_09_009_020_tci Test Case ID
 * MmngrGetConstCpuPtr_S4_A_TC_09_009_020
 * @subsection MmngrGetConstCpuPtr_TC_09_009_020_rr Related Requirement(s)
 * \#276554
 * @subsection MmngrGetConstCpuPtr_TC_09_009_020_pp Prerequisite/Precondition
 * OSAL is initialized.
 * @subsection MmngrGetConstCpuPtr_TC_09_009_020_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrGetConstCpuPtr with abnormal condition and mode is OSAL_MMNGR_ALLOC_MODE_FREE_LIST_PROT.
 * - pre-process: open new memory manager
 * - Test09_009_020: buffer_obj->mmngr_owner_hndl->p_ptr_self is invalid (NULL)
 * - post-process: close memory manager
 * @subsection MmngrGetConstCpuPtr_TC_09_009_020_tpts Test Procedure/Test Steps
 * -# Call R_OSAL_MmngrOpen with bellow config:
 *  - config.memory_limit                = 4096
 *  - config.max_allowed_allocations     = 1
 *  - config.max_registered_monitors_cbs = 2
 *  - config.mode = OSAL_MMNGR_ALLOC_MODE_FREE_LIST_PROT
 * -# Call R_OSAL_MmngrAlloc to allocate a memory buffer.
 * -# Call R_OSAL_MmngrGetConstCpuPtr with buffer which buffer_obj->mmngr_owner_hndl->p_ptr_self is invalid (NULL)
 * -# Call R_OSAL_MmngrDealloc to deallocate the allocated memory buffer.
 * -# Call R_OSAL_MmngrClose to close the memory handle.
 * @subsection MmngrGetConstCpuPtr_TC_09_009_020_ereb Expected Result/Behavior
 * -# The return of R_OSAL_MmngrOpen is OSAL_RETURN_OK.<br>
 * The returned handle is not OSAL_MEMORY_MANAGER_HANDLE_INVALID.
 * -# The return value of R_OSAL_MmngrAlloc is OSAL_RETURN_OK.<br>
 * The return buffer is not OSAL_MEMORY_BUFFER_HANDLE_INVALID
 * -# The return value of R_OSAL_MmngrGetConstCpuPtr is OSAL_RETURN_HANDLE.
 * -# The return value of R_OSAL_MmngrDealloc is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrClose is OSAL_RETURN_OK.
 * @subsection MmngrGetConstCpuPtr_TC_09_009_020_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrGetConstCpuPtr_TC_09_009_020
 */
// [MmngrGetConstCpuPtr_TC_09_009_020]
TEST_F(MemoryApiTest, MmngrGetConstCpuPtr_TC_09_009_020)
{
    const void* cpu_ptr;
    void* bk_ptr_self;

    // Test09_009_020
    // @brief: abnormal case: buffer_obj->mmngr_owner_hndl->p_ptr_self is invalid (NULL)
    config.memory_limit                = 4096;
    config.max_allowed_allocations     = 1;
    config.max_registered_monitors_cbs = 2;
    config.mode = OSAL_MMNGR_ALLOC_MODE_FREE_LIST_PROT;
    size = 4096;
    alignment = 64;
    EXPECT_EQ(R_OSAL_MmngrOpen(&config, &hndl_mmngr), OSAL_RETURN_OK) << "Test09_009_020 failed";
    EXPECT_NE(hndl_mmngr,OSAL_MEMORY_MANAGER_HANDLE_INVALID) << "Test09_009_020 failed";
    EXPECT_EQ(R_OSAL_MmngrAlloc(hndl_mmngr, size, alignment, &buffer_obj), OSAL_RETURN_OK) << "Test09_009_020 failed";
    EXPECT_NE(buffer_obj,OSAL_MEMORY_BUFFER_HANDLE_INVALID) << "Test09_009_020 failed";
    bk_ptr_self = buffer_obj->mmngr_owner_hndl->p_ptr_self;
    buffer_obj->mmngr_owner_hndl->p_ptr_self = NULL;
    EXPECT_EQ(R_OSAL_MmngrGetConstCpuPtr(buffer_obj, &cpu_ptr ), OSAL_RETURN_HANDLE) << "Test09_009_020 failed";
    buffer_obj->mmngr_owner_hndl->p_ptr_self = bk_ptr_self;
    EXPECT_EQ(R_OSAL_MmngrDealloc(hndl_mmngr, buffer_obj), OSAL_RETURN_OK) << "Test09_009_020 failed";
    EXPECT_EQ(R_OSAL_MmngrClose(hndl_mmngr), OSAL_RETURN_OK) << "Test09_009_020 failed";
    hndl_mmngr = OSAL_MEMORY_MANAGER_HANDLE_INVALID;
}
// [MmngrGetConstCpuPtr_TC_09_009_020]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrGetConstCpuPtr_TC_09_009_021 MemoryApiTest.MmngrGetConstCpuPtr_TC_09_009_021
 * @subsection MmngrGetConstCpuPtr_TC_09_009_021_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrGetConstCpuPtr_TC_09_009_021_tci Test Case ID
 * MmngrGetConstCpuPtr_S4_A_TC_09_009_021
 * @subsection MmngrGetConstCpuPtr_TC_09_009_021_rr Related Requirement(s)
 * \#276554
 * @subsection MmngrGetConstCpuPtr_TC_09_009_021_pp Prerequisite/Precondition
 * OSAL is initialized.
 * @subsection MmngrGetConstCpuPtr_TC_09_009_021_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrGetConstCpuPtr with abnormal condition and mode is OSAL_MMNGR_ALLOC_MODE_STACK.
 * - pre-process: open new memory manager
 * - Test09_009_021: hndl_mmngr->p_ptr_self is invalid (NULL)
 * - post-process: close memory manager
 * @subsection MmngrGetConstCpuPtr_TC_09_009_021_tpts Test Procedure/Test Steps
 * -# Call R_OSAL_MmngrOpen with bellow config:
 *  - config.memory_limit                = 4096
 *  - config.max_allowed_allocations     = 1
 *  - config.max_registered_monitors_cbs = 2
 *  - config.mode = OSAL_MMNGR_ALLOC_MODE_STACK
 * -# Call R_OSAL_MmngrAlloc to allocate a memory buffer.
 * -# Call R_OSAL_MmngrGetConstCpuPtr with buffer with hndl_mmngr->p_ptr_self is invalid (NULL)
 * -# Call R_OSAL_MmngrDealloc to deallocate the allocated memory buffer.
 * -# Call R_OSAL_MmngrClose to close the memory handle.
 * @subsection MmngrGetConstCpuPtr_TC_09_009_021_ereb Expected Result/Behavior
 * -# The return of R_OSAL_MmngrOpen is OSAL_RETURN_OK.<br>
 * The returned handle is not OSAL_MEMORY_MANAGER_HANDLE_INVALID.
 * -# The return value of R_OSAL_MmngrAlloc is OSAL_RETURN_OK.<br>
 * The return buffer is not OSAL_MEMORY_BUFFER_HANDLE_INVALID
 * -# The return value of R_OSAL_MmngrGetConstCpuPtr is OSAL_RETURN_HANDLE.
 * -# The return value of R_OSAL_MmngrDealloc is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrClose is OSAL_RETURN_OK.
 * @subsection MmngrGetConstCpuPtr_TC_09_009_021_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrGetConstCpuPtr_TC_09_009_021
 */
// [MmngrGetConstCpuPtr_TC_09_009_021]
TEST_F(MemoryApiTest, MmngrGetConstCpuPtr_TC_09_009_021)
{
    const void* cpu_ptr;
    void* bk_ptr_self;

    // Test09_009_021
    // @brief: abnormal case: hndl_mmngr->p_ptr_self is invalid (NULL)
    config.memory_limit                = 4096;
    config.max_allowed_allocations     = 1;
    config.max_registered_monitors_cbs = 2;
    config.mode = OSAL_MMNGR_ALLOC_MODE_STACK;
    size = 4096;
    alignment = 64;
    EXPECT_EQ(R_OSAL_MmngrOpen(&config, &hndl_mmngr), OSAL_RETURN_OK) << "Test09_009_021 failed";
    EXPECT_NE(hndl_mmngr,OSAL_MEMORY_MANAGER_HANDLE_INVALID) << "Test09_009_021 failed";
    EXPECT_EQ(R_OSAL_MmngrAlloc(hndl_mmngr, size, alignment, &buffer_obj), OSAL_RETURN_OK) << "Test09_009_021 failed";
    EXPECT_NE(buffer_obj,OSAL_MEMORY_BUFFER_HANDLE_INVALID) << "Test09_009_021 failed";
    bk_ptr_self = hndl_mmngr->p_ptr_self;
    hndl_mmngr->p_ptr_self = NULL;
    EXPECT_EQ(R_OSAL_MmngrGetConstCpuPtr(buffer_obj, &cpu_ptr ), OSAL_RETURN_HANDLE) << "Test09_009_021 failed";
    hndl_mmngr->p_ptr_self = bk_ptr_self;
    EXPECT_EQ(R_OSAL_MmngrDealloc(hndl_mmngr, buffer_obj), OSAL_RETURN_OK) << "Test09_009_021 failed";
    EXPECT_EQ(R_OSAL_MmngrClose(hndl_mmngr), OSAL_RETURN_OK) << "Test09_009_021 failed";
    hndl_mmngr = OSAL_MEMORY_MANAGER_HANDLE_INVALID;
}
// [MmngrGetConstCpuPtr_TC_09_009_021]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrGetConstCpuPtr_TC_09_009_022 MemoryApiTest.MmngrGetConstCpuPtr_TC_09_009_022
 * @subsection MmngrGetConstCpuPtr_TC_09_009_022_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrGetConstCpuPtr_TC_09_009_022_tci Test Case ID
 * MmngrGetConstCpuPtr_S4_A_TC_09_009_022
 * @subsection MmngrGetConstCpuPtr_TC_09_009_022_rr Related Requirement(s)
 * \#276554
 * @subsection MmngrGetConstCpuPtr_TC_09_009_022_pp Prerequisite/Precondition
 * OSAL is initialized.
 * @subsection MmngrGetConstCpuPtr_TC_09_009_022_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrGetConstCpuPtr with abnormal condition and mode is OSAL_MMNGR_ALLOC_MODE_STACK_PROT.
 * - pre-process: open new memory manager
 * - Test09_009_022: hndl_mmngr->p_ptr_self is invalid (NULL)
 * - post-process: close memory manager
 * @subsection MmngrGetConstCpuPtr_TC_09_009_022_tpts Test Procedure/Test Steps
 * -# Call R_OSAL_MmngrOpen with bellow config:
 *  - config.memory_limit                = 4096
 *  - config.max_allowed_allocations     = 1
 *  - config.max_registered_monitors_cbs = 2
 *  - config.mode = OSAL_MMNGR_ALLOC_MODE_STACK_PROT
 * -# Call R_OSAL_MmngrAlloc to allocate a memory buffer.
 * -# Call R_OSAL_MmngrGetConstCpuPtr with buffer with hndl_mmngr->p_ptr_self is invalid (NULL)
 * -# Call R_OSAL_MmngrDealloc to deallocate the allocated memory buffer.
 * -# Call R_OSAL_MmngrClose to close the memory handle.
 * @subsection MmngrGetConstCpuPtr_TC_09_009_022_ereb Expected Result/Behavior
 * -# The return of R_OSAL_MmngrOpen is OSAL_RETURN_OK.<br>
 * The returned handle is not OSAL_MEMORY_MANAGER_HANDLE_INVALID.
 * -# The return value of R_OSAL_MmngrAlloc is OSAL_RETURN_OK.<br>
 * The return buffer is not OSAL_MEMORY_BUFFER_HANDLE_INVALID
 * -# The return value of R_OSAL_MmngrGetConstCpuPtr is OSAL_RETURN_HANDLE.
 * -# The return value of R_OSAL_MmngrDealloc is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrClose is OSAL_RETURN_OK.
 * @subsection MmngrGetConstCpuPtr_TC_09_009_022_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrGetConstCpuPtr_TC_09_009_022
 */
// [MmngrGetConstCpuPtr_TC_09_009_022]
TEST_F(MemoryApiTest, MmngrGetConstCpuPtr_TC_09_009_022)
{
    const void* cpu_ptr;
    void* bk_ptr_self;

    // Test09_009_022
    // @brief: abnormal case: hndl_mmngr->p_ptr_self is invalid (NULL)
    config.memory_limit                = 4096;
    config.max_allowed_allocations     = 1;
    config.max_registered_monitors_cbs = 2;
    config.mode = OSAL_MMNGR_ALLOC_MODE_STACK_PROT;
    size = 4096;
    alignment = 64;
    EXPECT_EQ(R_OSAL_MmngrOpen(&config, &hndl_mmngr), OSAL_RETURN_OK) << "Test09_009_022 failed";
    EXPECT_NE(hndl_mmngr,OSAL_MEMORY_MANAGER_HANDLE_INVALID) << "Test09_009_022 failed";
    EXPECT_EQ(R_OSAL_MmngrAlloc(hndl_mmngr, size, alignment, &buffer_obj), OSAL_RETURN_OK) << "Test09_009_022 failed";
    EXPECT_NE(buffer_obj,OSAL_MEMORY_BUFFER_HANDLE_INVALID) << "Test09_009_022 failed";
    bk_ptr_self = hndl_mmngr->p_ptr_self;
    hndl_mmngr->p_ptr_self = NULL;
    EXPECT_EQ(R_OSAL_MmngrGetConstCpuPtr(buffer_obj, &cpu_ptr ), OSAL_RETURN_HANDLE) << "Test09_009_022 failed";
    hndl_mmngr->p_ptr_self = bk_ptr_self;
    EXPECT_EQ(R_OSAL_MmngrDealloc(hndl_mmngr, buffer_obj), OSAL_RETURN_OK) << "Test09_009_022 failed";
    EXPECT_EQ(R_OSAL_MmngrClose(hndl_mmngr), OSAL_RETURN_OK) << "Test09_009_022 failed";
    hndl_mmngr = OSAL_MEMORY_MANAGER_HANDLE_INVALID;
}
// [MmngrGetConstCpuPtr_TC_09_009_022]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrGetConstCpuPtr_TC_09_009_023 MemoryApiTest.MmngrGetConstCpuPtr_TC_09_009_023
 * @subsection MmngrGetConstCpuPtr_TC_09_009_023_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrGetConstCpuPtr_TC_09_009_023_tci Test Case ID
 * MmngrGetConstCpuPtr_S4_A_TC_09_009_023
 * @subsection MmngrGetConstCpuPtr_TC_09_009_023_rr Related Requirement(s)
 * \#276554
 * @subsection MmngrGetConstCpuPtr_TC_09_009_023_pp Prerequisite/Precondition
 * OSAL is initialized.
 * @subsection MmngrGetConstCpuPtr_TC_09_009_023_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrGetConstCpuPtr with abnormal condition and mode is OSAL_MMNGR_ALLOC_MODE_FREE_LIST.
 * - pre-process: open new memory manager
 * - Test09_009_023: hndl_mmngr->p_ptr_self is invalid (NULL)
 * - post-process: close memory manager
 * @subsection MmngrGetConstCpuPtr_TC_09_009_023_tpts Test Procedure/Test Steps
 * -# Call R_OSAL_MmngrOpen with bellow config:
 *  - config.memory_limit                = 4096
 *  - config.max_allowed_allocations     = 1
 *  - config.max_registered_monitors_cbs = 2
 *  - config.mode = OSAL_MMNGR_ALLOC_MODE_FREE_LIST
 * -# Call R_OSAL_MmngrAlloc to allocate a memory buffer.
 * -# Call R_OSAL_MmngrGetConstCpuPtr with buffer with hndl_mmngr->p_ptr_self is invalid (NULL)
 * -# Call R_OSAL_MmngrDealloc to deallocate the allocated memory buffer.
 * -# Call R_OSAL_MmngrClose to close the memory handle.
 * @subsection MmngrGetConstCpuPtr_TC_09_009_023_ereb Expected Result/Behavior
 * -# The return of R_OSAL_MmngrOpen is OSAL_RETURN_OK.<br>
 * The returned handle is not OSAL_MEMORY_MANAGER_HANDLE_INVALID.
 * -# The return value of R_OSAL_MmngrAlloc is OSAL_RETURN_OK.<br>
 * The return buffer is not OSAL_MEMORY_BUFFER_HANDLE_INVALID
 * -# The return value of R_OSAL_MmngrGetConstCpuPtr is OSAL_RETURN_HANDLE.
 * -# The return value of R_OSAL_MmngrDealloc is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrClose is OSAL_RETURN_OK.
 * @subsection MmngrGetConstCpuPtr_TC_09_009_023_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrGetConstCpuPtr_TC_09_009_023
 */
// [MmngrGetConstCpuPtr_TC_09_009_023]
TEST_F(MemoryApiTest, MmngrGetConstCpuPtr_TC_09_009_023)
{
    const void* cpu_ptr;
    void* bk_ptr_self;

    // Test09_009_023
    // @brief: abnormal case: hndl_mmngr->p_ptr_self is invalid (NULL)
    config.memory_limit                = 4096;
    config.max_allowed_allocations     = 1;
    config.max_registered_monitors_cbs = 2;
    config.mode = OSAL_MMNGR_ALLOC_MODE_FREE_LIST;
    size = 4096;
    alignment = 64;
    EXPECT_EQ(R_OSAL_MmngrOpen(&config, &hndl_mmngr), OSAL_RETURN_OK) << "Test09_009_023 failed";
    EXPECT_NE(hndl_mmngr,OSAL_MEMORY_MANAGER_HANDLE_INVALID) << "Test09_009_023 failed";
    EXPECT_EQ(R_OSAL_MmngrAlloc(hndl_mmngr, size, alignment, &buffer_obj), OSAL_RETURN_OK) << "Test09_009_023 failed";
    EXPECT_NE(buffer_obj,OSAL_MEMORY_BUFFER_HANDLE_INVALID) << "Test09_009_023 failed";
    bk_ptr_self = hndl_mmngr->p_ptr_self;
    hndl_mmngr->p_ptr_self = NULL;
    EXPECT_EQ(R_OSAL_MmngrGetConstCpuPtr(buffer_obj, &cpu_ptr ), OSAL_RETURN_HANDLE) << "Test09_009_023 failed";
    hndl_mmngr->p_ptr_self = bk_ptr_self;
    EXPECT_EQ(R_OSAL_MmngrDealloc(hndl_mmngr, buffer_obj), OSAL_RETURN_OK) << "Test09_009_023 failed";
    EXPECT_EQ(R_OSAL_MmngrClose(hndl_mmngr), OSAL_RETURN_OK) << "Test09_009_023 failed";
    hndl_mmngr = OSAL_MEMORY_MANAGER_HANDLE_INVALID;
}
// [MmngrGetConstCpuPtr_TC_09_009_023]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrGetConstCpuPtr_TC_09_009_024 MemoryApiTest.MmngrGetConstCpuPtr_TC_09_009_024
 * @subsection MmngrGetConstCpuPtr_TC_09_009_024_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrGetConstCpuPtr_TC_09_009_024_tci Test Case ID
 * MmngrGetConstCpuPtr_S4_A_TC_09_009_024
 * @subsection MmngrGetConstCpuPtr_TC_09_009_024_rr Related Requirement(s)
 * \#276554
 * @subsection MmngrGetConstCpuPtr_TC_09_009_024_pp Prerequisite/Precondition
 * OSAL is initialized.
 * @subsection MmngrGetConstCpuPtr_TC_09_009_024_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrGetConstCpuPtr with abnormal condition and mode is OSAL_MMNGR_ALLOC_MODE_FREE_LIST_PROT.
 * - pre-process: open new memory manager
 * - Test09_009_024: hndl_mmngr->p_ptr_self is invalid (NULL)
 * - post-process: close memory manager
 * @subsection MmngrGetConstCpuPtr_TC_09_009_024_tpts Test Procedure/Test Steps
 * -# Call R_OSAL_MmngrOpen with bellow config:
 *  - config.memory_limit                = 4096
 *  - config.max_allowed_allocations     = 1
 *  - config.max_registered_monitors_cbs = 2
 *  - config.mode = OSAL_MMNGR_ALLOC_MODE_FREE_LIST_PROT
 * -# Call R_OSAL_MmngrAlloc to allocate a memory buffer.
 * -# Call R_OSAL_MmngrGetConstCpuPtr with buffer with hndl_mmngr->p_ptr_self is invalid (NULL)
 * -# Call R_OSAL_MmngrDealloc to deallocate the allocated memory buffer.
 * -# Call R_OSAL_MmngrClose to close the memory handle.
 * @subsection MmngrGetConstCpuPtr_TC_09_009_024_ereb Expected Result/Behavior
 * -# The return of R_OSAL_MmngrOpen is OSAL_RETURN_OK.<br>
 * The returned handle is not OSAL_MEMORY_MANAGER_HANDLE_INVALID.
 * -# The return value of R_OSAL_MmngrAlloc is OSAL_RETURN_OK.<br>
 * The return buffer is not OSAL_MEMORY_BUFFER_HANDLE_INVALID
 * -# The return value of R_OSAL_MmngrGetConstCpuPtr is OSAL_RETURN_HANDLE.
 * -# The return value of R_OSAL_MmngrDealloc is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrClose is OSAL_RETURN_OK.
 * @subsection MmngrGetConstCpuPtr_TC_09_009_024_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrGetConstCpuPtr_TC_09_009_024
 */
// [MmngrGetConstCpuPtr_TC_09_009_024]
TEST_F(MemoryApiTest, MmngrGetConstCpuPtr_TC_09_009_024)
{
    const void* cpu_ptr;
    void* bk_ptr_self;

    // Test09_009_024
    // @brief: abnormal case: hndl_mmngr->p_ptr_self is invalid (NULL)
    config.memory_limit                = 4096;
    config.max_allowed_allocations     = 1;
    config.max_registered_monitors_cbs = 2;
    config.mode = OSAL_MMNGR_ALLOC_MODE_FREE_LIST_PROT;
    size = 4096;
    alignment = 64;
    EXPECT_EQ(R_OSAL_MmngrOpen(&config, &hndl_mmngr), OSAL_RETURN_OK) << "Test09_009_024 failed";
    EXPECT_NE(hndl_mmngr,OSAL_MEMORY_MANAGER_HANDLE_INVALID) << "Test09_009_024 failed";
    EXPECT_EQ(R_OSAL_MmngrAlloc(hndl_mmngr, size, alignment, &buffer_obj), OSAL_RETURN_OK) << "Test09_009_024 failed";
    EXPECT_NE(buffer_obj,OSAL_MEMORY_BUFFER_HANDLE_INVALID) << "Test09_009_024 failed";
    bk_ptr_self = hndl_mmngr->p_ptr_self;
    hndl_mmngr->p_ptr_self = NULL;
    EXPECT_EQ(R_OSAL_MmngrGetConstCpuPtr(buffer_obj, &cpu_ptr ), OSAL_RETURN_HANDLE) << "Test09_009_024 failed";
    hndl_mmngr->p_ptr_self = bk_ptr_self;
    EXPECT_EQ(R_OSAL_MmngrDealloc(hndl_mmngr, buffer_obj), OSAL_RETURN_OK) << "Test09_009_024 failed";
    EXPECT_EQ(R_OSAL_MmngrClose(hndl_mmngr), OSAL_RETURN_OK) << "Test09_009_024 failed";
    hndl_mmngr = OSAL_MEMORY_MANAGER_HANDLE_INVALID;
}
// [MmngrGetConstCpuPtr_TC_09_009_024]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrFlush_TC_09_010_001 MemoryApiTest.MmngrFlush_TC_09_010_001
 * @subsection MmngrFlush_TC_09_010_001_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrFlush_TC_09_010_001_tci Test Case ID
 * MmngrFlush_S3_N_TC_09_010_001
 * @subsection MmngrFlush_TC_09_010_001_rr Related Requirement(s)
 * \#276556
 * @subsection MmngrFlush_TC_09_010_001_pp Prerequisite/Precondition
 * OSAL is initialized.
 * @subsection MmngrFlush_TC_09_010_001_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrFlush with normal condition and mode is OSAL_MMNGR_ALLOC_MODE_STACK.
 * - pre-process: open new memory manager
 * - Test09_010_001: with all valid parameters.
 * - post-process: close memory manager
 * @subsection MmngrFlush_TC_09_010_001_tpts Test Procedure/Test Steps
 * -# Call R_OSAL_MmngrOpen with bellow config:
 *  - config.memory_limit                = 4096
 *  - config.max_allowed_allocations     = 1
 *  - config.max_registered_monitors_cbs = 2
 *  - config.mode = OSAL_MMNGR_ALLOC_MODE_STACK
 * -# Call R_OSAL_MmngrAlloc with "size" is 4096 and "alignment" is 64 to allocate a memory buffer.
 * -# Call R_OSAL_MmngrFlush with offset is 0 and size is 64.
 * -# Call R_OSAL_MmngrDealloc to deallocate the allocated memory buffer.
 * -# Call R_OSAL_MmngrClose to close memory handle.
 * @subsection MmngrFlush_TC_09_010_001_ereb Expected Result/Behavior
 * -# The return of R_OSAL_MmngrOpen is OSAL_RETURN_OK.<br>
 * The returned handle is not OSAL_MEMORY_MANAGER_HANDLE_INVALID.
 * -# The return value of R_OSAL_MmngrAlloc is OSAL_RETURN_OK.<br>
 * The return buffer is not OSAL_MEMORY_BUFFER_HANDLE_INVALID.
 * -# The return value of the R_OSAL_MmngrFlush is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrDealloc is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrClose is OSAL_RETURN_OK.
 * @subsection MmngrFlush_TC_09_010_001_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrFlush_TC_09_010_001
 */
// [MmngrFlush_TC_09_010_001]
TEST_F(MemoryApiTest, MmngrFlush_TC_09_010_001)
{
    // pre-process: open memory manager
    config.memory_limit                = 4096;
    config.max_allowed_allocations     = 1;
    config.max_registered_monitors_cbs = 2;
    config.mode = OSAL_MMNGR_ALLOC_MODE_STACK;
    size = 4096;
    alignment = 64;

    EXPECT_EQ(R_OSAL_MmngrOpen(&config, &hndl_mmngr), OSAL_RETURN_OK) <<  "pre-process failed";
    EXPECT_NE(hndl_mmngr,OSAL_MEMORY_MANAGER_HANDLE_INVALID) <<  "pre-process failed";
    
    // Test09_010_001
    // @brief: normal case: all valid argument
    EXPECT_EQ(R_OSAL_MmngrAlloc(hndl_mmngr, size, alignment, &buffer_obj), OSAL_RETURN_OK)  <<  "Test09_010_001 failed";
    EXPECT_TRUE(buffer_obj != OSAL_MEMORY_BUFFER_HANDLE_INVALID)  <<  "Test09_010_001 failed";
    size = 64;
    offset = 0;
    EXPECT_EQ(R_OSAL_MmngrFlush(buffer_obj, offset, size ), OSAL_RETURN_OK) << "Test09_010_001 failed";
    EXPECT_EQ(R_OSAL_MmngrDealloc(hndl_mmngr, buffer_obj), OSAL_RETURN_OK) << "Test09_010_001 failed";
    buffer_obj = OSAL_MEMORY_BUFFER_HANDLE_INVALID;

    // post-process: close memory manager
    EXPECT_EQ(R_OSAL_MmngrClose(hndl_mmngr), OSAL_RETURN_OK) << "post-process failed";
    hndl_mmngr = OSAL_MEMORY_MANAGER_HANDLE_INVALID;
}
// [MmngrFlush_TC_09_010_001]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrFlush_TC_09_010_002 MemoryApiTest.MmngrFlush_TC_09_010_002
 * @subsection MmngrFlush_TC_09_010_002_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrFlush_TC_09_010_002_tci Test Case ID
 * MmngrFlush_S3_N_TC_09_010_002
 * @subsection MmngrFlush_TC_09_010_002_rr Related Requirement(s)
 * \#276556
 * @subsection MmngrFlush_TC_09_010_002_pp Prerequisite/Precondition
 * OSAL is initialized.
 * @subsection MmngrFlush_TC_09_010_002_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrFlush with normal condition and mode is OSAL_MMNGR_ALLOC_MODE_STACK.
 * - pre-process: open new memory manager
 * - Test09_010_002: with all valid parameters.
 * - post-process: close memory manager
 * @subsection MmngrFlush_TC_09_010_002_tpts Test Procedure/Test Steps
 * -# Call R_OSAL_MmngrOpen with bellow config:
 *  - config.memory_limit                = 4096
 *  - config.max_allowed_allocations     = 1
 *  - config.max_registered_monitors_cbs = 2
 *  - config.mode = OSAL_MMNGR_ALLOC_MODE_STACK
 * -# Call R_OSAL_MmngrAlloc with "size" is 4096 and "alignment" is 64 to allocate a memory buffer.
 * -# Call R_OSAL_MmngrFlush with offset is 128 and size is 64.
 * -# Call R_OSAL_MmngrDealloc to deallocate the allocated memory buffer.
 * -# Call R_OSAL_MmngrClose to close memory handle.
 * @subsection MmngrFlush_TC_09_010_002_ereb Expected Result/Behavior
 * -# The return of R_OSAL_MmngrOpen is OSAL_RETURN_OK.<br>
 * The returned handle is not OSAL_MEMORY_MANAGER_HANDLE_INVALID.
 * -# The return value of R_OSAL_MmngrAlloc is OSAL_RETURN_OK.<br>
 * The return buffer is not OSAL_MEMORY_BUFFER_HANDLE_INVALID.
 * -# The return value of the R_OSAL_MmngrFlush is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrDealloc is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrClose is OSAL_RETURN_OK.
 * @subsection MmngrFlush_TC_09_010_002_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrFlush_TC_09_010_002
 */
// [MmngrFlush_TC_09_010_002]
TEST_F(MemoryApiTest, MmngrFlush_TC_09_010_002)
{
    // pre-process: open memory manager
    config.memory_limit                = 4096;
    config.max_allowed_allocations     = 1;
    config.max_registered_monitors_cbs = 2;
    config.mode = OSAL_MMNGR_ALLOC_MODE_STACK;
    size = 4096;
    alignment = 64;

    EXPECT_EQ(R_OSAL_MmngrOpen(&config, &hndl_mmngr), OSAL_RETURN_OK) <<  "pre-process failed";
    EXPECT_NE(hndl_mmngr,OSAL_MEMORY_MANAGER_HANDLE_INVALID) <<  "pre-process failed";
    
    // Test09_010_002
    // @brief: normal case: all valid argument
    EXPECT_EQ(R_OSAL_MmngrAlloc(hndl_mmngr, size, alignment, &buffer_obj), OSAL_RETURN_OK)  <<  "Test09_010_002 failed";
    EXPECT_TRUE(buffer_obj != OSAL_MEMORY_BUFFER_HANDLE_INVALID)  <<  "Test09_010_002 failed";
    size = 64;
    offset = 128;
    EXPECT_EQ(R_OSAL_MmngrFlush(buffer_obj, offset, size ), OSAL_RETURN_OK) << "Test09_010_002 failed";
    EXPECT_EQ(R_OSAL_MmngrDealloc(hndl_mmngr, buffer_obj), OSAL_RETURN_OK) << "Test09_010_002 failed";
    buffer_obj = OSAL_MEMORY_BUFFER_HANDLE_INVALID;

    // post-process: close memory manager
    EXPECT_EQ(R_OSAL_MmngrClose(hndl_mmngr), OSAL_RETURN_OK) << "post-process failed";
    hndl_mmngr = OSAL_MEMORY_MANAGER_HANDLE_INVALID;
}
// [MmngrFlush_TC_09_010_002]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrFlush_TC_09_010_003 MemoryApiTest.MmngrFlush_TC_09_010_003
 * @subsection MmngrFlush_TC_09_010_003_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrFlush_TC_09_010_003_tci Test Case ID
 * MmngrFlush_S3_N_TC_09_010_003
 * @subsection MmngrFlush_TC_09_010_003_rr Related Requirement(s)
 * \#276556
 * @subsection MmngrFlush_TC_09_010_003_pp Prerequisite/Precondition
 * OSAL is initialized.
 * @subsection MmngrFlush_TC_09_010_003_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrFlush with normal condition and mode is OSAL_MMNGR_ALLOC_MODE_STACK.
 * - pre-process: open new memory manager
 * - Test09_010_003: with all valid parameters.
 * - post-process: close memory manager
 * @subsection MmngrFlush_TC_09_010_003_tpts Test Procedure/Test Steps
 * -# Call R_OSAL_MmngrOpen with bellow config:
 *  - config.memory_limit                = 4096
 *  - config.max_allowed_allocations     = 1
 *  - config.max_registered_monitors_cbs = 2
 *  - config.mode = OSAL_MMNGR_ALLOC_MODE_STACK
 * -# Call R_OSAL_MmngrAlloc with "size" is 4096 and "alignment" is 64 to allocate a memory buffer.
 * -# Call R_OSAL_MmngrFlush with offset is 0 and size is 128.
 * -# Call R_OSAL_MmngrDealloc to deallocate the allocated memory buffer.
 * -# Call R_OSAL_MmngrClose to close memory handle.
 * @subsection MmngrFlush_TC_09_010_003_ereb Expected Result/Behavior
 * -# The return of R_OSAL_MmngrOpen is OSAL_RETURN_OK.<br>
 * The returned handle is not OSAL_MEMORY_MANAGER_HANDLE_INVALID.
 * -# The return value of R_OSAL_MmngrAlloc is OSAL_RETURN_OK.<br>
 * The return buffer is not OSAL_MEMORY_BUFFER_HANDLE_INVALID.
 * -# The return value of the R_OSAL_MmngrFlush is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrDealloc is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrClose is OSAL_RETURN_OK.
 * @subsection MmngrFlush_TC_09_010_003_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrFlush_TC_09_010_003
 */
// [MmngrFlush_TC_09_010_003]
TEST_F(MemoryApiTest, MmngrFlush_TC_09_010_003)
{
    // pre-process: open memory manager
    config.memory_limit                = 4096;
    config.max_allowed_allocations     = 1;
    config.max_registered_monitors_cbs = 2;
    config.mode = OSAL_MMNGR_ALLOC_MODE_STACK;
    size = 4096;
    alignment = 64;

    EXPECT_EQ(R_OSAL_MmngrOpen(&config, &hndl_mmngr), OSAL_RETURN_OK) <<  "pre-process failed";
    EXPECT_NE(hndl_mmngr,OSAL_MEMORY_MANAGER_HANDLE_INVALID) <<  "pre-process failed";
    
    // Test09_010_003
    // @brief: normal case: all valid argument
    EXPECT_EQ(R_OSAL_MmngrAlloc(hndl_mmngr, size, alignment, &buffer_obj), OSAL_RETURN_OK)  <<  "Test09_010_003 failed";
    EXPECT_TRUE(buffer_obj != OSAL_MEMORY_BUFFER_HANDLE_INVALID)  <<  "Test09_010_003 failed";
    size = 128;
    offset = 0;
    EXPECT_EQ(R_OSAL_MmngrFlush(buffer_obj, offset, size ), OSAL_RETURN_OK) << "Test09_010_003 failed";
    EXPECT_EQ(R_OSAL_MmngrDealloc(hndl_mmngr, buffer_obj), OSAL_RETURN_OK) << "Test09_010_003 failed";
    buffer_obj = OSAL_MEMORY_BUFFER_HANDLE_INVALID;

    // post-process: close memory manager
    EXPECT_EQ(R_OSAL_MmngrClose(hndl_mmngr), OSAL_RETURN_OK) << "post-process failed";
    hndl_mmngr = OSAL_MEMORY_MANAGER_HANDLE_INVALID;
}
// [MmngrFlush_TC_09_010_003]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrFlush_TC_09_010_004 MemoryApiTest.MmngrFlush_TC_09_010_004
 * @subsection MmngrFlush_TC_09_010_004_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrFlush_TC_09_010_004_tci Test Case ID
 * MmngrFlush_S0_A_TC_09_010_004
 * @subsection MmngrFlush_TC_09_010_004_rr Related Requirement(s)
 * \#276556
 * @subsection MmngrFlush_TC_09_010_004_pp Prerequisite/Precondition
 * OSAL is initialized.
 * @subsection MmngrFlush_TC_09_010_004_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrFlush with abnormal condition and mode is OSAL_MMNGR_ALLOC_MODE_STACK.
 * - pre-process: open new memory manager
 * - Test09_010_004: buffer is NULL.
 * - post-process: close memory manager
 * @subsection MmngrFlush_TC_09_010_004_tpts Test Procedure/Test Steps
 * -# Call R_OSAL_MmngrFlush with NULL buffer.
 * @subsection MmngrFlush_TC_09_010_004_ereb Expected Result/Behavior
 * -# The return value of R_OSAL_MmngrFlush is OSAL_RETURN_HANDLE.
 * @subsection MmngrFlush_TC_09_010_004_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrFlush_TC_09_010_004
 */
// [MmngrFlush_TC_09_010_004]
TEST_F(MemoryApiTest, MmngrFlush_TC_09_010_004)
{
    // Test09_010_004
    // @brief: abnormal case: buffer is null
    offset = 0;
    size = 64;
    EXPECT_EQ(R_OSAL_MmngrFlush(OSAL_MEMORY_BUFFER_HANDLE_INVALID, offset, size ), OSAL_RETURN_HANDLE) << "Test09_010_004 failed";
}
// [MmngrFlush_TC_09_010_004]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrFlush_TC_09_010_005 MemoryApiTest.MmngrFlush_TC_09_010_005
 * @subsection MmngrFlush_TC_09_010_005_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrFlush_TC_09_010_005_tci Test Case ID
 * MmngrFlush_S2_A_TC_09_010_005
 * @subsection MmngrFlush_TC_09_010_005_rr Related Requirement(s)
 * \#276556
 * @subsection MmngrFlush_TC_09_010_005_pp Prerequisite/Precondition
 * OSAL is initialized.
 * @subsection MmngrFlush_TC_09_010_005_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrFlush with abnormal condition and mode is OSAL_MMNGR_ALLOC_MODE_STACK.
 * - pre-process: open new memory manager and allocate buffer
 * - Test09_010_005: Call memory APIs with the sequence as below:<br>
 * R_OSAL_MmngrAlloc -> R_OSAL_MmngrDealloc -> R_OSAL_MmngrFlush
 * - post-process: close memory manager
 * @subsection MmngrFlush_TC_09_010_005_tpts Test Procedure/Test Steps
 * -# Call R_OSAL_MmngrOpen with bellow config:
 *  - config.memory_limit                = 4096
 *  - config.max_allowed_allocations     = 1
 *  - config.max_registered_monitors_cbs = 2
 *  - config.mode = OSAL_MMNGR_ALLOC_MODE_STACK
 * -# Call R_OSAL_MmngrAlloc to allocate a memory buffer.
 * -# Call R_OSAL_MmngrDealloc to deallocate the allocated memory buffer.
 * -# Call R_OSAL_MmngrFlush with offset is 0, size is 64.
 * -# Call R_OSAL_MmngrClose to close memory handle.
 * @subsection MmngrFlush_TC_09_010_005_ereb Expected Result/Behavior
 * -# The return of R_OSAL_MmngrOpen is OSAL_RETURN_OK.<br>
 * The returned handle is not OSAL_MEMORY_MANAGER_HANDLE_INVALID.
 * -# The return value of R_OSAL_MmngrAlloc is OSAL_RETURN_OK.<br>
 * the return buffer is not OSAL_MEMORY_BUFFER_HANDLE_INVALID.
 * -# The return value of R_OSAL_MmngrDealloc is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrFlush is OSAL_RETURN_HANDLE.
 * -# The return value of R_OSAL_MmngrClose is OSAL_RETURN_OK.
 * @subsection MmngrFlush_TC_09_010_005_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrFlush_TC_09_010_005
 */
// [MmngrFlush_TC_09_010_005]
TEST_F(MemoryApiTest, MmngrFlush_TC_09_010_005)
{
    // pre-process: open memory manager
    config.memory_limit                = 4096;
    config.max_allowed_allocations     = 1;
    config.max_registered_monitors_cbs = 2;
    config.mode = OSAL_MMNGR_ALLOC_MODE_STACK;
    size = 4096;
    alignment = 64;

    EXPECT_EQ(R_OSAL_MmngrOpen(&config, &hndl_mmngr), OSAL_RETURN_OK) <<  "pre-process failed";
    EXPECT_NE(hndl_mmngr,OSAL_MEMORY_MANAGER_HANDLE_INVALID) <<  "pre-process failed";

    // Test09_010_005
    // @brief: abnormal case: R_OSAL_MmngrOpen -> R_OSAL_MmngrAlloc -> R_OSAL_MmngrDealloc -> R_OSAL_MmngrFlush
    EXPECT_EQ(R_OSAL_MmngrAlloc(hndl_mmngr, size, alignment, &buffer_obj), OSAL_RETURN_OK);
    EXPECT_NE(buffer_obj,OSAL_MEMORY_BUFFER_HANDLE_INVALID);
    EXPECT_EQ(R_OSAL_MmngrDealloc(hndl_mmngr, buffer_obj), OSAL_RETURN_OK);
    offset = 0;
    size = 64;
    EXPECT_EQ(R_OSAL_MmngrFlush(buffer_obj, offset, size ), OSAL_RETURN_HANDLE) << "Test09_010_005 failed";
    buffer_obj = OSAL_MEMORY_BUFFER_HANDLE_INVALID;

    // post-process: close memory manager
    EXPECT_EQ(R_OSAL_MmngrClose(hndl_mmngr), OSAL_RETURN_OK) <<  "post-process failed";
    hndl_mmngr = OSAL_MEMORY_MANAGER_HANDLE_INVALID;
}
// [MmngrFlush_TC_09_010_005]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrFlush_TC_09_010_006 MemoryApiTest.MmngrFlush_TC_09_010_006
 * @subsection MmngrFlush_TC_09_010_006_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrFlush_TC_09_010_006_tci Test Case ID
 * MmngrFlush_S4_A_TC_09_010_006
 * @subsection MmngrFlush_TC_09_010_006_rr Related Requirement(s)
 * \#276556
 * @subsection MmngrFlush_TC_09_010_006_pp Prerequisite/Precondition
 * OSAL is initialized.
 * @subsection MmngrFlush_TC_09_010_006_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrFlush with abnormal condition and mode is OSAL_MMNGR_ALLOC_MODE_STACK.
 * - pre-process: open new memory manager and allocate buffer
 * - Test09_010_006: buffer is not support to flush buffer.
 * - post-process: close memory manager
 * @subsection MmngrFlush_TC_09_010_006_tpts Test Procedure/Test Steps
 * -# Call R_OSAL_MmngrOpen with bellow config:
 *  - config.memory_limit                = 4096
 *  - config.max_allowed_allocations     = 1
 *  - config.max_registered_monitors_cbs = 2
 *  - config.mode = OSAL_MMNGR_ALLOC_MODE_STACK
 * -# Allocate "tmp_buffer_obj" by using malloc function.
 * -# Call R_OSAL_MmngrAlloc to allocate a memory buffer.
 * -# Store "buffer_obj->p_flush" to "tmp_buffer_obj->p_flush".<br>
 * Set "buffer_obj->p_flush" to NULL. <br>
 * Call R_OSAL_MmngrFlush with the changed buffer "buffer_obj".<br>
 * Re-assign "tmp_buffer_obj->p_flush" to "buffer_obj->p_flush".
 * -# Call R_OSAL_MmngrDealloc to deallocate the original allocated buffer.
 * -# Free buffer pointed by "tmp_buffer_obj"
 * -# Call R_OSAL_MmngrClose to close memory handle.
 * @subsection MmngrFlush_TC_09_010_006_ereb Expected Result/Behavior
 * -# The return of R_OSAL_MmngrOpen is OSAL_RETURN_OK.<br>
 * The returned handle is not OSAL_MEMORY_MANAGER_HANDLE_INVALID.
 * -# Memory allocation succeeded (Pointer to buffer != Nullpointer)
 * -# The return value of R_OSAL_MmngrAlloc is OSAL_RETURN_OK.<br>
 * The return buffer is not OSAL_MEMORY_BUFFER_HANDLE_INVALID.
 * -# The return value of R_OSAL_MmngrFlush is OSAL_RETURN_UNSUPPORTED_OPERATION.
 * -# The return value of R_OSAL_MmngrDealloc is OSAL_RETURN_OK.
 * -# Allocated memory free succeeded.
 * -# The return value of R_OSAL_MmngrClose is OSAL_RETURN_OK.
 * @subsection MmngrFlush_TC_09_010_006_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrFlush_TC_09_010_006
 */
// [MmngrFlush_TC_09_010_006]
TEST_F(MemoryApiTest, MmngrFlush_TC_09_010_006)
{
    osal_memory_buffer_handle_t tmp_buffer_obj;

    // pre-process: open memory manager
    config.memory_limit                = 4096;
    config.max_allowed_allocations     = 1;
    config.max_registered_monitors_cbs = 2;
    config.mode = OSAL_MMNGR_ALLOC_MODE_STACK;
    size = 4096;
    alignment = 64;

    EXPECT_EQ(R_OSAL_MmngrOpen(&config, &hndl_mmngr), OSAL_RETURN_OK) <<  "pre-process failed";
    EXPECT_NE(hndl_mmngr,OSAL_MEMORY_MANAGER_HANDLE_INVALID) <<  "pre-process failed";

    // Test09_010_006
    // @brief: abnormal case: memory_buffer_obj_hndl->flush = NULL
    tmp_buffer_obj = (osal_memory_buffer_handle_t)malloc (sizeof(st_osal_memory_buffer_obj));
    EXPECT_EQ(R_OSAL_MmngrAlloc(hndl_mmngr, size, alignment, &buffer_obj), OSAL_RETURN_OK);
    EXPECT_TRUE(buffer_obj != OSAL_MEMORY_BUFFER_HANDLE_INVALID);
    tmp_buffer_obj->p_flush = buffer_obj->p_flush;
    buffer_obj->p_flush = NULL;
    offset = 0;
    size = 64;
    EXPECT_EQ(R_OSAL_MmngrFlush(buffer_obj, offset, size ), OSAL_RETURN_UNSUPPORTED_OPERATION) << "Test09_010_006 failed";
    buffer_obj->p_flush = tmp_buffer_obj->p_flush;
    EXPECT_EQ(R_OSAL_MmngrDealloc(hndl_mmngr, buffer_obj), OSAL_RETURN_OK);
    buffer_obj = OSAL_MEMORY_BUFFER_HANDLE_INVALID;
    free(tmp_buffer_obj);

    // post-process: close memory manager
    EXPECT_EQ(R_OSAL_MmngrClose(hndl_mmngr), OSAL_RETURN_OK) <<  "post-process failed";
    hndl_mmngr = OSAL_MEMORY_MANAGER_HANDLE_INVALID;
}
// [MmngrFlush_TC_09_010_006]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrFlush_TC_09_010_007 MemoryApiTest.MmngrFlush_TC_09_010_007
 * @subsection MmngrFlush_TC_09_010_007_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrFlush_TC_09_010_007_tci Test Case ID
 * MmngrFlush_S0_A_TC_09_010_007
 * @subsection MmngrFlush_TC_09_010_007_rr Related Requirement(s)
 * \#276556
 * @subsection MmngrFlush_TC_09_010_007_pp Prerequisite/Precondition
 * OSAL is initialized.
 * @subsection MmngrFlush_TC_09_010_007_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrFlush with abnormal condition and mode is OSAL_MMNGR_ALLOC_MODE_STACK.
 * - pre-process: open new memory manager and allocate buffer
 * - Test09_010_007: offset is not aligned ARM Cache Line Size (64).
 * - post-process: close memory manager
 * @subsection MmngrFlush_TC_09_010_007_tpts Test Procedure/Test Steps
 * -# Call R_OSAL_MmngrOpen with bellow config:
 *  - config.memory_limit                = 4096
 *  - config.max_allowed_allocations     = 1
 *  - config.max_registered_monitors_cbs = 2
 *  - config.mode = OSAL_MMNGR_ALLOC_MODE_STACK
 * -# Call R_OSAL_MmngrAlloc to allocate a memory buffer.
 * -# Call R_OSAL_MmngrFlush with offset is 129, size is 64.
 * -# Call R_OSAL_MmngrDealloc to deallocate the allocated memory buffer.
 * -# Call R_OSAL_MmngrClose to close memory handle.
 * @subsection MmngrFlush_TC_09_010_007_ereb Expected Result/Behavior
 * -# The return of R_OSAL_MmngrOpen is OSAL_RETURN_OK.<br>
 * The returned handle is not OSAL_MEMORY_MANAGER_HANDLE_INVALID.
 * -# The return value of R_OSAL_MmngrAlloc is OSAL_RETURN_OK.<br>
 * The return buffer is not OSAL_MEMORY_BUFFER_HANDLE_INVALID.
 * -# The return value of R_OSAL_MmngrFlush is OSAL_RETURN_PAR.
 * -# The return value of R_OSAL_MmngrDealloc is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrClose is OSAL_RETURN_OK.
 * @subsection MmngrFlush_TC_09_010_007_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrFlush_TC_09_010_007
 */
// [MmngrFlush_TC_09_010_007]
TEST_F(MemoryApiTest, MmngrFlush_TC_09_010_007)
{
    osal_memory_buffer_handle_t tmp_buffer_obj;

    // pre-process: open memory manager
    config.memory_limit                = 4096;
    config.max_allowed_allocations     = 1;
    config.max_registered_monitors_cbs = 2;
    config.mode = OSAL_MMNGR_ALLOC_MODE_STACK;
    size = 4096;
    alignment = 64;

    EXPECT_EQ(R_OSAL_MmngrOpen(&config, &hndl_mmngr), OSAL_RETURN_OK) <<  "pre-process failed";
    EXPECT_NE(hndl_mmngr,OSAL_MEMORY_MANAGER_HANDLE_INVALID) <<  "pre-process failed";

    // Test09_010_007
    // @brief: abnormal case: offset is not aligned ARM Cache Line Size (64)
    EXPECT_EQ(R_OSAL_MmngrAlloc(hndl_mmngr, size, alignment, &buffer_obj), OSAL_RETURN_OK);
    EXPECT_NE(buffer_obj,OSAL_MEMORY_BUFFER_HANDLE_INVALID);
    offset = 129;
    size = 64;
    EXPECT_EQ(R_OSAL_MmngrFlush(buffer_obj, offset, size ), OSAL_RETURN_PAR) << "Test09_010_007 failed";
    EXPECT_EQ(R_OSAL_MmngrDealloc(hndl_mmngr, buffer_obj), OSAL_RETURN_OK);
    buffer_obj = OSAL_MEMORY_BUFFER_HANDLE_INVALID;

    // post-process: close memory manager
    EXPECT_EQ(R_OSAL_MmngrClose(hndl_mmngr), OSAL_RETURN_OK) <<  "post-process failed";
}
// [MmngrFlush_TC_09_010_007]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrFlush_TC_09_010_008 MemoryApiTest.MmngrFlush_TC_09_010_008
 * @subsection MmngrFlush_TC_09_010_008_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrFlush_TC_09_010_008_tci Test Case ID
 * MmngrFlush_S0_A_TC_09_010_008
 * @subsection MmngrFlush_TC_09_010_008_rr Related Requirement(s)
 * \#276556
 * @subsection MmngrFlush_TC_09_010_008_pp Prerequisite/Precondition
 * OSAL is initialized.
 * @subsection MmngrFlush_TC_09_010_008_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrFlush with abnormal condition and mode is OSAL_MMNGR_ALLOC_MODE_STACK.
 * - pre-process: open new memory manager and allocate buffer
 * - Test09_010_008: size is less than minimum required size (64).
 * - post-process: close memory manager
 * @subsection MmngrFlush_TC_09_010_008_tpts Test Procedure/Test Steps
 * -# Call R_OSAL_MmngrOpen with bellow config:
 *  - config.memory_limit                = 4096
 *  - config.max_allowed_allocations     = 1
 *  - config.max_registered_monitors_cbs = 2
 *  - config.mode = OSAL_MMNGR_ALLOC_MODE_STACK
 * -# Call R_OSAL_MmngrAlloc with size is 4096 and alignment is 64 to allocate a memory buffer.
 * -# Call R_OSAL_MmngrFlush with offset is 0 and size is 63.
 * -# Call R_OSAL_MmngrDealloc to deallocate the allocated memory buffer.
 * -# Call R_OSAL_MmngrClose to close memory handle.
 * @subsection MmngrFlush_TC_09_010_008_ereb Expected Result/Behavior
 * -# The return of R_OSAL_MmngrOpen is OSAL_RETURN_OK.<br>
 * The returned handle is not OSAL_MEMORY_MANAGER_HANDLE_INVALID.
 * -# The return value of R_OSAL_MmngrAlloc is OSAL_RETURN_OK.<br>
 * The return buffer is not OSAL_MEMORY_BUFFER_HANDLE_INVALID.
 * -# The return value of R_OSAL_MmngrFlush is OSAL_RETURN_PAR.
 * -# The return value of R_OSAL_MmngrDealloc is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrClose is OSAL_RETURN_OK.
 * @subsection MmngrFlush_TC_09_010_008_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrFlush_TC_09_010_008
 */
// [MmngrFlush_TC_09_010_008]
TEST_F(MemoryApiTest, MmngrFlush_TC_09_010_008)
{
    osal_memory_buffer_handle_t tmp_buffer_obj;

    // pre-process: open memory manager
    config.memory_limit                = 4096;
    config.max_allowed_allocations     = 1;
    config.max_registered_monitors_cbs = 2;
    config.mode = OSAL_MMNGR_ALLOC_MODE_STACK;
    size = 4096;
    alignment = 64;

    EXPECT_EQ(R_OSAL_MmngrOpen(&config, &hndl_mmngr), OSAL_RETURN_OK) <<  "pre-process failed";
    EXPECT_NE(hndl_mmngr,OSAL_MEMORY_MANAGER_HANDLE_INVALID) <<  "pre-process failed";

    // Test09_010_008
    // @brief: abnormal case: size is less than minimum required size (64)
    EXPECT_EQ(R_OSAL_MmngrAlloc(hndl_mmngr, size, alignment, &buffer_obj), OSAL_RETURN_OK);
    EXPECT_NE(buffer_obj,OSAL_MEMORY_BUFFER_HANDLE_INVALID);
    offset = 0;
    size = 63;
    EXPECT_EQ(R_OSAL_MmngrFlush(buffer_obj, offset, size), OSAL_RETURN_PAR) << "Test09_010_008 failed";
    EXPECT_EQ(R_OSAL_MmngrDealloc(hndl_mmngr, buffer_obj), OSAL_RETURN_OK);
    buffer_obj = OSAL_MEMORY_BUFFER_HANDLE_INVALID;

    // post-process: close memory manager
    EXPECT_EQ(R_OSAL_MmngrClose(hndl_mmngr), OSAL_RETURN_OK) <<  "post-process failed";
}
// [MmngrFlush_TC_09_010_008]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrFlush_TC_09_010_009 MemoryApiTest.MmngrFlush_TC_09_010_009
 * @subsection MmngrFlush_TC_09_010_009_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrFlush_TC_09_010_009_tci Test Case ID
 * MmngrFlush_S3_N_TC_09_010_009
 * @subsection MmngrFlush_TC_09_010_009_rr Related Requirement(s)
 * \#276556
 * @subsection MmngrFlush_TC_09_010_009_pp Prerequisite/Precondition
 * OSAL is initialized.
 * @subsection MmngrFlush_TC_09_010_009_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrFlush with normal condition and mode is OSAL_MMNGR_ALLOC_MODE_FREE_LIST.
 * - pre-process: open new memory manager
 * - Test09_010_009: confirm with memory handle which opened with OSAL_MMNGR_ALLOC_MODE_FREE_LIST mode
 * - post-process: close memory manager
 * @subsection MmngrFlush_TC_09_010_009_tpts Test Procedure/Test Steps
 * -# Call R_OSAL_MmngrOpen with bellow config:
 *  - config.memory_limit                = 4096
 *  - config.max_allowed_allocations     = 1
 *  - config.max_registered_monitors_cbs = 2
 *  - config.mode = OSAL_MMNGR_ALLOC_MODE_FREE_LIST
 * -# Call R_OSAL_MmngrAlloc to allocate a memory buffer.
 * -# Call R_OSAL_MmngrFlush with offset is 0 and size is 64.
 * -# Call R_OSAL_MmngrFlush with offset is 128 and size is 64.
 * -# Call R_OSAL_MmngrFlush with offset is 0 and size is 128.
 * -# Call R_OSAL_MmngrDealloc to deallocate the allocated memory buffer.
 * -# Call R_OSAL_MmngrClose to close memory handle.
 * @subsection MmngrFlush_TC_09_010_009_ereb Expected Result/Behavior
 * -# The return of R_OSAL_MmngrOpen is OSAL_RETURN_OK.<br>
 * The returned handle is not OSAL_MEMORY_MANAGER_HANDLE_INVALID.
 * -# The return value of R_OSAL_MmngrAlloc is OSAL_RETURN_OK.<br>
 * The return buffer is not OSAL_MEMORY_BUFFER_HANDLE_INVALID.
 * -# The return value of the 1st R_OSAL_MmngrFlush is OSAL_RETURN_OK.
 * -# The return value of the 2nd R_OSAL_MmngrFlush is OSAL_RETURN_OK.
 * -# The return value of the 3rd R_OSAL_MmngrFlush is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrDealloc is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrClose is OSAL_RETURN_OK.
 * @subsection MmngrFlush_TC_09_010_009_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrFlush_TC_09_010_009
 */
// [MmngrFlush_TC_09_010_009]
TEST_F(MemoryApiTest, MmngrFlush_TC_09_010_009)
{
    // pre-process: open memory manager
    config.memory_limit                = 4096;
    config.max_allowed_allocations     = 1;
    config.max_registered_monitors_cbs = 2;
    config.mode = OSAL_MMNGR_ALLOC_MODE_FREE_LIST;
    size = 4096;
    alignment = 64;

    EXPECT_EQ(R_OSAL_MmngrOpen(&config, &hndl_mmngr), OSAL_RETURN_OK) <<  "pre-process failed";
    EXPECT_NE(hndl_mmngr,OSAL_MEMORY_MANAGER_HANDLE_INVALID) <<  "pre-process failed";

    // Test09_010_009
    // @brief: normal case: config.mode = OSAL_MMNGR_ALLOC_MODE_FREE_LIST;
    EXPECT_EQ(R_OSAL_MmngrAlloc(hndl_mmngr, size, alignment, &buffer_obj), OSAL_RETURN_OK);
    EXPECT_TRUE(buffer_obj != OSAL_MEMORY_BUFFER_HANDLE_INVALID);
    size = 64;
    offset = 0;
    EXPECT_EQ(R_OSAL_MmngrFlush(buffer_obj, offset, size ), OSAL_RETURN_OK) << "Test09_010_009 failed";
    size = 64;
    offset = 128;
    EXPECT_EQ(R_OSAL_MmngrFlush(buffer_obj,offset, size ), OSAL_RETURN_OK) << "Test09_010_009 failed";
    size = 128;
    offset = 0;
    EXPECT_EQ(R_OSAL_MmngrFlush(buffer_obj, offset, size ), OSAL_RETURN_OK) << "Test09_010_009 failed";
    EXPECT_EQ(R_OSAL_MmngrDealloc(hndl_mmngr, buffer_obj), OSAL_RETURN_OK);
    buffer_obj = OSAL_MEMORY_BUFFER_HANDLE_INVALID;

    // post-process: close memory manager
    EXPECT_EQ(R_OSAL_MmngrClose(hndl_mmngr), OSAL_RETURN_OK) << "post-process failed";
    hndl_mmngr = OSAL_MEMORY_MANAGER_HANDLE_INVALID;
}
// [MmngrFlush_TC_09_010_009]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrFlush_TC_09_010_010 MemoryApiTest.MmngrFlush_TC_09_010_010
 * @subsection MmngrFlush_TC_09_010_010_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrFlush_TC_09_010_010_tci Test Case ID
 * MmngrFlush_S3_N_TC_09_010_010
 * @subsection MmngrFlush_TC_09_010_010_rr Related Requirement(s)
 * \#276556
 * @subsection MmngrFlush_TC_09_010_010_pp Prerequisite/Precondition
 * OSAL is initialized.
 * @subsection MmngrFlush_TC_09_010_010_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrFlush with normal condition and mode is OSAL_MMNGR_ALLOC_MODE_STACK.
 * - pre-process: open new memory manager
 * - Test09_010_010: confirm the behavior when allocate a buffer with size is less than the alignment.
 * - post-process: close memory manager
 * @subsection MmngrFlush_TC_09_010_010_tpts Test Procedure/Test Steps
 * -# Call R_OSAL_MmngrOpen with bellow config:
 *  - config.memory_limit                = 4096
 *  - config.max_allowed_allocations     = 1
 *  - config.max_registered_monitors_cbs = 2
 *  - config.mode = OSAL_MMNGR_ALLOC_MODE_STACK
 * -# Call R_OSAL_MmngrAlloc with "size" is 64 and "alignment" is 128 to allocate a memory buffer.
 * -# Call R_OSAL_MmngrGetSize to return the allocated buffer size.
 * -# Call R_OSAL_MmngrFlush with size is 64 and offset is 0.
 * -# Call R_OSAL_MmngrDealloc to deallocate the allocated memory buffer.
 * -# Call R_OSAL_MmngrClose to close the handle.
 * @subsection MmngrFlush_TC_09_010_010_ereb Expected Result/Behavior
 * -# The return of R_OSAL_MmngrOpen is OSAL_RETURN_OK.<br>
 * The returned handle is not OSAL_MEMORY_MANAGER_HANDLE_INVALID.
 * -# The return value of R_OSAL_MmngrAlloc is OSAL_RETURN_OK.<br>
 * The return buffer is not OSAL_MEMORY_BUFFER_HANDLE_INVALID.
 * -# The return value of R_OSAL_MmngrGetSize is OSAL_RETURN_OK.<br>
 * The return size is 64
 * -# The return value of R_OSAL_MmngrFlush is OSAL_RETURN_OK.<br>
 * -# The return value of R_OSAL_MmngrDealloc is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrClose is OSAL_RETURN_OK.<br>
 * @subsection MmngrFlush_TC_09_010_010_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrFlush_TC_09_010_010
 */
// [MmngrFlush_TC_09_010_010]
TEST_F(MemoryApiTest, MmngrFlush_TC_09_010_010)
{
    size_t get_size;

    // pre-process: open memory manager
    config.memory_limit                = 4096;
    config.max_allowed_allocations     = 1;
    config.max_registered_monitors_cbs = 2;
    config.mode = OSAL_MMNGR_ALLOC_MODE_STACK;
    size = 64;
    alignment = 128;

    EXPECT_EQ(R_OSAL_MmngrOpen(&config, &hndl_mmngr), OSAL_RETURN_OK) <<  "pre-process failed";
    EXPECT_NE(hndl_mmngr,OSAL_MEMORY_MANAGER_HANDLE_INVALID) <<  "pre-process failed";
    
    // Test09_010_010
    // @brief: normal case: Check with the allocated buffer size is less than the alignment.
    EXPECT_EQ(R_OSAL_MmngrAlloc(hndl_mmngr, size, alignment, &buffer_obj), OSAL_RETURN_OK);
    EXPECT_NE(buffer_obj,OSAL_MEMORY_BUFFER_HANDLE_INVALID);
    EXPECT_EQ(R_OSAL_MmngrGetSize(buffer_obj, &get_size), OSAL_RETURN_OK);
    EXPECT_EQ(get_size, 64);
    offset = 0;
    size = 64;
    EXPECT_EQ(R_OSAL_MmngrFlush(buffer_obj, offset, size), OSAL_RETURN_OK) << "Test09_010_010 failed";
    EXPECT_EQ(R_OSAL_MmngrDealloc(hndl_mmngr, buffer_obj), OSAL_RETURN_OK);
    buffer_obj = OSAL_MEMORY_BUFFER_HANDLE_INVALID;

    // post-process: close memory manager
    EXPECT_EQ(R_OSAL_MmngrClose(hndl_mmngr), OSAL_RETURN_OK) << "post-process failed";
    hndl_mmngr = OSAL_MEMORY_MANAGER_HANDLE_INVALID;
}
// [MmngrFlush_TC_09_010_010]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrFlush_TC_09_010_011 MemoryApiTest.MmngrFlush_TC_09_010_011
 * @subsection MmngrFlush_TC_09_010_011_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrFlush_TC_09_010_011_tci Test Case ID
 * MmngrFlush_S3_N_TC_09_010_011
 * @subsection MmngrFlush_TC_09_010_011_rr Related Requirement(s)
 * \#276556
 * @subsection MmngrFlush_TC_09_010_011_pp Prerequisite/Precondition
 * OSAL is initialized.
 * @subsection MmngrFlush_TC_09_010_011_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrFlush with normal condition and mode is OSAL_MMNGR_ALLOC_MODE_STACK_PROT.
 * - pre-process: open new memory manager
 * - Test09_010_011: with all valid parameters.
 * - post-process: close memory manager
 * @subsection MmngrFlush_TC_09_010_011_tpts Test Procedure/Test Steps
 * -# Call R_OSAL_MmngrOpen with bellow config:
 *  - config.memory_limit                = 4096
 *  - config.max_allowed_allocations     = 1
 *  - config.max_registered_monitors_cbs = 2
 *  - config.mode = OSAL_MMNGR_ALLOC_MODE_STACK_PROT
 * -# Call R_OSAL_MmngrAlloc with "size" is 4096 and "alignment" is 64 to allocate a memory buffer.
 * -# Call R_OSAL_MmngrFlush with offset is 0 and size is 64.
 * -# Call R_OSAL_MmngrDealloc to deallocate the allocated memory buffer.
 * -# Call R_OSAL_MmngrClose to close memory handle.
 * @subsection MmngrFlush_TC_09_010_011_ereb Expected Result/Behavior
 * -# The return of R_OSAL_MmngrOpen is OSAL_RETURN_OK.<br>
 * The returned handle is not OSAL_MEMORY_MANAGER_HANDLE_INVALID.
 * -# The return value of R_OSAL_MmngrAlloc is OSAL_RETURN_OK.<br>
 * The return buffer is not OSAL_MEMORY_BUFFER_HANDLE_INVALID.
 * -# The return value of the R_OSAL_MmngrFlush is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrDealloc is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrClose is OSAL_RETURN_OK.
 * @subsection MmngrFlush_TC_09_010_011_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrFlush_TC_09_010_011
 */
// [MmngrFlush_TC_09_010_011]
TEST_F(MemoryApiTest, MmngrFlush_TC_09_010_011)
{
    // pre-process: open memory manager
    config.memory_limit                = 4096;
    config.max_allowed_allocations     = 1;
    config.max_registered_monitors_cbs = 2;
    config.mode = OSAL_MMNGR_ALLOC_MODE_STACK_PROT;
    size = 4096;
    alignment = 64;

    EXPECT_EQ(R_OSAL_MmngrOpen(&config, &hndl_mmngr), OSAL_RETURN_OK) <<  "pre-process failed";
    EXPECT_NE(hndl_mmngr,OSAL_MEMORY_MANAGER_HANDLE_INVALID) <<  "pre-process failed";
    
    // Test09_010_011
    // @brief: normal case: all valid argument
    EXPECT_EQ(R_OSAL_MmngrAlloc(hndl_mmngr, size, alignment, &buffer_obj), OSAL_RETURN_OK)  <<  "Test09_010_011 failed";
    EXPECT_TRUE(buffer_obj != OSAL_MEMORY_BUFFER_HANDLE_INVALID)  <<  "Test09_010_011 failed";
    size = 64;
    offset = 0;
    EXPECT_EQ(R_OSAL_MmngrFlush(buffer_obj, offset, size ), OSAL_RETURN_OK) << "Test09_010_011 failed";
    EXPECT_EQ(R_OSAL_MmngrDealloc(hndl_mmngr, buffer_obj), OSAL_RETURN_OK) << "Test09_010_011 failed";
    buffer_obj = OSAL_MEMORY_BUFFER_HANDLE_INVALID;

    // post-process: close memory manager
    EXPECT_EQ(R_OSAL_MmngrClose(hndl_mmngr), OSAL_RETURN_OK) << "post-process failed";
    hndl_mmngr = OSAL_MEMORY_MANAGER_HANDLE_INVALID;
}
// [MmngrFlush_TC_09_010_011]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrFlush_TC_09_010_012 MemoryApiTest.MmngrFlush_TC_09_010_012
 * @subsection MmngrFlush_TC_09_010_012_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrFlush_TC_09_010_012_tci Test Case ID
 * MmngrFlush_S3_N_TC_09_010_012
 * @subsection MmngrFlush_TC_09_010_012_rr Related Requirement(s)
 * \#276556
 * @subsection MmngrFlush_TC_09_010_012_pp Prerequisite/Precondition
 * OSAL is initialized.
 * @subsection MmngrFlush_TC_09_010_012_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrFlush with normal condition and mode is OSAL_MMNGR_ALLOC_MODE_STACK_PROT.
 * - pre-process: open new memory manager
 * - Test09_010_012: with all valid parameters.
 * - post-process: close memory manager
 * @subsection MmngrFlush_TC_09_010_012_tpts Test Procedure/Test Steps
 * -# Call R_OSAL_MmngrOpen with bellow config:
 *  - config.memory_limit                = 4096
 *  - config.max_allowed_allocations     = 1
 *  - config.max_registered_monitors_cbs = 2
 *  - config.mode = OSAL_MMNGR_ALLOC_MODE_STACK_PROT
 * -# Call R_OSAL_MmngrAlloc with "size" is 4096 and "alignment" is 64 to allocate a memory buffer.
 * -# Call R_OSAL_MmngrFlush with offset is 128 and size is 64.
 * -# Call R_OSAL_MmngrDealloc to deallocate the allocated memory buffer.
 * -# Call R_OSAL_MmngrClose to close memory handle.
 * @subsection MmngrFlush_TC_09_010_012_ereb Expected Result/Behavior
 * -# The return of R_OSAL_MmngrOpen is OSAL_RETURN_OK.<br>
 * The returned handle is not OSAL_MEMORY_MANAGER_HANDLE_INVALID.
 * -# The return value of R_OSAL_MmngrAlloc is OSAL_RETURN_OK.<br>
 * The return buffer is not OSAL_MEMORY_BUFFER_HANDLE_INVALID.
 * -# The return value of the R_OSAL_MmngrFlush is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrDealloc is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrClose is OSAL_RETURN_OK.
 * @subsection MmngrFlush_TC_09_010_012_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrFlush_TC_09_010_012
 */
// [MmngrFlush_TC_09_010_012]
TEST_F(MemoryApiTest, MmngrFlush_TC_09_010_012)
{
    // pre-process: open memory manager
    config.memory_limit                = 4096;
    config.max_allowed_allocations     = 1;
    config.max_registered_monitors_cbs = 2;
    config.mode = OSAL_MMNGR_ALLOC_MODE_STACK_PROT;
    size = 4096;
    alignment = 64;

    EXPECT_EQ(R_OSAL_MmngrOpen(&config, &hndl_mmngr), OSAL_RETURN_OK) <<  "pre-process failed";
    EXPECT_NE(hndl_mmngr,OSAL_MEMORY_MANAGER_HANDLE_INVALID) <<  "pre-process failed";
    
    // Test09_010_012
    // @brief: normal case: all valid argument
    EXPECT_EQ(R_OSAL_MmngrAlloc(hndl_mmngr, size, alignment, &buffer_obj), OSAL_RETURN_OK)  <<  "Test09_010_012 failed";
    EXPECT_TRUE(buffer_obj != OSAL_MEMORY_BUFFER_HANDLE_INVALID)  <<  "Test09_010_012 failed";
    size = 64;
    offset = 128;
    EXPECT_EQ(R_OSAL_MmngrFlush(buffer_obj, offset, size ), OSAL_RETURN_OK) << "Test09_010_012 failed";
    EXPECT_EQ(R_OSAL_MmngrDealloc(hndl_mmngr, buffer_obj), OSAL_RETURN_OK) << "Test09_010_012 failed";
    buffer_obj = OSAL_MEMORY_BUFFER_HANDLE_INVALID;

    // post-process: close memory manager
    EXPECT_EQ(R_OSAL_MmngrClose(hndl_mmngr), OSAL_RETURN_OK) << "post-process failed";
    hndl_mmngr = OSAL_MEMORY_MANAGER_HANDLE_INVALID;
}
// [MmngrFlush_TC_09_010_012]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrFlush_TC_09_010_013 MemoryApiTest.MmngrFlush_TC_09_010_013
 * @subsection MmngrFlush_TC_09_010_013_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrFlush_TC_09_010_013_tci Test Case ID
 * MmngrFlush_S3_N_TC_09_010_013
 * @subsection MmngrFlush_TC_09_010_013_rr Related Requirement(s)
 * \#276556
 * @subsection MmngrFlush_TC_09_010_013_pp Prerequisite/Precondition
 * OSAL is initialized.
 * @subsection MmngrFlush_TC_09_010_013_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrFlush with normal condition and mode is OSAL_MMNGR_ALLOC_MODE_STACK_PROT.
 * - pre-process: open new memory manager
 * - Test09_010_013: with all valid parameters.
 * - post-process: close memory manager
 * @subsection MmngrFlush_TC_09_010_013_tpts Test Procedure/Test Steps
 * -# Call R_OSAL_MmngrOpen with bellow config:
 *  - config.memory_limit                = 4096
 *  - config.max_allowed_allocations     = 1
 *  - config.max_registered_monitors_cbs = 2
 *  - config.mode = OSAL_MMNGR_ALLOC_MODE_STACK_PROT
 * -# Call R_OSAL_MmngrAlloc with "size" is 4096 and "alignment" is 64 to allocate a memory buffer.
 * -# Call R_OSAL_MmngrFlush with offset is 0 and size is 128.
 * -# Call R_OSAL_MmngrDealloc to deallocate the allocated memory buffer.
 * -# Call R_OSAL_MmngrClose to close memory handle.
 * @subsection MmngrFlush_TC_09_010_013_ereb Expected Result/Behavior
 * -# The return of R_OSAL_MmngrOpen is OSAL_RETURN_OK.<br>
 * The returned handle is not OSAL_MEMORY_MANAGER_HANDLE_INVALID.
 * -# The return value of R_OSAL_MmngrAlloc is OSAL_RETURN_OK.<br>
 * The return buffer is not OSAL_MEMORY_BUFFER_HANDLE_INVALID.
 * -# The return value of the R_OSAL_MmngrFlush is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrDealloc is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrClose is OSAL_RETURN_OK.
 * @subsection MmngrFlush_TC_09_010_013_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrFlush_TC_09_010_013
 */
// [MmngrFlush_TC_09_010_013]
TEST_F(MemoryApiTest, MmngrFlush_TC_09_010_013)
{
    // pre-process: open memory manager
    config.memory_limit                = 4096;
    config.max_allowed_allocations     = 1;
    config.max_registered_monitors_cbs = 2;
    config.mode = OSAL_MMNGR_ALLOC_MODE_STACK_PROT;
    size = 4096;
    alignment = 64;

    EXPECT_EQ(R_OSAL_MmngrOpen(&config, &hndl_mmngr), OSAL_RETURN_OK) <<  "pre-process failed";
    EXPECT_NE(hndl_mmngr,OSAL_MEMORY_MANAGER_HANDLE_INVALID) <<  "pre-process failed";
    
    // Test09_010_013
    // @brief: normal case: all valid argument
    EXPECT_EQ(R_OSAL_MmngrAlloc(hndl_mmngr, size, alignment, &buffer_obj), OSAL_RETURN_OK)  <<  "Test09_010_013 failed";
    EXPECT_TRUE(buffer_obj != OSAL_MEMORY_BUFFER_HANDLE_INVALID)  <<  "Test09_010_013 failed";
    offset = 0;
    size = 128;
    EXPECT_EQ(R_OSAL_MmngrFlush(buffer_obj, offset, size ), OSAL_RETURN_OK) << "Test09_010_013 failed";
    EXPECT_EQ(R_OSAL_MmngrDealloc(hndl_mmngr, buffer_obj), OSAL_RETURN_OK) << "Test09_010_013 failed";
    buffer_obj = OSAL_MEMORY_BUFFER_HANDLE_INVALID;

    // post-process: close memory manager
    EXPECT_EQ(R_OSAL_MmngrClose(hndl_mmngr), OSAL_RETURN_OK) << "post-process failed";
    hndl_mmngr = OSAL_MEMORY_MANAGER_HANDLE_INVALID;
}
// [MmngrFlush_TC_09_010_013]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrFlush_TC_09_010_014 MemoryApiTest.MmngrFlush_TC_09_010_014
 * @subsection MmngrFlush_TC_09_010_014_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrFlush_TC_09_010_014_tci Test Case ID
 * MmngrFlush_S2_A_TC_09_010_014
 * @subsection MmngrFlush_TC_09_010_014_rr Related Requirement(s)
 * \#276556
 * @subsection MmngrFlush_TC_09_010_014_pp Prerequisite/Precondition
 * OSAL is initialized.
 * @subsection MmngrFlush_TC_09_010_014_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrFlush with abnormal condition and mode is OSAL_MMNGR_ALLOC_MODE_STACK_PROT.
 * - pre-process: open new memory manager and allocate buffer
 * - Test09_010_014: Call memory APIs with the sequence as below:<br>
 * R_OSAL_MmngrAlloc -> R_OSAL_MmngrDealloc -> R_OSAL_MmngrFlush
 * - post-process: close memory manager
 * @subsection MmngrFlush_TC_09_010_014_tpts Test Procedure/Test Steps
 * -# Call R_OSAL_MmngrOpen with bellow config:
 *  - config.memory_limit                = 4096
 *  - config.max_allowed_allocations     = 1
 *  - config.max_registered_monitors_cbs = 2
 *  - config.mode = OSAL_MMNGR_ALLOC_MODE_STACK_PROT
 * -# Call R_OSAL_MmngrAlloc to allocate a memory buffer.
 * -# Call R_OSAL_MmngrDealloc to deallocate the allocated memory buffer.
 * -# Call R_OSAL_MmngrFlush with offset is 0, size is 64.
 * -# Call R_OSAL_MmngrClose to close memory handle.
 * @subsection MmngrFlush_TC_09_010_014_ereb Expected Result/Behavior
 * -# The return of R_OSAL_MmngrOpen is OSAL_RETURN_OK.<br>
 * The returned handle is not OSAL_MEMORY_MANAGER_HANDLE_INVALID.
 * -# The return value of R_OSAL_MmngrAlloc is OSAL_RETURN_OK.<br>
 * the return buffer is not OSAL_MEMORY_BUFFER_HANDLE_INVALID.
 * -# The return value of R_OSAL_MmngrDealloc is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrFlush is OSAL_RETURN_HANDLE.
 * -# The return value of R_OSAL_MmngrClose is OSAL_RETURN_OK.
 * @subsection MmngrFlush_TC_09_010_014_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrFlush_TC_09_010_014
 */
// [MmngrFlush_TC_09_010_014]
TEST_F(MemoryApiTest, MmngrFlush_TC_09_010_014)
{
    // pre-process: open memory manager
    config.memory_limit                = 4096;
    config.max_allowed_allocations     = 1;
    config.max_registered_monitors_cbs = 2;
    config.mode = OSAL_MMNGR_ALLOC_MODE_STACK_PROT;
    size = 4096;
    alignment = 64;

    EXPECT_EQ(R_OSAL_MmngrOpen(&config, &hndl_mmngr), OSAL_RETURN_OK) <<  "pre-process failed";
    EXPECT_NE(hndl_mmngr,OSAL_MEMORY_MANAGER_HANDLE_INVALID) <<  "pre-process failed";

    // Test09_010_014
    // @brief: abnormal case: R_OSAL_MmngrOpen -> R_OSAL_MmngrAlloc -> R_OSAL_MmngrDealloc -> R_OSAL_MmngrFlush
    EXPECT_EQ(R_OSAL_MmngrAlloc(hndl_mmngr, size, alignment, &buffer_obj), OSAL_RETURN_OK);
    EXPECT_NE(buffer_obj,OSAL_MEMORY_BUFFER_HANDLE_INVALID);
    EXPECT_EQ(R_OSAL_MmngrDealloc(hndl_mmngr, buffer_obj), OSAL_RETURN_OK);
    offset = 0;
    size = 64;
    EXPECT_EQ(R_OSAL_MmngrFlush(buffer_obj, offset, size ), OSAL_RETURN_HANDLE) << "Test09_010_014 failed";
    buffer_obj = OSAL_MEMORY_BUFFER_HANDLE_INVALID;

    // post-process: close memory manager
    EXPECT_EQ(R_OSAL_MmngrClose(hndl_mmngr), OSAL_RETURN_OK) <<  "post-process failed";
    hndl_mmngr = OSAL_MEMORY_MANAGER_HANDLE_INVALID;
}
// [MmngrFlush_TC_09_010_014]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrFlush_TC_09_010_015 MemoryApiTest.MmngrFlush_TC_09_010_015
 * @subsection MmngrFlush_TC_09_010_015_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrFlush_TC_09_010_015_tci Test Case ID
 * MmngrFlush_S4_A_TC_09_010_015
 * @subsection MmngrFlush_TC_09_010_015_rr Related Requirement(s)
 * \#276556
 * @subsection MmngrFlush_TC_09_010_015_pp Prerequisite/Precondition
 * OSAL is initialized.
 * @subsection MmngrFlush_TC_09_010_015_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrFlush with abnormal condition and mode is OSAL_MMNGR_ALLOC_MODE_STACK_PROT.
 * - pre-process: open new memory manager and allocate buffer
 * - Test09_010_015: buffer is not support to flush buffer.
 * - post-process: close memory manager
 * @subsection MmngrFlush_TC_09_010_015_tpts Test Procedure/Test Steps
 * -# Call R_OSAL_MmngrOpen with bellow config:
 *  - config.memory_limit                = 4096
 *  - config.max_allowed_allocations     = 1
 *  - config.max_registered_monitors_cbs = 2
 *  - config.mode = OSAL_MMNGR_ALLOC_MODE_STACK_PROT
 * -# Allocate "tmp_buffer_obj" by using malloc function.
 * -# Call R_OSAL_MmngrAlloc to allocate a memory buffer.
 * -# Store "buffer_obj->p_flush" to "tmp_buffer_obj->p_flush".<br>
 * Set "buffer_obj->p_flush" to NULL. <br>
 * Call R_OSAL_MmngrFlush with the changed buffer "buffer_obj".<br>
 * Re-assign "tmp_buffer_obj->p_flush" to "buffer_obj->p_flush".
 * -# Call R_OSAL_MmngrDealloc to deallocate the original allocated buffer.
 * -# Free buffer pointed by "tmp_buffer_obj"
 * -# Call R_OSAL_MmngrClose to close memory handle.
 * @subsection MmngrFlush_TC_09_010_015_ereb Expected Result/Behavior
 * -# The return of R_OSAL_MmngrOpen is OSAL_RETURN_OK.<br>
 * The returned handle is not OSAL_MEMORY_MANAGER_HANDLE_INVALID.
 * -# Memory allocation succeeded (Pointer to buffer != Nullpointer)
 * -# The return value of R_OSAL_MmngrAlloc is OSAL_RETURN_OK.<br>
 * The return buffer is not OSAL_MEMORY_BUFFER_HANDLE_INVALID.
 * -# The return value of R_OSAL_MmngrFlush is OSAL_RETURN_UNSUPPORTED_OPERATION.
 * -# The return value of R_OSAL_MmngrDealloc is OSAL_RETURN_OK.
 * -# Allocated memory free succeeded.
 * -# The return value of R_OSAL_MmngrClose is OSAL_RETURN_OK.
 * @subsection MmngrFlush_TC_09_010_015_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrFlush_TC_09_010_015
 */
// [MmngrFlush_TC_09_010_015]
TEST_F(MemoryApiTest, MmngrFlush_TC_09_010_015)
{
    osal_memory_buffer_handle_t tmp_buffer_obj;

    // pre-process: open memory manager
    config.memory_limit                = 4096;
    config.max_allowed_allocations     = 1;
    config.max_registered_monitors_cbs = 2;
    config.mode = OSAL_MMNGR_ALLOC_MODE_STACK_PROT;
    size = 4096;
    alignment = 64;

    EXPECT_EQ(R_OSAL_MmngrOpen(&config, &hndl_mmngr), OSAL_RETURN_OK) <<  "pre-process failed";
    EXPECT_NE(hndl_mmngr,OSAL_MEMORY_MANAGER_HANDLE_INVALID) <<  "pre-process failed";

    // Test09_010_015
    // @brief: abnormal case: memory_buffer_obj_hndl->flush = NULL
    tmp_buffer_obj = (osal_memory_buffer_handle_t)malloc (sizeof(st_osal_memory_buffer_obj));
    EXPECT_EQ(R_OSAL_MmngrAlloc(hndl_mmngr, size, alignment, &buffer_obj), OSAL_RETURN_OK);
    EXPECT_TRUE(buffer_obj != OSAL_MEMORY_BUFFER_HANDLE_INVALID);
    tmp_buffer_obj->p_flush = buffer_obj->p_flush;
    buffer_obj->p_flush = NULL;
    offset = 0;
    size = 64;
    EXPECT_EQ(R_OSAL_MmngrFlush(buffer_obj, offset, size ), OSAL_RETURN_UNSUPPORTED_OPERATION) << "Test09_010_015 failed";
    buffer_obj->p_flush = tmp_buffer_obj->p_flush;
    EXPECT_EQ(R_OSAL_MmngrDealloc(hndl_mmngr, buffer_obj), OSAL_RETURN_OK);
    buffer_obj = OSAL_MEMORY_BUFFER_HANDLE_INVALID;
    free(tmp_buffer_obj);

    // post-process: close memory manager
    EXPECT_EQ(R_OSAL_MmngrClose(hndl_mmngr), OSAL_RETURN_OK) <<  "post-process failed";
    hndl_mmngr = OSAL_MEMORY_MANAGER_HANDLE_INVALID;
}
// [MmngrFlush_TC_09_010_015]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrFlush_TC_09_010_016 MemoryApiTest.MmngrFlush_TC_09_010_016
 * @subsection MmngrFlush_TC_09_010_016_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrFlush_TC_09_010_016_tci Test Case ID
 * MmngrFlush_S0_A_TC_09_010_016
 * @subsection MmngrFlush_TC_09_010_016_rr Related Requirement(s)
 * \#276556
 * @subsection MmngrFlush_TC_09_010_016_pp Prerequisite/Precondition
 * OSAL is initialized.
 * @subsection MmngrFlush_TC_09_010_016_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrFlush with abnormal condition and mode is OSAL_MMNGR_ALLOC_MODE_STACK_PROT.
 * - pre-process: open new memory manager and allocate buffer
 * - Test09_010_016: offset is not aligned ARM Cache Line Size (64).
 * - post-process: close memory manager
 * @subsection MmngrFlush_TC_09_010_016_tpts Test Procedure/Test Steps
 * -# Call R_OSAL_MmngrOpen with bellow config:
 *  - config.memory_limit                = 4096
 *  - config.max_allowed_allocations     = 1
 *  - config.max_registered_monitors_cbs = 2
 *  - config.mode = OSAL_MMNGR_ALLOC_MODE_STACK_PROT
 * -# Call R_OSAL_MmngrAlloc to allocate a memory buffer.
 * -# Call R_OSAL_MmngrFlush with offset is 129, size is 64.
 * -# Call R_OSAL_MmngrDealloc to deallocate the allocated memory buffer.
 * -# Call R_OSAL_MmngrClose to close memory handle.
 * @subsection MmngrFlush_TC_09_010_016_ereb Expected Result/Behavior
 * -# The return of R_OSAL_MmngrOpen is OSAL_RETURN_OK.<br>
 * The returned handle is not OSAL_MEMORY_MANAGER_HANDLE_INVALID.
 * -# The return value of R_OSAL_MmngrAlloc is OSAL_RETURN_OK.<br>
 * The return buffer is not OSAL_MEMORY_BUFFER_HANDLE_INVALID.
 * -# The return value of R_OSAL_MmngrFlush is OSAL_RETURN_PAR.
 * -# The return value of R_OSAL_MmngrDealloc is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrClose is OSAL_RETURN_OK.
 * @subsection MmngrFlush_TC_09_010_016_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrFlush_TC_09_010_016
 */
// [MmngrFlush_TC_09_010_016]
TEST_F(MemoryApiTest, MmngrFlush_TC_09_010_016)
{
    // pre-process: open memory manager
    config.memory_limit                = 4096;
    config.max_allowed_allocations     = 1;
    config.max_registered_monitors_cbs = 2;
    config.mode = OSAL_MMNGR_ALLOC_MODE_STACK_PROT;
    size = 4096;
    alignment = 64;

    EXPECT_EQ(R_OSAL_MmngrOpen(&config, &hndl_mmngr), OSAL_RETURN_OK) <<  "pre-process failed";
    EXPECT_NE(hndl_mmngr,OSAL_MEMORY_MANAGER_HANDLE_INVALID) <<  "pre-process failed";

    // Test09_010_016
    // @brief: abnormal case: offset is not aligned ARM Cache Line Size (64)
    EXPECT_EQ(R_OSAL_MmngrAlloc(hndl_mmngr, size, alignment, &buffer_obj), OSAL_RETURN_OK);
    EXPECT_NE(buffer_obj,OSAL_MEMORY_BUFFER_HANDLE_INVALID);
    offset = 129;
    size = 64;
    EXPECT_EQ(R_OSAL_MmngrFlush(buffer_obj, offset, size ), OSAL_RETURN_PAR) << "Test09_010_016 failed";
    EXPECT_EQ(R_OSAL_MmngrDealloc(hndl_mmngr, buffer_obj), OSAL_RETURN_OK);
    buffer_obj = OSAL_MEMORY_BUFFER_HANDLE_INVALID;

    // post-process: close memory manager
    EXPECT_EQ(R_OSAL_MmngrClose(hndl_mmngr), OSAL_RETURN_OK) <<  "post-process failed";
}
// [MmngrFlush_TC_09_010_016]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrFlush_TC_09_010_017 MemoryApiTest.MmngrFlush_TC_09_010_017
 * @subsection MmngrFlush_TC_09_010_017_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrFlush_TC_09_010_017_tci Test Case ID
 * MmngrFlush_S0_A_TC_09_010_017
 * @subsection MmngrFlush_TC_09_010_017_rr Related Requirement(s)
 * \#276556
 * @subsection MmngrFlush_TC_09_010_017_pp Prerequisite/Precondition
 * OSAL is initialized.
 * @subsection MmngrFlush_TC_09_010_017_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrFlush with abnormal condition and mode is OSAL_MMNGR_ALLOC_MODE_STACK_PROT.
 * - pre-process: open new memory manager and allocate buffer
 * - Test09_010_017: size is less than minimum required size (64).
 * - post-process: close memory manager
 * @subsection MmngrFlush_TC_09_010_017_tpts Test Procedure/Test Steps
 * -# Call R_OSAL_MmngrOpen with bellow config:
 *  - config.memory_limit                = 4096
 *  - config.max_allowed_allocations     = 1
 *  - config.max_registered_monitors_cbs = 2
 *  - config.mode = OSAL_MMNGR_ALLOC_MODE_STACK_PROT
 * -# Call R_OSAL_MmngrAlloc with size is 4096 and alignment is 64 to allocate a memory buffer.
 * -# Call R_OSAL_MmngrFlush with offset is 0 and size is 63.
 * -# Call R_OSAL_MmngrDealloc to deallocate the allocated memory buffer.
 * -# Call R_OSAL_MmngrClose to close memory handle.
 * @subsection MmngrFlush_TC_09_010_017_ereb Expected Result/Behavior
 * -# The return of R_OSAL_MmngrOpen is OSAL_RETURN_OK.<br>
 * The returned handle is not OSAL_MEMORY_MANAGER_HANDLE_INVALID.
 * -# The return value of R_OSAL_MmngrAlloc is OSAL_RETURN_OK.<br>
 * The return buffer is not OSAL_MEMORY_BUFFER_HANDLE_INVALID.
 * -# The return value of R_OSAL_MmngrFlush is OSAL_RETURN_PAR.
 * -# The return value of R_OSAL_MmngrDealloc is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrClose is OSAL_RETURN_OK.
 * @subsection MmngrFlush_TC_09_010_017_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrFlush_TC_09_010_017
 */
// [MmngrFlush_TC_09_010_017]
TEST_F(MemoryApiTest, MmngrFlush_TC_09_010_017)
{
    // pre-process: open memory manager
    config.memory_limit                = 4096;
    config.max_allowed_allocations     = 1;
    config.max_registered_monitors_cbs = 2;
    config.mode = OSAL_MMNGR_ALLOC_MODE_STACK_PROT;
    size = 4096;
    alignment = 64;

    EXPECT_EQ(R_OSAL_MmngrOpen(&config, &hndl_mmngr), OSAL_RETURN_OK) <<  "pre-process failed";
    EXPECT_NE(hndl_mmngr,OSAL_MEMORY_MANAGER_HANDLE_INVALID) <<  "pre-process failed";

    // Test09_010_017
    // @brief: abnormal case: size is less than minimum required size (64)
    EXPECT_EQ(R_OSAL_MmngrAlloc(hndl_mmngr, size, alignment, &buffer_obj), OSAL_RETURN_OK);
    EXPECT_NE(buffer_obj,OSAL_MEMORY_BUFFER_HANDLE_INVALID);
    offset = 0;
    size = 63;
    EXPECT_EQ(R_OSAL_MmngrFlush(buffer_obj, offset, size), OSAL_RETURN_PAR) << "Test09_010_017 failed";
    EXPECT_EQ(R_OSAL_MmngrDealloc(hndl_mmngr, buffer_obj), OSAL_RETURN_OK);
    buffer_obj = OSAL_MEMORY_BUFFER_HANDLE_INVALID;

    // post-process: close memory manager
    EXPECT_EQ(R_OSAL_MmngrClose(hndl_mmngr), OSAL_RETURN_OK) <<  "post-process failed";
}
// [MmngrFlush_TC_09_010_017]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrFlush_TC_09_010_018 MemoryApiTest.MmngrFlush_TC_09_010_018
 * @subsection MmngrFlush_TC_09_010_018_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrFlush_TC_09_010_018_tci Test Case ID
 * MmngrFlush_S3_N_TC_09_010_018
 * @subsection MmngrFlush_TC_09_010_018_rr Related Requirement(s)
 * \#276556
 * @subsection MmngrFlush_TC_09_010_018_pp Prerequisite/Precondition
 * OSAL is initialized.
 * @subsection MmngrFlush_TC_09_010_018_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrFlush with normal condition and mode is OSAL_MMNGR_ALLOC_MODE_STACK_PROT.
 * - pre-process: open new memory manager
 * - Test09_010_018: confirm the behavior when allocate a buffer with size is less than the alignment.
 * - post-process: close memory manager
 * @subsection MmngrFlush_TC_09_010_018_tpts Test Procedure/Test Steps
 * -# Call R_OSAL_MmngrOpen with bellow config:
 *  - config.memory_limit                = 4096
 *  - config.max_allowed_allocations     = 1
 *  - config.max_registered_monitors_cbs = 2
 *  - config.mode = OSAL_MMNGR_ALLOC_MODE_STACK_PROT
 * -# Call R_OSAL_MmngrAlloc with "size" is 64 and "alignment" is 128 to allocate a memory buffer.
 * -# Call R_OSAL_MmngrGetSize to return the allocated buffer size.
 * -# Call R_OSAL_MmngrFlush with size is 64 and offset is 0.
 * -# Call R_OSAL_MmngrDealloc to deallocate the allocated memory buffer.
 * -# Call R_OSAL_MmngrClose to close the handle.
 * @subsection MmngrFlush_TC_09_010_018_ereb Expected Result/Behavior
 * -# The return of R_OSAL_MmngrOpen is OSAL_RETURN_OK.<br>
 * The returned handle is not OSAL_MEMORY_MANAGER_HANDLE_INVALID.
 * -# The return value of R_OSAL_MmngrAlloc is OSAL_RETURN_OK.<br>
 * The return buffer is not OSAL_MEMORY_BUFFER_HANDLE_INVALID.
 * -# The return value of R_OSAL_MmngrGetSize is OSAL_RETURN_OK.<br>
 * The return size is 64
 * -# The return value of R_OSAL_MmngrFlush is OSAL_RETURN_OK.<br>
 * -# The return value of R_OSAL_MmngrDealloc is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrClose is OSAL_RETURN_OK.<br>
 * @subsection MmngrFlush_TC_09_010_018_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrFlush_TC_09_010_018
 */
// [MmngrFlush_TC_09_010_018]
TEST_F(MemoryApiTest, MmngrFlush_TC_09_010_018)
{
    size_t get_size;

    // pre-process: open memory manager
    config.memory_limit                = 4096;
    config.max_allowed_allocations     = 1;
    config.max_registered_monitors_cbs = 2;
    config.mode = OSAL_MMNGR_ALLOC_MODE_STACK_PROT;
    size = 64;
    alignment = 128;

    EXPECT_EQ(R_OSAL_MmngrOpen(&config, &hndl_mmngr), OSAL_RETURN_OK) <<  "pre-process failed";
    EXPECT_NE(hndl_mmngr,OSAL_MEMORY_MANAGER_HANDLE_INVALID) <<  "pre-process failed";
    
    // Test09_010_018
    // @brief: normal case: Check with the allocated buffer size is less than the alignment.
    EXPECT_EQ(R_OSAL_MmngrAlloc(hndl_mmngr, size, alignment, &buffer_obj), OSAL_RETURN_OK);
    EXPECT_NE(buffer_obj,OSAL_MEMORY_BUFFER_HANDLE_INVALID);
    EXPECT_EQ(R_OSAL_MmngrGetSize(buffer_obj, &get_size), OSAL_RETURN_OK);
    EXPECT_EQ(get_size, 64);
    offset = 0;
    size = 64;
    EXPECT_EQ(R_OSAL_MmngrFlush(buffer_obj, offset, size), OSAL_RETURN_OK) << "Test09_010_018 failed";
    EXPECT_EQ(R_OSAL_MmngrDealloc(hndl_mmngr, buffer_obj), OSAL_RETURN_OK);
    buffer_obj = OSAL_MEMORY_BUFFER_HANDLE_INVALID;

    // post-process: close memory manager
    EXPECT_EQ(R_OSAL_MmngrClose(hndl_mmngr), OSAL_RETURN_OK) << "post-process failed";
    hndl_mmngr = OSAL_MEMORY_MANAGER_HANDLE_INVALID;
}
// [MmngrFlush_TC_09_010_018]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrFlush_TC_09_010_019 MemoryApiTest.MmngrFlush_TC_09_010_019
 * @subsection MmngrFlush_TC_09_010_019_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrFlush_TC_09_010_019_tci Test Case ID
 * MmngrFlush_S4_A_TC_09_00_019
 * @subsection MmngrFlush_TC_09_010_019_rr Related Requirement(s)
 * \#276556
 * @subsection MmngrFlush_TC_09_010_019_pp Prerequisite/Precondition
 * OSAL is initialized.
 * @subsection MmngrFlush_TC_09_010_019_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrFlush with abnormal condition in OSAL_MMNGR_ALLOC_MODE_STACK mode.
 * - pre-process: open memory manager
 * - Test09_00_019: "buffer_obj->p_ptr_self" is invalid.
 * - post-process: close memory manager
 * @subsection MmngrFlush_TC_09_010_019_tpts Test Procedure/Test Steps
 * -# Call R_OSAL_MmngrGetOsalMaxConfig to get the valid config then set config mode to OSAL_MMNGR_ALLOC_MODE_STACK
 * -# Call R_OSAL_MmngrOpen with valid parameter and above config.
 * -# Call R_OSAL_MmngrAlloc with valid parameter
 * -# Call R_OSAL_MmngrFlush with an invalid buffer_obj->p_ptr_self:
 *      - buffer_obj with p_ptr_self value changed to p_ptr_self_ng
 *      - "p_ptr_self_ng" is allocated by malloc function.
 * -# Deallocate buffer_obj by using R_OSAL_MmngrDeallocate.
 *      - buffer_obj with valid p_ptr_self value
 * -# Call R_OSAL_MmngrClose to close the memory manager.
 * @subsection MmngrFlush_TC_09_010_019_ereb Expected Result/Behavior
 * -# The return value of R_OSAL_MmngrGetOsalMaxConfig is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrOpen is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrAlloc is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrFlush is OSAL_RETURN_HANDLE.
 * -# The return value of R_OSAL_MmngrDeallocate is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrClose is OSAL_RETURN_OK.
 * @subsection MmngrFlush_TC_09_010_019_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrFlush_TC_09_010_019
 */
// [MmngrFlush_TC_09_010_019]
TEST_F(MemoryApiTest, MmngrFlush_TC_09_010_019)
{
    void* ptr_self_bak;
    void* ptr_self_ng;
    size = 64;
    alignment = 64;
    offset = 0;

    // Test09_010_019
    // @brief: abnormal case: handle->p_ptr_self is invalid
    EXPECT_EQ(R_OSAL_MmngrGetOsalMaxConfig(&config), OSAL_RETURN_OK);
    config.mode = OSAL_MMNGR_ALLOC_MODE_STACK;
    EXPECT_EQ(R_OSAL_MmngrOpen(&config, &hndl_mmngr), OSAL_RETURN_OK);
    EXPECT_EQ(R_OSAL_MmngrAlloc(hndl_mmngr, size, alignment, &buffer_obj), OSAL_RETURN_OK);
    ptr_self_bak = buffer_obj->p_ptr_self;
    ptr_self_ng = malloc(0x100);
    memset(ptr_self_ng, 0x0, 0x100);
    buffer_obj->p_ptr_self = ptr_self_ng;
    EXPECT_EQ(R_OSAL_MmngrFlush(buffer_obj, offset, size), OSAL_RETURN_HANDLE) << "Test09_010_019 failed";
    free(ptr_self_ng);
    buffer_obj->p_ptr_self = ptr_self_bak;
    EXPECT_EQ(R_OSAL_MmngrDealloc(hndl_mmngr, buffer_obj), OSAL_RETURN_OK) << "Test09_010_019 failed";
    EXPECT_EQ(R_OSAL_MmngrClose(hndl_mmngr), OSAL_RETURN_OK) << "Test09_010_019 failed";
    hndl_mmngr = OSAL_MEMORY_MANAGER_HANDLE_INVALID;
    buffer_obj = OSAL_MEMORY_BUFFER_HANDLE_INVALID;
}
// [MmngrFlush_TC_09_010_019]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrFlush_TC_09_010_020 MemoryApiTest.MmngrFlush_TC_09_010_020
 * @subsection MmngrFlush_TC_09_010_020_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrFlush_TC_09_010_020_tci Test Case ID
 * MmngrFlush_S4_A_TC_09_010_020
 * @subsection MmngrFlush_TC_09_010_020_rr Related Requirement(s)
 * \#276556
 * @subsection MmngrFlush_TC_09_010_020_pp Prerequisite/Precondition
 * OSAL is initialized.
 * @subsection MmngrFlush_TC_09_010_020_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrFlush with abnormal condition in OSAL_MMNGR_ALLOC_MODE_STACK_PROT mode.
 * - pre-process: open memory manager
 * - Test09_010_020: "buffer_obj->p_ptr_self" is invalid.
 * - post-process: close memory manager
 * @subsection MmngrFlush_TC_09_010_020_tpts Test Procedure/Test Steps
 * -# Call R_OSAL_MmngrGetOsalMaxConfig to get the valid config then set config mode to OSAL_MMNGR_ALLOC_MODE_STACK_PROT
 * -# Call R_OSAL_MmngrOpen with valid parameter and above config.
 * -# Call R_OSAL_MmngrAlloc with valid parameter
 * -# Call R_OSAL_MmngrFlush with an invalid buffer_obj->p_ptr_self:
 *      - buffer_obj with p_ptr_self value changed to p_ptr_self_ng
 *      - "p_ptr_self_ng" is allocated by malloc function.
 * -# Deallocate buffer_obj by using R_OSAL_MmngrDeallocate.
 *      - buffer_obj with valid p_ptr_self value
 * -# Call R_OSAL_MmngrClose to close the memory manager.
 * @subsection MmngrFlush_TC_09_010_020_ereb Expected Result/Behavior
 * -# The return value of R_OSAL_MmngrGetOsalMaxConfig is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrOpen is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrAlloc is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrFlush is OSAL_RETURN_HANDLE.
 * -# The return value of R_OSAL_MmngrDeallocate is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrClose is OSAL_RETURN_OK.
 * @subsection MmngrFlush_TC_09_010_020_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrFlush_TC_09_010_020
 */
// [MmngrFlush_TC_09_010_020]
TEST_F(MemoryApiTest, MmngrFlush_TC_09_010_020)
{
    void* ptr_self_bak;
    void* ptr_self_ng;
    size = 64;
    alignment = 64;
    offset = 0;

    // Test09_010_020
    // @brief: abnormal case: handle->p_ptr_self is invalid
    EXPECT_EQ(R_OSAL_MmngrGetOsalMaxConfig(&config), OSAL_RETURN_OK);
    config.mode = OSAL_MMNGR_ALLOC_MODE_STACK_PROT;
    EXPECT_EQ(R_OSAL_MmngrOpen(&config, &hndl_mmngr), OSAL_RETURN_OK);
    EXPECT_EQ(R_OSAL_MmngrAlloc(hndl_mmngr, size, alignment, &buffer_obj), OSAL_RETURN_OK);
    ptr_self_bak = buffer_obj->p_ptr_self;
    ptr_self_ng = malloc(0x100);
    memset(ptr_self_ng, 0x0, 0x100);
    buffer_obj->p_ptr_self = ptr_self_ng;
    EXPECT_EQ(R_OSAL_MmngrFlush(buffer_obj, offset, size), OSAL_RETURN_HANDLE) << "Test09_010_020 failed";
    free(ptr_self_ng);
    buffer_obj->p_ptr_self = ptr_self_bak;
    EXPECT_EQ(R_OSAL_MmngrDealloc(hndl_mmngr, buffer_obj), OSAL_RETURN_OK) << "Test09_010_020 failed";
    EXPECT_EQ(R_OSAL_MmngrClose(hndl_mmngr), OSAL_RETURN_OK) << "Test09_010_020 failed";
    hndl_mmngr = OSAL_MEMORY_MANAGER_HANDLE_INVALID;
    buffer_obj = OSAL_MEMORY_BUFFER_HANDLE_INVALID;
}
// [MmngrFlush_TC_09_010_020]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrFlush_TC_09_010_021 MemoryApiTest.MmngrFlush_TC_09_010_021
 * @subsection MmngrFlush_TC_09_010_021_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrFlush_TC_09_010_021_tci Test Case ID
 * MmngrFlush_S4_A_TC_09_010_021
 * @subsection MmngrFlush_TC_09_010_021_rr Related Requirement(s)
 * \#276556
 * @subsection MmngrFlush_TC_09_010_021_pp Prerequisite/Precondition
 * OSAL is initialized.
 * @subsection MmngrFlush_TC_09_010_021_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrFlush with abnormal condition in OSAL_MMNGR_ALLOC_MODE_FREE_LIST mode.
 * - pre-process: open memory manager
 * - Test09_010_021: "buffer_obj->p_ptr_self" is invalid.
 * - post-process: close memory manager
 * @subsection MmngrFlush_TC_09_010_021_tpts Test Procedure/Test Steps
 * -# Call R_OSAL_MmngrGetOsalMaxConfig to get the valid config then set config mode to OSAL_MMNGR_ALLOC_MODE_FREE_LIST
 * -# Call R_OSAL_MmngrOpen with valid parameter and above config.
 * -# Call R_OSAL_MmngrAlloc with valid parameter
 * -# Call R_OSAL_MmngrFlush with an invalid buffer_obj->p_ptr_self:
 *      - buffer_obj with p_ptr_self value changed to p_ptr_self_ng
 *      - "p_ptr_self_ng" is allocated by malloc function.
 * -# Deallocate buffer_obj by using R_OSAL_MmngrDeallocate.
 *      - buffer_obj with valid p_ptr_self value
 * -# Call R_OSAL_MmngrClose to close the memory manager.
 * @subsection MmngrFlush_TC_09_010_021_ereb Expected Result/Behavior
 * -# The return value of R_OSAL_MmngrGetOsalMaxConfig is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrOpen is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrAlloc is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrFlush is OSAL_RETURN_HANDLE.
 * -# The return value of R_OSAL_MmngrDeallocate is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrClose is OSAL_RETURN_OK.
 * @subsection MmngrFlush_TC_09_010_021_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrFlush_TC_09_010_021
 */
// [MmngrFlush_TC_09_010_021]
TEST_F(MemoryApiTest, MmngrFlush_TC_09_010_021)
{
    void* ptr_self_bak;
    void* ptr_self_ng;
    size = 64;
    alignment = 64;
    offset = 0;

    // Test09_010_021
    // @brief: abnormal case: handle->p_ptr_self is invalid
    EXPECT_EQ(R_OSAL_MmngrGetOsalMaxConfig(&config), OSAL_RETURN_OK);
    config.mode = OSAL_MMNGR_ALLOC_MODE_FREE_LIST;
    EXPECT_EQ(R_OSAL_MmngrOpen(&config, &hndl_mmngr), OSAL_RETURN_OK);
    EXPECT_EQ(R_OSAL_MmngrAlloc(hndl_mmngr, size, alignment, &buffer_obj), OSAL_RETURN_OK);
    ptr_self_bak = buffer_obj->p_ptr_self;
    ptr_self_ng = malloc(0x100);
    memset(ptr_self_ng, 0x0, 0x100);
    buffer_obj->p_ptr_self = ptr_self_ng;
    EXPECT_EQ(R_OSAL_MmngrFlush(buffer_obj, offset, size), OSAL_RETURN_HANDLE) << "Test09_010_021 failed";
    free(ptr_self_ng);
    buffer_obj->p_ptr_self = ptr_self_bak;
    EXPECT_EQ(R_OSAL_MmngrDealloc(hndl_mmngr, buffer_obj), OSAL_RETURN_OK) << "Test09_010_021 failed";
    EXPECT_EQ(R_OSAL_MmngrClose(hndl_mmngr), OSAL_RETURN_OK) << "Test09_010_021 failed";
    hndl_mmngr = OSAL_MEMORY_MANAGER_HANDLE_INVALID;
    buffer_obj = OSAL_MEMORY_BUFFER_HANDLE_INVALID;
}
// [MmngrFlush_TC_09_010_021]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrFlush_TC_09_010_022 MemoryApiTest.MmngrFlush_TC_09_010_022
 * @subsection MmngrFlush_TC_09_010_022_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrFlush_TC_09_010_022_tci Test Case ID
 * MmngrFlush_S4_A_TC_09_010_022
 * @subsection MmngrFlush_TC_09_010_022_rr Related Requirement(s)
 * \#276556
 * @subsection MmngrFlush_TC_09_010_022_pp Prerequisite/Precondition
 * OSAL is initialized.
 * @subsection MmngrFlush_TC_09_010_022_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrFlush with abnormal condition in OSAL_MMNGR_ALLOC_MODE_FREE_LIST_PROT mode.
 * - pre-process: open memory manager
 * - Test09_010_022: "buffer_obj->p_ptr_self" is invalid.
 * - post-process: close memory manager
 * @subsection MmngrFlush_TC_09_010_022_tpts Test Procedure/Test Steps
 * -# Call R_OSAL_MmngrGetOsalMaxConfig to get the valid config then set config mode to OSAL_MMNGR_ALLOC_MODE_FREE_LIST_PROT
 * -# Call R_OSAL_MmngrOpen with valid parameter and above config.
 * -# Call R_OSAL_MmngrAlloc with valid parameter
 * -# Call R_OSAL_MmngrFlush with an invalid buffer_obj->p_ptr_self:
 *      - buffer_obj with p_ptr_self value changed to p_ptr_self_ng
 *      - "p_ptr_self_ng" is allocated by malloc function.
 * -# Deallocate buffer_obj by using R_OSAL_MmngrDeallocate.
 *      - buffer_obj with valid p_ptr_self value
 * -# Call R_OSAL_MmngrClose to close the memory manager.
 * @subsection MmngrFlush_TC_09_010_022_ereb Expected Result/Behavior
 * -# The return value of R_OSAL_MmngrGetOsalMaxConfig is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrOpen is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrAlloc is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrFlush is OSAL_RETURN_HANDLE.
 * -# The return value of R_OSAL_MmngrDeallocate is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrClose is OSAL_RETURN_OK.
 * @subsection MmngrFlush_TC_09_010_022_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrFlush_TC_09_010_022
 */
// [MmngrFlush_TC_09_010_022]
TEST_F(MemoryApiTest, MmngrFlush_TC_09_010_022)
{
    void* ptr_self_bak;
    void* ptr_self_ng;
    size = 64;
    alignment = 64;
    offset = 0;

    // Test09_010_022
    // @brief: abnormal case: handle->p_ptr_self is invalid
    EXPECT_EQ(R_OSAL_MmngrGetOsalMaxConfig(&config), OSAL_RETURN_OK);
    config.mode = OSAL_MMNGR_ALLOC_MODE_FREE_LIST_PROT;
    EXPECT_EQ(R_OSAL_MmngrOpen(&config, &hndl_mmngr), OSAL_RETURN_OK);
    EXPECT_EQ(R_OSAL_MmngrAlloc(hndl_mmngr, size, alignment, &buffer_obj), OSAL_RETURN_OK);
    ptr_self_bak = buffer_obj->p_ptr_self;
    ptr_self_ng = malloc(0x100);
    memset(ptr_self_ng, 0x0, 0x100);
    buffer_obj->p_ptr_self = ptr_self_ng;
    EXPECT_EQ(R_OSAL_MmngrFlush(buffer_obj, offset, size), OSAL_RETURN_HANDLE) << "Test09_010_022 failed";
    free(ptr_self_ng);
    buffer_obj->p_ptr_self = ptr_self_bak;
    EXPECT_EQ(R_OSAL_MmngrDealloc(hndl_mmngr, buffer_obj), OSAL_RETURN_OK) << "Test09_010_022 failed";
    EXPECT_EQ(R_OSAL_MmngrClose(hndl_mmngr), OSAL_RETURN_OK) << "Test09_010_022 failed";
    hndl_mmngr = OSAL_MEMORY_MANAGER_HANDLE_INVALID;
    buffer_obj = OSAL_MEMORY_BUFFER_HANDLE_INVALID;
}
// [MmngrFlush_TC_09_010_022]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrFlush_TC_09_010_023 MemoryApiTest.MmngrFlush_TC_09_010_023
 * @subsection MmngrFlush_TC_09_010_023_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrFlush_TC_09_010_023_tci Test Case ID
 * MmngrFlush_S0_BA_TC_09_010_023
 * @subsection MmngrFlush_TC_09_010_023_rr Related Requirement(s)
 * \#276556
 * @subsection MmngrFlush_TC_09_010_023_pp Prerequisite/Precondition
 * OSAL is initialized.
 * @subsection MmngrFlush_TC_09_010_023_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrFlush with abnormal condition and mode is OSAL_MMNGR_ALLOC_MODE_STACK.
 * - pre-process: open new memory manager and allocate buffer
 * - Test09_010_023: size is out of range for the given buffer object (buffer size + 1)
 * - post-process: close memory manager
 * @subsection MmngrFlush_TC_09_010_023_tpts Test Procedure/Test Steps
 * -# Call R_OSAL_MmngrOpen with bellow config:
 *  - config.memory_limit                = 4096
 *  - config.max_allowed_allocations     = 1
 *  - config.max_registered_monitors_cbs = 2
 *  - config.mode = OSAL_MMNGR_ALLOC_MODE_STACK
 * -# Call R_OSAL_MmngrAlloc with size is 4096 and alignment is 64 to allocate a memory buffer.
 * -# Call R_OSAL_MmngrFlush with offset is 64 and size is buffer size + 1
 * -# Call R_OSAL_MmngrDealloc to deallocate the allocated memory buffer.
 * -# Call R_OSAL_MmngrClose to close memory handle.
 * @subsection MmngrFlush_TC_09_010_023_ereb Expected Result/Behavior
 * -# The return of R_OSAL_MmngrOpen is OSAL_RETURN_OK.<br>
 * The returned handle is not OSAL_MEMORY_MANAGER_HANDLE_INVALID.
 * -# The return value of R_OSAL_MmngrAlloc is OSAL_RETURN_OK.<br>
 * The return buffer is not OSAL_MEMORY_BUFFER_HANDLE_INVALID.
 * -# The return value of R_OSAL_MmngrFlush is OSAL_RETURN_PAR.
 * -# The return value of R_OSAL_MmngrDealloc is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrClose is OSAL_RETURN_OK.
 * @subsection MmngrFlush_TC_09_010_023_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrFlush_TC_09_010_023
 */
// [MmngrFlush_TC_09_010_023]
TEST_F(MemoryApiTest, MmngrFlush_TC_09_010_023)
{
    // pre-process: open memory manager
    config.memory_limit                = 4096;
    config.max_allowed_allocations     = 1;
    config.max_registered_monitors_cbs = 2;
    config.mode = OSAL_MMNGR_ALLOC_MODE_STACK;
    size = 4096;
    alignment = 64;

    EXPECT_EQ(R_OSAL_MmngrOpen(&config, &hndl_mmngr), OSAL_RETURN_OK) <<  "pre-process failed";
    EXPECT_NE(hndl_mmngr,OSAL_MEMORY_MANAGER_HANDLE_INVALID) <<  "pre-process failed";

    // Test09_010_023
    // @brief: abnormal case: size is out of range for the given buffer object (buffer size + 1)
    EXPECT_EQ(R_OSAL_MmngrAlloc(hndl_mmngr, size, alignment, &buffer_obj), OSAL_RETURN_OK);
    EXPECT_NE(buffer_obj,OSAL_MEMORY_BUFFER_HANDLE_INVALID);
    offset = 64;
    size = size + 1;
    EXPECT_EQ(R_OSAL_MmngrFlush(buffer_obj, offset, size), OSAL_RETURN_PAR) << "Test09_010_023 failed";
    EXPECT_EQ(R_OSAL_MmngrDealloc(hndl_mmngr, buffer_obj), OSAL_RETURN_OK);
    buffer_obj = OSAL_MEMORY_BUFFER_HANDLE_INVALID;

    // post-process: close memory manager
    EXPECT_EQ(R_OSAL_MmngrClose(hndl_mmngr), OSAL_RETURN_OK) <<  "post-process failed";
}
// [MmngrFlush_TC_09_010_023]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrFlush_TC_09_010_024 MemoryApiTest.MmngrFlush_TC_09_010_024
 * @subsection MmngrFlush_TC_09_010_024_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrFlush_TC_09_010_024_tci Test Case ID
 * MmngrFlush_S0_A_TC_09_010_024
 * @subsection MmngrFlush_TC_09_010_024_rr Related Requirement(s)
 * \#276556
 * @subsection MmngrFlush_TC_09_010_024_pp Prerequisite/Precondition
 * OSAL is initialized.
 * @subsection MmngrFlush_TC_09_010_024_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrFlush with abnormal condition and mode is OSAL_MMNGR_ALLOC_MODE_STACK.
 * - pre-process: open new memory manager and allocate buffer
 * - Test09_010_024: size is 0
 * - post-process: close memory manager
 * @subsection MmngrFlush_TC_09_010_024_tpts Test Procedure/Test Steps
 * -# Call R_OSAL_MmngrOpen with bellow config:
 *  - config.memory_limit                = 4096
 *  - config.max_allowed_allocations     = 1
 *  - config.max_registered_monitors_cbs = 2
 *  - config.mode = OSAL_MMNGR_ALLOC_MODE_STACK
 * -# Call R_OSAL_MmngrAlloc with size is 4096 and alignment is 64 to allocate a memory buffer.
 * -# Call R_OSAL_MmngrFlush with offset is 64 and size is 0
 * -# Call R_OSAL_MmngrDealloc to deallocate the allocated memory buffer.
 * -# Call R_OSAL_MmngrClose to close memory handle.
 * @subsection MmngrFlush_TC_09_010_024_ereb Expected Result/Behavior
 * -# The return of R_OSAL_MmngrOpen is OSAL_RETURN_OK.<br>
 * The returned handle is not OSAL_MEMORY_MANAGER_HANDLE_INVALID.
 * -# The return value of R_OSAL_MmngrAlloc is OSAL_RETURN_OK.<br>
 * The return buffer is not OSAL_MEMORY_BUFFER_HANDLE_INVALID.
 * -# The return value of R_OSAL_MmngrFlush is OSAL_RETURN_PAR.
 * -# The return value of R_OSAL_MmngrDealloc is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrClose is OSAL_RETURN_OK.
 * @subsection MmngrFlush_TC_09_010_024_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrFlush_TC_09_010_024
 */
// [MmngrFlush_TC_09_010_024]
TEST_F(MemoryApiTest, MmngrFlush_TC_09_010_024)
{
    // pre-process: open memory manager
    config.memory_limit                = 4096;
    config.max_allowed_allocations     = 1;
    config.max_registered_monitors_cbs = 2;
    config.mode = OSAL_MMNGR_ALLOC_MODE_STACK;
    size = 4096;
    alignment = 64;

    EXPECT_EQ(R_OSAL_MmngrOpen(&config, &hndl_mmngr), OSAL_RETURN_OK) <<  "pre-process failed";
    EXPECT_NE(hndl_mmngr,OSAL_MEMORY_MANAGER_HANDLE_INVALID) <<  "pre-process failed";

    // Test09_010_024
    // @brief: abnormal case: size is 0
    EXPECT_EQ(R_OSAL_MmngrAlloc(hndl_mmngr, size, alignment, &buffer_obj), OSAL_RETURN_OK);
    EXPECT_NE(buffer_obj,OSAL_MEMORY_BUFFER_HANDLE_INVALID);
    offset = 64;
    size = 0;
    EXPECT_EQ(R_OSAL_MmngrFlush(buffer_obj, offset, size), OSAL_RETURN_PAR) << "Test09_010_024 failed";
    EXPECT_EQ(R_OSAL_MmngrDealloc(hndl_mmngr, buffer_obj), OSAL_RETURN_OK);
    buffer_obj = OSAL_MEMORY_BUFFER_HANDLE_INVALID;

    // post-process: close memory manager
    EXPECT_EQ(R_OSAL_MmngrClose(hndl_mmngr), OSAL_RETURN_OK) <<  "post-process failed";
}
// [MmngrFlush_TC_09_010_024]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrFlush_TC_09_010_025 MemoryApiTest.MmngrFlush_TC_09_010_025
 * @subsection MmngrFlush_TC_09_010_025_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrFlush_TC_09_010_025_tci Test Case ID
 * MmngrFlush_S0_BA_TC_09_010_025
 * @subsection MmngrFlush_TC_09_010_025_rr Related Requirement(s)
 * \#276556
 * @subsection MmngrFlush_TC_09_010_025_pp Prerequisite/Precondition
 * OSAL is initialized.
 * @subsection MmngrFlush_TC_09_010_025_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrFlush with abnormal condition and mode is OSAL_MMNGR_ALLOC_MODE_STACK_PROT.
 * - pre-process: open new memory manager and allocate buffer
 * - Test09_010_025: size is out of range for the given buffer object (buffer size + 1)
 * - post-process: close memory manager
 * @subsection MmngrFlush_TC_09_010_025_tpts Test Procedure/Test Steps
 * -# Call R_OSAL_MmngrOpen with bellow config:
 *  - config.memory_limit                = 4096
 *  - config.max_allowed_allocations     = 1
 *  - config.max_registered_monitors_cbs = 2
 *  - config.mode = OSAL_MMNGR_ALLOC_MODE_STACK_PROT
 * -# Call R_OSAL_MmngrAlloc with size is 4096 and alignment is 64 to allocate a memory buffer.
 * -# Call R_OSAL_MmngrFlush with offset is 64 and size is buffer size + 1
 * -# Call R_OSAL_MmngrDealloc to deallocate the allocated memory buffer.
 * -# Call R_OSAL_MmngrClose to close memory handle.
 * @subsection MmngrFlush_TC_09_010_025_ereb Expected Result/Behavior
 * -# The return of R_OSAL_MmngrOpen is OSAL_RETURN_OK.<br>
 * The returned handle is not OSAL_MEMORY_MANAGER_HANDLE_INVALID.
 * -# The return value of R_OSAL_MmngrAlloc is OSAL_RETURN_OK.<br>
 * The return buffer is not OSAL_MEMORY_BUFFER_HANDLE_INVALID.
 * -# The return value of R_OSAL_MmngrFlush is OSAL_RETURN_PAR.
 * -# The return value of R_OSAL_MmngrDealloc is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrClose is OSAL_RETURN_OK.
 * @subsection MmngrFlush_TC_09_010_025_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrFlush_TC_09_010_025
 */
// [MmngrFlush_TC_09_010_025]
TEST_F(MemoryApiTest, MmngrFlush_TC_09_010_025)
{
    // pre-process: open memory manager
    config.memory_limit                = 4096;
    config.max_allowed_allocations     = 1;
    config.max_registered_monitors_cbs = 2;
    config.mode = OSAL_MMNGR_ALLOC_MODE_STACK_PROT;
    size = 4096;
    alignment = 64;

    EXPECT_EQ(R_OSAL_MmngrOpen(&config, &hndl_mmngr), OSAL_RETURN_OK) <<  "pre-process failed";
    EXPECT_NE(hndl_mmngr,OSAL_MEMORY_MANAGER_HANDLE_INVALID) <<  "pre-process failed";

    // Test09_010_025
    // @brief: abnormal case: size is out of range for the given buffer object (buffer size + 1)
    EXPECT_EQ(R_OSAL_MmngrAlloc(hndl_mmngr, size, alignment, &buffer_obj), OSAL_RETURN_OK);
    EXPECT_NE(buffer_obj,OSAL_MEMORY_BUFFER_HANDLE_INVALID);
    offset = 64;
    size = size + 1;
    EXPECT_EQ(R_OSAL_MmngrFlush(buffer_obj, offset, size), OSAL_RETURN_PAR) << "Test09_010_025 failed";
    EXPECT_EQ(R_OSAL_MmngrDealloc(hndl_mmngr, buffer_obj), OSAL_RETURN_OK);
    buffer_obj = OSAL_MEMORY_BUFFER_HANDLE_INVALID;

    // post-process: close memory manager
    EXPECT_EQ(R_OSAL_MmngrClose(hndl_mmngr), OSAL_RETURN_OK) <<  "post-process failed";
}
// [MmngrFlush_TC_09_010_025]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrFlush_TC_09_010_026 MemoryApiTest.MmngrFlush_TC_09_010_026
 * @subsection MmngrFlush_TC_09_010_026_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrFlush_TC_09_010_026_tci Test Case ID
 * MmngrFlush_S0_A_TC_09_010_026
 * @subsection MmngrFlush_TC_09_010_026_rr Related Requirement(s)
 * \#276556
 * @subsection MmngrFlush_TC_09_010_026_pp Prerequisite/Precondition
 * OSAL is initialized.
 * @subsection MmngrFlush_TC_09_010_026_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrFlush with abnormal condition and mode is OSAL_MMNGR_ALLOC_MODE_STACK_PROT.
 * - pre-process: open new memory manager and allocate buffer
 * - Test09_010_026: size is 0
 * - post-process: close memory manager
 * @subsection MmngrFlush_TC_09_010_026_tpts Test Procedure/Test Steps
 * -# Call R_OSAL_MmngrOpen with bellow config:
 *  - config.memory_limit                = 4096
 *  - config.max_allowed_allocations     = 1
 *  - config.max_registered_monitors_cbs = 2
 *  - config.mode = OSAL_MMNGR_ALLOC_MODE_STACK_PROT
 * -# Call R_OSAL_MmngrAlloc with size is 4096 and alignment is 64 to allocate a memory buffer.
 * -# Call R_OSAL_MmngrFlush with offset is 64 and size is 0
 * -# Call R_OSAL_MmngrDealloc to deallocate the allocated memory buffer.
 * -# Call R_OSAL_MmngrClose to close memory handle.
 * @subsection MmngrFlush_TC_09_010_026_ereb Expected Result/Behavior
 * -# The return of R_OSAL_MmngrOpen is OSAL_RETURN_OK.<br>
 * The returned handle is not OSAL_MEMORY_MANAGER_HANDLE_INVALID.
 * -# The return value of R_OSAL_MmngrAlloc is OSAL_RETURN_OK.<br>
 * The return buffer is not OSAL_MEMORY_BUFFER_HANDLE_INVALID.
 * -# The return value of R_OSAL_MmngrFlush is OSAL_RETURN_PAR.
 * -# The return value of R_OSAL_MmngrDealloc is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrClose is OSAL_RETURN_OK.
 * @subsection MmngrFlush_TC_09_010_026_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrFlush_TC_09_010_026
 */
// [MmngrFlush_TC_09_010_026]
TEST_F(MemoryApiTest, MmngrFlush_TC_09_010_026)
{
    // pre-process: open memory manager
    config.memory_limit                = 4096;
    config.max_allowed_allocations     = 1;
    config.max_registered_monitors_cbs = 2;
    config.mode = OSAL_MMNGR_ALLOC_MODE_STACK_PROT;
    size = 4096;
    alignment = 64;

    EXPECT_EQ(R_OSAL_MmngrOpen(&config, &hndl_mmngr), OSAL_RETURN_OK) <<  "pre-process failed";
    EXPECT_NE(hndl_mmngr,OSAL_MEMORY_MANAGER_HANDLE_INVALID) <<  "pre-process failed";

    // Test09_010_026
    // @brief: abnormal case: size is 0
    EXPECT_EQ(R_OSAL_MmngrAlloc(hndl_mmngr, size, alignment, &buffer_obj), OSAL_RETURN_OK);
    EXPECT_NE(buffer_obj,OSAL_MEMORY_BUFFER_HANDLE_INVALID);
    offset = 64;
    size = 0;
    EXPECT_EQ(R_OSAL_MmngrFlush(buffer_obj, offset, size), OSAL_RETURN_PAR) << "Test09_010_026 failed";
    EXPECT_EQ(R_OSAL_MmngrDealloc(hndl_mmngr, buffer_obj), OSAL_RETURN_OK);
    buffer_obj = OSAL_MEMORY_BUFFER_HANDLE_INVALID;

    // post-process: close memory manager
    EXPECT_EQ(R_OSAL_MmngrClose(hndl_mmngr), OSAL_RETURN_OK) <<  "post-process failed";
}
// [MmngrFlush_TC_09_010_026]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrFlush_TC_09_010_027 MemoryApiTest.MmngrFlush_TC_09_010_027
 * @subsection MmngrFlush_TC_09_010_027_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrFlush_TC_09_010_027_tci Test Case ID
 * MmngrFlush_S0_BA_TC_09_010_027
 * @subsection MmngrFlush_TC_09_010_027_rr Related Requirement(s)
 * \#276556
 * @subsection MmngrFlush_TC_09_010_027_pp Prerequisite/Precondition
 * OSAL is initialized.
 * @subsection MmngrFlush_TC_09_010_027_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrFlush with abnormal condition and mode is OSAL_MMNGR_ALLOC_MODE_FREE_LIST.
 * - pre-process: open new memory manager and allocate buffer
 * - Test09_010_027: size is out of range for the given buffer object (buffer size + 1)
 * - post-process: close memory manager
 * @subsection MmngrFlush_TC_09_010_027_tpts Test Procedure/Test Steps
 * -# Call R_OSAL_MmngrOpen with bellow config:
 *  - config.memory_limit                = 4096
 *  - config.max_allowed_allocations     = 1
 *  - config.max_registered_monitors_cbs = 2
 *  - config.mode = OSAL_MMNGR_ALLOC_MODE_FREE_LIST
 * -# Call R_OSAL_MmngrAlloc with size is 4096 and alignment is 64 to allocate a memory buffer.
 * -# Call R_OSAL_MmngrFlush with offset is 64 and size is buffer size + 1
 * -# Call R_OSAL_MmngrDealloc to deallocate the allocated memory buffer.
 * -# Call R_OSAL_MmngrClose to close memory handle.
 * @subsection MmngrFlush_TC_09_010_027_ereb Expected Result/Behavior
 * -# The return of R_OSAL_MmngrOpen is OSAL_RETURN_OK.<br>
 * The returned handle is not OSAL_MEMORY_MANAGER_HANDLE_INVALID.
 * -# The return value of R_OSAL_MmngrAlloc is OSAL_RETURN_OK.<br>
 * The return buffer is not OSAL_MEMORY_BUFFER_HANDLE_INVALID.
 * -# The return value of R_OSAL_MmngrFlush is OSAL_RETURN_PAR.
 * -# The return value of R_OSAL_MmngrDealloc is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrClose is OSAL_RETURN_OK.
 * @subsection MmngrFlush_TC_09_010_027_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrFlush_TC_09_010_027
 */
// [MmngrFlush_TC_09_010_027]
TEST_F(MemoryApiTest, MmngrFlush_TC_09_010_027)
{
    // pre-process: open memory manager
    config.memory_limit                = 4096;
    config.max_allowed_allocations     = 1;
    config.max_registered_monitors_cbs = 2;
    config.mode = OSAL_MMNGR_ALLOC_MODE_FREE_LIST;
    size = 4096;
    alignment = 64;

    EXPECT_EQ(R_OSAL_MmngrOpen(&config, &hndl_mmngr), OSAL_RETURN_OK) <<  "pre-process failed";
    EXPECT_NE(hndl_mmngr,OSAL_MEMORY_MANAGER_HANDLE_INVALID) <<  "pre-process failed";

    // Test09_010_027
    // @brief: abnormal case: size is out of range for the given buffer object (buffer size + 1)
    EXPECT_EQ(R_OSAL_MmngrAlloc(hndl_mmngr, size, alignment, &buffer_obj), OSAL_RETURN_OK);
    EXPECT_NE(buffer_obj,OSAL_MEMORY_BUFFER_HANDLE_INVALID);
    offset = 64;
    size = size + 1;
    EXPECT_EQ(R_OSAL_MmngrFlush(buffer_obj, offset, size), OSAL_RETURN_PAR) << "Test09_010_027 failed";
    EXPECT_EQ(R_OSAL_MmngrDealloc(hndl_mmngr, buffer_obj), OSAL_RETURN_OK);
    buffer_obj = OSAL_MEMORY_BUFFER_HANDLE_INVALID;

    // post-process: close memory manager
    EXPECT_EQ(R_OSAL_MmngrClose(hndl_mmngr), OSAL_RETURN_OK) <<  "post-process failed";
}
// [MmngrFlush_TC_09_010_027]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrFlush_TC_09_010_028 MemoryApiTest.MmngrFlush_TC_09_010_028
 * @subsection MmngrFlush_TC_09_010_028_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrFlush_TC_09_010_028_tci Test Case ID
 * MmngrFlush_S0_A_TC_09_010_028
 * @subsection MmngrFlush_TC_09_010_028_rr Related Requirement(s)
 * \#276556
 * @subsection MmngrFlush_TC_09_010_028_pp Prerequisite/Precondition
 * OSAL is initialized.
 * @subsection MmngrFlush_TC_09_010_028_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrFlush with abnormal condition and mode is OSAL_MMNGR_ALLOC_MODE_FREE_LIST.
 * - pre-process: open new memory manager and allocate buffer
 * - Test09_010_028: size is 0
 * - post-process: close memory manager
 * @subsection MmngrFlush_TC_09_010_028_tpts Test Procedure/Test Steps
 * -# Call R_OSAL_MmngrOpen with bellow config:
 *  - config.memory_limit                = 4096
 *  - config.max_allowed_allocations     = 1
 *  - config.max_registered_monitors_cbs = 2
 *  - config.mode = OSAL_MMNGR_ALLOC_MODE_FREE_LIST
 * -# Call R_OSAL_MmngrAlloc with size is 4096 and alignment is 64 to allocate a memory buffer.
 * -# Call R_OSAL_MmngrFlush with offset is 64 and size is 0
 * -# Call R_OSAL_MmngrDealloc to deallocate the allocated memory buffer.
 * -# Call R_OSAL_MmngrClose to close memory handle.
 * @subsection MmngrFlush_TC_09_010_028_ereb Expected Result/Behavior
 * -# The return of R_OSAL_MmngrOpen is OSAL_RETURN_OK.<br>
 * The returned handle is not OSAL_MEMORY_MANAGER_HANDLE_INVALID.
 * -# The return value of R_OSAL_MmngrAlloc is OSAL_RETURN_OK.<br>
 * The return buffer is not OSAL_MEMORY_BUFFER_HANDLE_INVALID.
 * -# The return value of R_OSAL_MmngrFlush is OSAL_RETURN_PAR.
 * -# The return value of R_OSAL_MmngrDealloc is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrClose is OSAL_RETURN_OK.
 * @subsection MmngrFlush_TC_09_010_028_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrFlush_TC_09_010_028
 */
// [MmngrFlush_TC_09_010_028]
TEST_F(MemoryApiTest, MmngrFlush_TC_09_010_028)
{
    // pre-process: open memory manager
    config.memory_limit                = 4096;
    config.max_allowed_allocations     = 1;
    config.max_registered_monitors_cbs = 2;
    config.mode = OSAL_MMNGR_ALLOC_MODE_FREE_LIST;
    size = 4096;
    alignment = 64;

    EXPECT_EQ(R_OSAL_MmngrOpen(&config, &hndl_mmngr), OSAL_RETURN_OK) <<  "pre-process failed";
    EXPECT_NE(hndl_mmngr,OSAL_MEMORY_MANAGER_HANDLE_INVALID) <<  "pre-process failed";

    // Test09_010_028
    // @brief: abnormal case: size is 0
    EXPECT_EQ(R_OSAL_MmngrAlloc(hndl_mmngr, size, alignment, &buffer_obj), OSAL_RETURN_OK);
    EXPECT_NE(buffer_obj,OSAL_MEMORY_BUFFER_HANDLE_INVALID);
    offset = 64;
    size = 0;
    EXPECT_EQ(R_OSAL_MmngrFlush(buffer_obj, offset, size), OSAL_RETURN_PAR) << "Test09_010_028 failed";
    EXPECT_EQ(R_OSAL_MmngrDealloc(hndl_mmngr, buffer_obj), OSAL_RETURN_OK);
    buffer_obj = OSAL_MEMORY_BUFFER_HANDLE_INVALID;

    // post-process: close memory manager
    EXPECT_EQ(R_OSAL_MmngrClose(hndl_mmngr), OSAL_RETURN_OK) <<  "post-process failed";
}
// [MmngrFlush_TC_09_010_028]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrFlush_TC_09_010_029 MemoryApiTest.MmngrFlush_TC_09_010_029
 * @subsection MmngrFlush_TC_09_010_029_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrFlush_TC_09_010_029_tci Test Case ID
 * MmngrFlush_S0_BA_TC_09_010_029
 * @subsection MmngrFlush_TC_09_010_029_rr Related Requirement(s)
 * \#276556
 * @subsection MmngrFlush_TC_09_010_029_pp Prerequisite/Precondition
 * OSAL is initialized.
 * @subsection MmngrFlush_TC_09_010_029_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrFlush with abnormal condition and mode is OSAL_MMNGR_ALLOC_MODE_FREE_LIST_PROT.
 * - pre-process: open new memory manager and allocate buffer
 * - Test09_010_029: size is out of range for the given buffer object (buffer size + 1)
 * - post-process: close memory manager
 * @subsection MmngrFlush_TC_09_010_029_tpts Test Procedure/Test Steps
 * -# Call R_OSAL_MmngrOpen with bellow config:
 *  - config.memory_limit                = 4096
 *  - config.max_allowed_allocations     = 1
 *  - config.max_registered_monitors_cbs = 2
 *  - config.mode = OSAL_MMNGR_ALLOC_MODE_FREE_LIST_PROT
 * -# Call R_OSAL_MmngrAlloc with size is 4096 and alignment is 64 to allocate a memory buffer.
 * -# Call R_OSAL_MmngrFlush with offset is 64 and size is buffer size + 1
 * -# Call R_OSAL_MmngrDealloc to deallocate the allocated memory buffer.
 * -# Call R_OSAL_MmngrClose to close memory handle.
 * @subsection MmngrFlush_TC_09_010_029_ereb Expected Result/Behavior
 * -# The return of R_OSAL_MmngrOpen is OSAL_RETURN_OK.<br>
 * The returned handle is not OSAL_MEMORY_MANAGER_HANDLE_INVALID.
 * -# The return value of R_OSAL_MmngrAlloc is OSAL_RETURN_OK.<br>
 * The return buffer is not OSAL_MEMORY_BUFFER_HANDLE_INVALID.
 * -# The return value of R_OSAL_MmngrFlush is OSAL_RETURN_PAR.
 * -# The return value of R_OSAL_MmngrDealloc is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrClose is OSAL_RETURN_OK.
 * @subsection MmngrFlush_TC_09_010_029_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrFlush_TC_09_010_029
 */
// [MmngrFlush_TC_09_010_029]
TEST_F(MemoryApiTest, MmngrFlush_TC_09_010_029)
{
    // pre-process: open memory manager
    config.memory_limit                = 4096;
    config.max_allowed_allocations     = 1;
    config.max_registered_monitors_cbs = 2;
    config.mode = OSAL_MMNGR_ALLOC_MODE_FREE_LIST_PROT;
    size = 4096;
    alignment = 64;

    EXPECT_EQ(R_OSAL_MmngrOpen(&config, &hndl_mmngr), OSAL_RETURN_OK) <<  "pre-process failed";
    EXPECT_NE(hndl_mmngr,OSAL_MEMORY_MANAGER_HANDLE_INVALID) <<  "pre-process failed";

    // Test09_010_029
    // @brief: abnormal case: size is out of range for the given buffer object (buffer size + 1)
    EXPECT_EQ(R_OSAL_MmngrAlloc(hndl_mmngr, size, alignment, &buffer_obj), OSAL_RETURN_OK);
    EXPECT_NE(buffer_obj,OSAL_MEMORY_BUFFER_HANDLE_INVALID);
    offset = 64;
    size = size + 1;
    EXPECT_EQ(R_OSAL_MmngrFlush(buffer_obj, offset, size), OSAL_RETURN_PAR) << "Test09_010_029 failed";
    EXPECT_EQ(R_OSAL_MmngrDealloc(hndl_mmngr, buffer_obj), OSAL_RETURN_OK);
    buffer_obj = OSAL_MEMORY_BUFFER_HANDLE_INVALID;

    // post-process: close memory manager
    EXPECT_EQ(R_OSAL_MmngrClose(hndl_mmngr), OSAL_RETURN_OK) <<  "post-process failed";
}
// [MmngrFlush_TC_09_010_029]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrFlush_TC_09_010_030 MemoryApiTest.MmngrFlush_TC_09_010_030
 * @subsection MmngrFlush_TC_09_010_030_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrFlush_TC_09_010_030_tci Test Case ID
 * MmngrFlush_S0_A_TC_09_010_030
 * @subsection MmngrFlush_TC_09_010_030_rr Related Requirement(s)
 * \#276556
 * @subsection MmngrFlush_TC_09_010_030_pp Prerequisite/Precondition
 * OSAL is initialized.
 * @subsection MmngrFlush_TC_09_010_030_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrFlush with abnormal condition and mode is OSAL_MMNGR_ALLOC_MODE_FREE_LIST_PROT.
 * - pre-process: open new memory manager and allocate buffer
 * - Test09_010_030: size is 0
 * - post-process: close memory manager
 * @subsection MmngrFlush_TC_09_010_030_tpts Test Procedure/Test Steps
 * -# Call R_OSAL_MmngrOpen with bellow config:
 *  - config.memory_limit                = 4096
 *  - config.max_allowed_allocations     = 1
 *  - config.max_registered_monitors_cbs = 2
 *  - config.mode = OSAL_MMNGR_ALLOC_MODE_FREE_LIST_PROT
 * -# Call R_OSAL_MmngrAlloc with size is 4096 and alignment is 64 to allocate a memory buffer.
 * -# Call R_OSAL_MmngrFlush with offset is 64 and size is 0
 * -# Call R_OSAL_MmngrDealloc to deallocate the allocated memory buffer.
 * -# Call R_OSAL_MmngrClose to close memory handle.
 * @subsection MmngrFlush_TC_09_010_030_ereb Expected Result/Behavior
 * -# The return of R_OSAL_MmngrOpen is OSAL_RETURN_OK.<br>
 * The returned handle is not OSAL_MEMORY_MANAGER_HANDLE_INVALID.
 * -# The return value of R_OSAL_MmngrAlloc is OSAL_RETURN_OK.<br>
 * The return buffer is not OSAL_MEMORY_BUFFER_HANDLE_INVALID.
 * -# The return value of R_OSAL_MmngrFlush is OSAL_RETURN_PAR.
 * -# The return value of R_OSAL_MmngrDealloc is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrClose is OSAL_RETURN_OK.
 * @subsection MmngrFlush_TC_09_010_030_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrFlush_TC_09_010_030
 */
// [MmngrFlush_TC_09_010_030]
TEST_F(MemoryApiTest, MmngrFlush_TC_09_010_030)
{
    // pre-process: open memory manager
    config.memory_limit                = 4096;
    config.max_allowed_allocations     = 1;
    config.max_registered_monitors_cbs = 2;
    config.mode = OSAL_MMNGR_ALLOC_MODE_FREE_LIST_PROT;
    size = 4096;
    alignment = 64;

    EXPECT_EQ(R_OSAL_MmngrOpen(&config, &hndl_mmngr), OSAL_RETURN_OK) <<  "pre-process failed";
    EXPECT_NE(hndl_mmngr,OSAL_MEMORY_MANAGER_HANDLE_INVALID) <<  "pre-process failed";

    // Test09_010_030
    // @brief: abnormal case: size is 0
    EXPECT_EQ(R_OSAL_MmngrAlloc(hndl_mmngr, size, alignment, &buffer_obj), OSAL_RETURN_OK);
    EXPECT_NE(buffer_obj,OSAL_MEMORY_BUFFER_HANDLE_INVALID);
    offset = 64;
    size = 0;
    EXPECT_EQ(R_OSAL_MmngrFlush(buffer_obj, offset, size), OSAL_RETURN_PAR) << "Test09_010_030 failed";
    EXPECT_EQ(R_OSAL_MmngrDealloc(hndl_mmngr, buffer_obj), OSAL_RETURN_OK);
    buffer_obj = OSAL_MEMORY_BUFFER_HANDLE_INVALID;

    // post-process: close memory manager
    EXPECT_EQ(R_OSAL_MmngrClose(hndl_mmngr), OSAL_RETURN_OK) <<  "post-process failed";
}
// [MmngrFlush_TC_09_010_030]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrFlush_TC_09_010_031 MemoryApiTest.MmngrFlush_TC_09_010_031
 * @subsection MmngrFlush_TC_09_010_031_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrFlush_TC_09_010_031_tci Test Case ID
 * MmngrFlush_S0_BA_TC_09_010_031
 * @subsection MmngrFlush_TC_09_010_031_rr Related Requirement(s)
 * \#276556
 * @subsection MmngrFlush_TC_09_010_031_pp Prerequisite/Precondition
 * OSAL is initialized.
 * @subsection MmngrFlush_TC_09_010_031_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrFlush with abnormal condition and mode is OSAL_MMNGR_ALLOC_MODE_STACK.
 * - pre-process: open new memory manager and allocate buffer
 * - Test09_010_031: offset is out of range for the given buffer object (buffer size + 1)
 * - post-process: close memory manager
 * @subsection MmngrFlush_TC_09_010_031_tpts Test Procedure/Test Steps
 * -# Call R_OSAL_MmngrOpen with bellow config:
 *  - config.memory_limit                = 4096
 *  - config.max_allowed_allocations     = 1
 *  - config.max_registered_monitors_cbs = 2
 *  - config.mode = OSAL_MMNGR_ALLOC_MODE_STACK
 * -# Call R_OSAL_MmngrAlloc with size is 4096 and alignment is 64 to allocate a memory buffer.
 * -# Call R_OSAL_MmngrFlush with offset is buffer size + 1 and size is 64
 * -# Call R_OSAL_MmngrDealloc to deallocate the allocated memory buffer.
 * -# Call R_OSAL_MmngrClose to close memory handle.
 * @subsection MmngrFlush_TC_09_010_031_ereb Expected Result/Behavior
 * -# The return of R_OSAL_MmngrOpen is OSAL_RETURN_OK.<br>
 * The returned handle is not OSAL_MEMORY_MANAGER_HANDLE_INVALID.
 * -# The return value of R_OSAL_MmngrAlloc is OSAL_RETURN_OK.<br>
 * The return buffer is not OSAL_MEMORY_BUFFER_HANDLE_INVALID.
 * -# The return value of R_OSAL_MmngrFlush is OSAL_RETURN_PAR.
 * -# The return value of R_OSAL_MmngrDealloc is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrClose is OSAL_RETURN_OK.
 * @subsection MmngrFlush_TC_09_010_031_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrFlush_TC_09_010_031
 */
// [MmngrFlush_TC_09_010_031]
TEST_F(MemoryApiTest, MmngrFlush_TC_09_010_031)
{
    // pre-process: open memory manager
    config.memory_limit                = 4096;
    config.max_allowed_allocations     = 1;
    config.max_registered_monitors_cbs = 2;
    config.mode = OSAL_MMNGR_ALLOC_MODE_STACK;
    size = 4096;
    alignment = 64;

    EXPECT_EQ(R_OSAL_MmngrOpen(&config, &hndl_mmngr), OSAL_RETURN_OK) <<  "pre-process failed";
    EXPECT_NE(hndl_mmngr,OSAL_MEMORY_MANAGER_HANDLE_INVALID) <<  "pre-process failed";

    // Test09_010_031
    // @brief: abnormal case: offset is out of range for the given buffer object (buffer size + 1)
    EXPECT_EQ(R_OSAL_MmngrAlloc(hndl_mmngr, size, alignment, &buffer_obj), OSAL_RETURN_OK);
    EXPECT_NE(buffer_obj,OSAL_MEMORY_BUFFER_HANDLE_INVALID);
    offset = size + 1;
    size = 64;
    EXPECT_EQ(R_OSAL_MmngrFlush(buffer_obj, offset, size), OSAL_RETURN_PAR) << "Test09_010_031 failed";
    EXPECT_EQ(R_OSAL_MmngrDealloc(hndl_mmngr, buffer_obj), OSAL_RETURN_OK);
    buffer_obj = OSAL_MEMORY_BUFFER_HANDLE_INVALID;

    // post-process: close memory manager
    EXPECT_EQ(R_OSAL_MmngrClose(hndl_mmngr), OSAL_RETURN_OK) <<  "post-process failed";
}
// [MmngrFlush_TC_09_010_031]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrFlush_TC_09_010_032 MemoryApiTest.MmngrFlush_TC_09_010_032
 * @subsection MmngrFlush_TC_09_010_032_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrFlush_TC_09_010_032_tci Test Case ID
 * MmngrFlush_S0_BA_TC_09_010_032
 * @subsection MmngrFlush_TC_09_010_032_rr Related Requirement(s)
 * \#276556
 * @subsection MmngrFlush_TC_09_010_032_pp Prerequisite/Precondition
 * OSAL is initialized.
 * @subsection MmngrFlush_TC_09_010_032_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrFlush with abnormal condition and mode is OSAL_MMNGR_ALLOC_MODE_STACK_PROT.
 * - pre-process: open new memory manager and allocate buffer
 * - Test09_010_032: offset is out of range for the given buffer object (buffer size + 1)
 * - post-process: close memory manager
 * @subsection MmngrFlush_TC_09_010_032_tpts Test Procedure/Test Steps
 * -# Call R_OSAL_MmngrOpen with bellow config:
 *  - config.memory_limit                = 4096
 *  - config.max_allowed_allocations     = 1
 *  - config.max_registered_monitors_cbs = 2
 *  - config.mode = OSAL_MMNGR_ALLOC_MODE_STACK_PROT
 * -# Call R_OSAL_MmngrAlloc with size is 4096 and alignment is 64 to allocate a memory buffer.
 * -# Call R_OSAL_MmngrFlush with offset is buffer size + 1 and size is 64
 * -# Call R_OSAL_MmngrDealloc to deallocate the allocated memory buffer.
 * -# Call R_OSAL_MmngrClose to close memory handle.
 * @subsection MmngrFlush_TC_09_010_032_ereb Expected Result/Behavior
 * -# The return of R_OSAL_MmngrOpen is OSAL_RETURN_OK.<br>
 * The returned handle is not OSAL_MEMORY_MANAGER_HANDLE_INVALID.
 * -# The return value of R_OSAL_MmngrAlloc is OSAL_RETURN_OK.<br>
 * The return buffer is not OSAL_MEMORY_BUFFER_HANDLE_INVALID.
 * -# The return value of R_OSAL_MmngrFlush is OSAL_RETURN_PAR.
 * -# The return value of R_OSAL_MmngrDealloc is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrClose is OSAL_RETURN_OK.
 * @subsection MmngrFlush_TC_09_010_032_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrFlush_TC_09_010_032
 */
// [MmngrFlush_TC_09_010_032]
TEST_F(MemoryApiTest, MmngrFlush_TC_09_010_032)
{
    // pre-process: open memory manager
    config.memory_limit                = 4096;
    config.max_allowed_allocations     = 1;
    config.max_registered_monitors_cbs = 2;
    config.mode = OSAL_MMNGR_ALLOC_MODE_STACK_PROT;
    size = 4096;
    alignment = 64;

    EXPECT_EQ(R_OSAL_MmngrOpen(&config, &hndl_mmngr), OSAL_RETURN_OK) <<  "pre-process failed";
    EXPECT_NE(hndl_mmngr,OSAL_MEMORY_MANAGER_HANDLE_INVALID) <<  "pre-process failed";

    // Test09_010_032
    // @brief: abnormal case: offset is out of range for the given buffer object (buffer size + 1)
    EXPECT_EQ(R_OSAL_MmngrAlloc(hndl_mmngr, size, alignment, &buffer_obj), OSAL_RETURN_OK);
    EXPECT_NE(buffer_obj,OSAL_MEMORY_BUFFER_HANDLE_INVALID);
    offset = size + 1;
    size = 64;
    EXPECT_EQ(R_OSAL_MmngrFlush(buffer_obj, offset, size), OSAL_RETURN_PAR) << "Test09_010_032 failed";
    EXPECT_EQ(R_OSAL_MmngrDealloc(hndl_mmngr, buffer_obj), OSAL_RETURN_OK);
    buffer_obj = OSAL_MEMORY_BUFFER_HANDLE_INVALID;

    // post-process: close memory manager
    EXPECT_EQ(R_OSAL_MmngrClose(hndl_mmngr), OSAL_RETURN_OK) <<  "post-process failed";
}
// [MmngrFlush_TC_09_010_032]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrFlush_TC_09_010_033 MemoryApiTest.MmngrFlush_TC_09_010_033
 * @subsection MmngrFlush_TC_09_010_033_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrFlush_TC_09_010_033_tci Test Case ID
 * MmngrFlush_S0_BA_TC_09_010_033
 * @subsection MmngrFlush_TC_09_010_033_rr Related Requirement(s)
 * \#276556
 * @subsection MmngrFlush_TC_09_010_033_pp Prerequisite/Precondition
 * OSAL is initialized.
 * @subsection MmngrFlush_TC_09_010_033_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrFlush with abnormal condition and mode is OSAL_MMNGR_ALLOC_MODE_FREE_LIST.
 * - pre-process: open new memory manager and allocate buffer
 * - Test09_010_033: offset is out of range for the given buffer object (buffer size + 1)
 * - post-process: close memory manager
 * @subsection MmngrFlush_TC_09_010_033_tpts Test Procedure/Test Steps
 * -# Call R_OSAL_MmngrOpen with bellow config:
 *  - config.memory_limit                = 4096
 *  - config.max_allowed_allocations     = 1
 *  - config.max_registered_monitors_cbs = 2
 *  - config.mode = OSAL_MMNGR_ALLOC_MODE_FREE_LIST
 * -# Call R_OSAL_MmngrAlloc with size is 4096 and alignment is 64 to allocate a memory buffer.
 * -# Call R_OSAL_MmngrFlush with offset is buffer size + 1 and size is 64
 * -# Call R_OSAL_MmngrDealloc to deallocate the allocated memory buffer.
 * -# Call R_OSAL_MmngrClose to close memory handle.
 * @subsection MmngrFlush_TC_09_010_033_ereb Expected Result/Behavior
 * -# The return of R_OSAL_MmngrOpen is OSAL_RETURN_OK.<br>
 * The returned handle is not OSAL_MEMORY_MANAGER_HANDLE_INVALID.
 * -# The return value of R_OSAL_MmngrAlloc is OSAL_RETURN_OK.<br>
 * The return buffer is not OSAL_MEMORY_BUFFER_HANDLE_INVALID.
 * -# The return value of R_OSAL_MmngrFlush is OSAL_RETURN_PAR.
 * -# The return value of R_OSAL_MmngrDealloc is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrClose is OSAL_RETURN_OK.
 * @subsection MmngrFlush_TC_09_010_033_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrFlush_TC_09_010_033
 */
// [MmngrFlush_TC_09_010_033]
TEST_F(MemoryApiTest, MmngrFlush_TC_09_010_033)
{
    // pre-process: open memory manager
    config.memory_limit                = 4096;
    config.max_allowed_allocations     = 1;
    config.max_registered_monitors_cbs = 2;
    config.mode = OSAL_MMNGR_ALLOC_MODE_FREE_LIST;
    size = 4096;
    alignment = 64;

    EXPECT_EQ(R_OSAL_MmngrOpen(&config, &hndl_mmngr), OSAL_RETURN_OK) <<  "pre-process failed";
    EXPECT_NE(hndl_mmngr,OSAL_MEMORY_MANAGER_HANDLE_INVALID) <<  "pre-process failed";

    // Test09_010_033
    // @brief: abnormal case: offset is out of range for the given buffer object (buffer size + 1)
    EXPECT_EQ(R_OSAL_MmngrAlloc(hndl_mmngr, size, alignment, &buffer_obj), OSAL_RETURN_OK);
    EXPECT_NE(buffer_obj,OSAL_MEMORY_BUFFER_HANDLE_INVALID);
    offset = size + 1;
    size = 64;
    EXPECT_EQ(R_OSAL_MmngrFlush(buffer_obj, offset, size), OSAL_RETURN_PAR) << "Test09_010_033 failed";
    EXPECT_EQ(R_OSAL_MmngrDealloc(hndl_mmngr, buffer_obj), OSAL_RETURN_OK);
    buffer_obj = OSAL_MEMORY_BUFFER_HANDLE_INVALID;

    // post-process: close memory manager
    EXPECT_EQ(R_OSAL_MmngrClose(hndl_mmngr), OSAL_RETURN_OK) <<  "post-process failed";
}
// [MmngrFlush_TC_09_010_033]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrFlush_TC_09_010_034 MemoryApiTest.MmngrFlush_TC_09_010_034
 * @subsection MmngrFlush_TC_09_010_034_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrFlush_TC_09_010_034_tci Test Case ID
 * MmngrFlush_S0_BA_TC_09_010_034
 * @subsection MmngrFlush_TC_09_010_034_rr Related Requirement(s)
 * \#276556
 * @subsection MmngrFlush_TC_09_010_034_pp Prerequisite/Precondition
 * OSAL is initialized.
 * @subsection MmngrFlush_TC_09_010_034_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrFlush with abnormal condition and mode is OSAL_MMNGR_ALLOC_MODE_FREE_LIST_PROT.
 * - pre-process: open new memory manager and allocate buffer
 * - Test09_010_034: offset is out of range for the given buffer object (buffer size + 1)
 * - post-process: close memory manager
 * @subsection MmngrFlush_TC_09_010_034_tpts Test Procedure/Test Steps
 * -# Call R_OSAL_MmngrOpen with bellow config:
 *  - config.memory_limit                = 4096
 *  - config.max_allowed_allocations     = 1
 *  - config.max_registered_monitors_cbs = 2
 *  - config.mode = OSAL_MMNGR_ALLOC_MODE_FREE_LIST_PROT
 * -# Call R_OSAL_MmngrAlloc with size is 4096 and alignment is 64 to allocate a memory buffer.
 * -# Call R_OSAL_MmngrFlush with offset is buffer size + 1 and size is 64
 * -# Call R_OSAL_MmngrDealloc to deallocate the allocated memory buffer.
 * -# Call R_OSAL_MmngrClose to close memory handle.
 * @subsection MmngrFlush_TC_09_010_034_ereb Expected Result/Behavior
 * -# The return of R_OSAL_MmngrOpen is OSAL_RETURN_OK.<br>
 * The returned handle is not OSAL_MEMORY_MANAGER_HANDLE_INVALID.
 * -# The return value of R_OSAL_MmngrAlloc is OSAL_RETURN_OK.<br>
 * The return buffer is not OSAL_MEMORY_BUFFER_HANDLE_INVALID.
 * -# The return value of R_OSAL_MmngrFlush is OSAL_RETURN_PAR.
 * -# The return value of R_OSAL_MmngrDealloc is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrClose is OSAL_RETURN_OK.
 * @subsection MmngrFlush_TC_09_010_034_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrFlush_TC_09_010_034
 */
// [MmngrFlush_TC_09_010_034]
TEST_F(MemoryApiTest, MmngrFlush_TC_09_010_034)
{
    // pre-process: open memory manager
    config.memory_limit                = 4096;
    config.max_allowed_allocations     = 1;
    config.max_registered_monitors_cbs = 2;
    config.mode = OSAL_MMNGR_ALLOC_MODE_FREE_LIST_PROT;
    size = 4096;
    alignment = 64;

    EXPECT_EQ(R_OSAL_MmngrOpen(&config, &hndl_mmngr), OSAL_RETURN_OK) <<  "pre-process failed";
    EXPECT_NE(hndl_mmngr,OSAL_MEMORY_MANAGER_HANDLE_INVALID) <<  "pre-process failed";

    // Test09_010_034
    // @brief: abnormal case: offset is out of range for the given buffer object (buffer size + 1)
    EXPECT_EQ(R_OSAL_MmngrAlloc(hndl_mmngr, size, alignment, &buffer_obj), OSAL_RETURN_OK);
    EXPECT_NE(buffer_obj,OSAL_MEMORY_BUFFER_HANDLE_INVALID);
    offset = size + 1;
    size = 64;
    EXPECT_EQ(R_OSAL_MmngrFlush(buffer_obj, offset, size), OSAL_RETURN_PAR) << "Test09_010_034 failed";
    EXPECT_EQ(R_OSAL_MmngrDealloc(hndl_mmngr, buffer_obj), OSAL_RETURN_OK);
    buffer_obj = OSAL_MEMORY_BUFFER_HANDLE_INVALID;

    // post-process: close memory manager
    EXPECT_EQ(R_OSAL_MmngrClose(hndl_mmngr), OSAL_RETURN_OK) <<  "post-process failed";
}
// [MmngrFlush_TC_09_010_034]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrFlush_TC_09_010_035 MemoryApiTest.MmngrFlush_TC_09_010_035
 * @subsection MmngrFlush_TC_09_010_035_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrFlush_TC_09_010_035_tci Test Case ID
 * MmngrFlush_S0_A_TC_09_010_035
 * @subsection MmngrFlush_TC_09_010_035_rr Related Requirement(s)
 * \#276556
 * @subsection MmngrFlush_TC_09_010_035_pp Prerequisite/Precondition
 * OSAL is initialized.
 * @subsection MmngrFlush_TC_09_010_035_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrFlush with abnormal condition and mode is OSAL_MMNGR_ALLOC_MODE_STACK.
 * - pre-process: open new memory manager and allocate buffer
 * - Test09_010_035: offset alignment is less than 64 bytes
 * - post-process: close memory manager
 * @subsection MmngrFlush_TC_09_010_035_tpts Test Procedure/Test Steps
 * -# Call R_OSAL_MmngrOpen with bellow config:
 *  - config.memory_limit                = 4096
 *  - config.max_allowed_allocations     = 1
 *  - config.max_registered_monitors_cbs = 2
 *  - config.mode = OSAL_MMNGR_ALLOC_MODE_STACK
 * -# Call R_OSAL_MmngrAlloc with size is 4096 and alignment is 64 to allocate a memory buffer.
 * -# Call R_OSAL_MmngrFlush with offset is 63 and size is 64
 * -# Call R_OSAL_MmngrDealloc to deallocate the allocated memory buffer.
 * -# Call R_OSAL_MmngrClose to close memory handle.
 * @subsection MmngrFlush_TC_09_010_035_ereb Expected Result/Behavior
 * -# The return of R_OSAL_MmngrOpen is OSAL_RETURN_OK.<br>
 * The returned handle is not OSAL_MEMORY_MANAGER_HANDLE_INVALID.
 * -# The return value of R_OSAL_MmngrAlloc is OSAL_RETURN_OK.<br>
 * The return buffer is not OSAL_MEMORY_BUFFER_HANDLE_INVALID.
 * -# The return value of R_OSAL_MmngrFlush is OSAL_RETURN_PAR.
 * -# The return value of R_OSAL_MmngrDealloc is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrClose is OSAL_RETURN_OK.
 * @subsection MmngrFlush_TC_09_010_035_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrFlush_TC_09_010_035
 */
// [MmngrFlush_TC_09_010_035]
TEST_F(MemoryApiTest, MmngrFlush_TC_09_010_035)
{
    // pre-process: open memory manager
    config.memory_limit                = 4096;
    config.max_allowed_allocations     = 1;
    config.max_registered_monitors_cbs = 2;
    config.mode = OSAL_MMNGR_ALLOC_MODE_STACK;
    size = 4096;
    alignment = 64;

    EXPECT_EQ(R_OSAL_MmngrOpen(&config, &hndl_mmngr), OSAL_RETURN_OK) <<  "pre-process failed";
    EXPECT_NE(hndl_mmngr,OSAL_MEMORY_MANAGER_HANDLE_INVALID) <<  "pre-process failed";

    // Test09_010_035
    // @brief: abnormal case: offset alignment is less than 64 bytes
    EXPECT_EQ(R_OSAL_MmngrAlloc(hndl_mmngr, size, alignment, &buffer_obj), OSAL_RETURN_OK);
    EXPECT_NE(buffer_obj,OSAL_MEMORY_BUFFER_HANDLE_INVALID);
    offset = 63;
    size = 64;
    EXPECT_EQ(R_OSAL_MmngrFlush(buffer_obj, offset, size), OSAL_RETURN_PAR) << "Test09_010_035 failed";
    EXPECT_EQ(R_OSAL_MmngrDealloc(hndl_mmngr, buffer_obj), OSAL_RETURN_OK);
    buffer_obj = OSAL_MEMORY_BUFFER_HANDLE_INVALID;

    // post-process: close memory manager
    EXPECT_EQ(R_OSAL_MmngrClose(hndl_mmngr), OSAL_RETURN_OK) <<  "post-process failed";
}
// [MmngrFlush_TC_09_010_035]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrFlush_TC_09_010_036 MemoryApiTest.MmngrFlush_TC_09_010_036
 * @subsection MmngrFlush_TC_09_010_036_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrFlush_TC_09_010_036_tci Test Case ID
 * MmngrFlush_S0_A_TC_09_010_036
 * @subsection MmngrFlush_TC_09_010_036_rr Related Requirement(s)
 * \#276556
 * @subsection MmngrFlush_TC_09_010_036_pp Prerequisite/Precondition
 * OSAL is initialized.
 * @subsection MmngrFlush_TC_09_010_036_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrFlush with abnormal condition and mode is OSAL_MMNGR_ALLOC_MODE_STACK_PROT.
 * - pre-process: open new memory manager and allocate buffer
 * - Test09_010_036: offset alignment is less than 64 bytes
 * - post-process: close memory manager
 * @subsection MmngrFlush_TC_09_010_036_tpts Test Procedure/Test Steps
 * -# Call R_OSAL_MmngrOpen with bellow config:
 *  - config.memory_limit                = 4096
 *  - config.max_allowed_allocations     = 1
 *  - config.max_registered_monitors_cbs = 2
 *  - config.mode = OSAL_MMNGR_ALLOC_MODE_STACK_PROT
 * -# Call R_OSAL_MmngrAlloc with size is 4096 and alignment is 64 to allocate a memory buffer.
 * -# Call R_OSAL_MmngrFlush with offset is 63 and size is 64
 * -# Call R_OSAL_MmngrDealloc to deallocate the allocated memory buffer.
 * -# Call R_OSAL_MmngrClose to close memory handle.
 * @subsection MmngrFlush_TC_09_010_036_ereb Expected Result/Behavior
 * -# The return of R_OSAL_MmngrOpen is OSAL_RETURN_OK.<br>
 * The returned handle is not OSAL_MEMORY_MANAGER_HANDLE_INVALID.
 * -# The return value of R_OSAL_MmngrAlloc is OSAL_RETURN_OK.<br>
 * The return buffer is not OSAL_MEMORY_BUFFER_HANDLE_INVALID.
 * -# The return value of R_OSAL_MmngrFlush is OSAL_RETURN_PAR.
 * -# The return value of R_OSAL_MmngrDealloc is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrClose is OSAL_RETURN_OK.
 * @subsection MmngrFlush_TC_09_010_036_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrFlush_TC_09_010_036
 */
// [MmngrFlush_TC_09_010_036]
TEST_F(MemoryApiTest, MmngrFlush_TC_09_010_036)
{
    // pre-process: open memory manager
    config.memory_limit                = 4096;
    config.max_allowed_allocations     = 1;
    config.max_registered_monitors_cbs = 2;
    config.mode = OSAL_MMNGR_ALLOC_MODE_STACK_PROT;
    size = 4096;
    alignment = 64;

    EXPECT_EQ(R_OSAL_MmngrOpen(&config, &hndl_mmngr), OSAL_RETURN_OK) <<  "pre-process failed";
    EXPECT_NE(hndl_mmngr,OSAL_MEMORY_MANAGER_HANDLE_INVALID) <<  "pre-process failed";

    // Test09_010_036
    // @brief: abnormal case: offset alignment is less than 64 bytes
    EXPECT_EQ(R_OSAL_MmngrAlloc(hndl_mmngr, size, alignment, &buffer_obj), OSAL_RETURN_OK);
    EXPECT_NE(buffer_obj,OSAL_MEMORY_BUFFER_HANDLE_INVALID);
    offset = 63;
    size = 64;
    EXPECT_EQ(R_OSAL_MmngrFlush(buffer_obj, offset, size), OSAL_RETURN_PAR) << "Test09_010_036 failed";
    EXPECT_EQ(R_OSAL_MmngrDealloc(hndl_mmngr, buffer_obj), OSAL_RETURN_OK);
    buffer_obj = OSAL_MEMORY_BUFFER_HANDLE_INVALID;

    // post-process: close memory manager
    EXPECT_EQ(R_OSAL_MmngrClose(hndl_mmngr), OSAL_RETURN_OK) <<  "post-process failed";
}
// [MmngrFlush_TC_09_010_036]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrFlush_TC_09_010_037 MemoryApiTest.MmngrFlush_TC_09_010_037
 * @subsection MmngrFlush_TC_09_010_037_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrFlush_TC_09_010_037_tci Test Case ID
 * MmngrFlush_S0_A_TC_09_010_037
 * @subsection MmngrFlush_TC_09_010_037_rr Related Requirement(s)
 * \#276556
 * @subsection MmngrFlush_TC_09_010_037_pp Prerequisite/Precondition
 * OSAL is initialized.
 * @subsection MmngrFlush_TC_09_010_037_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrFlush with abnormal condition and mode is OSAL_MMNGR_ALLOC_MODE_FREE_LIST.
 * - pre-process: open new memory manager and allocate buffer
 * - Test09_010_037: offset alignment is less than 64 bytes
 * - post-process: close memory manager
 * @subsection MmngrFlush_TC_09_010_037_tpts Test Procedure/Test Steps
 * -# Call R_OSAL_MmngrOpen with bellow config:
 *  - config.memory_limit                = 4096
 *  - config.max_allowed_allocations     = 1
 *  - config.max_registered_monitors_cbs = 2
 *  - config.mode = OSAL_MMNGR_ALLOC_MODE_FREE_LIST
 * -# Call R_OSAL_MmngrAlloc with size is 4096 and alignment is 64 to allocate a memory buffer.
 * -# Call R_OSAL_MmngrFlush with offset is 63 and size is 64
 * -# Call R_OSAL_MmngrDealloc to deallocate the allocated memory buffer.
 * -# Call R_OSAL_MmngrClose to close memory handle.
 * @subsection MmngrFlush_TC_09_010_037_ereb Expected Result/Behavior
 * -# The return of R_OSAL_MmngrOpen is OSAL_RETURN_OK.<br>
 * The returned handle is not OSAL_MEMORY_MANAGER_HANDLE_INVALID.
 * -# The return value of R_OSAL_MmngrAlloc is OSAL_RETURN_OK.<br>
 * The return buffer is not OSAL_MEMORY_BUFFER_HANDLE_INVALID.
 * -# The return value of R_OSAL_MmngrFlush is OSAL_RETURN_PAR.
 * -# The return value of R_OSAL_MmngrDealloc is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrClose is OSAL_RETURN_OK.
 * @subsection MmngrFlush_TC_09_010_037_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrFlush_TC_09_010_037
 */
// [MmngrFlush_TC_09_010_037]
TEST_F(MemoryApiTest, MmngrFlush_TC_09_010_037)
{
    // pre-process: open memory manager
    config.memory_limit                = 4096;
    config.max_allowed_allocations     = 1;
    config.max_registered_monitors_cbs = 2;
    config.mode = OSAL_MMNGR_ALLOC_MODE_FREE_LIST;
    size = 4096;
    alignment = 64;

    EXPECT_EQ(R_OSAL_MmngrOpen(&config, &hndl_mmngr), OSAL_RETURN_OK) <<  "pre-process failed";
    EXPECT_NE(hndl_mmngr,OSAL_MEMORY_MANAGER_HANDLE_INVALID) <<  "pre-process failed";

    // Test09_010_037
    // @brief: abnormal case: offset alignment is less than 64 bytes
    EXPECT_EQ(R_OSAL_MmngrAlloc(hndl_mmngr, size, alignment, &buffer_obj), OSAL_RETURN_OK);
    EXPECT_NE(buffer_obj,OSAL_MEMORY_BUFFER_HANDLE_INVALID);
    offset = 63;
    size = 64;
    EXPECT_EQ(R_OSAL_MmngrFlush(buffer_obj, offset, size), OSAL_RETURN_PAR) << "Test09_010_037 failed";
    EXPECT_EQ(R_OSAL_MmngrDealloc(hndl_mmngr, buffer_obj), OSAL_RETURN_OK);
    buffer_obj = OSAL_MEMORY_BUFFER_HANDLE_INVALID;

    // post-process: close memory manager
    EXPECT_EQ(R_OSAL_MmngrClose(hndl_mmngr), OSAL_RETURN_OK) <<  "post-process failed";
}
// [MmngrFlush_TC_09_010_037]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrFlush_TC_09_010_038 MemoryApiTest.MmngrFlush_TC_09_010_038
 * @subsection MmngrFlush_TC_09_010_038_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrFlush_TC_09_010_038_tci Test Case ID
 * MmngrFlush_S0_A_TC_09_010_038
 * @subsection MmngrFlush_TC_09_010_038_rr Related Requirement(s)
 * \#276556
 * @subsection MmngrFlush_TC_09_010_038_pp Prerequisite/Precondition
 * OSAL is initialized.
 * @subsection MmngrFlush_TC_09_010_038_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrFlush with abnormal condition and mode is OSAL_MMNGR_ALLOC_MODE_FREE_LIST_PROT.
 * - pre-process: open new memory manager and allocate buffer
 * - Test09_010_038: offset alignment is less than 64 bytes
 * - post-process: close memory manager
 * @subsection MmngrFlush_TC_09_010_038_tpts Test Procedure/Test Steps
 * -# Call R_OSAL_MmngrOpen with bellow config:
 *  - config.memory_limit                = 4096
 *  - config.max_allowed_allocations     = 1
 *  - config.max_registered_monitors_cbs = 2
 *  - config.mode = OSAL_MMNGR_ALLOC_MODE_FREE_LIST_PROT
 * -# Call R_OSAL_MmngrAlloc with size is 4096 and alignment is 64 to allocate a memory buffer.
 * -# Call R_OSAL_MmngrFlush with offset is 63 and size is 64
 * -# Call R_OSAL_MmngrDealloc to deallocate the allocated memory buffer.
 * -# Call R_OSAL_MmngrClose to close memory handle.
 * @subsection MmngrFlush_TC_09_010_038_ereb Expected Result/Behavior
 * -# The return of R_OSAL_MmngrOpen is OSAL_RETURN_OK.<br>
 * The returned handle is not OSAL_MEMORY_MANAGER_HANDLE_INVALID.
 * -# The return value of R_OSAL_MmngrAlloc is OSAL_RETURN_OK.<br>
 * The return buffer is not OSAL_MEMORY_BUFFER_HANDLE_INVALID.
 * -# The return value of R_OSAL_MmngrFlush is OSAL_RETURN_PAR.
 * -# The return value of R_OSAL_MmngrDealloc is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrClose is OSAL_RETURN_OK.
 * @subsection MmngrFlush_TC_09_010_038_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrFlush_TC_09_010_038
 */
// [MmngrFlush_TC_09_010_038]
TEST_F(MemoryApiTest, MmngrFlush_TC_09_010_038)
{
    // pre-process: open memory manager
    config.memory_limit                = 4096;
    config.max_allowed_allocations     = 1;
    config.max_registered_monitors_cbs = 2;
    config.mode = OSAL_MMNGR_ALLOC_MODE_FREE_LIST_PROT;
    size = 4096;
    alignment = 64;

    EXPECT_EQ(R_OSAL_MmngrOpen(&config, &hndl_mmngr), OSAL_RETURN_OK) <<  "pre-process failed";
    EXPECT_NE(hndl_mmngr,OSAL_MEMORY_MANAGER_HANDLE_INVALID) <<  "pre-process failed";

    // Test09_010_038
    // @brief: abnormal case: offset alignment is less than 64 bytes
    EXPECT_EQ(R_OSAL_MmngrAlloc(hndl_mmngr, size, alignment, &buffer_obj), OSAL_RETURN_OK);
    EXPECT_NE(buffer_obj,OSAL_MEMORY_BUFFER_HANDLE_INVALID);
    offset = 63;
    size = 64;
    EXPECT_EQ(R_OSAL_MmngrFlush(buffer_obj, offset, size), OSAL_RETURN_PAR) << "Test09_010_038 failed";
    EXPECT_EQ(R_OSAL_MmngrDealloc(hndl_mmngr, buffer_obj), OSAL_RETURN_OK);
    buffer_obj = OSAL_MEMORY_BUFFER_HANDLE_INVALID;

    // post-process: close memory manager
    EXPECT_EQ(R_OSAL_MmngrClose(hndl_mmngr), OSAL_RETURN_OK) <<  "post-process failed";
}
// [MmngrFlush_TC_09_010_038]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrFlush_TC_09_010_039 MemoryApiTest.MmngrFlush_TC_09_010_039
 * @subsection MmngrFlush_TC_09_010_039_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrFlush_TC_09_010_039_tci Test Case ID
 * MmngrFlush_S2_A_TC_09_010_039
 * @subsection MmngrFlush_TC_09_010_039_rr Related Requirement(s)
 * \#276556
 * @subsection MmngrFlush_TC_09_010_039_pp Prerequisite/Precondition
 * OSAL is initialized.
 * @subsection MmngrFlush_TC_09_010_039_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrFlush with abnormal condition and mode is OSAL_MMNGR_ALLOC_MODE_FREE_LIST.
 * - Test09_010_039: The buffer object has already been deallocated
 * @subsection MmngrFlush_TC_09_010_039_tpts Test Procedure/Test Steps
 * -# Call R_OSAL_MmngrOpen with bellow config:
 *  - config.memory_limit                = 4096
 *  - config.max_allowed_allocations     = 1
 *  - config.max_registered_monitors_cbs = 2
 *  - config.mode = OSAL_MMNGR_ALLOC_MODE_FREE_LIST
 * -# Call R_OSAL_MmngrAlloc to allocate a memory buffer.
 * -# Call R_OSAL_MmngrDealloc to deallocate the allocated memory buffer.
 * -# Call R_OSAL_MmngrFlush with offset is 0, size is 64.
 * -# Call R_OSAL_MmngrClose to close memory handle.
 * @subsection MmngrFlush_TC_09_010_039_ereb Expected Result/Behavior
 * -# The return of R_OSAL_MmngrOpen is OSAL_RETURN_OK.<br>
 * The returned handle is not OSAL_MEMORY_MANAGER_HANDLE_INVALID.
 * -# The return value of R_OSAL_MmngrAlloc is OSAL_RETURN_OK.<br>
 * the return buffer is not OSAL_MEMORY_BUFFER_HANDLE_INVALID.
 * -# The return value of R_OSAL_MmngrDealloc is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrFlush is OSAL_RETURN_HANDLE.
 * -# The return value of R_OSAL_MmngrClose is OSAL_RETURN_OK.
 * @subsection MmngrFlush_TC_09_010_039_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrFlush_TC_09_010_039
 */
// [MmngrFlush_TC_09_010_039]
TEST_F(MemoryApiTest, MmngrFlush_TC_09_010_039)
{
    // Test09_010_039
    // @brief: abnormal case: The buffer object has already been deallocated
    config.memory_limit                = 4096;
    config.max_allowed_allocations     = 1;
    config.max_registered_monitors_cbs = 2;
    config.mode = OSAL_MMNGR_ALLOC_MODE_FREE_LIST;
    size = 4096;
    alignment = 64;

    EXPECT_EQ(R_OSAL_MmngrOpen(&config, &hndl_mmngr), OSAL_RETURN_OK) << "Test09_010_039 failed";
    EXPECT_NE(hndl_mmngr,OSAL_MEMORY_MANAGER_HANDLE_INVALID) << "Test09_010_039 failed";
    EXPECT_EQ(R_OSAL_MmngrAlloc(hndl_mmngr, size, alignment, &buffer_obj), OSAL_RETURN_OK) << "Test09_010_039 failed";
    EXPECT_NE(buffer_obj,OSAL_MEMORY_BUFFER_HANDLE_INVALID) << "Test09_010_039 failed";
    EXPECT_EQ(R_OSAL_MmngrDealloc(hndl_mmngr, buffer_obj), OSAL_RETURN_OK) << "Test09_010_039 failed";
    offset = 0;
    size = 64;
    EXPECT_EQ(R_OSAL_MmngrFlush(buffer_obj, offset, size), OSAL_RETURN_HANDLE) << "Test09_010_039 failed";
    EXPECT_EQ(R_OSAL_MmngrClose(hndl_mmngr), OSAL_RETURN_OK) << "Test09_010_039 failed";
    hndl_mmngr = OSAL_MEMORY_MANAGER_HANDLE_INVALID;
    buffer_obj = OSAL_MEMORY_BUFFER_HANDLE_INVALID;
}
// [MmngrFlush_TC_09_010_039]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrFlush_TC_09_010_040 MemoryApiTest.MmngrFlush_TC_09_010_040
 * @subsection MmngrFlush_TC_09_010_040_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrFlush_TC_09_010_040_tci Test Case ID
 * MmngrFlush_S2_A_TC_09_010_040
 * @subsection MmngrFlush_TC_09_010_040_rr Related Requirement(s)
 * \#276556
 * @subsection MmngrFlush_TC_09_010_040_pp Prerequisite/Precondition
 * OSAL is initialized.
 * @subsection MmngrFlush_TC_09_010_040_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrFlush with abnormal condition and mode is OSAL_MMNGR_ALLOC_MODE_FREE_LIST_PROT.
 * - Test09_010_040: The buffer object has already been deallocated
 * @subsection MmngrFlush_TC_09_010_040_tpts Test Procedure/Test Steps
 * -# Call R_OSAL_MmngrOpen with bellow config:
 *  - config.memory_limit                = 4096
 *  - config.max_allowed_allocations     = 1
 *  - config.max_registered_monitors_cbs = 2
 *  - config.mode = OSAL_MMNGR_ALLOC_MODE_FREE_LIST_PROT
 * -# Call R_OSAL_MmngrAlloc to allocate a memory buffer.
 * -# Call R_OSAL_MmngrDealloc to deallocate the allocated memory buffer.
 * -# Call R_OSAL_MmngrFlush with offset is 0, size is 64.
 * -# Call R_OSAL_MmngrClose to close memory handle.
 * @subsection MmngrFlush_TC_09_010_040_ereb Expected Result/Behavior
 * -# The return of R_OSAL_MmngrOpen is OSAL_RETURN_OK.<br>
 * The returned handle is not OSAL_MEMORY_MANAGER_HANDLE_INVALID.
 * -# The return value of R_OSAL_MmngrAlloc is OSAL_RETURN_OK.<br>
 * the return buffer is not OSAL_MEMORY_BUFFER_HANDLE_INVALID.
 * -# The return value of R_OSAL_MmngrDealloc is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrFlush is OSAL_RETURN_HANDLE.
 * -# The return value of R_OSAL_MmngrClose is OSAL_RETURN_OK.
 * @subsection MmngrFlush_TC_09_010_040_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrFlush_TC_09_010_040
 */
// [MmngrFlush_TC_09_010_040]
TEST_F(MemoryApiTest, MmngrFlush_TC_09_010_040)
{
    // Test09_010_040
    // @brief: abnormal case: The buffer object has already been deallocated
    config.memory_limit                = 4096;
    config.max_allowed_allocations     = 1;
    config.max_registered_monitors_cbs = 2;
    config.mode = OSAL_MMNGR_ALLOC_MODE_FREE_LIST_PROT;
    size = 4096;
    alignment = 64;

    EXPECT_EQ(R_OSAL_MmngrOpen(&config, &hndl_mmngr), OSAL_RETURN_OK) << "Test09_010_040 failed";
    EXPECT_NE(hndl_mmngr,OSAL_MEMORY_MANAGER_HANDLE_INVALID) << "Test09_010_040 failed";
    EXPECT_EQ(R_OSAL_MmngrAlloc(hndl_mmngr, size, alignment, &buffer_obj), OSAL_RETURN_OK) << "Test09_010_040 failed";
    EXPECT_NE(buffer_obj,OSAL_MEMORY_BUFFER_HANDLE_INVALID) << "Test09_010_040 failed";
    EXPECT_EQ(R_OSAL_MmngrDealloc(hndl_mmngr, buffer_obj), OSAL_RETURN_OK) << "Test09_010_040 failed";
    offset = 0;
    size = 64;
    EXPECT_EQ(R_OSAL_MmngrFlush(buffer_obj, offset, size), OSAL_RETURN_HANDLE) << "Test09_010_040 failed";
    EXPECT_EQ(R_OSAL_MmngrClose(hndl_mmngr), OSAL_RETURN_OK) << "Test09_010_040 failed";
    hndl_mmngr = OSAL_MEMORY_MANAGER_HANDLE_INVALID;
    buffer_obj = OSAL_MEMORY_BUFFER_HANDLE_INVALID;
}
// [MmngrFlush_TC_09_010_040]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrFlush_TC_09_010_041 MemoryApiTest.MmngrFlush_TC_09_010_041
 * @subsection MmngrFlush_TC_09_010_041_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrFlush_TC_09_010_041_tci Test Case ID
 * MmngrFlush_S4_A_TC_09_010_041
 * @subsection MmngrFlush_TC_09_010_041_rr Related Requirement(s)
 * \#276556
 * @subsection MmngrFlush_TC_09_010_041_pp Prerequisite/Precondition
 * OSAL is initialized.
 * @subsection MmngrFlush_TC_09_010_041_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrFlush with abnormal condition and mode is OSAL_MMNGR_ALLOC_MODE_STACK.
 * - Test09_010_041: buffer_obj->mmngr_owner_hndl->p_ptr_self is invalid (NULL)
 * @subsection MmngrFlush_TC_09_010_041_tpts Test Procedure/Test Steps
 * -# Call R_OSAL_MmngrOpen with bellow config:
 *  - config.memory_limit                = 4096
 *  - config.max_allowed_allocations     = 1
 *  - config.max_registered_monitors_cbs = 2
 *  - config.mode = OSAL_MMNGR_ALLOC_MODE_STACK
 * -# Call R_OSAL_MmngrAlloc to allocate a memory buffer.
 * -# Call R_OSAL_MmngrFlush with buffer_obj->mmngr_owner_hndl->p_ptr_self is invalid (NULL)
 * -# Call R_OSAL_MmngrDealloc to deallocate the allocated memory buffer.
 * -# Call R_OSAL_MmngrClose to close memory handle.
 * @subsection MmngrFlush_TC_09_010_041_ereb Expected Result/Behavior
 * -# The return of R_OSAL_MmngrOpen is OSAL_RETURN_OK.<br>
 * The returned handle is not OSAL_MEMORY_MANAGER_HANDLE_INVALID.
 * -# The return value of R_OSAL_MmngrAlloc is OSAL_RETURN_OK.<br>
 * the return buffer is not OSAL_MEMORY_BUFFER_HANDLE_INVALID.
 * -# The return value of R_OSAL_MmngrFlush is OSAL_RETURN_HANDLE.
 * -# The return value of R_OSAL_MmngrDealloc is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrClose is OSAL_RETURN_OK.
 * @subsection MmngrFlush_TC_09_010_041_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrFlush_TC_09_010_041
 */
// [MmngrFlush_TC_09_010_041]
TEST_F(MemoryApiTest, MmngrFlush_TC_09_010_041)
{
    void *bk_ptr_self;

    // Test09_010_041
    // @brief: abnormal case: buffer_obj->mmngr_owner_hndl->p_ptr_self is invalid (NULL)
    config.memory_limit                = 4096;
    config.max_allowed_allocations     = 1;
    config.max_registered_monitors_cbs = 2;
    config.mode = OSAL_MMNGR_ALLOC_MODE_STACK;
    size = 4096;
    alignment = 64;

    EXPECT_EQ(R_OSAL_MmngrOpen(&config, &hndl_mmngr), OSAL_RETURN_OK) << "Test09_010_041 failed";
    EXPECT_NE(hndl_mmngr,OSAL_MEMORY_MANAGER_HANDLE_INVALID) << "Test09_010_041 failed";
    EXPECT_EQ(R_OSAL_MmngrAlloc(hndl_mmngr, size, alignment, &buffer_obj), OSAL_RETURN_OK) << "Test09_010_041 failed";
    EXPECT_NE(buffer_obj,OSAL_MEMORY_BUFFER_HANDLE_INVALID) << "Test09_010_041 failed";
    bk_ptr_self = buffer_obj->mmngr_owner_hndl->p_ptr_self;
    buffer_obj->mmngr_owner_hndl->p_ptr_self = NULL;
    offset = 0;
    size = 64;
    EXPECT_EQ(R_OSAL_MmngrFlush(buffer_obj, offset, size), OSAL_RETURN_HANDLE) << "Test09_010_041 failed";
    buffer_obj->mmngr_owner_hndl->p_ptr_self = bk_ptr_self;
    EXPECT_EQ(R_OSAL_MmngrDealloc(hndl_mmngr, buffer_obj), OSAL_RETURN_OK) << "Test09_010_041 failed";
    EXPECT_EQ(R_OSAL_MmngrClose(hndl_mmngr), OSAL_RETURN_OK) << "Test09_010_041 failed";
    hndl_mmngr = OSAL_MEMORY_MANAGER_HANDLE_INVALID;
    buffer_obj = OSAL_MEMORY_BUFFER_HANDLE_INVALID;
}
// [MmngrFlush_TC_09_010_041]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrFlush_TC_09_010_042 MemoryApiTest.MmngrFlush_TC_09_010_042
 * @subsection MmngrFlush_TC_09_010_042_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrFlush_TC_09_010_042_tci Test Case ID
 * MmngrFlush_S4_A_TC_09_010_042
 * @subsection MmngrFlush_TC_09_010_042_rr Related Requirement(s)
 * \#276556
 * @subsection MmngrFlush_TC_09_010_042_pp Prerequisite/Precondition
 * OSAL is initialized.
 * @subsection MmngrFlush_TC_09_010_042_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrFlush with abnormal condition and mode is OSAL_MMNGR_ALLOC_MODE_STACK_PROT.
 * - Test09_010_042: buffer_obj->mmngr_owner_hndl->p_ptr_self is invalid (NULL)
 * @subsection MmngrFlush_TC_09_010_042_tpts Test Procedure/Test Steps
 * -# Call R_OSAL_MmngrOpen with bellow config:
 *  - config.memory_limit                = 4096
 *  - config.max_allowed_allocations     = 1
 *  - config.max_registered_monitors_cbs = 2
 *  - config.mode = OSAL_MMNGR_ALLOC_MODE_STACK_PROT
 * -# Call R_OSAL_MmngrAlloc to allocate a memory buffer.
 * -# Call R_OSAL_MmngrFlush with buffer_obj->mmngr_owner_hndl->p_ptr_self is invalid (NULL)
 * -# Call R_OSAL_MmngrDealloc to deallocate the allocated memory buffer.
 * -# Call R_OSAL_MmngrClose to close memory handle.
 * @subsection MmngrFlush_TC_09_010_042_ereb Expected Result/Behavior
 * -# The return of R_OSAL_MmngrOpen is OSAL_RETURN_OK.<br>
 * The returned handle is not OSAL_MEMORY_MANAGER_HANDLE_INVALID.
 * -# The return value of R_OSAL_MmngrAlloc is OSAL_RETURN_OK.<br>
 * the return buffer is not OSAL_MEMORY_BUFFER_HANDLE_INVALID.
 * -# The return value of R_OSAL_MmngrFlush is OSAL_RETURN_HANDLE.
 * -# The return value of R_OSAL_MmngrDealloc is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrClose is OSAL_RETURN_OK.
 * @subsection MmngrFlush_TC_09_010_042_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrFlush_TC_09_010_042
 */
// [MmngrFlush_TC_09_010_042]
TEST_F(MemoryApiTest, MmngrFlush_TC_09_010_042)
{
    void *bk_ptr_self;

    // Test09_010_042
    // @brief: abnormal case: buffer_obj->mmngr_owner_hndl->p_ptr_self is invalid (NULL)
    config.memory_limit                = 4096;
    config.max_allowed_allocations     = 1;
    config.max_registered_monitors_cbs = 2;
    config.mode = OSAL_MMNGR_ALLOC_MODE_STACK_PROT;
    size = 4096;
    alignment = 64;

    EXPECT_EQ(R_OSAL_MmngrOpen(&config, &hndl_mmngr), OSAL_RETURN_OK) << "Test09_010_042 failed";
    EXPECT_NE(hndl_mmngr,OSAL_MEMORY_MANAGER_HANDLE_INVALID) << "Test09_010_042 failed";
    EXPECT_EQ(R_OSAL_MmngrAlloc(hndl_mmngr, size, alignment, &buffer_obj), OSAL_RETURN_OK) << "Test09_010_042 failed";
    EXPECT_NE(buffer_obj,OSAL_MEMORY_BUFFER_HANDLE_INVALID) << "Test09_010_042 failed";
    bk_ptr_self = buffer_obj->mmngr_owner_hndl->p_ptr_self;
    buffer_obj->mmngr_owner_hndl->p_ptr_self = NULL;
    offset = 0;
    size = 64;
    EXPECT_EQ(R_OSAL_MmngrFlush(buffer_obj, offset, size), OSAL_RETURN_HANDLE) << "Test09_010_042 failed";
    buffer_obj->mmngr_owner_hndl->p_ptr_self = bk_ptr_self;
    EXPECT_EQ(R_OSAL_MmngrDealloc(hndl_mmngr, buffer_obj), OSAL_RETURN_OK) << "Test09_010_042 failed";
    EXPECT_EQ(R_OSAL_MmngrClose(hndl_mmngr), OSAL_RETURN_OK) << "Test09_010_042 failed";
    hndl_mmngr = OSAL_MEMORY_MANAGER_HANDLE_INVALID;
    buffer_obj = OSAL_MEMORY_BUFFER_HANDLE_INVALID;
}
// [MmngrFlush_TC_09_010_042]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrFlush_TC_09_010_043 MemoryApiTest.MmngrFlush_TC_09_010_043
 * @subsection MmngrFlush_TC_09_010_043_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrFlush_TC_09_010_043_tci Test Case ID
 * MmngrFlush_S4_A_TC_09_010_043
 * @subsection MmngrFlush_TC_09_010_043_rr Related Requirement(s)
 * \#276556
 * @subsection MmngrFlush_TC_09_010_043_pp Prerequisite/Precondition
 * OSAL is initialized.
 * @subsection MmngrFlush_TC_09_010_043_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrFlush with abnormal condition and mode is OSAL_MMNGR_ALLOC_MODE_FREE_LIST.
 * - Test09_010_043: buffer_obj->mmngr_owner_hndl->p_ptr_self is invalid (NULL)
 * @subsection MmngrFlush_TC_09_010_043_tpts Test Procedure/Test Steps
 * -# Call R_OSAL_MmngrOpen with bellow config:
 *  - config.memory_limit                = 4096
 *  - config.max_allowed_allocations     = 1
 *  - config.max_registered_monitors_cbs = 2
 *  - config.mode = OSAL_MMNGR_ALLOC_MODE_FREE_LIST
 * -# Call R_OSAL_MmngrAlloc to allocate a memory buffer.
 * -# Call R_OSAL_MmngrFlush with buffer_obj->mmngr_owner_hndl->p_ptr_self is invalid (NULL)
 * -# Call R_OSAL_MmngrDealloc to deallocate the allocated memory buffer.
 * -# Call R_OSAL_MmngrClose to close memory handle.
 * @subsection MmngrFlush_TC_09_010_043_ereb Expected Result/Behavior
 * -# The return of R_OSAL_MmngrOpen is OSAL_RETURN_OK.<br>
 * The returned handle is not OSAL_MEMORY_MANAGER_HANDLE_INVALID.
 * -# The return value of R_OSAL_MmngrAlloc is OSAL_RETURN_OK.<br>
 * the return buffer is not OSAL_MEMORY_BUFFER_HANDLE_INVALID.
 * -# The return value of R_OSAL_MmngrFlush is OSAL_RETURN_HANDLE.
 * -# The return value of R_OSAL_MmngrDealloc is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrClose is OSAL_RETURN_OK.
 * @subsection MmngrFlush_TC_09_010_043_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrFlush_TC_09_010_043
 */
// [MmngrFlush_TC_09_010_043]
TEST_F(MemoryApiTest, MmngrFlush_TC_09_010_043)
{
    void *bk_ptr_self;

    // Test09_010_043
    // @brief: abnormal case: buffer_obj->mmngr_owner_hndl->p_ptr_self is invalid (NULL)
    config.memory_limit                = 4096;
    config.max_allowed_allocations     = 1;
    config.max_registered_monitors_cbs = 2;
    config.mode = OSAL_MMNGR_ALLOC_MODE_FREE_LIST;
    size = 4096;
    alignment = 64;

    EXPECT_EQ(R_OSAL_MmngrOpen(&config, &hndl_mmngr), OSAL_RETURN_OK) << "Test09_010_043 failed";
    EXPECT_NE(hndl_mmngr,OSAL_MEMORY_MANAGER_HANDLE_INVALID) << "Test09_010_043 failed";
    EXPECT_EQ(R_OSAL_MmngrAlloc(hndl_mmngr, size, alignment, &buffer_obj), OSAL_RETURN_OK) << "Test09_010_043 failed";
    EXPECT_NE(buffer_obj,OSAL_MEMORY_BUFFER_HANDLE_INVALID) << "Test09_010_043 failed";
    bk_ptr_self = buffer_obj->mmngr_owner_hndl->p_ptr_self;
    buffer_obj->mmngr_owner_hndl->p_ptr_self = NULL;
    offset = 0;
    size = 64;
    EXPECT_EQ(R_OSAL_MmngrFlush(buffer_obj, offset, size), OSAL_RETURN_HANDLE) << "Test09_010_043 failed";
    buffer_obj->mmngr_owner_hndl->p_ptr_self = bk_ptr_self;
    EXPECT_EQ(R_OSAL_MmngrDealloc(hndl_mmngr, buffer_obj), OSAL_RETURN_OK) << "Test09_010_043 failed";
    EXPECT_EQ(R_OSAL_MmngrClose(hndl_mmngr), OSAL_RETURN_OK) << "Test09_010_043 failed";
    hndl_mmngr = OSAL_MEMORY_MANAGER_HANDLE_INVALID;
    buffer_obj = OSAL_MEMORY_BUFFER_HANDLE_INVALID;
}
// [MmngrFlush_TC_09_010_043]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrFlush_TC_09_010_044 MemoryApiTest.MmngrFlush_TC_09_010_044
 * @subsection MmngrFlush_TC_09_010_044_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrFlush_TC_09_010_044_tci Test Case ID
 * MmngrFlush_S4_A_TC_09_010_044
 * @subsection MmngrFlush_TC_09_010_044_rr Related Requirement(s)
 * \#276556
 * @subsection MmngrFlush_TC_09_010_044_pp Prerequisite/Precondition
 * OSAL is initialized.
 * @subsection MmngrFlush_TC_09_010_044_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrFlush with abnormal condition and mode is OSAL_MMNGR_ALLOC_MODE_FREE_LIST_PROT.
 * - Test09_010_044: buffer_obj->mmngr_owner_hndl->p_ptr_self is invalid (NULL)
 * @subsection MmngrFlush_TC_09_010_044_tpts Test Procedure/Test Steps
 * -# Call R_OSAL_MmngrOpen with bellow config:
 *  - config.memory_limit                = 4096
 *  - config.max_allowed_allocations     = 1
 *  - config.max_registered_monitors_cbs = 2
 *  - config.mode = OSAL_MMNGR_ALLOC_MODE_FREE_LIST_PROT
 * -# Call R_OSAL_MmngrAlloc to allocate a memory buffer.
 * -# Call R_OSAL_MmngrFlush with buffer_obj->mmngr_owner_hndl->p_ptr_self is invalid (NULL)
 * -# Call R_OSAL_MmngrDealloc to deallocate the allocated memory buffer.
 * -# Call R_OSAL_MmngrClose to close memory handle.
 * @subsection MmngrFlush_TC_09_010_044_ereb Expected Result/Behavior
 * -# The return of R_OSAL_MmngrOpen is OSAL_RETURN_OK.<br>
 * The returned handle is not OSAL_MEMORY_MANAGER_HANDLE_INVALID.
 * -# The return value of R_OSAL_MmngrAlloc is OSAL_RETURN_OK.<br>
 * the return buffer is not OSAL_MEMORY_BUFFER_HANDLE_INVALID.
 * -# The return value of R_OSAL_MmngrFlush is OSAL_RETURN_HANDLE.
 * -# The return value of R_OSAL_MmngrDealloc is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrClose is OSAL_RETURN_OK.
 * @subsection MmngrFlush_TC_09_010_044_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrFlush_TC_09_010_044
 */
// [MmngrFlush_TC_09_010_044]
TEST_F(MemoryApiTest, MmngrFlush_TC_09_010_044)
{
    void *bk_ptr_self;

    // Test09_010_044
    // @brief: abnormal case: buffer_obj->mmngr_owner_hndl->p_ptr_self is invalid (NULL)
    config.memory_limit                = 4096;
    config.max_allowed_allocations     = 1;
    config.max_registered_monitors_cbs = 2;
    config.mode = OSAL_MMNGR_ALLOC_MODE_FREE_LIST_PROT;
    size = 4096;
    alignment = 64;

    EXPECT_EQ(R_OSAL_MmngrOpen(&config, &hndl_mmngr), OSAL_RETURN_OK) << "Test09_010_044 failed";
    EXPECT_NE(hndl_mmngr,OSAL_MEMORY_MANAGER_HANDLE_INVALID) << "Test09_010_044 failed";
    EXPECT_EQ(R_OSAL_MmngrAlloc(hndl_mmngr, size, alignment, &buffer_obj), OSAL_RETURN_OK) << "Test09_010_044 failed";
    EXPECT_NE(buffer_obj,OSAL_MEMORY_BUFFER_HANDLE_INVALID) << "Test09_010_044 failed";
    bk_ptr_self = buffer_obj->mmngr_owner_hndl->p_ptr_self;
    buffer_obj->mmngr_owner_hndl->p_ptr_self = NULL;
    offset = 0;
    size = 64;
    EXPECT_EQ(R_OSAL_MmngrFlush(buffer_obj, offset, size), OSAL_RETURN_HANDLE) << "Test09_010_044 failed";
    buffer_obj->mmngr_owner_hndl->p_ptr_self = bk_ptr_self;
    EXPECT_EQ(R_OSAL_MmngrDealloc(hndl_mmngr, buffer_obj), OSAL_RETURN_OK) << "Test09_010_044 failed";
    EXPECT_EQ(R_OSAL_MmngrClose(hndl_mmngr), OSAL_RETURN_OK) << "Test09_010_044 failed";
    hndl_mmngr = OSAL_MEMORY_MANAGER_HANDLE_INVALID;
    buffer_obj = OSAL_MEMORY_BUFFER_HANDLE_INVALID;
}
// [MmngrFlush_TC_09_010_044]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrFlush_TC_09_010_045 MemoryApiTest.MmngrFlush_TC_09_010_045
 * @subsection MmngrFlush_TC_09_010_045_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrFlush_TC_09_010_045_tci Test Case ID
 * MmngrFlush_S4_A_TC_09_010_045
 * @subsection MmngrFlush_TC_09_010_045_rr Related Requirement(s)
 * \#276556
 * @subsection MmngrFlush_TC_09_010_045_pp Prerequisite/Precondition
 * OSAL is initialized.
 * @subsection MmngrFlush_TC_09_010_045_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrFlush with abnormal condition and mode is OSAL_MMNGR_ALLOC_MODE_STACK.
 * - Test09_010_045: hndl_mmngr->p_ptr_self is invalid (NULL)
 * @subsection MmngrFlush_TC_09_010_045_tpts Test Procedure/Test Steps
 * -# Call R_OSAL_MmngrOpen with bellow config:
 *  - config.memory_limit                = 4096
 *  - config.max_allowed_allocations     = 1
 *  - config.max_registered_monitors_cbs = 2
 *  - config.mode = OSAL_MMNGR_ALLOC_MODE_STACK
 * -# Call R_OSAL_MmngrAlloc to allocate a memory buffer.
 * -# Call R_OSAL_MmngrFlush with hndl_mmngr->p_ptr_self is invalid (NULL)
 * -# Call R_OSAL_MmngrDealloc to deallocate the allocated memory buffer.
 * -# Call R_OSAL_MmngrClose to close memory handle.
 * @subsection MmngrFlush_TC_09_010_045_ereb Expected Result/Behavior
 * -# The return of R_OSAL_MmngrOpen is OSAL_RETURN_OK.<br>
 * The returned handle is not OSAL_MEMORY_MANAGER_HANDLE_INVALID.
 * -# The return value of R_OSAL_MmngrAlloc is OSAL_RETURN_OK.<br>
 * the return buffer is not OSAL_MEMORY_BUFFER_HANDLE_INVALID.
 * -# The return value of R_OSAL_MmngrFlush is OSAL_RETURN_HANDLE.
 * -# The return value of R_OSAL_MmngrDealloc is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrClose is OSAL_RETURN_OK.
 * @subsection MmngrFlush_TC_09_010_045_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrFlush_TC_09_010_045
 */
// [MmngrFlush_TC_09_010_045]
TEST_F(MemoryApiTest, MmngrFlush_TC_09_010_045)
{
    void *bk_ptr_self;

    // Test09_010_045
    // @brief: abnormal case: hndl_mmngr->p_ptr_self is invalid (NULL)
    config.memory_limit                = 4096;
    config.max_allowed_allocations     = 1;
    config.max_registered_monitors_cbs = 2;
    config.mode = OSAL_MMNGR_ALLOC_MODE_STACK;
    size = 4096;
    alignment = 64;

    EXPECT_EQ(R_OSAL_MmngrOpen(&config, &hndl_mmngr), OSAL_RETURN_OK) << "Test09_010_045 failed";
    EXPECT_NE(hndl_mmngr,OSAL_MEMORY_MANAGER_HANDLE_INVALID) << "Test09_010_045 failed";
    EXPECT_EQ(R_OSAL_MmngrAlloc(hndl_mmngr, size, alignment, &buffer_obj), OSAL_RETURN_OK) << "Test09_010_045 failed";
    EXPECT_NE(buffer_obj,OSAL_MEMORY_BUFFER_HANDLE_INVALID) << "Test09_010_045 failed";
    bk_ptr_self = hndl_mmngr->p_ptr_self;
    hndl_mmngr->p_ptr_self = NULL;
    offset = 0;
    size = 64;
    EXPECT_EQ(R_OSAL_MmngrFlush(buffer_obj, offset, size), OSAL_RETURN_HANDLE) << "Test09_010_045 failed";
    hndl_mmngr->p_ptr_self = bk_ptr_self;
    EXPECT_EQ(R_OSAL_MmngrDealloc(hndl_mmngr, buffer_obj), OSAL_RETURN_OK) << "Test09_010_045 failed";
    EXPECT_EQ(R_OSAL_MmngrClose(hndl_mmngr), OSAL_RETURN_OK) << "Test09_010_045 failed";
    hndl_mmngr = OSAL_MEMORY_MANAGER_HANDLE_INVALID;
    buffer_obj = OSAL_MEMORY_BUFFER_HANDLE_INVALID;
}
// [MmngrFlush_TC_09_010_045]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrFlush_TC_09_010_046 MemoryApiTest.MmngrFlush_TC_09_010_046
 * @subsection MmngrFlush_TC_09_010_046_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrFlush_TC_09_010_046_tci Test Case ID
 * MmngrFlush_S4_A_TC_09_010_046
 * @subsection MmngrFlush_TC_09_010_046_rr Related Requirement(s)
 * \#276556
 * @subsection MmngrFlush_TC_09_010_046_pp Prerequisite/Precondition
 * OSAL is initialized.
 * @subsection MmngrFlush_TC_09_010_046_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrFlush with abnormal condition and mode is OSAL_MMNGR_ALLOC_MODE_STACK_PROT.
 * - Test09_010_046: hndl_mmngr->p_ptr_self is invalid (NULL)
 * @subsection MmngrFlush_TC_09_010_046_tpts Test Procedure/Test Steps
 * -# Call R_OSAL_MmngrOpen with bellow config:
 *  - config.memory_limit                = 4096
 *  - config.max_allowed_allocations     = 1
 *  - config.max_registered_monitors_cbs = 2
 *  - config.mode = OSAL_MMNGR_ALLOC_MODE_STACK_PROT
 * -# Call R_OSAL_MmngrAlloc to allocate a memory buffer.
 * -# Call R_OSAL_MmngrFlush with hndl_mmngr->p_ptr_self is invalid (NULL)
 * -# Call R_OSAL_MmngrDealloc to deallocate the allocated memory buffer.
 * -# Call R_OSAL_MmngrClose to close memory handle.
 * @subsection MmngrFlush_TC_09_010_046_ereb Expected Result/Behavior
 * -# The return of R_OSAL_MmngrOpen is OSAL_RETURN_OK.<br>
 * The returned handle is not OSAL_MEMORY_MANAGER_HANDLE_INVALID.
 * -# The return value of R_OSAL_MmngrAlloc is OSAL_RETURN_OK.<br>
 * the return buffer is not OSAL_MEMORY_BUFFER_HANDLE_INVALID.
 * -# The return value of R_OSAL_MmngrFlush is OSAL_RETURN_HANDLE.
 * -# The return value of R_OSAL_MmngrDealloc is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrClose is OSAL_RETURN_OK.
 * @subsection MmngrFlush_TC_09_010_046_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrFlush_TC_09_010_046
 */
// [MmngrFlush_TC_09_010_046]
TEST_F(MemoryApiTest, MmngrFlush_TC_09_010_046)
{
    void *bk_ptr_self;

    // Test09_010_046
    // @brief: abnormal case: hndl_mmngr->p_ptr_self is invalid (NULL)
    config.memory_limit                = 4096;
    config.max_allowed_allocations     = 1;
    config.max_registered_monitors_cbs = 2;
    config.mode = OSAL_MMNGR_ALLOC_MODE_STACK_PROT;
    size = 4096;
    alignment = 64;

    EXPECT_EQ(R_OSAL_MmngrOpen(&config, &hndl_mmngr), OSAL_RETURN_OK) << "Test09_010_046 failed";
    EXPECT_NE(hndl_mmngr,OSAL_MEMORY_MANAGER_HANDLE_INVALID) << "Test09_010_046 failed";
    EXPECT_EQ(R_OSAL_MmngrAlloc(hndl_mmngr, size, alignment, &buffer_obj), OSAL_RETURN_OK) << "Test09_010_046 failed";
    EXPECT_NE(buffer_obj,OSAL_MEMORY_BUFFER_HANDLE_INVALID) << "Test09_010_046 failed";
    bk_ptr_self = hndl_mmngr->p_ptr_self;
    hndl_mmngr->p_ptr_self = NULL;
    offset = 0;
    size = 64;
    EXPECT_EQ(R_OSAL_MmngrFlush(buffer_obj, offset, size), OSAL_RETURN_HANDLE) << "Test09_010_046 failed";
    hndl_mmngr->p_ptr_self = bk_ptr_self;
    EXPECT_EQ(R_OSAL_MmngrDealloc(hndl_mmngr, buffer_obj), OSAL_RETURN_OK) << "Test09_010_046 failed";
    EXPECT_EQ(R_OSAL_MmngrClose(hndl_mmngr), OSAL_RETURN_OK) << "Test09_010_046 failed";
    hndl_mmngr = OSAL_MEMORY_MANAGER_HANDLE_INVALID;
    buffer_obj = OSAL_MEMORY_BUFFER_HANDLE_INVALID;
}
// [MmngrFlush_TC_09_010_046]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrFlush_TC_09_010_047 MemoryApiTest.MmngrFlush_TC_09_010_047
 * @subsection MmngrFlush_TC_09_010_047_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrFlush_TC_09_010_047_tci Test Case ID
 * MmngrFlush_S4_A_TC_09_010_047
 * @subsection MmngrFlush_TC_09_010_047_rr Related Requirement(s)
 * \#276556
 * @subsection MmngrFlush_TC_09_010_047_pp Prerequisite/Precondition
 * OSAL is initialized.
 * @subsection MmngrFlush_TC_09_010_047_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrFlush with abnormal condition and mode is OSAL_MMNGR_ALLOC_MODE_FREE_LIST.
 * - Test09_010_047: hndl_mmngr->p_ptr_self is invalid (NULL)
 * @subsection MmngrFlush_TC_09_010_047_tpts Test Procedure/Test Steps
 * -# Call R_OSAL_MmngrOpen with bellow config:
 *  - config.memory_limit                = 4096
 *  - config.max_allowed_allocations     = 1
 *  - config.max_registered_monitors_cbs = 2
 *  - config.mode = OSAL_MMNGR_ALLOC_MODE_FREE_LIST
 * -# Call R_OSAL_MmngrAlloc to allocate a memory buffer.
 * -# Call R_OSAL_MmngrFlush with hndl_mmngr->p_ptr_self is invalid (NULL)
 * -# Call R_OSAL_MmngrDealloc to deallocate the allocated memory buffer.
 * -# Call R_OSAL_MmngrClose to close memory handle.
 * @subsection MmngrFlush_TC_09_010_047_ereb Expected Result/Behavior
 * -# The return of R_OSAL_MmngrOpen is OSAL_RETURN_OK.<br>
 * The returned handle is not OSAL_MEMORY_MANAGER_HANDLE_INVALID.
 * -# The return value of R_OSAL_MmngrAlloc is OSAL_RETURN_OK.<br>
 * the return buffer is not OSAL_MEMORY_BUFFER_HANDLE_INVALID.
 * -# The return value of R_OSAL_MmngrFlush is OSAL_RETURN_HANDLE.
 * -# The return value of R_OSAL_MmngrDealloc is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrClose is OSAL_RETURN_OK.
 * @subsection MmngrFlush_TC_09_010_047_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrFlush_TC_09_010_047
 */
// [MmngrFlush_TC_09_010_047]
TEST_F(MemoryApiTest, MmngrFlush_TC_09_010_047)
{
    void *bk_ptr_self;

    // Test09_010_047
    // @brief: abnormal case: hndl_mmngr->p_ptr_self is invalid (NULL)
    config.memory_limit                = 4096;
    config.max_allowed_allocations     = 1;
    config.max_registered_monitors_cbs = 2;
    config.mode = OSAL_MMNGR_ALLOC_MODE_FREE_LIST;
    size = 4096;
    alignment = 64;

    EXPECT_EQ(R_OSAL_MmngrOpen(&config, &hndl_mmngr), OSAL_RETURN_OK) << "Test09_010_047 failed";
    EXPECT_NE(hndl_mmngr,OSAL_MEMORY_MANAGER_HANDLE_INVALID) << "Test09_010_047 failed";
    EXPECT_EQ(R_OSAL_MmngrAlloc(hndl_mmngr, size, alignment, &buffer_obj), OSAL_RETURN_OK) << "Test09_010_047 failed";
    EXPECT_NE(buffer_obj,OSAL_MEMORY_BUFFER_HANDLE_INVALID) << "Test09_010_047 failed";
    bk_ptr_self = hndl_mmngr->p_ptr_self;
    hndl_mmngr->p_ptr_self = NULL;
    offset = 0;
    size = 64;
    EXPECT_EQ(R_OSAL_MmngrFlush(buffer_obj, offset, size), OSAL_RETURN_HANDLE) << "Test09_010_047 failed";
    hndl_mmngr->p_ptr_self = bk_ptr_self;
    EXPECT_EQ(R_OSAL_MmngrDealloc(hndl_mmngr, buffer_obj), OSAL_RETURN_OK) << "Test09_010_047 failed";
    EXPECT_EQ(R_OSAL_MmngrClose(hndl_mmngr), OSAL_RETURN_OK) << "Test09_010_047 failed";
    hndl_mmngr = OSAL_MEMORY_MANAGER_HANDLE_INVALID;
    buffer_obj = OSAL_MEMORY_BUFFER_HANDLE_INVALID;
}
// [MmngrFlush_TC_09_010_047]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrFlush_TC_09_010_048 MemoryApiTest.MmngrFlush_TC_09_010_048
 * @subsection MmngrFlush_TC_09_010_048_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrFlush_TC_09_010_048_tci Test Case ID
 * MmngrFlush_S4_A_TC_09_010_048
 * @subsection MmngrFlush_TC_09_010_048_rr Related Requirement(s)
 * \#276556
 * @subsection MmngrFlush_TC_09_010_048_pp Prerequisite/Precondition
 * OSAL is initialized.
 * @subsection MmngrFlush_TC_09_010_048_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrFlush with abnormal condition and mode is OSAL_MMNGR_ALLOC_MODE_FREE_LIST_PROT.
 * - Test09_010_048: hndl_mmngr->p_ptr_self is invalid (NULL)
 * @subsection MmngrFlush_TC_09_010_048_tpts Test Procedure/Test Steps
 * -# Call R_OSAL_MmngrOpen with bellow config:
 *  - config.memory_limit                = 4096
 *  - config.max_allowed_allocations     = 1
 *  - config.max_registered_monitors_cbs = 2
 *  - config.mode = OSAL_MMNGR_ALLOC_MODE_FREE_LIST_PROT
 * -# Call R_OSAL_MmngrAlloc to allocate a memory buffer.
 * -# Call R_OSAL_MmngrFlush with hndl_mmngr->p_ptr_self is invalid (NULL)
 * -# Call R_OSAL_MmngrDealloc to deallocate the allocated memory buffer.
 * -# Call R_OSAL_MmngrClose to close memory handle.
 * @subsection MmngrFlush_TC_09_010_048_ereb Expected Result/Behavior
 * -# The return of R_OSAL_MmngrOpen is OSAL_RETURN_OK.<br>
 * The returned handle is not OSAL_MEMORY_MANAGER_HANDLE_INVALID.
 * -# The return value of R_OSAL_MmngrAlloc is OSAL_RETURN_OK.<br>
 * the return buffer is not OSAL_MEMORY_BUFFER_HANDLE_INVALID.
 * -# The return value of R_OSAL_MmngrFlush is OSAL_RETURN_HANDLE.
 * -# The return value of R_OSAL_MmngrDealloc is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrClose is OSAL_RETURN_OK.
 * @subsection MmngrFlush_TC_09_010_048_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrFlush_TC_09_010_048
 */
// [MmngrFlush_TC_09_010_048]
TEST_F(MemoryApiTest, MmngrFlush_TC_09_010_048)
{
    void *bk_ptr_self;

    // Test09_010_048
    // @brief: abnormal case: hndl_mmngr->p_ptr_self is invalid (NULL)
    config.memory_limit                = 4096;
    config.max_allowed_allocations     = 1;
    config.max_registered_monitors_cbs = 2;
    config.mode = OSAL_MMNGR_ALLOC_MODE_FREE_LIST_PROT;
    size = 4096;
    alignment = 64;

    EXPECT_EQ(R_OSAL_MmngrOpen(&config, &hndl_mmngr), OSAL_RETURN_OK) << "Test09_010_048 failed";
    EXPECT_NE(hndl_mmngr,OSAL_MEMORY_MANAGER_HANDLE_INVALID) << "Test09_010_048 failed";
    EXPECT_EQ(R_OSAL_MmngrAlloc(hndl_mmngr, size, alignment, &buffer_obj), OSAL_RETURN_OK) << "Test09_010_048 failed";
    EXPECT_NE(buffer_obj,OSAL_MEMORY_BUFFER_HANDLE_INVALID) << "Test09_010_048 failed";
    bk_ptr_self = hndl_mmngr->p_ptr_self;
    hndl_mmngr->p_ptr_self = NULL;
    offset = 0;
    size = 64;
    EXPECT_EQ(R_OSAL_MmngrFlush(buffer_obj, offset, size), OSAL_RETURN_HANDLE) << "Test09_010_048 failed";
    hndl_mmngr->p_ptr_self = bk_ptr_self;
    EXPECT_EQ(R_OSAL_MmngrDealloc(hndl_mmngr, buffer_obj), OSAL_RETURN_OK) << "Test09_010_048 failed";
    EXPECT_EQ(R_OSAL_MmngrClose(hndl_mmngr), OSAL_RETURN_OK) << "Test09_010_048 failed";
    hndl_mmngr = OSAL_MEMORY_MANAGER_HANDLE_INVALID;
    buffer_obj = OSAL_MEMORY_BUFFER_HANDLE_INVALID;
}
// [MmngrFlush_TC_09_010_048]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrInvalidate_TC_09_011_001 MemoryApiTest.MmngrInvalidate_TC_09_011_001
 * @subsection MmngrInvalidate_TC_09_011_001_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrInvalidate_TC_09_011_001_tci Test Case ID
 * MmngrInvalidate_S3_N_TC_09_011_001
 * @subsection MmngrInvalidate_TC_09_011_001_rr Related Requirement(s)
 * \#276557
 * @subsection MmngrInvalidate_TC_09_011_001_pp Prerequisite/Precondition
 * OSAL is initialized.
 * @subsection MmngrInvalidate_TC_09_011_001_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrInvalidate with normal condition and mode is OSAL_MMNGR_ALLOC_MODE_STACK.
 * - pre-process: open new memory manager
 * - Test09_011_001: with all valid parameters.
 * - post-process: close memory manager
 * @subsection MmngrInvalidate_TC_09_011_001_tpts Test Procedure/Test Steps
 * -# Call R_OSAL_MmngrOpen with bellow config:
 *  - config.memory_limit                = 4096
 *  - config.max_allowed_allocations     = 1
 *  - config.max_registered_monitors_cbs = 2
 *  - config.mode = OSAL_MMNGR_ALLOC_MODE_STACK
 * -# Call R_OSAL_MmngrAlloc with size is 4096 and alignment is 64 to allocate a memory buffer.
 * -# Call R_OSAL_MmngrInvalidate with offset is 0 and size is 64.
 * -# Call R_OSAL_MmngrDealloc to deallocate the allocated memory buffer.
 * -# Call R_OSAL_MmngrClose to close memory manager
 * @subsection MmngrInvalidate_TC_09_011_001_ereb Expected Result/Behavior
 * -# The return of R_OSAL_MmngrOpen is OSAL_RETURN_OK.<br>
 * The returned handle is not OSAL_MEMORY_MANAGER_HANDLE_INVALID.
 * -# The return value of R_OSAL_MmngrAlloc is OSAL_RETURN_OK.<br>
 * The return buffer is not OSAL_MEMORY_BUFFER_HANDLE_INVALID.
 * -# The return value of R_OSAL_MmngrInvalidate is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrDealloc is OSAL_RETURN_OK
 * -# R_OSAL_MmngrClose return OSAL_RETURN_OK
 * @subsection MmngrInvalidate_TC_09_011_001_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrInvalidate_TC_09_011_001
 */
// [MmngrInvalidate_TC_09_011_001]
TEST_F(MemoryApiTest, MmngrInvalidate_TC_09_011_001)
{
    // pre-process: open memory manager
    config.memory_limit                = 4096;
    config.max_allowed_allocations     = 1;
    config.max_registered_monitors_cbs = 2;
    config.mode = OSAL_MMNGR_ALLOC_MODE_STACK;
    size = 4096;
    alignment = 64;

    EXPECT_EQ(R_OSAL_MmngrOpen(&config, &hndl_mmngr), OSAL_RETURN_OK) <<  "pre-process failed";
    EXPECT_NE(hndl_mmngr,OSAL_MEMORY_MANAGER_HANDLE_INVALID) <<  "pre-process failed";

    // Test09_011_001
    EXPECT_EQ(R_OSAL_MmngrAlloc(hndl_mmngr, size, alignment, &buffer_obj), OSAL_RETURN_OK);
    EXPECT_NE(buffer_obj,OSAL_MEMORY_BUFFER_HANDLE_INVALID);
    offset = 0;
    size = 64;
    EXPECT_EQ(R_OSAL_MmngrInvalidate(buffer_obj, offset, size), OSAL_RETURN_OK) << "Test09_011_001 failed";
    EXPECT_EQ(R_OSAL_MmngrDealloc(hndl_mmngr, buffer_obj), OSAL_RETURN_OK);
    buffer_obj = OSAL_MEMORY_BUFFER_HANDLE_INVALID;

    // post-process: close memory manager
    EXPECT_EQ(R_OSAL_MmngrClose(hndl_mmngr), OSAL_RETURN_OK) << "post-process failed";
    hndl_mmngr = OSAL_MEMORY_MANAGER_HANDLE_INVALID;
}
// [MmngrInvalidate_TC_09_011_001]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrInvalidate_TC_09_011_002 MemoryApiTest.MmngrInvalidate_TC_09_011_002
 * @subsection MmngrInvalidate_TC_09_011_002_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrInvalidate_TC_09_011_002_tci Test Case ID
 * MmngrInvalidate_S3_N_TC_09_011_002
 * @subsection MmngrInvalidate_TC_09_011_002_rr Related Requirement(s)
 * \#276557
 * @subsection MmngrInvalidate_TC_09_011_002_pp Prerequisite/Precondition
 * OSAL is initialized.
 * @subsection MmngrInvalidate_TC_09_011_002_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrInvalidate with normal condition and mode is OSAL_MMNGR_ALLOC_MODE_STACK.
 * - pre-process: open new memory manager
 * - Test09_011_002: with all valid parameters.
 * - post-process: close memory manager
 * @subsection MmngrInvalidate_TC_09_011_002_tpts Test Procedure/Test Steps
 * -# Call R_OSAL_MmngrOpen with bellow config:
 *  - config.memory_limit                = 4096
 *  - config.max_allowed_allocations     = 1
 *  - config.max_registered_monitors_cbs = 2
 *  - config.mode = OSAL_MMNGR_ALLOC_MODE_STACK
 * -# Call R_OSAL_MmngrAlloc with size is 4096 and alignment is 64 to allocate a memory buffer.
 * -# Call R_OSAL_MmngrInvalidate with offset is 128 and size is 64.
 * -# Call R_OSAL_MmngrDealloc to deallocate the allocated memory buffer.
 * -# Call R_OSAL_MmngrClose to close memory manager
 * @subsection MmngrInvalidate_TC_09_011_002_ereb Expected Result/Behavior
 * -# The return of R_OSAL_MmngrOpen is OSAL_RETURN_OK.<br>
 * The returned handle is not OSAL_MEMORY_MANAGER_HANDLE_INVALID.
 * -# The return value of R_OSAL_MmngrAlloc is OSAL_RETURN_OK.<br>
 * The return buffer is not OSAL_MEMORY_BUFFER_HANDLE_INVALID.
 * -# The return value of R_OSAL_MmngrInvalidate is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrDealloc is OSAL_RETURN_OK
 * -# R_OSAL_MmngrClose return OSAL_RETURN_OK.
 * @subsection MmngrInvalidate_TC_09_011_002_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrInvalidate_TC_09_011_002
 */
// [MmngrInvalidate_TC_09_011_002]
TEST_F(MemoryApiTest, MmngrInvalidate_TC_09_011_002)
{
    // pre-process: open memory manager
    config.memory_limit                = 4096;
    config.max_allowed_allocations     = 1;
    config.max_registered_monitors_cbs = 2;
    config.mode = OSAL_MMNGR_ALLOC_MODE_STACK;
    size = 4096;
    alignment = 64;

    EXPECT_EQ(R_OSAL_MmngrOpen(&config, &hndl_mmngr), OSAL_RETURN_OK) <<  "pre-process failed";
    EXPECT_NE(hndl_mmngr,OSAL_MEMORY_MANAGER_HANDLE_INVALID) <<  "pre-process failed";

    // Test09_011_002
    EXPECT_EQ(R_OSAL_MmngrAlloc(hndl_mmngr, size, alignment, &buffer_obj), OSAL_RETURN_OK);
    EXPECT_NE(buffer_obj,OSAL_MEMORY_BUFFER_HANDLE_INVALID);
    offset = 128;
    size = 64;
    EXPECT_EQ(R_OSAL_MmngrInvalidate(buffer_obj, offset, size), OSAL_RETURN_OK) << "Test09_011_002 failed";
    EXPECT_EQ(R_OSAL_MmngrDealloc(hndl_mmngr, buffer_obj), OSAL_RETURN_OK);
    buffer_obj = OSAL_MEMORY_BUFFER_HANDLE_INVALID;

    // post-process: close memory manager
    EXPECT_EQ(R_OSAL_MmngrClose(hndl_mmngr), OSAL_RETURN_OK) << "post-process failed";
    hndl_mmngr = OSAL_MEMORY_MANAGER_HANDLE_INVALID;
}
// [MmngrInvalidate_TC_09_011_002]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrInvalidate_TC_09_011_003 MemoryApiTest.MmngrInvalidate_TC_09_011_003
 * @subsection MmngrInvalidate_TC_09_011_003_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrInvalidate_TC_09_011_003_tci Test Case ID
 * MmngrInvalidate_S3_N_TC_09_011_003
 * @subsection MmngrInvalidate_TC_09_011_003_rr Related Requirement(s)
 * \#276557
 * @subsection MmngrInvalidate_TC_09_011_003_pp Prerequisite/Precondition
 * OSAL is initialized.
 * @subsection MmngrInvalidate_TC_09_011_003_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrInvalidate with normal condition and mode is OSAL_MMNGR_ALLOC_MODE_STACK.
 * - pre-process: open new memory manager
 * - Test09_011_003: with all valid parameters.
 * - post-process: close memory manager
 * @subsection MmngrInvalidate_TC_09_011_003_tpts Test Procedure/Test Steps
 * -# Call R_OSAL_MmngrOpen with bellow config:
 *  - config.memory_limit                = 4096
 *  - config.max_allowed_allocations     = 1
 *  - config.max_registered_monitors_cbs = 2
 *  - config.mode = OSAL_MMNGR_ALLOC_MODE_STACK
 * -# Call R_OSAL_MmngrAlloc with size is 4096 and alignment is 64 to allocate a memory buffer.
 * -# Call R_OSAL_MmngrInvalidate with offset is 0 and size is 128.
 * -# Call R_OSAL_MmngrDealloc to deallocate the allocated memory buffer.
 * -# Call R_OSAL_MmngrClose to close memory manager
 * @subsection MmngrInvalidate_TC_09_011_003_ereb Expected Result/Behavior
 * -# The return of R_OSAL_MmngrOpen is OSAL_RETURN_OK.<br>
 * The returned handle is not OSAL_MEMORY_MANAGER_HANDLE_INVALID.
 * -# The return value of R_OSAL_MmngrAlloc is OSAL_RETURN_OK.<br>
 * The return buffer is not OSAL_MEMORY_BUFFER_HANDLE_INVALID.
 * -# The return value of R_OSAL_MmngrInvalidate is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrDealloc is OSAL_RETURN_OK
 * -# R_OSAL_MmngrClose return OSAL_RETURN_OK
 * @subsection MmngrInvalidate_TC_09_011_003_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrInvalidate_TC_09_011_003
 */
// [MmngrInvalidate_TC_09_011_003]
TEST_F(MemoryApiTest, MmngrInvalidate_TC_09_011_003)
{
    // pre-process: open memory manager
    config.memory_limit                = 4096;
    config.max_allowed_allocations     = 1;
    config.max_registered_monitors_cbs = 2;
    config.mode = OSAL_MMNGR_ALLOC_MODE_STACK;
    size = 4096;
    alignment = 64;

    EXPECT_EQ(R_OSAL_MmngrOpen(&config, &hndl_mmngr), OSAL_RETURN_OK) <<  "pre-process failed";
    EXPECT_NE(hndl_mmngr,OSAL_MEMORY_MANAGER_HANDLE_INVALID) <<  "pre-process failed";

    // Test09_011_003
    EXPECT_EQ(R_OSAL_MmngrAlloc(hndl_mmngr, size, alignment, &buffer_obj), OSAL_RETURN_OK);
    EXPECT_NE(buffer_obj,OSAL_MEMORY_BUFFER_HANDLE_INVALID);
    offset = 0;
    size = 128;
    EXPECT_EQ(R_OSAL_MmngrInvalidate(buffer_obj, offset, size), OSAL_RETURN_OK) << "Test09_011_003 failed";
    EXPECT_EQ(R_OSAL_MmngrDealloc(hndl_mmngr, buffer_obj), OSAL_RETURN_OK);
    buffer_obj = OSAL_MEMORY_BUFFER_HANDLE_INVALID;

    // post-process: close memory manager
    EXPECT_EQ(R_OSAL_MmngrClose(hndl_mmngr), OSAL_RETURN_OK) << "post-process failed";
    hndl_mmngr = OSAL_MEMORY_MANAGER_HANDLE_INVALID;
}
// [MmngrInvalidate_TC_09_011_003]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrInvalidate_TC_09_011_004 MemoryApiTest.MmngrInvalidate_TC_09_011_004
 * @subsection MmngrInvalidate_TC_09_011_004_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrInvalidate_TC_09_011_004_tci Test Case ID
 * MmngrInvalidate_S0_A_TC_09_011_004
 * @subsection MmngrInvalidate_TC_09_011_004_rr Related Requirement(s)
 * \#276557
 * @subsection MmngrInvalidate_TC_09_011_004_pp Prerequisite/Precondition
 * OSAL is initialized.
 * @subsection MmngrInvalidate_TC_09_011_004_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrInvalidate with abnormal condition and mode is OSAL_MMNGR_ALLOC_MODE_STACK.
 * - Test09_011_004: buffer is NULL.
 * @subsection MmngrInvalidate_TC_09_011_004_tpts Test Procedure/Test Steps
 * -# Call R_OSAL_MmngrInvalidate with NULL buffer.
 * @subsection MmngrInvalidate_TC_09_011_004_ereb Expected Result/Behavior
 * -# The return value of R_OSAL_MmngrInvalidate is OSAL_RETURN_HANDLE.
 * @subsection MmngrInvalidate_TC_09_011_004_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrInvalidate_TC_09_011_004
 */
// [MmngrInvalidate_TC_09_011_004]
TEST_F(MemoryApiTest, MmngrInvalidate_TC_09_011_004)
{
    // Test09_011_004
    // @brief: abnormal case: buffer_obj is NULL
    offset = 0;
    size = 64;
    EXPECT_EQ(R_OSAL_MmngrInvalidate(OSAL_MEMORY_BUFFER_HANDLE_INVALID, offset, size), OSAL_RETURN_HANDLE) << "Test09_011_004 failed";
}
// [MmngrInvalidate_TC_09_011_004]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrInvalidate_TC_09_011_005 MemoryApiTest.MmngrInvalidate_TC_09_011_005
 * @subsection MmngrInvalidate_TC_09_011_005_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrInvalidate_TC_09_011_005_tci Test Case ID
 * MmngrInvalidate_S2_A_TC_09_011_005
 * @subsection MmngrInvalidate_TC_09_011_005_rr Related Requirement(s)
 * \#276557
 * @subsection MmngrInvalidate_TC_09_011_005_pp Prerequisite/Precondition
 * OSAL is initialized.
 * @subsection MmngrInvalidate_TC_09_011_005_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrInvalidate with abnormal condition and mode is OSAL_MMNGR_ALLOC_MODE_STACK.
 * - pre-process: open new memory manager
 * - Test09_011_005: Call memory APIs with the sequence as below:<br>
 * R_OSAL_MmngrAlloc -> R_OSAL_MmngrDealloc -> R_OSAL_MmngrInvalidate
 * - post-process: close memory manager
 * @subsection MmngrInvalidate_TC_09_011_005_tpts Test Procedure/Test Steps
 * -# Call R_OSAL_MmngrOpen with bellow config:
 *  - config.memory_limit                = 4096
 *  - config.max_allowed_allocations     = 1
 *  - config.max_registered_monitors_cbs = 2
 *  - config.mode = OSAL_MMNGR_ALLOC_MODE_STACK
 * -# Call R_OSAL_MmngrAlloc to allocate a memory buffer.
 * -# Call R_OSAL_MmngrDealloc to deallocate the allocated memory buffer.
 * -# Call R_OSAL_MmngrInvalidate with offset is 0, size is 64.
 * -# Call R_OSAL_MmngrClose to close memory handle.
 * @subsection MmngrInvalidate_TC_09_011_005_ereb Expected Result/Behavior
 * -# The return of R_OSAL_MmngrOpen is OSAL_RETURN_OK.<br>
 * The returned handle is not OSAL_MEMORY_MANAGER_HANDLE_INVALID.
 * -# The return value of R_OSAL_MmngrAlloc is OSAL_RETURN_OK.<br>
 * The return buffer is not OSAL_MEMORY_BUFFER_HANDLE_INVALID.
 * -# The return value of R_OSAL_MmngrDealloc is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrInvalidate is OSAL_RETURN_HANDLE.
 * -# The return value of R_OSAL_MmngrClose is OSAL_RETURN_OK.
 * @subsection MmngrInvalidate_TC_09_011_005_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrInvalidate_TC_09_011_005
 */
// [MmngrInvalidate_TC_09_011_005]
TEST_F(MemoryApiTest, MmngrInvalidate_TC_09_011_005)
{
    // pre-process: open memory manager
    config.memory_limit                = 4096;
    config.max_allowed_allocations     = 1;
    config.max_registered_monitors_cbs = 2;
    config.mode = OSAL_MMNGR_ALLOC_MODE_STACK;
    size = 4096;
    alignment = 64;

    EXPECT_EQ(R_OSAL_MmngrOpen(&config, &hndl_mmngr), OSAL_RETURN_OK) <<  "pre-process failed";
    EXPECT_NE(hndl_mmngr,OSAL_MEMORY_MANAGER_HANDLE_INVALID) <<  "pre-process failed";

    // Test09_011_005
    // @brief: abnormal case: R_OSAL_MmngrOpen -> R_OSAL_MmngrAlloc -> R_OSAL_MmngrDealloc -> R_OSAL_MmngrInvalidate
    EXPECT_EQ(R_OSAL_MmngrAlloc(hndl_mmngr, size, alignment, &buffer_obj), OSAL_RETURN_OK);
    EXPECT_NE(buffer_obj,OSAL_MEMORY_BUFFER_HANDLE_INVALID);
    EXPECT_EQ(R_OSAL_MmngrDealloc(hndl_mmngr, buffer_obj), OSAL_RETURN_OK);
    offset = 0;
    size = 64;
    EXPECT_EQ(R_OSAL_MmngrInvalidate(buffer_obj, offset, size ), OSAL_RETURN_HANDLE) << "Test09_011_005 failed";
    buffer_obj = OSAL_MEMORY_BUFFER_HANDLE_INVALID;

    // post-process: close memory manager
    EXPECT_EQ(R_OSAL_MmngrClose(hndl_mmngr), OSAL_RETURN_OK) << "post-process failed";
    hndl_mmngr = OSAL_MEMORY_MANAGER_HANDLE_INVALID;
}
// [MmngrInvalidate_TC_09_011_005]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrInvalidate_TC_09_011_006 MemoryApiTest.MmngrInvalidate_TC_09_011_006
 * @subsection MmngrInvalidate_TC_09_011_006_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrInvalidate_TC_09_011_006_tci Test Case ID
 * MmngrInvalidate_S4_A_TC_09_011_006
 * @subsection MmngrInvalidate_TC_09_011_006_rr Related Requirement(s)
 * \#276557
 * @subsection MmngrInvalidate_TC_09_011_006_pp Prerequisite/Precondition
 * OSAL is initialized.
 * @subsection MmngrInvalidate_TC_09_011_006_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrInvalidate with abnormal condition and mode is OSAL_MMNGR_ALLOC_MODE_STACK.
 * - pre-process: open new memory manager
 * - Test09_011_006: buffer is not support to flush buffer.
 * - post-process: close memory manager
 * @subsection MmngrInvalidate_TC_09_011_006_tpts Test Procedure/Test Steps
 * -# Call R_OSAL_MmngrOpen with bellow config:
 *  - config.memory_limit                = 4096
 *  - config.max_allowed_allocations     = 1
 *  - config.max_registered_monitors_cbs = 2
 *  - config.mode = OSAL_MMNGR_ALLOC_MODE_STACK
 * -# Allocate "tmp_buffer_obj" by using malloc function.
 * -# Call R_OSAL_MmngrAlloc to allocate a memory buffer.
 * -# Store "buffer_obj->p_invalidate" to "tmp_buffer_obj->p_invalidate".<br>
 * Set "buffer_obj->p_invalidate" to NULL. <br>
 * Call R_OSAL_MmngrInvalidate with the changed buffer "buffer_obj".<br>
 * Re-assign "tmp_buffer_obj->p_invalidate" to "buffer_obj->p_invalidate".
 * -# Call R_OSAL_MmngrDealloc to deallocate the original allocated buffer.
 * -# Free buffer pointed by "tmp_buffer_obj"
 * -# Call R_OSAL_MmngrClose to close memory handle.
 * @subsection MmngrInvalidate_TC_09_011_006_ereb Expected Result/Behavior
 * -# The return of R_OSAL_MmngrOpen is OSAL_RETURN_OK.<br>
 * The returned handle is not OSAL_MEMORY_MANAGER_HANDLE_INVALID.
 * -# Memory allocation succeeded (Pointer to buffer != Nullpointer)
 * -# The return value of R_OSAL_MmngrAlloc is OSAL_RETURN_OK.<br>
 * The return buffer is not OSAL_MEMORY_BUFFER_HANDLE_INVALID.
 * -# The return value of R_OSAL_MmngrInvalidate is OSAL_RETURN_UNSUPPORTED_OPERATION.
 * -# The return value of R_OSAL_MmngrDealloc is OSAL_RETURN_OK.
 * -# Allocated memory free succeeded.
 * -# The return value of R_OSAL_MmngrClose is OSAL_RETURN_OK.
 * @subsection MmngrInvalidate_TC_09_011_006_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrInvalidate_TC_09_011_006
 */
// [MmngrInvalidate_TC_09_011_006]
TEST_F(MemoryApiTest, MmngrInvalidate_TC_09_011_006)
{
    osal_memory_buffer_handle_t tmp_buffer_obj;

    // pre-process: open memory manager
    config.memory_limit                = 4096;
    config.max_allowed_allocations     = 1;
    config.max_registered_monitors_cbs = 2;
    config.mode = OSAL_MMNGR_ALLOC_MODE_STACK;
    size = 4096;
    alignment = 64;

    EXPECT_EQ(R_OSAL_MmngrOpen(&config, &hndl_mmngr), OSAL_RETURN_OK) <<  "pre-process failed";
    EXPECT_NE(hndl_mmngr,OSAL_MEMORY_MANAGER_HANDLE_INVALID) <<  "pre-process failed";

    // Test09_011_006
    // @brief: abnormal case: memory_buffer_obj_hndl->invalidate = NULL
    tmp_buffer_obj = (osal_memory_buffer_handle_t)malloc (sizeof(st_osal_memory_buffer_obj));
    EXPECT_EQ(R_OSAL_MmngrAlloc(hndl_mmngr, size, alignment, &buffer_obj), OSAL_RETURN_OK);
    EXPECT_NE(buffer_obj,OSAL_MEMORY_BUFFER_HANDLE_INVALID);
    tmp_buffer_obj->p_invalidate = buffer_obj->p_invalidate;
    buffer_obj->p_invalidate = NULL;
    offset = 0;
    size = 64;
    EXPECT_EQ(R_OSAL_MmngrInvalidate(buffer_obj, offset, size ), OSAL_RETURN_UNSUPPORTED_OPERATION) << "Test09_011_006 failed";
    buffer_obj->p_invalidate = tmp_buffer_obj->p_invalidate;
    EXPECT_EQ(R_OSAL_MmngrDealloc(hndl_mmngr, buffer_obj), OSAL_RETURN_OK);
    buffer_obj = OSAL_MEMORY_BUFFER_HANDLE_INVALID;
    free(tmp_buffer_obj);

    // post-process: close memory manager
    EXPECT_EQ(R_OSAL_MmngrClose(hndl_mmngr), OSAL_RETURN_OK) << "post-process failed";
    hndl_mmngr = OSAL_MEMORY_MANAGER_HANDLE_INVALID;
}
// [MmngrInvalidate_TC_09_011_006]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrInvalidate_TC_09_011_007 MemoryApiTest.MmngrInvalidate_TC_09_011_007
 * @subsection MmngrInvalidate_TC_09_011_007_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrInvalidate_TC_09_011_007_tci Test Case ID
 * MmngrInvalidate_S0_A_TC_09_011_007
 * @subsection MmngrInvalidate_TC_09_011_007_rr Related Requirement(s)
 * \#276557
 * @subsection MmngrInvalidate_TC_09_011_007_pp Prerequisite/Precondition
 * OSAL is initialized.
 * @subsection MmngrInvalidate_TC_09_011_007_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrInvalidate with abnormal condition and mode is OSAL_MMNGR_ALLOC_MODE_STACK.
 * - pre-process: open new memory manager
 * - Test09_011_007: offset is not aligned ARM Cache Line Size (64).
 * - post-process: close memory manager
 * @subsection MmngrInvalidate_TC_09_011_007_tpts Test Procedure/Test Steps
 * -# Call R_OSAL_MmngrOpen with bellow config:
 *  - config.memory_limit                = 4096
 *  - config.max_allowed_allocations     = 1
 *  - config.max_registered_monitors_cbs = 2
 *  - config.mode = OSAL_MMNGR_ALLOC_MODE_STACK
 * -# Call R_OSAL_MmngrAlloc to allocate a memory buffer.
 * -# Call R_OSAL_MmngrInvalidate with offset is 129, size is 64.
 * -# Call R_OSAL_MmngrDealloc to deallocate the allocated memory buffer.
 * -# Call R_OSAL_MmngrClose to close memory handle.
 * @subsection MmngrInvalidate_TC_09_011_007_ereb Expected Result/Behavior
 * -# The return of R_OSAL_MmngrOpen is OSAL_RETURN_OK.<br>
 * The returned handle is not OSAL_MEMORY_MANAGER_HANDLE_INVALID.
 * -# The return value of R_OSAL_MmngrAlloc is OSAL_RETURN_OK.<br>
 * The return buffer is not OSAL_MEMORY_BUFFER_HANDLE_INVALID.
 * -# The return value of R_OSAL_MmngrInvalidate is OSAL_RETURN_PAR.
 * -# The return value of R_OSAL_MmngrDealloc is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrClose is OSAL_RETURN_OK.
 * @subsection MmngrInvalidate_TC_09_011_007_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrInvalidate_TC_09_011_007
 */
// [MmngrInvalidate_TC_09_011_007]
TEST_F(MemoryApiTest, MmngrInvalidate_TC_09_011_007)
{
    // pre-process: open memory manager
    config.memory_limit                = 4096;
    config.max_allowed_allocations     = 1;
    config.max_registered_monitors_cbs = 2;
    config.mode = OSAL_MMNGR_ALLOC_MODE_STACK;
    size = 4096;
    alignment = 64;

    EXPECT_EQ(R_OSAL_MmngrOpen(&config, &hndl_mmngr), OSAL_RETURN_OK) <<  "pre-process failed";
    EXPECT_NE(hndl_mmngr,OSAL_MEMORY_MANAGER_HANDLE_INVALID) <<  "pre-process failed";

    // Test09_011_007
    // @brief: abnormal case: offset is not aligned by ARM cache line size
    EXPECT_EQ(R_OSAL_MmngrAlloc(hndl_mmngr, size, alignment, &buffer_obj), OSAL_RETURN_OK);
    EXPECT_NE(buffer_obj,OSAL_MEMORY_BUFFER_HANDLE_INVALID);
    offset = 129;
    size = 64;
    EXPECT_EQ(R_OSAL_MmngrInvalidate(buffer_obj, offset, size ), OSAL_RETURN_PAR) << "Test09_011_007 failed";
    EXPECT_EQ(R_OSAL_MmngrDealloc(hndl_mmngr, buffer_obj), OSAL_RETURN_OK);
    buffer_obj = OSAL_MEMORY_BUFFER_HANDLE_INVALID;

    // post-process: close memory manager
    EXPECT_EQ(R_OSAL_MmngrClose(hndl_mmngr), OSAL_RETURN_OK) << "post-process failed";
    hndl_mmngr = OSAL_MEMORY_MANAGER_HANDLE_INVALID;
}
// [MmngrInvalidate_TC_09_011_007]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrInvalidate_TC_09_011_008 MemoryApiTest.MmngrInvalidate_TC_09_011_008
 * @subsection MmngrInvalidate_TC_09_011_008_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrInvalidate_TC_09_011_008_tci Test Case ID
 * MmngrInvalidate_S0_A_TC_09_011_008
 * @subsection MmngrInvalidate_TC_09_011_008_rr Related Requirement(s)
 * \#276557
 * @subsection MmngrInvalidate_TC_09_011_008_pp Prerequisite/Precondition
 * OSAL is initialized.
 * @subsection MmngrInvalidate_TC_09_011_008_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrInvalidate with abnormal condition and mode is OSAL_MMNGR_ALLOC_MODE_STACK.
 * - pre-process: open new memory manager
 * - Test09_011_008: size is less than minimum required size (64).
 * - post-process: close memory manager
 * @subsection MmngrInvalidate_TC_09_011_008_tpts Test Procedure/Test Steps
 * -# Call R_OSAL_MmngrOpen with bellow config:
 *  - config.memory_limit                = 4096
 *  - config.max_allowed_allocations     = 1
 *  - config.max_registered_monitors_cbs = 2
 *  - config.mode = OSAL_MMNGR_ALLOC_MODE_STACK
 * -# Call R_OSAL_MmngrAlloc with size is 4096 and alignment is 64 to allocate a memory buffer.
 * -# Call R_OSAL_MmngrInvalidate with offset is 0 and size is 63.
 * -# Call R_OSAL_MmngrDealloc to deallocate the allocated memory buffer.
 * -# Call R_OSAL_MmngrClose to close memory handle.
 * @subsection MmngrInvalidate_TC_09_011_008_ereb Expected Result/Behavior
 * -# The return of R_OSAL_MmngrOpen is OSAL_RETURN_OK.<br>
 * The returned handle is not OSAL_MEMORY_MANAGER_HANDLE_INVALID.
 * -# The return value of R_OSAL_MmngrAlloc is OSAL_RETURN_OK.<br>
 * The return buffer is not OSAL_MEMORY_BUFFER_HANDLE_INVALID.
 * -# The return value of R_OSAL_MmngrInvalidate is OSAL_RETURN_PAR.
 * -# The return value of R_OSAL_MmngrDealloc is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrClose is OSAL_RETURN_OK.
 * @subsection MmngrInvalidate_TC_09_011_008_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrInvalidate_TC_09_011_008
 */
// [MmngrInvalidate_TC_09_011_008]
TEST_F(MemoryApiTest, MmngrInvalidate_TC_09_011_008)
{
    // pre-process: open memory manager
    config.memory_limit                = 4096;
    config.max_allowed_allocations     = 1;
    config.max_registered_monitors_cbs = 2;
    config.mode = OSAL_MMNGR_ALLOC_MODE_STACK;
    size = 4096;
    alignment = 64;

    EXPECT_EQ(R_OSAL_MmngrOpen(&config, &hndl_mmngr), OSAL_RETURN_OK) <<  "pre-process failed";
    EXPECT_NE(hndl_mmngr,OSAL_MEMORY_MANAGER_HANDLE_INVALID) <<  "pre-process failed";

    // Test09_011_008
    // @brief: abnormal case: size is less than the minimum required size (64Byte)
    EXPECT_EQ(R_OSAL_MmngrAlloc(hndl_mmngr, size, alignment, &buffer_obj), OSAL_RETURN_OK);
    EXPECT_NE(buffer_obj,OSAL_MEMORY_BUFFER_HANDLE_INVALID);
    offset = 0;
    size = 63;
    EXPECT_EQ(R_OSAL_MmngrInvalidate(buffer_obj, offset, size), OSAL_RETURN_PAR) << "Test09_011_008 failed";
    EXPECT_EQ(R_OSAL_MmngrDealloc(hndl_mmngr, buffer_obj), OSAL_RETURN_OK);
    buffer_obj = OSAL_MEMORY_BUFFER_HANDLE_INVALID;

    // post-process: close memory manager
    EXPECT_EQ(R_OSAL_MmngrClose(hndl_mmngr), OSAL_RETURN_OK) << "post-process failed";
    hndl_mmngr = OSAL_MEMORY_MANAGER_HANDLE_INVALID;
}
// [MmngrInvalidate_TC_09_011_008]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrInvalidate_TC_09_011_009 MemoryApiTest.MmngrInvalidate_TC_09_011_009
 * @subsection MmngrInvalidate_TC_09_011_009_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrInvalidate_TC_09_011_009_tci Test Case ID
 * MmngrInvalidate_S3_N_TC_09_011_009
 * @subsection MmngrInvalidate_TC_09_011_009_rr Related Requirement(s)
 * \#276557
 * @subsection MmngrInvalidate_TC_09_011_009_pp Prerequisite/Precondition
 * OSAL is initialized.
 * @subsection MmngrInvalidate_TC_09_011_009_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrInvalidate with normal condition and mode is OSAL_MMNGR_ALLOC_MODE_FREE_LIST.
 * - pre-process: open new memory manager
 * - Test09_011_009: confirm with memory handle which opened with OSAL_MMNGR_ALLOC_MODE_FREE_LIST mode
 * - post-process: close memory manager
 * @subsection MmngrInvalidate_TC_09_011_009_tpts Test Procedure/Test Steps
 * -# Call R_OSAL_MmngrOpen with bellow config:
 *  - config.memory_limit                = 4096
 *  - config.max_allowed_allocations     = 1
 *  - config.max_registered_monitors_cbs = 2
 *  - config.mode = OSAL_MMNGR_ALLOC_MODE_FREE_LIST
 * -# Call R_OSAL_MmngrAlloc to allocate a memory buffer.
 * -# Call R_OSAL_MmngrInvalidate with offset is 0 and size is 64.
 * -# Call R_OSAL_MmngrInvalidate with offset is 128 and size is 64.
 * -# Call R_OSAL_MmngrInvalidate with offset is 0 and size is 128.
 * -# Call R_OSAL_MmngrDealloc to deallocate the allocated memory buffer.
 * -# Call R_OSAL_MmngrClose to close memory handle.
 * @subsection MmngrInvalidate_TC_09_011_009_ereb Expected Result/Behavior
 * -# The return of R_OSAL_MmngrOpen is OSAL_RETURN_OK.<br>
 * The returned handle is not OSAL_MEMORY_MANAGER_HANDLE_INVALID.
 * -# The return value of R_OSAL_MmngrAlloc is OSAL_RETURN_OK.<br>
 * The return buffer is not OSAL_MEMORY_BUFFER_HANDLE_INVALID.
 * -# The return value of the 1st R_OSAL_MmngrInvalidate is OSAL_RETURN_OK.
 * -# The return value of the 2nd R_OSAL_MmngrInvalidate is OSAL_RETURN_OK.
 * -# The return value of the 3rd R_OSAL_MmngrInvalidate is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrDealloc is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrClose is OSAL_RETURN_OK.
 * @subsection MmngrInvalidate_TC_09_011_009_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrInvalidate_TC_09_011_009
 */
// [MmngrInvalidate_TC_09_011_009]
TEST_F(MemoryApiTest, MmngrInvalidate_TC_09_011_009)
{
    // pre-process: open memory manager
    config.memory_limit                = 4096;
    config.max_allowed_allocations     = 1;
    config.max_registered_monitors_cbs = 2;
    config.mode = OSAL_MMNGR_ALLOC_MODE_FREE_LIST;
    size = 4096;
    alignment = 64;

    EXPECT_EQ(R_OSAL_MmngrOpen(&config, &hndl_mmngr), OSAL_RETURN_OK) <<  "pre-process failed";
    EXPECT_NE(hndl_mmngr,OSAL_MEMORY_MANAGER_HANDLE_INVALID) <<  "pre-process failed";

    // Test09_011_009
    // @brief: normal case: config.mode = OSAL_MMNGR_ALLOC_MODE_FREE_LIST;
    EXPECT_EQ(R_OSAL_MmngrAlloc(hndl_mmngr, size, alignment, &buffer_obj), OSAL_RETURN_OK);
    EXPECT_NE(buffer_obj,OSAL_MEMORY_BUFFER_HANDLE_INVALID);
    offset = 0;
    size = 64;
    EXPECT_EQ(R_OSAL_MmngrInvalidate(buffer_obj, offset, size), OSAL_RETURN_OK) << "Test09_011_009 failed";
    offset = 128;
    EXPECT_EQ(R_OSAL_MmngrInvalidate(buffer_obj, offset, size), OSAL_RETURN_OK) << "Test09_011_009 failed";
    offset = 0;
    size = 128;
    EXPECT_EQ(R_OSAL_MmngrInvalidate(buffer_obj, offset, size), OSAL_RETURN_OK) << "Test09_011_009 failed";
    EXPECT_EQ(R_OSAL_MmngrDealloc(hndl_mmngr, buffer_obj), OSAL_RETURN_OK) << "Test09_011_009 failed";
    buffer_obj = OSAL_MEMORY_BUFFER_HANDLE_INVALID;

    // post-process: close memory manager
    EXPECT_EQ(R_OSAL_MmngrClose(hndl_mmngr), OSAL_RETURN_OK) << "post-process failed";
    hndl_mmngr = OSAL_MEMORY_MANAGER_HANDLE_INVALID;
}
// [MmngrInvalidate_TC_09_011_009]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrInvalidate_TC_09_011_010 MemoryApiTest.MmngrInvalidate_TC_09_011_010
 * @subsection MmngrInvalidate_TC_09_011_010_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrInvalidate_TC_09_011_010_tci Test Case ID
 * MmngrInvalidate_S3_N_TC_09_011_010
 * @subsection MmngrInvalidate_TC_09_011_010_rr Related Requirement(s)
 * \#276557
 * @subsection MmngrInvalidate_TC_09_011_010_pp Prerequisite/Precondition
 * OSAL is initialized.
 * @subsection MmngrInvalidate_TC_09_011_010_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrInvalidate with normal condition and mode is OSAL_MMNGR_ALLOC_MODE_STACK.
 * - pre-process: open new memory manager
 * - Test09_011_010: confirm the behavior when allocate a buffer with size is less than the alignment.
 * - post-process: close memory manager
 * @subsection MmngrInvalidate_TC_09_011_010_tpts Test Procedure/Test Steps
 * -# Call R_OSAL_MmngrOpen with bellow config:
 *  - config.memory_limit                = 4096
 *  - config.max_allowed_allocations     = 1
 *  - config.max_registered_monitors_cbs = 2
 *  - config.mode = OSAL_MMNGR_ALLOC_MODE_STACK
 * -# Call R_OSAL_MmngrAlloc with "size" is 64 and "alignment" is 128 to allocate a memory buffer.
 * -# Call R_OSAL_MmngrGetSize to return the allocated buffer size.
 * -# Call R_OSAL_MmngrInvalidate with size is 64 and offset is 0.
 * -# Call R_OSAL_MmngrDealloc to deallocate the allocated memory buffer.
 * -# Call R_OSAL_MmngrClose to close the handle.
 * @subsection MmngrInvalidate_TC_09_011_010_ereb Expected Result/Behavior
 * -# The return of R_OSAL_MmngrOpen is OSAL_RETURN_OK.<br>
 * The returned handle is not OSAL_MEMORY_MANAGER_HANDLE_INVALID.
 * -# The return value of R_OSAL_MmngrAlloc is OSAL_RETURN_OK.<br>
 * The return buffer is not OSAL_MEMORY_BUFFER_HANDLE_INVALID.
 * -# The return value of R_OSAL_MmngrGetSize is OSAL_RETURN_OK.<br>
 * The return size is 64
 * -# The return value of R_OSAL_MmngrInvalidate is OSAL_RETURN_OK.<br>
 * -# The return value of R_OSAL_MmngrDealloc is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrClose is OSAL_RETURN_OK.<br>
 * @subsection MmngrInvalidate_TC_09_011_010_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrInvalidate_TC_09_011_010
 */
// [MmngrInvalidate_TC_09_011_010]
TEST_F(MemoryApiTest, MmngrInvalidate_TC_09_011_010)
{
    size_t get_size;

    // pre-process: open memory manager
    config.memory_limit                = 4096;
    config.max_allowed_allocations     = 1;
    config.max_registered_monitors_cbs = 2;
    config.mode = OSAL_MMNGR_ALLOC_MODE_STACK;
    size = 64;
    alignment = 128;

    EXPECT_EQ(R_OSAL_MmngrOpen(&config, &hndl_mmngr), OSAL_RETURN_OK) <<  "pre-process failed";
    EXPECT_NE(hndl_mmngr,OSAL_MEMORY_MANAGER_HANDLE_INVALID) <<  "pre-process failed";

    // Test09_011_010
    // @brief: normal case: Check with the allocated buffer size is less than the alignment.
    EXPECT_EQ(R_OSAL_MmngrAlloc(hndl_mmngr, size, alignment, &buffer_obj), OSAL_RETURN_OK);
    EXPECT_NE(buffer_obj,OSAL_MEMORY_BUFFER_HANDLE_INVALID);
    EXPECT_EQ(R_OSAL_MmngrGetSize(buffer_obj, &get_size), OSAL_RETURN_OK);
    EXPECT_EQ(get_size, 64);
    offset = 0;
    size = 64;
    EXPECT_EQ(R_OSAL_MmngrInvalidate(buffer_obj, offset, size), OSAL_RETURN_OK) << "Test09_011_010 failed";
    EXPECT_EQ(R_OSAL_MmngrDealloc(hndl_mmngr, buffer_obj), OSAL_RETURN_OK);
    buffer_obj = OSAL_MEMORY_BUFFER_HANDLE_INVALID;

    // post-process: close memory manager
    EXPECT_EQ(R_OSAL_MmngrClose(hndl_mmngr), OSAL_RETURN_OK) << "post-process failed";
    hndl_mmngr = OSAL_MEMORY_MANAGER_HANDLE_INVALID;
}
// [MmngrInvalidate_TC_09_011_010]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrInvalidate_TC_09_011_011 MemoryApiTest.MmngrInvalidate_TC_09_011_011
 * @subsection MmngrInvalidate_TC_09_011_011_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrInvalidate_TC_09_011_011_tci Test Case ID
 * MmngrInvalidate_S3_N_TC_09_011_011
 * @subsection MmngrInvalidate_TC_09_011_011_rr Related Requirement(s)
 * \#276557
 * @subsection MmngrInvalidate_TC_09_011_011_pp Prerequisite/Precondition
 * OSAL is initialized.
 * @subsection MmngrInvalidate_TC_09_011_011_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrInvalidate with normal condition and mode is OSAL_MMNGR_ALLOC_MODE_STACK_PROT.
 * - pre-process: open new memory manager
 * - Test09_011_011: with all valid parameters.
 * - post-process: close memory manager
 * @subsection MmngrInvalidate_TC_09_011_011_tpts Test Procedure/Test Steps
 * -# Call R_OSAL_MmngrOpen with bellow config:
 *  - config.memory_limit                = 4096
 *  - config.max_allowed_allocations     = 1
 *  - config.max_registered_monitors_cbs = 2
 *  - config.mode = OSAL_MMNGR_ALLOC_MODE_STACK_PROT
 * -# Call R_OSAL_MmngrAlloc with size is 4096 and alignment is 64 to allocate a memory buffer.
 * -# Call R_OSAL_MmngrInvalidate with offset is 0 and size is 64.
 * -# Call R_OSAL_MmngrDealloc to deallocate the allocated memory buffer.
 * -# Call R_OSAL_MmngrClose to close memory manager
 * @subsection MmngrInvalidate_TC_09_011_011_ereb Expected Result/Behavior
 * -# The return of R_OSAL_MmngrOpen is OSAL_RETURN_OK.<br>
 * The returned handle is not OSAL_MEMORY_MANAGER_HANDLE_INVALID.
 * -# The return value of R_OSAL_MmngrAlloc is OSAL_RETURN_OK.<br>
 * The return buffer is not OSAL_MEMORY_BUFFER_HANDLE_INVALID.
 * -# The return value of R_OSAL_MmngrInvalidate is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrDealloc is OSAL_RETURN_OK
 * -# R_OSAL_MmngrClose return OSAL_RETURN_OK
 * @subsection MmngrInvalidate_TC_09_011_011_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrInvalidate_TC_09_011_011
 */
// [MmngrInvalidate_TC_09_011_011]
TEST_F(MemoryApiTest, MmngrInvalidate_TC_09_011_011)
{
    // pre-process: open memory manager
    config.memory_limit                = 4096;
    config.max_allowed_allocations     = 1;
    config.max_registered_monitors_cbs = 2;
    config.mode = OSAL_MMNGR_ALLOC_MODE_STACK_PROT;
    size = 4096;
    alignment = 64;

    EXPECT_EQ(R_OSAL_MmngrOpen(&config, &hndl_mmngr), OSAL_RETURN_OK) <<  "pre-process failed";
    EXPECT_NE(hndl_mmngr,OSAL_MEMORY_MANAGER_HANDLE_INVALID) <<  "pre-process failed";

    // Test09_011_011
    EXPECT_EQ(R_OSAL_MmngrAlloc(hndl_mmngr, size, alignment, &buffer_obj), OSAL_RETURN_OK);
    EXPECT_NE(buffer_obj,OSAL_MEMORY_BUFFER_HANDLE_INVALID);
    offset = 0;
    size = 64;
    EXPECT_EQ(R_OSAL_MmngrInvalidate(buffer_obj, offset, size), OSAL_RETURN_OK) << "Test09_011_011 failed";
    EXPECT_EQ(R_OSAL_MmngrDealloc(hndl_mmngr, buffer_obj), OSAL_RETURN_OK);
    buffer_obj = OSAL_MEMORY_BUFFER_HANDLE_INVALID;

    // post-process: close memory manager
    EXPECT_EQ(R_OSAL_MmngrClose(hndl_mmngr), OSAL_RETURN_OK) << "post-process failed";
    hndl_mmngr = OSAL_MEMORY_MANAGER_HANDLE_INVALID;
}
// [MmngrInvalidate_TC_09_011_011]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrInvalidate_TC_09_011_012 MemoryApiTest.MmngrInvalidate_TC_09_011_012
 * @subsection MmngrInvalidate_TC_09_011_012_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrInvalidate_TC_09_011_012_tci Test Case ID
 * MmngrInvalidate_S3_N_TC_09_011_012
 * @subsection MmngrInvalidate_TC_09_011_012_rr Related Requirement(s)
 * \#276557
 * @subsection MmngrInvalidate_TC_09_011_012_pp Prerequisite/Precondition
 * OSAL is initialized.
 * @subsection MmngrInvalidate_TC_09_011_012_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrInvalidate with normal condition and mode is OSAL_MMNGR_ALLOC_MODE_STACK_PROT.
 * - pre-process: open new memory manager
 * - Test09_011_012: with all valid parameters.
 * - post-process: close memory manager
 * @subsection MmngrInvalidate_TC_09_011_012_tpts Test Procedure/Test Steps
 * -# Call R_OSAL_MmngrOpen with bellow config:
 *  - config.memory_limit                = 4096
 *  - config.max_allowed_allocations     = 1
 *  - config.max_registered_monitors_cbs = 2
 *  - config.mode = OSAL_MMNGR_ALLOC_MODE_STACK_PROT
 * -# Call R_OSAL_MmngrAlloc with size is 4096 and alignment is 64 to allocate a memory buffer.
 * -# Call R_OSAL_MmngrInvalidate with offset is 128 and size is 64.
 * -# Call R_OSAL_MmngrDealloc to deallocate the allocated memory buffer.
 * -# Call R_OSAL_MmngrClose to close memory manager
 * @subsection MmngrInvalidate_TC_09_011_012_ereb Expected Result/Behavior
 * -# The return of R_OSAL_MmngrOpen is OSAL_RETURN_OK.<br>
 * The returned handle is not OSAL_MEMORY_MANAGER_HANDLE_INVALID.
 * -# The return value of R_OSAL_MmngrAlloc is OSAL_RETURN_OK.<br>
 * The return buffer is not OSAL_MEMORY_BUFFER_HANDLE_INVALID.
 * -# The return value of R_OSAL_MmngrInvalidate is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrDealloc is OSAL_RETURN_OK
 * -# R_OSAL_MmngrClose return OSAL_RETURN_OK.
 * @subsection MmngrInvalidate_TC_09_011_012_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrInvalidate_TC_09_011_012
 */
// [MmngrInvalidate_TC_09_011_012]
TEST_F(MemoryApiTest, MmngrInvalidate_TC_09_011_012)
{
    // pre-process: open memory manager
    config.memory_limit                = 4096;
    config.max_allowed_allocations     = 1;
    config.max_registered_monitors_cbs = 2;
    config.mode = OSAL_MMNGR_ALLOC_MODE_STACK_PROT;
    size = 4096;
    alignment = 64;

    EXPECT_EQ(R_OSAL_MmngrOpen(&config, &hndl_mmngr), OSAL_RETURN_OK) <<  "pre-process failed";
    EXPECT_NE(hndl_mmngr,OSAL_MEMORY_MANAGER_HANDLE_INVALID) <<  "pre-process failed";

    // Test09_011_012
    EXPECT_EQ(R_OSAL_MmngrAlloc(hndl_mmngr, size, alignment, &buffer_obj), OSAL_RETURN_OK);
    EXPECT_NE(buffer_obj,OSAL_MEMORY_BUFFER_HANDLE_INVALID);
    offset = 128;
    size = 64;
    EXPECT_EQ(R_OSAL_MmngrInvalidate(buffer_obj, offset, size), OSAL_RETURN_OK) << "Test09_011_012 failed";
    EXPECT_EQ(R_OSAL_MmngrDealloc(hndl_mmngr, buffer_obj), OSAL_RETURN_OK);
    buffer_obj = OSAL_MEMORY_BUFFER_HANDLE_INVALID;

    // post-process: close memory manager
    EXPECT_EQ(R_OSAL_MmngrClose(hndl_mmngr), OSAL_RETURN_OK) << "post-process failed";
    hndl_mmngr = OSAL_MEMORY_MANAGER_HANDLE_INVALID;
}
// [MmngrInvalidate_TC_09_011_012]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrInvalidate_TC_09_011_013 MemoryApiTest.MmngrInvalidate_TC_09_011_013
 * @subsection MmngrInvalidate_TC_09_011_013_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrInvalidate_TC_09_011_013_tci Test Case ID
 * MmngrInvalidate_S3_N_TC_09_011_013
 * @subsection MmngrInvalidate_TC_09_011_013_rr Related Requirement(s)
 * \#276557
 * @subsection MmngrInvalidate_TC_09_011_013_pp Prerequisite/Precondition
 * OSAL is initialized.
 * @subsection MmngrInvalidate_TC_09_011_013_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrInvalidate with normal condition and mode is OSAL_MMNGR_ALLOC_MODE_STACK_PROT.
 * - pre-process: open new memory manager
 * - Test09_011_013: with all valid parameters.
 * - post-process: close memory manager
 * @subsection MmngrInvalidate_TC_09_011_013_tpts Test Procedure/Test Steps
 * -# Call R_OSAL_MmngrOpen with bellow config:
 *  - config.memory_limit                = 4096
 *  - config.max_allowed_allocations     = 1
 *  - config.max_registered_monitors_cbs = 2
 *  - config.mode = OSAL_MMNGR_ALLOC_MODE_STACK_PROT
 * -# Call R_OSAL_MmngrAlloc with size is 4096 and alignment is 64 to allocate a memory buffer.
 * -# Call R_OSAL_MmngrInvalidate with offset is 0 and size is 128.
 * -# Call R_OSAL_MmngrDealloc to deallocate the allocated memory buffer.
 * -# Call R_OSAL_MmngrClose to close memory manager
 * @subsection MmngrInvalidate_TC_09_011_013_ereb Expected Result/Behavior
 * -# The return of R_OSAL_MmngrOpen is OSAL_RETURN_OK.<br>
 * The returned handle is not OSAL_MEMORY_MANAGER_HANDLE_INVALID.
 * -# The return value of R_OSAL_MmngrAlloc is OSAL_RETURN_OK.<br>
 * The return buffer is not OSAL_MEMORY_BUFFER_HANDLE_INVALID.
 * -# The return value of R_OSAL_MmngrInvalidate is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrDealloc is OSAL_RETURN_OK
 * -# R_OSAL_MmngrClose return OSAL_RETURN_OK
 * @subsection MmngrInvalidate_TC_09_011_013_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrInvalidate_TC_09_011_013
 */
// [MmngrInvalidate_TC_09_011_013]
TEST_F(MemoryApiTest, MmngrInvalidate_TC_09_011_013)
{
    // pre-process: open memory manager
    config.memory_limit                = 4096;
    config.max_allowed_allocations     = 1;
    config.max_registered_monitors_cbs = 2;
    config.mode = OSAL_MMNGR_ALLOC_MODE_STACK_PROT;
    size = 4096;
    alignment = 64;

    EXPECT_EQ(R_OSAL_MmngrOpen(&config, &hndl_mmngr), OSAL_RETURN_OK) <<  "pre-process failed";
    EXPECT_NE(hndl_mmngr,OSAL_MEMORY_MANAGER_HANDLE_INVALID) <<  "pre-process failed";

    // Test09_011_013
    EXPECT_EQ(R_OSAL_MmngrAlloc(hndl_mmngr, size, alignment, &buffer_obj), OSAL_RETURN_OK);
    EXPECT_NE(buffer_obj,OSAL_MEMORY_BUFFER_HANDLE_INVALID);
    offset = 0;
    size = 128;
    EXPECT_EQ(R_OSAL_MmngrInvalidate(buffer_obj, offset, size), OSAL_RETURN_OK) << "Test09_011_013 failed";
    EXPECT_EQ(R_OSAL_MmngrDealloc(hndl_mmngr, buffer_obj), OSAL_RETURN_OK);
    buffer_obj = OSAL_MEMORY_BUFFER_HANDLE_INVALID;

    // post-process: close memory manager
    EXPECT_EQ(R_OSAL_MmngrClose(hndl_mmngr), OSAL_RETURN_OK) << "post-process failed";
    hndl_mmngr = OSAL_MEMORY_MANAGER_HANDLE_INVALID;
}
// [MmngrInvalidate_TC_09_011_013]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrInvalidate_TC_09_011_014 MemoryApiTest.MmngrInvalidate_TC_09_011_014
 * @subsection MmngrInvalidate_TC_09_011_014_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrInvalidate_TC_09_011_014_tci Test Case ID
 * MmngrInvalidate_S2_A_TC_09_011_014
 * @subsection MmngrInvalidate_TC_09_011_014_rr Related Requirement(s)
 * \#276557
 * @subsection MmngrInvalidate_TC_09_011_014_pp Prerequisite/Precondition
 * OSAL is initialized.
 * @subsection MmngrInvalidate_TC_09_011_014_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrInvalidate with abnormal condition and mode is OSAL_MMNGR_ALLOC_MODE_STACK_PROT.
 * - pre-process: open new memory manager
 * - Test09_011_014: Call memory APIs with the sequence as below:<br>
 * R_OSAL_MmngrAlloc -> R_OSAL_MmngrDealloc -> R_OSAL_MmngrInvalidate
 * - post-process: close memory manager
 * @subsection MmngrInvalidate_TC_09_011_014_tpts Test Procedure/Test Steps
 * -# Call R_OSAL_MmngrOpen with bellow config:
 *  - config.memory_limit                = 4096
 *  - config.max_allowed_allocations     = 1
 *  - config.max_registered_monitors_cbs = 2
 *  - config.mode = OSAL_MMNGR_ALLOC_MODE_STACK_PROT
 * -# Call R_OSAL_MmngrAlloc to allocate a memory buffer.
 * -# Call R_OSAL_MmngrDealloc to deallocate the allocated memory buffer.
 * -# Call R_OSAL_MmngrInvalidate with offset is 0, size is 64.
 * -# Call R_OSAL_MmngrClose to close memory handle.
 * @subsection MmngrInvalidate_TC_09_011_014_ereb Expected Result/Behavior
 * -# The return of R_OSAL_MmngrOpen is OSAL_RETURN_OK.<br>
 * The returned handle is not OSAL_MEMORY_MANAGER_HANDLE_INVALID.
 * -# The return value of R_OSAL_MmngrAlloc is OSAL_RETURN_OK.<br>
 * The return buffer is not OSAL_MEMORY_BUFFER_HANDLE_INVALID.
 * -# The return value of R_OSAL_MmngrDealloc is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrInvalidate is OSAL_RETURN_HANDLE.
 * -# The return value of R_OSAL_MmngrClose is OSAL_RETURN_OK.
 * @subsection MmngrInvalidate_TC_09_011_014_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrInvalidate_TC_09_011_014
 */
// [MmngrInvalidate_TC_09_011_014]
TEST_F(MemoryApiTest, MmngrInvalidate_TC_09_011_014)
{
    // pre-process: open memory manager
    config.memory_limit                = 4096;
    config.max_allowed_allocations     = 1;
    config.max_registered_monitors_cbs = 2;
    config.mode = OSAL_MMNGR_ALLOC_MODE_STACK_PROT;
    size = 4096;
    alignment = 64;

    EXPECT_EQ(R_OSAL_MmngrOpen(&config, &hndl_mmngr), OSAL_RETURN_OK) <<  "pre-process failed";
    EXPECT_NE(hndl_mmngr,OSAL_MEMORY_MANAGER_HANDLE_INVALID) <<  "pre-process failed";

    // Test09_011_014
    // @brief: abnormal case: R_OSAL_MmngrOpen -> R_OSAL_MmngrAlloc -> R_OSAL_MmngrDealloc -> R_OSAL_MmngrInvalidate
    EXPECT_EQ(R_OSAL_MmngrAlloc(hndl_mmngr, size, alignment, &buffer_obj), OSAL_RETURN_OK);
    EXPECT_NE(buffer_obj,OSAL_MEMORY_BUFFER_HANDLE_INVALID);
    EXPECT_EQ(R_OSAL_MmngrDealloc(hndl_mmngr, buffer_obj), OSAL_RETURN_OK);
    offset = 0;
    size = 64;
    EXPECT_EQ(R_OSAL_MmngrInvalidate(buffer_obj, offset, size ), OSAL_RETURN_HANDLE) << "Test09_011_014 failed";
    buffer_obj = OSAL_MEMORY_BUFFER_HANDLE_INVALID;

    // post-process: close memory manager
    EXPECT_EQ(R_OSAL_MmngrClose(hndl_mmngr), OSAL_RETURN_OK) << "post-process failed";
    hndl_mmngr = OSAL_MEMORY_MANAGER_HANDLE_INVALID;
}
// [MmngrInvalidate_TC_09_011_014]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrInvalidate_TC_09_011_015 MemoryApiTest.MmngrInvalidate_TC_09_011_015
 * @subsection MmngrInvalidate_TC_09_011_015_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrInvalidate_TC_09_011_015_tci Test Case ID
 * MmngrInvalidate_S4_A_TC_09_011_015
 * @subsection MmngrInvalidate_TC_09_011_015_rr Related Requirement(s)
 * \#276557
 * @subsection MmngrInvalidate_TC_09_011_015_pp Prerequisite/Precondition
 * OSAL is initialized.
 * @subsection MmngrInvalidate_TC_09_011_015_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrInvalidate with abnormal condition and mode is OSAL_MMNGR_ALLOC_MODE_STACK_PROT.
 * - pre-process: open new memory manager
 * - Test09_011_015: buffer is not support to flush buffer.
 * - post-process: close memory manager
 * @subsection MmngrInvalidate_TC_09_011_015_tpts Test Procedure/Test Steps
 * -# Call R_OSAL_MmngrOpen with bellow config:
 *  - config.memory_limit                = 4096
 *  - config.max_allowed_allocations     = 1
 *  - config.max_registered_monitors_cbs = 2
 *  - config.mode = OSAL_MMNGR_ALLOC_MODE_STACK_PROT
 * -# Allocate "tmp_buffer_obj" by using malloc function.
 * -# Call R_OSAL_MmngrAlloc to allocate a memory buffer.
 * -# Store "buffer_obj->p_invalidate" to "tmp_buffer_obj->p_invalidate".<br>
 * Set "buffer_obj->p_invalidate" to NULL. <br>
 * Call R_OSAL_MmngrInvalidate with the changed buffer "buffer_obj".<br>
 * Re-assign "tmp_buffer_obj->p_invalidate" to "buffer_obj->p_invalidate".
 * -# Call R_OSAL_MmngrDealloc to deallocate the original allocated buffer.
 * -# Free buffer pointed by "tmp_buffer_obj"
 * -# Call R_OSAL_MmngrClose to close memory handle.
 * @subsection MmngrInvalidate_TC_09_011_015_ereb Expected Result/Behavior
 * -# The return of R_OSAL_MmngrOpen is OSAL_RETURN_OK.<br>
 * The returned handle is not OSAL_MEMORY_MANAGER_HANDLE_INVALID.
 * -# Memory allocation succeeded (Pointer to buffer != Nullpointer)
 * -# The return value of R_OSAL_MmngrAlloc is OSAL_RETURN_OK.<br>
 * The return buffer is not OSAL_MEMORY_BUFFER_HANDLE_INVALID.
 * -# The return value of R_OSAL_MmngrInvalidate is OSAL_RETURN_UNSUPPORTED_OPERATION.
 * -# The return value of R_OSAL_MmngrDealloc is OSAL_RETURN_OK.
 * -# Allocated memory free succeeded.
 * -# The return value of R_OSAL_MmngrClose is OSAL_RETURN_OK.
 * @subsection MmngrInvalidate_TC_09_011_015_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrInvalidate_TC_09_011_015
 */
// [MmngrInvalidate_TC_09_011_015]
TEST_F(MemoryApiTest, MmngrInvalidate_TC_09_011_015)
{
    osal_memory_buffer_handle_t tmp_buffer_obj;

    // pre-process: open memory manager
    config.memory_limit                = 4096;
    config.max_allowed_allocations     = 1;
    config.max_registered_monitors_cbs = 2;
    config.mode = OSAL_MMNGR_ALLOC_MODE_STACK_PROT;
    size = 4096;
    alignment = 64;

    EXPECT_EQ(R_OSAL_MmngrOpen(&config, &hndl_mmngr), OSAL_RETURN_OK) <<  "pre-process failed";
    EXPECT_NE(hndl_mmngr,OSAL_MEMORY_MANAGER_HANDLE_INVALID) <<  "pre-process failed";

    // Test09_011_015
    // @brief: abnormal case: memory_buffer_obj_hndl->invalidate = NULL
    tmp_buffer_obj = (osal_memory_buffer_handle_t)malloc (sizeof(st_osal_memory_buffer_obj));
    EXPECT_EQ(R_OSAL_MmngrAlloc(hndl_mmngr, size, alignment, &buffer_obj), OSAL_RETURN_OK);
    EXPECT_NE(buffer_obj,OSAL_MEMORY_BUFFER_HANDLE_INVALID);
    tmp_buffer_obj->p_invalidate = buffer_obj->p_invalidate;
    buffer_obj->p_invalidate = NULL;
    offset = 0;
    size = 64;
    EXPECT_EQ(R_OSAL_MmngrInvalidate(buffer_obj, offset, size ), OSAL_RETURN_UNSUPPORTED_OPERATION) << "Test09_011_015 failed";
    buffer_obj->p_invalidate = tmp_buffer_obj->p_invalidate;
    EXPECT_EQ(R_OSAL_MmngrDealloc(hndl_mmngr, buffer_obj), OSAL_RETURN_OK);
    buffer_obj = OSAL_MEMORY_BUFFER_HANDLE_INVALID;
    free(tmp_buffer_obj);

    // post-process: close memory manager
    EXPECT_EQ(R_OSAL_MmngrClose(hndl_mmngr), OSAL_RETURN_OK) << "post-process failed";
    hndl_mmngr = OSAL_MEMORY_MANAGER_HANDLE_INVALID;
}
// [MmngrInvalidate_TC_09_011_015]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrInvalidate_TC_09_011_016 MemoryApiTest.MmngrInvalidate_TC_09_011_016
 * @subsection MmngrInvalidate_TC_09_011_016_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrInvalidate_TC_09_011_016_tci Test Case ID
 * MmngrInvalidate_S0_A_TC_09_011_016
 * @subsection MmngrInvalidate_TC_09_011_016_rr Related Requirement(s)
 * \#276557
 * @subsection MmngrInvalidate_TC_09_011_016_pp Prerequisite/Precondition
 * OSAL is initialized.
 * @subsection MmngrInvalidate_TC_09_011_016_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrInvalidate with abnormal condition and mode is OSAL_MMNGR_ALLOC_MODE_STACK_PROT.
 * - pre-process: open new memory manager
 * - Test09_011_016: offset is not aligned ARM Cache Line Size (64).
 * - post-process: close memory manager
 * @subsection MmngrInvalidate_TC_09_011_016_tpts Test Procedure/Test Steps
 * -# Call R_OSAL_MmngrOpen with bellow config:
 *  - config.memory_limit                = 4096
 *  - config.max_allowed_allocations     = 1
 *  - config.max_registered_monitors_cbs = 2
 *  - config.mode = OSAL_MMNGR_ALLOC_MODE_STACK_PROT
 * -# Call R_OSAL_MmngrAlloc to allocate a memory buffer.
 * -# Call R_OSAL_MmngrInvalidate with offset is 129, size is 64.
 * -# Call R_OSAL_MmngrDealloc to deallocate the allocated memory buffer.
 * -# Call R_OSAL_MmngrClose to close memory handle.
 * @subsection MmngrInvalidate_TC_09_011_016_ereb Expected Result/Behavior
 * -# The return of R_OSAL_MmngrOpen is OSAL_RETURN_OK.<br>
 * The returned handle is not OSAL_MEMORY_MANAGER_HANDLE_INVALID.
 * -# The return value of R_OSAL_MmngrAlloc is OSAL_RETURN_OK.<br>
 * The return buffer is not OSAL_MEMORY_BUFFER_HANDLE_INVALID.
 * -# The return value of R_OSAL_MmngrInvalidate is OSAL_RETURN_PAR.
 * -# The return value of R_OSAL_MmngrDealloc is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrClose is OSAL_RETURN_OK.
 * @subsection MmngrInvalidate_TC_09_011_016_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrInvalidate_TC_09_011_016
 */
// [MmngrInvalidate_TC_09_011_016]
TEST_F(MemoryApiTest, MmngrInvalidate_TC_09_011_016)
{
    // pre-process: open memory manager
    config.memory_limit                = 4096;
    config.max_allowed_allocations     = 1;
    config.max_registered_monitors_cbs = 2;
    config.mode = OSAL_MMNGR_ALLOC_MODE_STACK_PROT;
    size = 4096;
    alignment = 64;

    EXPECT_EQ(R_OSAL_MmngrOpen(&config, &hndl_mmngr), OSAL_RETURN_OK) <<  "pre-process failed";
    EXPECT_NE(hndl_mmngr,OSAL_MEMORY_MANAGER_HANDLE_INVALID) <<  "pre-process failed";

    // Test09_011_016
    // @brief: abnormal case: offset is not aligned by ARM cache line size
    EXPECT_EQ(R_OSAL_MmngrAlloc(hndl_mmngr, size, alignment, &buffer_obj), OSAL_RETURN_OK);
    EXPECT_NE(buffer_obj,OSAL_MEMORY_BUFFER_HANDLE_INVALID);
    offset = 129;
    size = 64;
    EXPECT_EQ(R_OSAL_MmngrInvalidate(buffer_obj, offset, size ), OSAL_RETURN_PAR) << "Test09_011_016 failed";
    EXPECT_EQ(R_OSAL_MmngrDealloc(hndl_mmngr, buffer_obj), OSAL_RETURN_OK);
    buffer_obj = OSAL_MEMORY_BUFFER_HANDLE_INVALID;

    // post-process: close memory manager
    EXPECT_EQ(R_OSAL_MmngrClose(hndl_mmngr), OSAL_RETURN_OK) << "post-process failed";
    hndl_mmngr = OSAL_MEMORY_MANAGER_HANDLE_INVALID;
}
// [MmngrInvalidate_TC_09_011_016]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrInvalidate_TC_09_011_017 MemoryApiTest.MmngrInvalidate_TC_09_011_017
 * @subsection MmngrInvalidate_TC_09_011_017_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrInvalidate_TC_09_011_017_tci Test Case ID
 * MmngrInvalidate_S0_A_TC_09_011_017
 * @subsection MmngrInvalidate_TC_09_011_017_rr Related Requirement(s)
 * \#276557
 * @subsection MmngrInvalidate_TC_09_011_017_pp Prerequisite/Precondition
 * OSAL is initialized.
 * @subsection MmngrInvalidate_TC_09_011_017_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrInvalidate with abnormal condition and mode is OSAL_MMNGR_ALLOC_MODE_STACK_PROT.
 * - pre-process: open new memory manager
 * - Test09_011_017: size is less than minimum required size (64).
 * - post-process: close memory manager
 * @subsection MmngrInvalidate_TC_09_011_017_tpts Test Procedure/Test Steps
 * -# Call R_OSAL_MmngrOpen with bellow config:
 *  - config.memory_limit                = 4096
 *  - config.max_allowed_allocations     = 1
 *  - config.max_registered_monitors_cbs = 2
 *  - config.mode = OSAL_MMNGR_ALLOC_MODE_STACK_PROT
 * -# Call R_OSAL_MmngrAlloc with size is 4096 and alignment is 64 to allocate a memory buffer.
 * -# Call R_OSAL_MmngrInvalidate with offset is 0 and size is 63.
 * -# Call R_OSAL_MmngrDealloc to deallocate the allocated memory buffer.
 * -# Call R_OSAL_MmngrClose to close memory handle.
 * @subsection MmngrInvalidate_TC_09_011_017_ereb Expected Result/Behavior
 * -# The return of R_OSAL_MmngrOpen is OSAL_RETURN_OK.<br>
 * The returned handle is not OSAL_MEMORY_MANAGER_HANDLE_INVALID.
 * -# The return value of R_OSAL_MmngrAlloc is OSAL_RETURN_OK.<br>
 * The return buffer is not OSAL_MEMORY_BUFFER_HANDLE_INVALID.
 * -# The return value of R_OSAL_MmngrInvalidate is OSAL_RETURN_PAR.
 * -# The return value of R_OSAL_MmngrDealloc is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrClose is OSAL_RETURN_OK.
 * @subsection MmngrInvalidate_TC_09_011_017_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrInvalidate_TC_09_011_017
 */
// [MmngrInvalidate_TC_09_011_017]
TEST_F(MemoryApiTest, MmngrInvalidate_TC_09_011_017)
{
    // pre-process: open memory manager
    config.memory_limit                = 4096;
    config.max_allowed_allocations     = 1;
    config.max_registered_monitors_cbs = 2;
    config.mode = OSAL_MMNGR_ALLOC_MODE_STACK_PROT;
    size = 4096;
    alignment = 64;

    EXPECT_EQ(R_OSAL_MmngrOpen(&config, &hndl_mmngr), OSAL_RETURN_OK) <<  "pre-process failed";
    EXPECT_NE(hndl_mmngr,OSAL_MEMORY_MANAGER_HANDLE_INVALID) <<  "pre-process failed";

    // Test09_011_017
    // @brief: abnormal case: size is less than the minimum required size (64Byte)
    EXPECT_EQ(R_OSAL_MmngrAlloc(hndl_mmngr, size, alignment, &buffer_obj), OSAL_RETURN_OK);
    EXPECT_NE(buffer_obj,OSAL_MEMORY_BUFFER_HANDLE_INVALID);
    offset = 0;
    size = 63;
    EXPECT_EQ(R_OSAL_MmngrInvalidate(buffer_obj, offset, size), OSAL_RETURN_PAR) << "Test09_011_017 failed";
    EXPECT_EQ(R_OSAL_MmngrDealloc(hndl_mmngr, buffer_obj), OSAL_RETURN_OK);
    buffer_obj = OSAL_MEMORY_BUFFER_HANDLE_INVALID;

    // post-process: close memory manager
    EXPECT_EQ(R_OSAL_MmngrClose(hndl_mmngr), OSAL_RETURN_OK) << "post-process failed";
    hndl_mmngr = OSAL_MEMORY_MANAGER_HANDLE_INVALID;
}
// [MmngrInvalidate_TC_09_011_017]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrInvalidate_TC_09_011_018 MemoryApiTest.MmngrInvalidate_TC_09_011_018
 * @subsection MmngrInvalidate_TC_09_011_018_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrInvalidate_TC_09_011_018_tci Test Case ID
 * MmngrInvalidate_S3_N_TC_09_011_018
 * @subsection MmngrInvalidate_TC_09_011_018_rr Related Requirement(s)
 * \#276557
 * @subsection MmngrInvalidate_TC_09_011_018_pp Prerequisite/Precondition
 * OSAL is initialized.
 * @subsection MmngrInvalidate_TC_09_011_018_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrInvalidate with normal condition and mode is OSAL_MMNGR_ALLOC_MODE_STACK_PROT.
 * - pre-process: open new memory manager
 * - Test09_011_018: confirm the behavior when allocate a buffer with size is less than the alignment.
 * - post-process: close memory manager
 * @subsection MmngrInvalidate_TC_09_011_018_tpts Test Procedure/Test Steps
 * -# Call R_OSAL_MmngrOpen with bellow config:
 *  - config.memory_limit                = 4096
 *  - config.max_allowed_allocations     = 1
 *  - config.max_registered_monitors_cbs = 2
 *  - config.mode = OSAL_MMNGR_ALLOC_MODE_STACK_PROT
 * -# Call R_OSAL_MmngrAlloc with "size" is 64 and "alignment" is 128 to allocate a memory buffer.
 * -# Call R_OSAL_MmngrGetSize to return the allocated buffer size.
 * -# Call R_OSAL_MmngrInvalidate with size is 64 and offset is 0.
 * -# Call R_OSAL_MmngrDealloc to deallocate the allocated memory buffer.
 * -# Call R_OSAL_MmngrClose to close the handle.
 * @subsection MmngrInvalidate_TC_09_011_018_ereb Expected Result/Behavior
 * -# The return of R_OSAL_MmngrOpen is OSAL_RETURN_OK.<br>
 * The returned handle is not OSAL_MEMORY_MANAGER_HANDLE_INVALID.
 * -# The return value of R_OSAL_MmngrAlloc is OSAL_RETURN_OK.<br>
 * The return buffer is not OSAL_MEMORY_BUFFER_HANDLE_INVALID.
 * -# The return value of R_OSAL_MmngrGetSize is OSAL_RETURN_OK.<br>
 * The return size is 64
 * -# The return value of R_OSAL_MmngrInvalidate is OSAL_RETURN_OK.<br>
 * -# The return value of R_OSAL_MmngrDealloc is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrClose is OSAL_RETURN_OK.<br>
 * @subsection MmngrInvalidate_TC_09_011_018_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrInvalidate_TC_09_011_018
 */
// [MmngrInvalidate_TC_09_011_018]
TEST_F(MemoryApiTest, MmngrInvalidate_TC_09_011_018)
{
    size_t get_size;

    // pre-process: open memory manager
    config.memory_limit                = 4096;
    config.max_allowed_allocations     = 1;
    config.max_registered_monitors_cbs = 2;
    config.mode = OSAL_MMNGR_ALLOC_MODE_STACK_PROT;
    size = 64;
    alignment = 128;

    EXPECT_EQ(R_OSAL_MmngrOpen(&config, &hndl_mmngr), OSAL_RETURN_OK) <<  "pre-process failed";
    EXPECT_NE(hndl_mmngr,OSAL_MEMORY_MANAGER_HANDLE_INVALID) <<  "pre-process failed";

    // Test09_011_018
    // @brief: normal case: Check with the allocated buffer size is less than the alignment.
    EXPECT_EQ(R_OSAL_MmngrAlloc(hndl_mmngr, size, alignment, &buffer_obj), OSAL_RETURN_OK);
    EXPECT_NE(buffer_obj,OSAL_MEMORY_BUFFER_HANDLE_INVALID);
    EXPECT_EQ(R_OSAL_MmngrGetSize(buffer_obj, &get_size), OSAL_RETURN_OK);
    EXPECT_EQ(get_size, 64);
    offset = 0;
    size = 64;
    EXPECT_EQ(R_OSAL_MmngrInvalidate(buffer_obj, offset, size), OSAL_RETURN_OK) << "Test09_011_018 failed";
    EXPECT_EQ(R_OSAL_MmngrDealloc(hndl_mmngr, buffer_obj), OSAL_RETURN_OK);
    buffer_obj = OSAL_MEMORY_BUFFER_HANDLE_INVALID;

    // post-process: close memory manager
    EXPECT_EQ(R_OSAL_MmngrClose(hndl_mmngr), OSAL_RETURN_OK) << "post-process failed";
    hndl_mmngr = OSAL_MEMORY_MANAGER_HANDLE_INVALID;
}
// [MmngrInvalidate_TC_09_011_018]
#endif

#ifndef SKIP_MEMORY_ADDRESS
/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrInvalidate_TC_09_011_019 MemoryApiTest.MmngrInvalidate_TC_09_011_019
 * @subsection MmngrInvalidate_TC_09_011_019_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrInvalidate_TC_09_011_019_tci Test Case ID
 * MmngrInvalidate_S2_A_TC_09_011_019
 * @subsection MmngrInvalidate_TC_09_011_019_rr Related Requirement(s)
 * \#276557
 * @subsection MmngrInvalidate_TC_09_011_019_pp Prerequisite/Precondition
 * OSAL is initialized.
 * @subsection MmngrInvalidate_TC_09_011_019_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrInvalidate with abnormal condition in OSAL_MMNGR_ALLOC_MODE_STACK mode.
 * - pre-process: open memory manager
 * - Test09_011_019: "buffer_obj->p_ptr_self" is invalid.
 * - post-process: close memory manager
 * @subsection MmngrInvalidate_TC_09_011_019_tpts Test Procedure/Test Steps
 * -# Call R_OSAL_MmngrGetOsalMaxConfig to get the valid config then set config mode to OSAL_MMNGR_ALLOC_MODE_STACK
 * -# Call R_OSAL_MmngrOpen with valid parameter and above config.
 * -# Call R_OSAL_MmngrAlloc with valid parameter
 * -# Call R_OSAL_MmngrInvalidate with an invalid buffer_obj->p_ptr_self:
 *      - buffer_obj with p_ptr_self value changed to p_ptr_self_ng
 *      - "p_ptr_self_ng" is allocated by malloc function.
 * -# Deallocate buffer_obj by using R_OSAL_MmngrDeallocate.
 *      - buffer_obj with valid p_ptr_self value
 * -# Call R_OSAL_MmngrClose to close the memory manager.
 * @subsection MmngrInvalidate_TC_09_011_019_ereb Expected Result/Behavior
 * -# The return value of R_OSAL_MmngrGetOsalMaxConfig is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrOpen is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrAlloc is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrInvalidate is OSAL_RETURN_HANDLE.
 * -# The return value of R_OSAL_MmngrDeallocate is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrClose is OSAL_RETURN_OK.
 * @subsection MmngrInvalidate_TC_09_011_019_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrInvalidate_TC_09_011_019
 */
// [MmngrInvalidate_TC_09_011_019]
TEST_F(MemoryApiTest, MmngrInvalidate_TC_09_011_019)
{
    void* ptr_self_bak;
    void* ptr_self_ng;
    offset = 0;
    size = 64;
    alignment = 64;

    // Test09_011_019
    // @brief: abnormal case: handle->p_ptr_self is invalid
    EXPECT_EQ(R_OSAL_MmngrGetOsalMaxConfig(&config), OSAL_RETURN_OK);
    config.mode = OSAL_MMNGR_ALLOC_MODE_STACK;
    EXPECT_EQ(R_OSAL_MmngrOpen(&config, &hndl_mmngr), OSAL_RETURN_OK);
    EXPECT_EQ(R_OSAL_MmngrAlloc(hndl_mmngr, size, alignment, &buffer_obj), OSAL_RETURN_OK);
    ptr_self_bak = buffer_obj->p_ptr_self;
    ptr_self_ng = malloc(0x100);
    memset(ptr_self_ng, 0x0, 0x100);
    buffer_obj->p_ptr_self = ptr_self_ng;
    EXPECT_EQ(R_OSAL_MmngrInvalidate(buffer_obj, offset, size), OSAL_RETURN_HANDLE) << "Test09_011_019 failed";
    free(ptr_self_ng);
    buffer_obj->p_ptr_self = ptr_self_bak;
    EXPECT_EQ(R_OSAL_MmngrDealloc(hndl_mmngr, buffer_obj), OSAL_RETURN_OK) << "Test09_011_019 failed";
    EXPECT_EQ(R_OSAL_MmngrClose(hndl_mmngr), OSAL_RETURN_OK) << "Test09_011_019 failed";
    hndl_mmngr = OSAL_MEMORY_MANAGER_HANDLE_INVALID;
    buffer_obj = OSAL_MEMORY_BUFFER_HANDLE_INVALID;
}
// [MmngrInvalidate_TC_09_011_019]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrInvalidate_TC_09_011_020 MemoryApiTest.MmngrInvalidate_TC_09_011_020
 * @subsection MmngrInvalidate_TC_09_011_020_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrInvalidate_TC_09_011_020_tci Test Case ID
 * MmngrInvalidate_S2_A_TC_09_011_020
 * @subsection MmngrInvalidate_TC_09_011_020_rr Related Requirement(s)
 * \#276557
 * @subsection MmngrInvalidate_TC_09_011_020_pp Prerequisite/Precondition
 * OSAL is initialized.
 * @subsection MmngrInvalidate_TC_09_011_020_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrGetSize with abnormal condition in OSAL_MMNGR_ALLOC_MODE_STACK_PROT mode.
 * - pre-process: open memory manager
 * - Test09_011_020: "buffer_obj->p_ptr_self" is invalid.
 * - post-process: close memory manager
 * @subsection MmngrInvalidate_TC_09_011_020_tpts Test Procedure/Test Steps
 * -# Call R_OSAL_MmngrGetOsalMaxConfig to get the valid config then set config mode to OSAL_MMNGR_ALLOC_MODE_STACK_PROT
 * -# Call R_OSAL_MmngrOpen with valid parameter and above config.
 * -# Call R_OSAL_MmngrAlloc with valid parameter
 * -# Call R_OSAL_MmngrGetSize with an invalid buffer_obj->p_ptr_self:
 *      - buffer_obj with p_ptr_self value changed to p_ptr_self_ng
 *      - "p_ptr_self_ng" is allocated by malloc function.
 * -# Deallocate buffer_obj by using R_OSAL_MmngrDeallocate.
 *      - buffer_obj with valid p_ptr_self value
 * -# Call R_OSAL_MmngrClose to close the memory manager.
 * @subsection MmngrInvalidate_TC_09_011_020_ereb Expected Result/Behavior
 * -# The return value of R_OSAL_MmngrGetOsalMaxConfig is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrOpen is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrAlloc is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrGetSize is OSAL_RETURN_HANDLE.
 * -# The return value of R_OSAL_MmngrDeallocate is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrClose is OSAL_RETURN_OK.
 * @subsection MmngrInvalidate_TC_09_011_020_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrInvalidate_TC_09_011_020
 */
// [MmngrInvalidate_TC_09_011_020]
TEST_F(MemoryApiTest, MmngrInvalidate_TC_09_011_020)
{
    void* ptr_self_bak;
    void* ptr_self_ng;
    offset = 0;
    size = 64;
    alignment = 64;

    // Test09_011_020
    // @brief: abnormal case: handle->p_ptr_self is invalid
    EXPECT_EQ(R_OSAL_MmngrGetOsalMaxConfig(&config), OSAL_RETURN_OK);
    config.mode = OSAL_MMNGR_ALLOC_MODE_STACK_PROT;
    EXPECT_EQ(R_OSAL_MmngrOpen(&config, &hndl_mmngr), OSAL_RETURN_OK);
    EXPECT_EQ(R_OSAL_MmngrAlloc(hndl_mmngr, size, alignment, &buffer_obj), OSAL_RETURN_OK);
    ptr_self_bak = buffer_obj->p_ptr_self;
    ptr_self_ng = malloc(0x100);
    memset(ptr_self_ng, 0x0, 0x100);
    buffer_obj->p_ptr_self = ptr_self_ng;
    EXPECT_EQ(R_OSAL_MmngrInvalidate(buffer_obj, offset, size), OSAL_RETURN_HANDLE) << "Test09_011_020 failed";
    free(ptr_self_ng);
    buffer_obj->p_ptr_self = ptr_self_bak;
    EXPECT_EQ(R_OSAL_MmngrDealloc(hndl_mmngr, buffer_obj), OSAL_RETURN_OK) << "Test09_011_020 failed";
    EXPECT_EQ(R_OSAL_MmngrClose(hndl_mmngr), OSAL_RETURN_OK) << "Test09_011_020 failed";
    hndl_mmngr = OSAL_MEMORY_MANAGER_HANDLE_INVALID;
    buffer_obj = OSAL_MEMORY_BUFFER_HANDLE_INVALID;
}
// [MmngrInvalidate_TC_09_011_020]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrInvalidate_TC_09_011_021 MemoryApiTest.MmngrInvalidate_TC_09_011_021
 * @subsection MmngrInvalidate_TC_09_011_021_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrInvalidate_TC_09_011_021_tci Test Case ID
 * MmngrInvalidate_S4_A_TC_09_011_021
 * @subsection MmngrInvalidate_TC_09_011_021_rr Related Requirement(s)
 * \#276557
 * @subsection MmngrInvalidate_TC_09_011_021_pp Prerequisite/Precondition
 * OSAL is initialized.
 * @subsection MmngrInvalidate_TC_09_011_021_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrGetSize with abnormal condition in OSAL_MMNGR_ALLOC_MODE_FREE_LIST mode.
 * - pre-process: open memory manager
 * - Test09_011_021: "buffer_obj->p_ptr_self" is invalid.
 * - post-process: close memory manager
 * @subsection MmngrInvalidate_TC_09_011_021_tpts Test Procedure/Test Steps
 * -# Call R_OSAL_MmngrGetOsalMaxConfig to get the valid config then set config mode to OSAL_MMNGR_ALLOC_MODE_FREE_LIST
 * -# Call R_OSAL_MmngrOpen with valid parameter and above config.
 * -# Call R_OSAL_MmngrAlloc with valid parameter
 * -# Call R_OSAL_MmngrGetSize with an invalid buffer_obj->p_ptr_self:
 *      - buffer_obj with p_ptr_self value changed to p_ptr_self_ng
 *      - "p_ptr_self_ng" is allocated by malloc function.
 * -# Deallocate buffer_obj by using R_OSAL_MmngrDeallocate.
 *      - buffer_obj with valid p_ptr_self value
 * -# Call R_OSAL_MmngrClose to close the memory manager.
 * @subsection MmngrInvalidate_TC_09_011_021_ereb Expected Result/Behavior
 * -# The return value of R_OSAL_MmngrGetOsalMaxConfig is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrOpen is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrAlloc is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrGetSize is OSAL_RETURN_HANDLE.
 * -# The return value of R_OSAL_MmngrDeallocate is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrClose is OSAL_RETURN_OK.
 * @subsection MmngrInvalidate_TC_09_011_021_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrInvalidate_TC_09_011_021
 */
// [MmngrInvalidate_TC_09_011_021]
TEST_F(MemoryApiTest, MmngrInvalidate_TC_09_011_021)
{
    void* ptr_self_bak;
    void* ptr_self_ng;
    offset = 0;
    size = 64;
    alignment = 64;

    // Test09_011_021
    // @brief: abnormal case: handle->p_ptr_self is invalid
    EXPECT_EQ(R_OSAL_MmngrGetOsalMaxConfig(&config), OSAL_RETURN_OK);
    config.mode = OSAL_MMNGR_ALLOC_MODE_FREE_LIST;
    EXPECT_EQ(R_OSAL_MmngrOpen(&config, &hndl_mmngr), OSAL_RETURN_OK);
    EXPECT_EQ(R_OSAL_MmngrAlloc(hndl_mmngr, size, alignment, &buffer_obj), OSAL_RETURN_OK);
    ptr_self_bak = buffer_obj->p_ptr_self;
    ptr_self_ng = malloc(0x100);
    memset(ptr_self_ng, 0x0, 0x100);
    buffer_obj->p_ptr_self = ptr_self_ng;
    EXPECT_EQ(R_OSAL_MmngrInvalidate(buffer_obj, offset, size), OSAL_RETURN_HANDLE) << "Test09_011_021 failed";
    free(ptr_self_ng);
    buffer_obj->p_ptr_self = ptr_self_bak;
    EXPECT_EQ(R_OSAL_MmngrDealloc(hndl_mmngr, buffer_obj), OSAL_RETURN_OK) << "Test09_011_021 failed";
    EXPECT_EQ(R_OSAL_MmngrClose(hndl_mmngr), OSAL_RETURN_OK) << "Test09_011_021 failed";
    hndl_mmngr = OSAL_MEMORY_MANAGER_HANDLE_INVALID;
    buffer_obj = OSAL_MEMORY_BUFFER_HANDLE_INVALID;
}
// [MmngrInvalidate_TC_09_011_021]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrInvalidate_TC_09_011_022 MemoryApiTest.MmngrInvalidate_TC_09_011_022
 * @subsection MmngrInvalidate_TC_09_011_022_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrInvalidate_TC_09_011_022_tci Test Case ID
 * MmngrInvalidate_S4_A_TC_09_011_022
 * @subsection MmngrInvalidate_TC_09_011_022_rr Related Requirement(s)
 * \#276557
 * @subsection MmngrInvalidate_TC_09_011_022_pp Prerequisite/Precondition
 * OSAL is initialized.
 * @subsection MmngrInvalidate_TC_09_011_022_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrGetSize with abnormal condition in OSAL_MMNGR_ALLOC_MODE_FREE_LIST_PROT mode.
 * - pre-process: open memory manager
 * - Test09_011_022: "buffer_obj->p_ptr_self" is invalid.
 * - post-process: close memory manager
 * @subsection MmngrInvalidate_TC_09_011_022_tpts Test Procedure/Test Steps
 * -# Call R_OSAL_MmngrGetOsalMaxConfig to get the valid config then set config mode to OSAL_MMNGR_ALLOC_MODE_FREE_LIST_PROT
 * -# Call R_OSAL_MmngrOpen with valid parameter and above config.
 * -# Call R_OSAL_MmngrAlloc with valid parameter
 * -# Call R_OSAL_MmngrGetSize with an invalid buffer_obj->p_ptr_self:
 *      - buffer_obj with p_ptr_self value changed to p_ptr_self_ng
 *      - "p_ptr_self_ng" is allocated by malloc function.
 * -# Deallocate buffer_obj by using R_OSAL_MmngrDeallocate.
 *      - buffer_obj with valid p_ptr_self value
 * -# Call R_OSAL_MmngrClose to close the memory manager.
 * @subsection MmngrInvalidate_TC_09_011_022_ereb Expected Result/Behavior
 * -# The return value of R_OSAL_MmngrGetOsalMaxConfig is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrOpen is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrAlloc is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrGetSize is OSAL_RETURN_HANDLE.
 * -# The return value of R_OSAL_MmngrDeallocate is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrClose is OSAL_RETURN_OK.
 * @subsection MmngrInvalidate_TC_09_011_022_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrInvalidate_TC_09_011_022
 */
// [MmngrInvalidate_TC_09_011_022]
TEST_F(MemoryApiTest, MmngrInvalidate_TC_09_011_022)
{
    void* ptr_self_bak;
    void* ptr_self_ng;
    offset = 0;
    size = 64;
    alignment = 64;

    // Test09_011_022
    // @brief: abnormal case: handle->p_ptr_self is invalid
    EXPECT_EQ(R_OSAL_MmngrGetOsalMaxConfig(&config), OSAL_RETURN_OK);
    config.mode = OSAL_MMNGR_ALLOC_MODE_FREE_LIST_PROT;
    EXPECT_EQ(R_OSAL_MmngrOpen(&config, &hndl_mmngr), OSAL_RETURN_OK);
    EXPECT_EQ(R_OSAL_MmngrAlloc(hndl_mmngr, size, alignment, &buffer_obj), OSAL_RETURN_OK);
    ptr_self_bak = buffer_obj->p_ptr_self;
    ptr_self_ng = malloc(0x100);
    memset(ptr_self_ng, 0x0, 0x100);
    buffer_obj->p_ptr_self = ptr_self_ng;
    EXPECT_EQ(R_OSAL_MmngrInvalidate(buffer_obj, offset, size), OSAL_RETURN_HANDLE) << "Test09_011_022 failed";
    free(ptr_self_ng);
    buffer_obj->p_ptr_self = ptr_self_bak;
    EXPECT_EQ(R_OSAL_MmngrDealloc(hndl_mmngr, buffer_obj), OSAL_RETURN_OK) << "Test09_011_022 failed";
    EXPECT_EQ(R_OSAL_MmngrClose(hndl_mmngr), OSAL_RETURN_OK) << "Test09_011_022 failed";
    hndl_mmngr = OSAL_MEMORY_MANAGER_HANDLE_INVALID;
    buffer_obj = OSAL_MEMORY_BUFFER_HANDLE_INVALID;
}
// [MmngrInvalidate_TC_09_011_022]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrInvalidate_TC_09_011_023 MemoryApiTest.MmngrInvalidate_TC_09_011_023
 * @subsection MmngrInvalidate_TC_09_011_023_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrInvalidate_TC_09_011_023_tci Test Case ID
 * MmngrInvalidate_S0_BA_TC_09_011_023
 * @subsection MmngrInvalidate_TC_09_011_023_rr Related Requirement(s)
 * \#276556
 * @subsection MmngrInvalidate_TC_09_011_023_pp Prerequisite/Precondition
 * OSAL is initialized.
 * @subsection MmngrInvalidate_TC_09_011_023_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrInvalidate with abnormal condition and mode is OSAL_MMNGR_ALLOC_MODE_STACK.
 * - pre-process: open new memory manager and allocate buffer
 * - Test09_011_023: size is out of range for the given buffer object (buffer size + 1)
 * - post-process: close memory manager
 * @subsection MmngrInvalidate_TC_09_011_023_tpts Test Procedure/Test Steps
 * -# Call R_OSAL_MmngrOpen with bellow config:
 *  - config.memory_limit                = 4096
 *  - config.max_allowed_allocations     = 1
 *  - config.max_registered_monitors_cbs = 2
 *  - config.mode = OSAL_MMNGR_ALLOC_MODE_STACK
 * -# Call R_OSAL_MmngrAlloc with size is 4096 and alignment is 64 to allocate a memory buffer.
 * -# Call R_OSAL_MmngrInvalidate with offset is 64 and size is buffer size + 1
 * -# Call R_OSAL_MmngrDealloc to deallocate the allocated memory buffer.
 * -# Call R_OSAL_MmngrClose to close memory handle.
 * @subsection MmngrInvalidate_TC_09_011_023_ereb Expected Result/Behavior
 * -# The return of R_OSAL_MmngrOpen is OSAL_RETURN_OK.<br>
 * The returned handle is not OSAL_MEMORY_MANAGER_HANDLE_INVALID.
 * -# The return value of R_OSAL_MmngrAlloc is OSAL_RETURN_OK.<br>
 * The return buffer is not OSAL_MEMORY_BUFFER_HANDLE_INVALID.
 * -# The return value of R_OSAL_MmngrInvalidate is OSAL_RETURN_PAR.
 * -# The return value of R_OSAL_MmngrDealloc is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrClose is OSAL_RETURN_OK.
 * @subsection MmngrInvalidate_TC_09_011_023_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrInvalidate_TC_09_011_023
 */
// [MmngrInvalidate_TC_09_011_023]
TEST_F(MemoryApiTest, MmngrInvalidate_TC_09_011_023)
{
    // pre-process: open memory manager
    config.memory_limit                = 4096;
    config.max_allowed_allocations     = 1;
    config.max_registered_monitors_cbs = 2;
    config.mode = OSAL_MMNGR_ALLOC_MODE_STACK;
    size = 4096;
    alignment = 64;

    EXPECT_EQ(R_OSAL_MmngrOpen(&config, &hndl_mmngr), OSAL_RETURN_OK) <<  "pre-process failed";
    EXPECT_NE(hndl_mmngr,OSAL_MEMORY_MANAGER_HANDLE_INVALID) <<  "pre-process failed";

    // Test09_011_023
    // @brief: abnormal case: size is out of range for the given buffer object (buffer size + 1)
    EXPECT_EQ(R_OSAL_MmngrAlloc(hndl_mmngr, size, alignment, &buffer_obj), OSAL_RETURN_OK);
    EXPECT_NE(buffer_obj,OSAL_MEMORY_BUFFER_HANDLE_INVALID);
    offset = 64;
    size = size + 1;
    EXPECT_EQ(R_OSAL_MmngrInvalidate(buffer_obj, offset, size), OSAL_RETURN_PAR) << "Test09_011_023 failed";
    EXPECT_EQ(R_OSAL_MmngrDealloc(hndl_mmngr, buffer_obj), OSAL_RETURN_OK);
    buffer_obj = OSAL_MEMORY_BUFFER_HANDLE_INVALID;

    // post-process: close memory manager
    EXPECT_EQ(R_OSAL_MmngrClose(hndl_mmngr), OSAL_RETURN_OK) <<  "post-process failed";
}
// [MmngrInvalidate_TC_09_011_023]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrInvalidate_TC_09_011_024 MemoryApiTest.MmngrInvalidate_TC_09_011_024
 * @subsection MmngrInvalidate_TC_09_011_024_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrInvalidate_TC_09_011_024_tci Test Case ID
 * MmngrInvalidate_S0_A_TC_09_011_024
 * @subsection MmngrInvalidate_TC_09_011_024_rr Related Requirement(s)
 * \#276556
 * @subsection MmngrInvalidate_TC_09_011_024_pp Prerequisite/Precondition
 * OSAL is initialized.
 * @subsection MmngrInvalidate_TC_09_011_024_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrInvalidate with abnormal condition and mode is OSAL_MMNGR_ALLOC_MODE_STACK.
 * - pre-process: open new memory manager and allocate buffer
 * - Test09_011_024: size is 0
 * - post-process: close memory manager
 * @subsection MmngrInvalidate_TC_09_011_024_tpts Test Procedure/Test Steps
 * -# Call R_OSAL_MmngrOpen with bellow config:
 *  - config.memory_limit                = 4096
 *  - config.max_allowed_allocations     = 1
 *  - config.max_registered_monitors_cbs = 2
 *  - config.mode = OSAL_MMNGR_ALLOC_MODE_STACK
 * -# Call R_OSAL_MmngrAlloc with size is 4096 and alignment is 64 to allocate a memory buffer.
 * -# Call R_OSAL_MmngrInvalidate with offset is 64 and size is 0
 * -# Call R_OSAL_MmngrDealloc to deallocate the allocated memory buffer.
 * -# Call R_OSAL_MmngrClose to close memory handle.
 * @subsection MmngrInvalidate_TC_09_011_024_ereb Expected Result/Behavior
 * -# The return of R_OSAL_MmngrOpen is OSAL_RETURN_OK.<br>
 * The returned handle is not OSAL_MEMORY_MANAGER_HANDLE_INVALID.
 * -# The return value of R_OSAL_MmngrAlloc is OSAL_RETURN_OK.<br>
 * The return buffer is not OSAL_MEMORY_BUFFER_HANDLE_INVALID.
 * -# The return value of R_OSAL_MmngrInvalidate is OSAL_RETURN_PAR.
 * -# The return value of R_OSAL_MmngrDealloc is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrClose is OSAL_RETURN_OK.
 * @subsection MmngrInvalidate_TC_09_011_024_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrInvalidate_TC_09_011_024
 */
// [MmngrInvalidate_TC_09_011_024]
TEST_F(MemoryApiTest, MmngrInvalidate_TC_09_011_024)
{
    // pre-process: open memory manager
    config.memory_limit                = 4096;
    config.max_allowed_allocations     = 1;
    config.max_registered_monitors_cbs = 2;
    config.mode = OSAL_MMNGR_ALLOC_MODE_STACK;
    size = 4096;
    alignment = 64;

    EXPECT_EQ(R_OSAL_MmngrOpen(&config, &hndl_mmngr), OSAL_RETURN_OK) <<  "pre-process failed";
    EXPECT_NE(hndl_mmngr,OSAL_MEMORY_MANAGER_HANDLE_INVALID) <<  "pre-process failed";

    // Test09_011_024
    // @brief: abnormal case: size is 0
    EXPECT_EQ(R_OSAL_MmngrAlloc(hndl_mmngr, size, alignment, &buffer_obj), OSAL_RETURN_OK);
    EXPECT_NE(buffer_obj,OSAL_MEMORY_BUFFER_HANDLE_INVALID);
    offset = 64;
    size = 0;
    EXPECT_EQ(R_OSAL_MmngrInvalidate(buffer_obj, offset, size), OSAL_RETURN_PAR) << "Test09_011_024 failed";
    EXPECT_EQ(R_OSAL_MmngrDealloc(hndl_mmngr, buffer_obj), OSAL_RETURN_OK);
    buffer_obj = OSAL_MEMORY_BUFFER_HANDLE_INVALID;

    // post-process: close memory manager
    EXPECT_EQ(R_OSAL_MmngrClose(hndl_mmngr), OSAL_RETURN_OK) <<  "post-process failed";
}
// [MmngrInvalidate_TC_09_011_024]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrInvalidate_TC_09_011_025 MemoryApiTest.MmngrInvalidate_TC_09_011_025
 * @subsection MmngrInvalidate_TC_09_011_025_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrInvalidate_TC_09_011_025_tci Test Case ID
 * MmngrInvalidate_S0_BA_TC_09_011_025
 * @subsection MmngrInvalidate_TC_09_011_025_rr Related Requirement(s)
 * \#276556
 * @subsection MmngrInvalidate_TC_09_011_025_pp Prerequisite/Precondition
 * OSAL is initialized.
 * @subsection MmngrInvalidate_TC_09_011_025_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrInvalidate with abnormal condition and mode is OSAL_MMNGR_ALLOC_MODE_STACK_PROT.
 * - pre-process: open new memory manager and allocate buffer
 * - Test09_011_025: size is out of range for the given buffer object (buffer size + 1)
 * - post-process: close memory manager
 * @subsection MmngrInvalidate_TC_09_011_025_tpts Test Procedure/Test Steps
 * -# Call R_OSAL_MmngrOpen with bellow config:
 *  - config.memory_limit                = 4096
 *  - config.max_allowed_allocations     = 1
 *  - config.max_registered_monitors_cbs = 2
 *  - config.mode = OSAL_MMNGR_ALLOC_MODE_STACK_PROT
 * -# Call R_OSAL_MmngrAlloc with size is 4096 and alignment is 64 to allocate a memory buffer.
 * -# Call R_OSAL_MmngrInvalidate with offset is 64 and size is buffer size + 1
 * -# Call R_OSAL_MmngrDealloc to deallocate the allocated memory buffer.
 * -# Call R_OSAL_MmngrClose to close memory handle.
 * @subsection MmngrInvalidate_TC_09_011_025_ereb Expected Result/Behavior
 * -# The return of R_OSAL_MmngrOpen is OSAL_RETURN_OK.<br>
 * The returned handle is not OSAL_MEMORY_MANAGER_HANDLE_INVALID.
 * -# The return value of R_OSAL_MmngrAlloc is OSAL_RETURN_OK.<br>
 * The return buffer is not OSAL_MEMORY_BUFFER_HANDLE_INVALID.
 * -# The return value of R_OSAL_MmngrInvalidate is OSAL_RETURN_PAR.
 * -# The return value of R_OSAL_MmngrDealloc is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrClose is OSAL_RETURN_OK.
 * @subsection MmngrInvalidate_TC_09_011_025_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrInvalidate_TC_09_011_025
 */
// [MmngrInvalidate_TC_09_011_025]
TEST_F(MemoryApiTest, MmngrInvalidate_TC_09_011_025)
{
    // pre-process: open memory manager
    config.memory_limit                = 4096;
    config.max_allowed_allocations     = 1;
    config.max_registered_monitors_cbs = 2;
    config.mode = OSAL_MMNGR_ALLOC_MODE_STACK_PROT;
    size = 4096;
    alignment = 64;

    EXPECT_EQ(R_OSAL_MmngrOpen(&config, &hndl_mmngr), OSAL_RETURN_OK) <<  "pre-process failed";
    EXPECT_NE(hndl_mmngr,OSAL_MEMORY_MANAGER_HANDLE_INVALID) <<  "pre-process failed";

    // Test09_011_025
    // @brief: abnormal case: size is out of range for the given buffer object (buffer size + 1)
    EXPECT_EQ(R_OSAL_MmngrAlloc(hndl_mmngr, size, alignment, &buffer_obj), OSAL_RETURN_OK);
    EXPECT_NE(buffer_obj,OSAL_MEMORY_BUFFER_HANDLE_INVALID);
    offset = 64;
    size = size + 1;
    EXPECT_EQ(R_OSAL_MmngrInvalidate(buffer_obj, offset, size), OSAL_RETURN_PAR) << "Test09_011_025 failed";
    EXPECT_EQ(R_OSAL_MmngrDealloc(hndl_mmngr, buffer_obj), OSAL_RETURN_OK);
    buffer_obj = OSAL_MEMORY_BUFFER_HANDLE_INVALID;

    // post-process: close memory manager
    EXPECT_EQ(R_OSAL_MmngrClose(hndl_mmngr), OSAL_RETURN_OK) <<  "post-process failed";
}
// [MmngrInvalidate_TC_09_011_025]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrInvalidate_TC_09_011_026 MemoryApiTest.MmngrInvalidate_TC_09_011_026
 * @subsection MmngrInvalidate_TC_09_011_026_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrInvalidate_TC_09_011_026_tci Test Case ID
 * MmngrInvalidate_S0_A_TC_09_011_026
 * @subsection MmngrInvalidate_TC_09_011_026_rr Related Requirement(s)
 * \#276556
 * @subsection MmngrInvalidate_TC_09_011_026_pp Prerequisite/Precondition
 * OSAL is initialized.
 * @subsection MmngrInvalidate_TC_09_011_026_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrInvalidate with abnormal condition and mode is OSAL_MMNGR_ALLOC_MODE_STACK_PROT.
 * - pre-process: open new memory manager and allocate buffer
 * - Test09_011_026: size is 0
 * - post-process: close memory manager
 * @subsection MmngrInvalidate_TC_09_011_026_tpts Test Procedure/Test Steps
 * -# Call R_OSAL_MmngrOpen with bellow config:
 *  - config.memory_limit                = 4096
 *  - config.max_allowed_allocations     = 1
 *  - config.max_registered_monitors_cbs = 2
 *  - config.mode = OSAL_MMNGR_ALLOC_MODE_STACK_PROT
 * -# Call R_OSAL_MmngrAlloc with size is 4096 and alignment is 64 to allocate a memory buffer.
 * -# Call R_OSAL_MmngrInvalidate with offset is 64 and size is 0
 * -# Call R_OSAL_MmngrDealloc to deallocate the allocated memory buffer.
 * -# Call R_OSAL_MmngrClose to close memory handle.
 * @subsection MmngrInvalidate_TC_09_011_026_ereb Expected Result/Behavior
 * -# The return of R_OSAL_MmngrOpen is OSAL_RETURN_OK.<br>
 * The returned handle is not OSAL_MEMORY_MANAGER_HANDLE_INVALID.
 * -# The return value of R_OSAL_MmngrAlloc is OSAL_RETURN_OK.<br>
 * The return buffer is not OSAL_MEMORY_BUFFER_HANDLE_INVALID.
 * -# The return value of R_OSAL_MmngrInvalidate is OSAL_RETURN_PAR.
 * -# The return value of R_OSAL_MmngrDealloc is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrClose is OSAL_RETURN_OK.
 * @subsection MmngrInvalidate_TC_09_011_026_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrInvalidate_TC_09_011_026
 */
// [MmngrInvalidate_TC_09_011_026]
TEST_F(MemoryApiTest, MmngrInvalidate_TC_09_011_026)
{
    // pre-process: open memory manager
    config.memory_limit                = 4096;
    config.max_allowed_allocations     = 1;
    config.max_registered_monitors_cbs = 2;
    config.mode = OSAL_MMNGR_ALLOC_MODE_STACK_PROT;
    size = 4096;
    alignment = 64;

    EXPECT_EQ(R_OSAL_MmngrOpen(&config, &hndl_mmngr), OSAL_RETURN_OK) <<  "pre-process failed";
    EXPECT_NE(hndl_mmngr,OSAL_MEMORY_MANAGER_HANDLE_INVALID) <<  "pre-process failed";

    // Test09_011_026
    // @brief: abnormal case: size is 0
    EXPECT_EQ(R_OSAL_MmngrAlloc(hndl_mmngr, size, alignment, &buffer_obj), OSAL_RETURN_OK);
    EXPECT_NE(buffer_obj,OSAL_MEMORY_BUFFER_HANDLE_INVALID);
    offset = 64;
    size = 0;
    EXPECT_EQ(R_OSAL_MmngrInvalidate(buffer_obj, offset, size), OSAL_RETURN_PAR) << "Test09_011_026 failed";
    EXPECT_EQ(R_OSAL_MmngrDealloc(hndl_mmngr, buffer_obj), OSAL_RETURN_OK);
    buffer_obj = OSAL_MEMORY_BUFFER_HANDLE_INVALID;

    // post-process: close memory manager
    EXPECT_EQ(R_OSAL_MmngrClose(hndl_mmngr), OSAL_RETURN_OK) <<  "post-process failed";
}
// [MmngrInvalidate_TC_09_011_026]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrInvalidate_TC_09_011_027 MemoryApiTest.MmngrInvalidate_TC_09_011_027
 * @subsection MmngrInvalidate_TC_09_011_027_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrInvalidate_TC_09_011_027_tci Test Case ID
 * MmngrInvalidate_S0_BA_TC_09_011_027
 * @subsection MmngrInvalidate_TC_09_011_027_rr Related Requirement(s)
 * \#276556
 * @subsection MmngrInvalidate_TC_09_011_027_pp Prerequisite/Precondition
 * OSAL is initialized.
 * @subsection MmngrInvalidate_TC_09_011_027_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrInvalidate with abnormal condition and mode is OSAL_MMNGR_ALLOC_MODE_FREE_LIST.
 * - pre-process: open new memory manager and allocate buffer
 * - Test09_011_027: size is out of range for the given buffer object (buffer size + 1)
 * - post-process: close memory manager
 * @subsection MmngrInvalidate_TC_09_011_027_tpts Test Procedure/Test Steps
 * -# Call R_OSAL_MmngrOpen with bellow config:
 *  - config.memory_limit                = 4096
 *  - config.max_allowed_allocations     = 1
 *  - config.max_registered_monitors_cbs = 2
 *  - config.mode = OSAL_MMNGR_ALLOC_MODE_FREE_LIST
 * -# Call R_OSAL_MmngrAlloc with size is 4096 and alignment is 64 to allocate a memory buffer.
 * -# Call R_OSAL_MmngrInvalidate with offset is 64 and size is buffer size + 1
 * -# Call R_OSAL_MmngrDealloc to deallocate the allocated memory buffer.
 * -# Call R_OSAL_MmngrClose to close memory handle.
 * @subsection MmngrInvalidate_TC_09_011_027_ereb Expected Result/Behavior
 * -# The return of R_OSAL_MmngrOpen is OSAL_RETURN_OK.<br>
 * The returned handle is not OSAL_MEMORY_MANAGER_HANDLE_INVALID.
 * -# The return value of R_OSAL_MmngrAlloc is OSAL_RETURN_OK.<br>
 * The return buffer is not OSAL_MEMORY_BUFFER_HANDLE_INVALID.
 * -# The return value of R_OSAL_MmngrInvalidate is OSAL_RETURN_PAR.
 * -# The return value of R_OSAL_MmngrDealloc is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrClose is OSAL_RETURN_OK.
 * @subsection MmngrInvalidate_TC_09_011_027_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrInvalidate_TC_09_011_027
 */
// [MmngrInvalidate_TC_09_011_027]
TEST_F(MemoryApiTest, MmngrInvalidate_TC_09_011_027)
{
    // pre-process: open memory manager
    config.memory_limit                = 4096;
    config.max_allowed_allocations     = 1;
    config.max_registered_monitors_cbs = 2;
    config.mode = OSAL_MMNGR_ALLOC_MODE_FREE_LIST;
    size = 4096;
    alignment = 64;

    EXPECT_EQ(R_OSAL_MmngrOpen(&config, &hndl_mmngr), OSAL_RETURN_OK) <<  "pre-process failed";
    EXPECT_NE(hndl_mmngr,OSAL_MEMORY_MANAGER_HANDLE_INVALID) <<  "pre-process failed";

    // Test09_011_027
    // @brief: abnormal case: size is out of range for the given buffer object (buffer size + 1)
    EXPECT_EQ(R_OSAL_MmngrAlloc(hndl_mmngr, size, alignment, &buffer_obj), OSAL_RETURN_OK);
    EXPECT_NE(buffer_obj,OSAL_MEMORY_BUFFER_HANDLE_INVALID);
    offset = 64;
    size = size + 1;
    EXPECT_EQ(R_OSAL_MmngrInvalidate(buffer_obj, offset, size), OSAL_RETURN_PAR) << "Test09_011_027 failed";
    EXPECT_EQ(R_OSAL_MmngrDealloc(hndl_mmngr, buffer_obj), OSAL_RETURN_OK);
    buffer_obj = OSAL_MEMORY_BUFFER_HANDLE_INVALID;

    // post-process: close memory manager
    EXPECT_EQ(R_OSAL_MmngrClose(hndl_mmngr), OSAL_RETURN_OK) <<  "post-process failed";
}
// [MmngrInvalidate_TC_09_011_027]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrInvalidate_TC_09_011_028 MemoryApiTest.MmngrInvalidate_TC_09_011_028
 * @subsection MmngrInvalidate_TC_09_011_028_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrInvalidate_TC_09_011_028_tci Test Case ID
 * MmngrInvalidate_S0_A_TC_09_011_028
 * @subsection MmngrInvalidate_TC_09_011_028_rr Related Requirement(s)
 * \#276556
 * @subsection MmngrInvalidate_TC_09_011_028_pp Prerequisite/Precondition
 * OSAL is initialized.
 * @subsection MmngrInvalidate_TC_09_011_028_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrInvalidate with abnormal condition and mode is OSAL_MMNGR_ALLOC_MODE_FREE_LIST.
 * - pre-process: open new memory manager and allocate buffer
 * - Test09_011_028: size is 0
 * - post-process: close memory manager
 * @subsection MmngrInvalidate_TC_09_011_028_tpts Test Procedure/Test Steps
 * -# Call R_OSAL_MmngrOpen with bellow config:
 *  - config.memory_limit                = 4096
 *  - config.max_allowed_allocations     = 1
 *  - config.max_registered_monitors_cbs = 2
 *  - config.mode = OSAL_MMNGR_ALLOC_MODE_FREE_LIST
 * -# Call R_OSAL_MmngrAlloc with size is 4096 and alignment is 64 to allocate a memory buffer.
 * -# Call R_OSAL_MmngrInvalidate with offset is 64 and size is 0
 * -# Call R_OSAL_MmngrDealloc to deallocate the allocated memory buffer.
 * -# Call R_OSAL_MmngrClose to close memory handle.
 * @subsection MmngrInvalidate_TC_09_011_028_ereb Expected Result/Behavior
 * -# The return of R_OSAL_MmngrOpen is OSAL_RETURN_OK.<br>
 * The returned handle is not OSAL_MEMORY_MANAGER_HANDLE_INVALID.
 * -# The return value of R_OSAL_MmngrAlloc is OSAL_RETURN_OK.<br>
 * The return buffer is not OSAL_MEMORY_BUFFER_HANDLE_INVALID.
 * -# The return value of R_OSAL_MmngrInvalidate is OSAL_RETURN_PAR.
 * -# The return value of R_OSAL_MmngrDealloc is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrClose is OSAL_RETURN_OK.
 * @subsection MmngrInvalidate_TC_09_011_028_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrInvalidate_TC_09_011_028
 */
// [MmngrInvalidate_TC_09_011_028]
TEST_F(MemoryApiTest, MmngrInvalidate_TC_09_011_028)
{
    // pre-process: open memory manager
    config.memory_limit                = 4096;
    config.max_allowed_allocations     = 1;
    config.max_registered_monitors_cbs = 2;
    config.mode = OSAL_MMNGR_ALLOC_MODE_FREE_LIST;
    size = 4096;
    alignment = 64;

    EXPECT_EQ(R_OSAL_MmngrOpen(&config, &hndl_mmngr), OSAL_RETURN_OK) <<  "pre-process failed";
    EXPECT_NE(hndl_mmngr,OSAL_MEMORY_MANAGER_HANDLE_INVALID) <<  "pre-process failed";

    // Test09_011_028
    // @brief: abnormal case: size is 0
    EXPECT_EQ(R_OSAL_MmngrAlloc(hndl_mmngr, size, alignment, &buffer_obj), OSAL_RETURN_OK);
    EXPECT_NE(buffer_obj,OSAL_MEMORY_BUFFER_HANDLE_INVALID);
    offset = 64;
    size = 0;
    EXPECT_EQ(R_OSAL_MmngrInvalidate(buffer_obj, offset, size), OSAL_RETURN_PAR) << "Test09_011_028 failed";
    EXPECT_EQ(R_OSAL_MmngrDealloc(hndl_mmngr, buffer_obj), OSAL_RETURN_OK);
    buffer_obj = OSAL_MEMORY_BUFFER_HANDLE_INVALID;

    // post-process: close memory manager
    EXPECT_EQ(R_OSAL_MmngrClose(hndl_mmngr), OSAL_RETURN_OK) <<  "post-process failed";
}
// [MmngrInvalidate_TC_09_011_028]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrInvalidate_TC_09_011_029 MemoryApiTest.MmngrInvalidate_TC_09_011_029
 * @subsection MmngrInvalidate_TC_09_011_029_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrInvalidate_TC_09_011_029_tci Test Case ID
 * MmngrInvalidate_S0_BA_TC_09_011_029
 * @subsection MmngrInvalidate_TC_09_011_029_rr Related Requirement(s)
 * \#276556
 * @subsection MmngrInvalidate_TC_09_011_029_pp Prerequisite/Precondition
 * OSAL is initialized.
 * @subsection MmngrInvalidate_TC_09_011_029_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrInvalidate with abnormal condition and mode is OSAL_MMNGR_ALLOC_MODE_FREE_LIST_PROT.
 * - pre-process: open new memory manager and allocate buffer
 * - Test09_011_029: size is out of range for the given buffer object (buffer size + 1)
 * - post-process: close memory manager
 * @subsection MmngrInvalidate_TC_09_011_029_tpts Test Procedure/Test Steps
 * -# Call R_OSAL_MmngrOpen with bellow config:
 *  - config.memory_limit                = 4096
 *  - config.max_allowed_allocations     = 1
 *  - config.max_registered_monitors_cbs = 2
 *  - config.mode = OSAL_MMNGR_ALLOC_MODE_FREE_LIST_PROT
 * -# Call R_OSAL_MmngrAlloc with size is 4096 and alignment is 64 to allocate a memory buffer.
 * -# Call R_OSAL_MmngrInvalidate with offset is 64 and size is buffer size + 1
 * -# Call R_OSAL_MmngrDealloc to deallocate the allocated memory buffer.
 * -# Call R_OSAL_MmngrClose to close memory handle.
 * @subsection MmngrInvalidate_TC_09_011_029_ereb Expected Result/Behavior
 * -# The return of R_OSAL_MmngrOpen is OSAL_RETURN_OK.<br>
 * The returned handle is not OSAL_MEMORY_MANAGER_HANDLE_INVALID.
 * -# The return value of R_OSAL_MmngrAlloc is OSAL_RETURN_OK.<br>
 * The return buffer is not OSAL_MEMORY_BUFFER_HANDLE_INVALID.
 * -# The return value of R_OSAL_MmngrInvalidate is OSAL_RETURN_PAR.
 * -# The return value of R_OSAL_MmngrDealloc is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrClose is OSAL_RETURN_OK.
 * @subsection MmngrInvalidate_TC_09_011_029_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrInvalidate_TC_09_011_029
 */
// [MmngrInvalidate_TC_09_011_029]
TEST_F(MemoryApiTest, MmngrInvalidate_TC_09_011_029)
{
    // pre-process: open memory manager
    config.memory_limit                = 4096;
    config.max_allowed_allocations     = 1;
    config.max_registered_monitors_cbs = 2;
    config.mode = OSAL_MMNGR_ALLOC_MODE_FREE_LIST_PROT;
    size = 4096;
    alignment = 64;

    EXPECT_EQ(R_OSAL_MmngrOpen(&config, &hndl_mmngr), OSAL_RETURN_OK) <<  "pre-process failed";
    EXPECT_NE(hndl_mmngr,OSAL_MEMORY_MANAGER_HANDLE_INVALID) <<  "pre-process failed";

    // Test09_011_029
    // @brief: abnormal case: size is out of range for the given buffer object (buffer size + 1)
    EXPECT_EQ(R_OSAL_MmngrAlloc(hndl_mmngr, size, alignment, &buffer_obj), OSAL_RETURN_OK);
    EXPECT_NE(buffer_obj,OSAL_MEMORY_BUFFER_HANDLE_INVALID);
    offset = 64;
    size = size + 1;
    EXPECT_EQ(R_OSAL_MmngrInvalidate(buffer_obj, offset, size), OSAL_RETURN_PAR) << "Test09_011_029 failed";
    EXPECT_EQ(R_OSAL_MmngrDealloc(hndl_mmngr, buffer_obj), OSAL_RETURN_OK);
    buffer_obj = OSAL_MEMORY_BUFFER_HANDLE_INVALID;

    // post-process: close memory manager
    EXPECT_EQ(R_OSAL_MmngrClose(hndl_mmngr), OSAL_RETURN_OK) <<  "post-process failed";
}
// [MmngrInvalidate_TC_09_011_029]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrInvalidate_TC_09_011_030 MemoryApiTest.MmngrInvalidate_TC_09_011_030
 * @subsection MmngrInvalidate_TC_09_011_030_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrInvalidate_TC_09_011_030_tci Test Case ID
 * MmngrInvalidate_S0_A_TC_09_011_030
 * @subsection MmngrInvalidate_TC_09_011_030_rr Related Requirement(s)
 * \#276556
 * @subsection MmngrInvalidate_TC_09_011_030_pp Prerequisite/Precondition
 * OSAL is initialized.
 * @subsection MmngrInvalidate_TC_09_011_030_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrInvalidate with abnormal condition and mode is OSAL_MMNGR_ALLOC_MODE_FREE_LIST_PROT.
 * - pre-process: open new memory manager and allocate buffer
 * - Test09_011_030: size is 0
 * - post-process: close memory manager
 * @subsection MmngrInvalidate_TC_09_011_030_tpts Test Procedure/Test Steps
 * -# Call R_OSAL_MmngrOpen with bellow config:
 *  - config.memory_limit                = 4096
 *  - config.max_allowed_allocations     = 1
 *  - config.max_registered_monitors_cbs = 2
 *  - config.mode = OSAL_MMNGR_ALLOC_MODE_FREE_LIST_PROT
 * -# Call R_OSAL_MmngrAlloc with size is 4096 and alignment is 64 to allocate a memory buffer.
 * -# Call R_OSAL_MmngrInvalidate with offset is 64 and size is 0
 * -# Call R_OSAL_MmngrDealloc to deallocate the allocated memory buffer.
 * -# Call R_OSAL_MmngrClose to close memory handle.
 * @subsection MmngrInvalidate_TC_09_011_030_ereb Expected Result/Behavior
 * -# The return of R_OSAL_MmngrOpen is OSAL_RETURN_OK.<br>
 * The returned handle is not OSAL_MEMORY_MANAGER_HANDLE_INVALID.
 * -# The return value of R_OSAL_MmngrAlloc is OSAL_RETURN_OK.<br>
 * The return buffer is not OSAL_MEMORY_BUFFER_HANDLE_INVALID.
 * -# The return value of R_OSAL_MmngrInvalidate is OSAL_RETURN_PAR.
 * -# The return value of R_OSAL_MmngrDealloc is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrClose is OSAL_RETURN_OK.
 * @subsection MmngrInvalidate_TC_09_011_030_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrInvalidate_TC_09_011_030
 */
// [MmngrInvalidate_TC_09_011_030]
TEST_F(MemoryApiTest, MmngrInvalidate_TC_09_011_030)
{
    // pre-process: open memory manager
    config.memory_limit                = 4096;
    config.max_allowed_allocations     = 1;
    config.max_registered_monitors_cbs = 2;
    config.mode = OSAL_MMNGR_ALLOC_MODE_FREE_LIST_PROT;
    size = 4096;
    alignment = 64;

    EXPECT_EQ(R_OSAL_MmngrOpen(&config, &hndl_mmngr), OSAL_RETURN_OK) <<  "pre-process failed";
    EXPECT_NE(hndl_mmngr,OSAL_MEMORY_MANAGER_HANDLE_INVALID) <<  "pre-process failed";

    // Test09_011_030
    // @brief: abnormal case: size is 0
    EXPECT_EQ(R_OSAL_MmngrAlloc(hndl_mmngr, size, alignment, &buffer_obj), OSAL_RETURN_OK);
    EXPECT_NE(buffer_obj,OSAL_MEMORY_BUFFER_HANDLE_INVALID);
    offset = 64;
    size = 0;
    EXPECT_EQ(R_OSAL_MmngrInvalidate(buffer_obj, offset, size), OSAL_RETURN_PAR) << "Test09_011_030 failed";
    EXPECT_EQ(R_OSAL_MmngrDealloc(hndl_mmngr, buffer_obj), OSAL_RETURN_OK);
    buffer_obj = OSAL_MEMORY_BUFFER_HANDLE_INVALID;

    // post-process: close memory manager
    EXPECT_EQ(R_OSAL_MmngrClose(hndl_mmngr), OSAL_RETURN_OK) <<  "post-process failed";
}
// [MmngrInvalidate_TC_09_011_030]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrInvalidate_TC_09_011_031 MemoryApiTest.MmngrInvalidate_TC_09_011_031
 * @subsection MmngrInvalidate_TC_09_011_031_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrInvalidate_TC_09_011_031_tci Test Case ID
 * MmngrInvalidate_S0_BA_TC_09_011_031
 * @subsection MmngrInvalidate_TC_09_011_031_rr Related Requirement(s)
 * \#276556
 * @subsection MmngrInvalidate_TC_09_011_031_pp Prerequisite/Precondition
 * OSAL is initialized.
 * @subsection MmngrInvalidate_TC_09_011_031_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrInvalidate with abnormal condition and mode is OSAL_MMNGR_ALLOC_MODE_STACK.
 * - pre-process: open new memory manager and allocate buffer
 * - Test09_011_031: offset is out of range for the given buffer object (buffer size + 1)
 * - post-process: close memory manager
 * @subsection MmngrInvalidate_TC_09_011_031_tpts Test Procedure/Test Steps
 * -# Call R_OSAL_MmngrOpen with bellow config:
 *  - config.memory_limit                = 4096
 *  - config.max_allowed_allocations     = 1
 *  - config.max_registered_monitors_cbs = 2
 *  - config.mode = OSAL_MMNGR_ALLOC_MODE_STACK
 * -# Call R_OSAL_MmngrAlloc with size is 4096 and alignment is 64 to allocate a memory buffer.
 * -# Call R_OSAL_MmngrInvalidate with offset is buffer size + 1 and size is 64
 * -# Call R_OSAL_MmngrDealloc to deallocate the allocated memory buffer.
 * -# Call R_OSAL_MmngrClose to close memory handle.
 * @subsection MmngrInvalidate_TC_09_011_031_ereb Expected Result/Behavior
 * -# The return of R_OSAL_MmngrOpen is OSAL_RETURN_OK.<br>
 * The returned handle is not OSAL_MEMORY_MANAGER_HANDLE_INVALID.
 * -# The return value of R_OSAL_MmngrAlloc is OSAL_RETURN_OK.<br>
 * The return buffer is not OSAL_MEMORY_BUFFER_HANDLE_INVALID.
 * -# The return value of R_OSAL_MmngrInvalidate is OSAL_RETURN_PAR.
 * -# The return value of R_OSAL_MmngrDealloc is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrClose is OSAL_RETURN_OK.
 * @subsection MmngrInvalidate_TC_09_011_031_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrInvalidate_TC_09_011_031
 */
// [MmngrInvalidate_TC_09_011_031]
TEST_F(MemoryApiTest, MmngrInvalidate_TC_09_011_031)
{
    // pre-process: open memory manager
    config.memory_limit                = 4096;
    config.max_allowed_allocations     = 1;
    config.max_registered_monitors_cbs = 2;
    config.mode = OSAL_MMNGR_ALLOC_MODE_STACK;
    size = 4096;
    alignment = 64;

    EXPECT_EQ(R_OSAL_MmngrOpen(&config, &hndl_mmngr), OSAL_RETURN_OK) <<  "pre-process failed";
    EXPECT_NE(hndl_mmngr,OSAL_MEMORY_MANAGER_HANDLE_INVALID) <<  "pre-process failed";

    // Test09_011_031
    // @brief: abnormal case: offset is out of range for the given buffer object (buffer size + 1)
    EXPECT_EQ(R_OSAL_MmngrAlloc(hndl_mmngr, size, alignment, &buffer_obj), OSAL_RETURN_OK);
    EXPECT_NE(buffer_obj,OSAL_MEMORY_BUFFER_HANDLE_INVALID);
    offset = size + 1;
    size = 64;
    EXPECT_EQ(R_OSAL_MmngrInvalidate(buffer_obj, offset, size), OSAL_RETURN_PAR) << "Test09_011_031 failed";
    EXPECT_EQ(R_OSAL_MmngrDealloc(hndl_mmngr, buffer_obj), OSAL_RETURN_OK);
    buffer_obj = OSAL_MEMORY_BUFFER_HANDLE_INVALID;

    // post-process: close memory manager
    EXPECT_EQ(R_OSAL_MmngrClose(hndl_mmngr), OSAL_RETURN_OK) <<  "post-process failed";
}
// [MmngrInvalidate_TC_09_011_031]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrInvalidate_TC_09_011_032 MemoryApiTest.MmngrInvalidate_TC_09_011_032
 * @subsection MmngrInvalidate_TC_09_011_032_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrInvalidate_TC_09_011_032_tci Test Case ID
 * MmngrInvalidate_S0_BA_TC_09_011_032
 * @subsection MmngrInvalidate_TC_09_011_032_rr Related Requirement(s)
 * \#276556
 * @subsection MmngrInvalidate_TC_09_011_032_pp Prerequisite/Precondition
 * OSAL is initialized.
 * @subsection MmngrInvalidate_TC_09_011_032_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrInvalidate with abnormal condition and mode is OSAL_MMNGR_ALLOC_MODE_STACK_PROT.
 * - pre-process: open new memory manager and allocate buffer
 * - Test09_011_032: offset is out of range for the given buffer object (buffer size + 1)
 * - post-process: close memory manager
 * @subsection MmngrInvalidate_TC_09_011_032_tpts Test Procedure/Test Steps
 * -# Call R_OSAL_MmngrOpen with bellow config:
 *  - config.memory_limit                = 4096
 *  - config.max_allowed_allocations     = 1
 *  - config.max_registered_monitors_cbs = 2
 *  - config.mode = OSAL_MMNGR_ALLOC_MODE_STACK_PROT
 * -# Call R_OSAL_MmngrAlloc with size is 4096 and alignment is 64 to allocate a memory buffer.
 * -# Call R_OSAL_MmngrInvalidate with offset is buffer size + 1 and size is 64
 * -# Call R_OSAL_MmngrDealloc to deallocate the allocated memory buffer.
 * -# Call R_OSAL_MmngrClose to close memory handle.
 * @subsection MmngrInvalidate_TC_09_011_032_ereb Expected Result/Behavior
 * -# The return of R_OSAL_MmngrOpen is OSAL_RETURN_OK.<br>
 * The returned handle is not OSAL_MEMORY_MANAGER_HANDLE_INVALID.
 * -# The return value of R_OSAL_MmngrAlloc is OSAL_RETURN_OK.<br>
 * The return buffer is not OSAL_MEMORY_BUFFER_HANDLE_INVALID.
 * -# The return value of R_OSAL_MmngrInvalidate is OSAL_RETURN_PAR.
 * -# The return value of R_OSAL_MmngrDealloc is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrClose is OSAL_RETURN_OK.
 * @subsection MmngrInvalidate_TC_09_011_032_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrInvalidate_TC_09_011_032
 */
// [MmngrInvalidate_TC_09_011_032]
TEST_F(MemoryApiTest, MmngrInvalidate_TC_09_011_032)
{
    // pre-process: open memory manager
    config.memory_limit                = 4096;
    config.max_allowed_allocations     = 1;
    config.max_registered_monitors_cbs = 2;
    config.mode = OSAL_MMNGR_ALLOC_MODE_STACK_PROT;
    size = 4096;
    alignment = 64;

    EXPECT_EQ(R_OSAL_MmngrOpen(&config, &hndl_mmngr), OSAL_RETURN_OK) <<  "pre-process failed";
    EXPECT_NE(hndl_mmngr,OSAL_MEMORY_MANAGER_HANDLE_INVALID) <<  "pre-process failed";

    // Test09_011_032
    // @brief: abnormal case: offset is out of range for the given buffer object (buffer size + 1)
    EXPECT_EQ(R_OSAL_MmngrAlloc(hndl_mmngr, size, alignment, &buffer_obj), OSAL_RETURN_OK);
    EXPECT_NE(buffer_obj,OSAL_MEMORY_BUFFER_HANDLE_INVALID);
    offset = size + 1;
    size = 64;
    EXPECT_EQ(R_OSAL_MmngrInvalidate(buffer_obj, offset, size), OSAL_RETURN_PAR) << "Test09_011_032 failed";
    EXPECT_EQ(R_OSAL_MmngrDealloc(hndl_mmngr, buffer_obj), OSAL_RETURN_OK);
    buffer_obj = OSAL_MEMORY_BUFFER_HANDLE_INVALID;

    // post-process: close memory manager
    EXPECT_EQ(R_OSAL_MmngrClose(hndl_mmngr), OSAL_RETURN_OK) <<  "post-process failed";
}
// [MmngrInvalidate_TC_09_011_032]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrInvalidate_TC_09_011_033 MemoryApiTest.MmngrInvalidate_TC_09_011_033
 * @subsection MmngrInvalidate_TC_09_011_033_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrInvalidate_TC_09_011_033_tci Test Case ID
 * MmngrInvalidate_S0_BA_TC_09_011_033
 * @subsection MmngrInvalidate_TC_09_011_033_rr Related Requirement(s)
 * \#276556
 * @subsection MmngrInvalidate_TC_09_011_033_pp Prerequisite/Precondition
 * OSAL is initialized.
 * @subsection MmngrInvalidate_TC_09_011_033_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrInvalidate with abnormal condition and mode is OSAL_MMNGR_ALLOC_MODE_FREE_LIST.
 * - pre-process: open new memory manager and allocate buffer
 * - Test09_011_033: offset is out of range for the given buffer object (buffer size + 1)
 * - post-process: close memory manager
 * @subsection MmngrInvalidate_TC_09_011_033_tpts Test Procedure/Test Steps
 * -# Call R_OSAL_MmngrOpen with bellow config:
 *  - config.memory_limit                = 4096
 *  - config.max_allowed_allocations     = 1
 *  - config.max_registered_monitors_cbs = 2
 *  - config.mode = OSAL_MMNGR_ALLOC_MODE_FREE_LIST
 * -# Call R_OSAL_MmngrAlloc with size is 4096 and alignment is 64 to allocate a memory buffer.
 * -# Call R_OSAL_MmngrInvalidate with offset is buffer size + 1 and size is 64
 * -# Call R_OSAL_MmngrDealloc to deallocate the allocated memory buffer.
 * -# Call R_OSAL_MmngrClose to close memory handle.
 * @subsection MmngrInvalidate_TC_09_011_033_ereb Expected Result/Behavior
 * -# The return of R_OSAL_MmngrOpen is OSAL_RETURN_OK.<br>
 * The returned handle is not OSAL_MEMORY_MANAGER_HANDLE_INVALID.
 * -# The return value of R_OSAL_MmngrAlloc is OSAL_RETURN_OK.<br>
 * The return buffer is not OSAL_MEMORY_BUFFER_HANDLE_INVALID.
 * -# The return value of R_OSAL_MmngrInvalidate is OSAL_RETURN_PAR.
 * -# The return value of R_OSAL_MmngrDealloc is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrClose is OSAL_RETURN_OK.
 * @subsection MmngrInvalidate_TC_09_011_033_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrInvalidate_TC_09_011_033
 */
// [MmngrInvalidate_TC_09_011_033]
TEST_F(MemoryApiTest, MmngrInvalidate_TC_09_011_033)
{
    // pre-process: open memory manager
    config.memory_limit                = 4096;
    config.max_allowed_allocations     = 1;
    config.max_registered_monitors_cbs = 2;
    config.mode = OSAL_MMNGR_ALLOC_MODE_FREE_LIST;
    size = 4096;
    alignment = 64;

    EXPECT_EQ(R_OSAL_MmngrOpen(&config, &hndl_mmngr), OSAL_RETURN_OK) <<  "pre-process failed";
    EXPECT_NE(hndl_mmngr,OSAL_MEMORY_MANAGER_HANDLE_INVALID) <<  "pre-process failed";

    // Test09_011_033
    // @brief: abnormal case: offset is out of range for the given buffer object (buffer size + 1)
    EXPECT_EQ(R_OSAL_MmngrAlloc(hndl_mmngr, size, alignment, &buffer_obj), OSAL_RETURN_OK);
    EXPECT_NE(buffer_obj,OSAL_MEMORY_BUFFER_HANDLE_INVALID);
    offset = size + 1;
    size = 64;
    EXPECT_EQ(R_OSAL_MmngrInvalidate(buffer_obj, offset, size), OSAL_RETURN_PAR) << "Test09_011_033 failed";
    EXPECT_EQ(R_OSAL_MmngrDealloc(hndl_mmngr, buffer_obj), OSAL_RETURN_OK);
    buffer_obj = OSAL_MEMORY_BUFFER_HANDLE_INVALID;

    // post-process: close memory manager
    EXPECT_EQ(R_OSAL_MmngrClose(hndl_mmngr), OSAL_RETURN_OK) <<  "post-process failed";
}
// [MmngrInvalidate_TC_09_011_033]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrInvalidate_TC_09_011_034 MemoryApiTest.MmngrInvalidate_TC_09_011_034
 * @subsection MmngrInvalidate_TC_09_011_034_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrInvalidate_TC_09_011_034_tci Test Case ID
 * MmngrInvalidate_S0_BA_TC_09_011_034
 * @subsection MmngrInvalidate_TC_09_011_034_rr Related Requirement(s)
 * \#276556
 * @subsection MmngrInvalidate_TC_09_011_034_pp Prerequisite/Precondition
 * OSAL is initialized.
 * @subsection MmngrInvalidate_TC_09_011_034_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrInvalidate with abnormal condition and mode is OSAL_MMNGR_ALLOC_MODE_FREE_LIST_PROT.
 * - pre-process: open new memory manager and allocate buffer
 * - Test09_011_034: offset is out of range for the given buffer object (buffer size + 1)
 * - post-process: close memory manager
 * @subsection MmngrInvalidate_TC_09_011_034_tpts Test Procedure/Test Steps
 * -# Call R_OSAL_MmngrOpen with bellow config:
 *  - config.memory_limit                = 4096
 *  - config.max_allowed_allocations     = 1
 *  - config.max_registered_monitors_cbs = 2
 *  - config.mode = OSAL_MMNGR_ALLOC_MODE_FREE_LIST_PROT
 * -# Call R_OSAL_MmngrAlloc with size is 4096 and alignment is 64 to allocate a memory buffer.
 * -# Call R_OSAL_MmngrInvalidate with offset is buffer size + 1 and size is 64
 * -# Call R_OSAL_MmngrDealloc to deallocate the allocated memory buffer.
 * -# Call R_OSAL_MmngrClose to close memory handle.
 * @subsection MmngrInvalidate_TC_09_011_034_ereb Expected Result/Behavior
 * -# The return of R_OSAL_MmngrOpen is OSAL_RETURN_OK.<br>
 * The returned handle is not OSAL_MEMORY_MANAGER_HANDLE_INVALID.
 * -# The return value of R_OSAL_MmngrAlloc is OSAL_RETURN_OK.<br>
 * The return buffer is not OSAL_MEMORY_BUFFER_HANDLE_INVALID.
 * -# The return value of R_OSAL_MmngrInvalidate is OSAL_RETURN_PAR.
 * -# The return value of R_OSAL_MmngrDealloc is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrClose is OSAL_RETURN_OK.
 * @subsection MmngrInvalidate_TC_09_011_034_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrInvalidate_TC_09_011_034
 */
// [MmngrInvalidate_TC_09_011_034]
TEST_F(MemoryApiTest, MmngrInvalidate_TC_09_011_034)
{
    // pre-process: open memory manager
    config.memory_limit                = 4096;
    config.max_allowed_allocations     = 1;
    config.max_registered_monitors_cbs = 2;
    config.mode = OSAL_MMNGR_ALLOC_MODE_FREE_LIST_PROT;
    size = 4096;
    alignment = 64;

    EXPECT_EQ(R_OSAL_MmngrOpen(&config, &hndl_mmngr), OSAL_RETURN_OK) <<  "pre-process failed";
    EXPECT_NE(hndl_mmngr,OSAL_MEMORY_MANAGER_HANDLE_INVALID) <<  "pre-process failed";

    // Test09_011_034
    // @brief: abnormal case: offset is out of range for the given buffer object (buffer size + 1)
    EXPECT_EQ(R_OSAL_MmngrAlloc(hndl_mmngr, size, alignment, &buffer_obj), OSAL_RETURN_OK);
    EXPECT_NE(buffer_obj,OSAL_MEMORY_BUFFER_HANDLE_INVALID);
    offset = size + 1;
    size = 64;
    EXPECT_EQ(R_OSAL_MmngrInvalidate(buffer_obj, offset, size), OSAL_RETURN_PAR) << "Test09_011_034 failed";
    EXPECT_EQ(R_OSAL_MmngrDealloc(hndl_mmngr, buffer_obj), OSAL_RETURN_OK);
    buffer_obj = OSAL_MEMORY_BUFFER_HANDLE_INVALID;

    // post-process: close memory manager
    EXPECT_EQ(R_OSAL_MmngrClose(hndl_mmngr), OSAL_RETURN_OK) <<  "post-process failed";
}
// [MmngrInvalidate_TC_09_011_034]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrInvalidate_TC_09_011_035 MemoryApiTest.MmngrInvalidate_TC_09_011_035
 * @subsection MmngrInvalidate_TC_09_011_035_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrInvalidate_TC_09_011_035_tci Test Case ID
 * MmngrInvalidate_S0_A_TC_09_011_035
 * @subsection MmngrInvalidate_TC_09_011_035_rr Related Requirement(s)
 * \#276556
 * @subsection MmngrInvalidate_TC_09_011_035_pp Prerequisite/Precondition
 * OSAL is initialized.
 * @subsection MmngrInvalidate_TC_09_011_035_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrInvalidate with abnormal condition and mode is OSAL_MMNGR_ALLOC_MODE_STACK.
 * - pre-process: open new memory manager and allocate buffer
 * - Test09_011_035: offset alignment is less than 64 bytes
 * - post-process: close memory manager
 * @subsection MmngrInvalidate_TC_09_011_035_tpts Test Procedure/Test Steps
 * -# Call R_OSAL_MmngrOpen with bellow config:
 *  - config.memory_limit                = 4096
 *  - config.max_allowed_allocations     = 1
 *  - config.max_registered_monitors_cbs = 2
 *  - config.mode = OSAL_MMNGR_ALLOC_MODE_STACK
 * -# Call R_OSAL_MmngrAlloc with size is 4096 and alignment is 64 to allocate a memory buffer.
 * -# Call R_OSAL_MmngrInvalidate with offset is 63 and size is 64
 * -# Call R_OSAL_MmngrDealloc to deallocate the allocated memory buffer.
 * -# Call R_OSAL_MmngrClose to close memory handle.
 * @subsection MmngrInvalidate_TC_09_011_035_ereb Expected Result/Behavior
 * -# The return of R_OSAL_MmngrOpen is OSAL_RETURN_OK.<br>
 * The returned handle is not OSAL_MEMORY_MANAGER_HANDLE_INVALID.
 * -# The return value of R_OSAL_MmngrAlloc is OSAL_RETURN_OK.<br>
 * The return buffer is not OSAL_MEMORY_BUFFER_HANDLE_INVALID.
 * -# The return value of R_OSAL_MmngrInvalidate is OSAL_RETURN_PAR.
 * -# The return value of R_OSAL_MmngrDealloc is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrClose is OSAL_RETURN_OK.
 * @subsection MmngrInvalidate_TC_09_011_035_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrInvalidate_TC_09_011_035
 */
// [MmngrInvalidate_TC_09_011_035]
TEST_F(MemoryApiTest, MmngrInvalidate_TC_09_011_035)
{
    // pre-process: open memory manager
    config.memory_limit                = 4096;
    config.max_allowed_allocations     = 1;
    config.max_registered_monitors_cbs = 2;
    config.mode = OSAL_MMNGR_ALLOC_MODE_STACK;
    size = 4096;
    alignment = 64;

    EXPECT_EQ(R_OSAL_MmngrOpen(&config, &hndl_mmngr), OSAL_RETURN_OK) <<  "pre-process failed";
    EXPECT_NE(hndl_mmngr,OSAL_MEMORY_MANAGER_HANDLE_INVALID) <<  "pre-process failed";

    // Test09_011_035
    // @brief: abnormal case: offset alignment is less than 64 bytes
    EXPECT_EQ(R_OSAL_MmngrAlloc(hndl_mmngr, size, alignment, &buffer_obj), OSAL_RETURN_OK);
    EXPECT_NE(buffer_obj,OSAL_MEMORY_BUFFER_HANDLE_INVALID);
    offset = 63;
    size = 64;
    EXPECT_EQ(R_OSAL_MmngrInvalidate(buffer_obj, offset, size), OSAL_RETURN_PAR) << "Test09_011_035 failed";
    EXPECT_EQ(R_OSAL_MmngrDealloc(hndl_mmngr, buffer_obj), OSAL_RETURN_OK);
    buffer_obj = OSAL_MEMORY_BUFFER_HANDLE_INVALID;

    // post-process: close memory manager
    EXPECT_EQ(R_OSAL_MmngrClose(hndl_mmngr), OSAL_RETURN_OK) <<  "post-process failed";
}
// [MmngrInvalidate_TC_09_011_035]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrInvalidate_TC_09_011_036 MemoryApiTest.MmngrInvalidate_TC_09_011_036
 * @subsection MmngrInvalidate_TC_09_011_036_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrInvalidate_TC_09_011_036_tci Test Case ID
 * MmngrInvalidate_S0_A_TC_09_011_036
 * @subsection MmngrInvalidate_TC_09_011_036_rr Related Requirement(s)
 * \#276556
 * @subsection MmngrInvalidate_TC_09_011_036_pp Prerequisite/Precondition
 * OSAL is initialized.
 * @subsection MmngrInvalidate_TC_09_011_036_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrInvalidate with abnormal condition and mode is OSAL_MMNGR_ALLOC_MODE_STACK_PROT.
 * - pre-process: open new memory manager and allocate buffer
 * - Test09_011_036: offset alignment is less than 64 bytes
 * - post-process: close memory manager
 * @subsection MmngrInvalidate_TC_09_011_036_tpts Test Procedure/Test Steps
 * -# Call R_OSAL_MmngrOpen with bellow config:
 *  - config.memory_limit                = 4096
 *  - config.max_allowed_allocations     = 1
 *  - config.max_registered_monitors_cbs = 2
 *  - config.mode = OSAL_MMNGR_ALLOC_MODE_STACK_PROT
 * -# Call R_OSAL_MmngrAlloc with size is 4096 and alignment is 64 to allocate a memory buffer.
 * -# Call R_OSAL_MmngrInvalidate with offset is 63 and size is 64
 * -# Call R_OSAL_MmngrDealloc to deallocate the allocated memory buffer.
 * -# Call R_OSAL_MmngrClose to close memory handle.
 * @subsection MmngrInvalidate_TC_09_011_036_ereb Expected Result/Behavior
 * -# The return of R_OSAL_MmngrOpen is OSAL_RETURN_OK.<br>
 * The returned handle is not OSAL_MEMORY_MANAGER_HANDLE_INVALID.
 * -# The return value of R_OSAL_MmngrAlloc is OSAL_RETURN_OK.<br>
 * The return buffer is not OSAL_MEMORY_BUFFER_HANDLE_INVALID.
 * -# The return value of R_OSAL_MmngrInvalidate is OSAL_RETURN_PAR.
 * -# The return value of R_OSAL_MmngrDealloc is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrClose is OSAL_RETURN_OK.
 * @subsection MmngrInvalidate_TC_09_011_036_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrInvalidate_TC_09_011_036
 */
// [MmngrInvalidate_TC_09_011_036]
TEST_F(MemoryApiTest, MmngrInvalidate_TC_09_011_036)
{
    // pre-process: open memory manager
    config.memory_limit                = 4096;
    config.max_allowed_allocations     = 1;
    config.max_registered_monitors_cbs = 2;
    config.mode = OSAL_MMNGR_ALLOC_MODE_STACK_PROT;
    size = 4096;
    alignment = 64;

    EXPECT_EQ(R_OSAL_MmngrOpen(&config, &hndl_mmngr), OSAL_RETURN_OK) <<  "pre-process failed";
    EXPECT_NE(hndl_mmngr,OSAL_MEMORY_MANAGER_HANDLE_INVALID) <<  "pre-process failed";

    // Test09_011_036
    // @brief: abnormal case: offset alignment is less than 64 bytes
    EXPECT_EQ(R_OSAL_MmngrAlloc(hndl_mmngr, size, alignment, &buffer_obj), OSAL_RETURN_OK);
    EXPECT_NE(buffer_obj,OSAL_MEMORY_BUFFER_HANDLE_INVALID);
    offset = 63;
    size = 64;
    EXPECT_EQ(R_OSAL_MmngrInvalidate(buffer_obj, offset, size), OSAL_RETURN_PAR) << "Test09_011_036 failed";
    EXPECT_EQ(R_OSAL_MmngrDealloc(hndl_mmngr, buffer_obj), OSAL_RETURN_OK);
    buffer_obj = OSAL_MEMORY_BUFFER_HANDLE_INVALID;

    // post-process: close memory manager
    EXPECT_EQ(R_OSAL_MmngrClose(hndl_mmngr), OSAL_RETURN_OK) <<  "post-process failed";
}
// [MmngrInvalidate_TC_09_011_036]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrInvalidate_TC_09_011_037 MemoryApiTest.MmngrInvalidate_TC_09_011_037
 * @subsection MmngrInvalidate_TC_09_011_037_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrInvalidate_TC_09_011_037_tci Test Case ID
 * MmngrInvalidate_S0_A_TC_09_011_037
 * @subsection MmngrInvalidate_TC_09_011_037_rr Related Requirement(s)
 * \#276556
 * @subsection MmngrInvalidate_TC_09_011_037_pp Prerequisite/Precondition
 * OSAL is initialized.
 * @subsection MmngrInvalidate_TC_09_011_037_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrInvalidate with abnormal condition and mode is OSAL_MMNGR_ALLOC_MODE_FREE_LIST.
 * - pre-process: open new memory manager and allocate buffer
 * - Test09_011_037: offset alignment is less than 64 bytes
 * - post-process: close memory manager
 * @subsection MmngrInvalidate_TC_09_011_037_tpts Test Procedure/Test Steps
 * -# Call R_OSAL_MmngrOpen with bellow config:
 *  - config.memory_limit                = 4096
 *  - config.max_allowed_allocations     = 1
 *  - config.max_registered_monitors_cbs = 2
 *  - config.mode = OSAL_MMNGR_ALLOC_MODE_FREE_LIST
 * -# Call R_OSAL_MmngrAlloc with size is 4096 and alignment is 64 to allocate a memory buffer.
 * -# Call R_OSAL_MmngrInvalidate with offset is 63 and size is 64
 * -# Call R_OSAL_MmngrDealloc to deallocate the allocated memory buffer.
 * -# Call R_OSAL_MmngrClose to close memory handle.
 * @subsection MmngrInvalidate_TC_09_011_037_ereb Expected Result/Behavior
 * -# The return of R_OSAL_MmngrOpen is OSAL_RETURN_OK.<br>
 * The returned handle is not OSAL_MEMORY_MANAGER_HANDLE_INVALID.
 * -# The return value of R_OSAL_MmngrAlloc is OSAL_RETURN_OK.<br>
 * The return buffer is not OSAL_MEMORY_BUFFER_HANDLE_INVALID.
 * -# The return value of R_OSAL_MmngrInvalidate is OSAL_RETURN_PAR.
 * -# The return value of R_OSAL_MmngrDealloc is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrClose is OSAL_RETURN_OK.
 * @subsection MmngrInvalidate_TC_09_011_037_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrInvalidate_TC_09_011_037
 */
// [MmngrInvalidate_TC_09_011_037]
TEST_F(MemoryApiTest, MmngrInvalidate_TC_09_011_037)
{
    // pre-process: open memory manager
    config.memory_limit                = 4096;
    config.max_allowed_allocations     = 1;
    config.max_registered_monitors_cbs = 2;
    config.mode = OSAL_MMNGR_ALLOC_MODE_FREE_LIST;
    size = 4096;
    alignment = 64;

    EXPECT_EQ(R_OSAL_MmngrOpen(&config, &hndl_mmngr), OSAL_RETURN_OK) <<  "pre-process failed";
    EXPECT_NE(hndl_mmngr,OSAL_MEMORY_MANAGER_HANDLE_INVALID) <<  "pre-process failed";

    // Test09_011_037
    // @brief: abnormal case: offset alignment is less than 64 bytes
    EXPECT_EQ(R_OSAL_MmngrAlloc(hndl_mmngr, size, alignment, &buffer_obj), OSAL_RETURN_OK);
    EXPECT_NE(buffer_obj,OSAL_MEMORY_BUFFER_HANDLE_INVALID);
    offset = 63;
    size = 64;
    EXPECT_EQ(R_OSAL_MmngrInvalidate(buffer_obj, offset, size), OSAL_RETURN_PAR) << "Test09_011_037 failed";
    EXPECT_EQ(R_OSAL_MmngrDealloc(hndl_mmngr, buffer_obj), OSAL_RETURN_OK);
    buffer_obj = OSAL_MEMORY_BUFFER_HANDLE_INVALID;

    // post-process: close memory manager
    EXPECT_EQ(R_OSAL_MmngrClose(hndl_mmngr), OSAL_RETURN_OK) <<  "post-process failed";
}
// [MmngrInvalidate_TC_09_011_037]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrInvalidate_TC_09_011_038 MemoryApiTest.MmngrInvalidate_TC_09_011_038
 * @subsection MmngrInvalidate_TC_09_011_038_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrInvalidate_TC_09_011_038_tci Test Case ID
 * MmngrInvalidate_S0_A_TC_09_011_038
 * @subsection MmngrInvalidate_TC_09_011_038_rr Related Requirement(s)
 * \#276556
 * @subsection MmngrInvalidate_TC_09_011_038_pp Prerequisite/Precondition
 * OSAL is initialized.
 * @subsection MmngrInvalidate_TC_09_011_038_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrInvalidate with abnormal condition and mode is OSAL_MMNGR_ALLOC_MODE_FREE_LIST_PROT.
 * - pre-process: open new memory manager and allocate buffer
 * - Test09_011_038: offset alignment is less than 64 bytes
 * - post-process: close memory manager
 * @subsection MmngrInvalidate_TC_09_011_038_tpts Test Procedure/Test Steps
 * -# Call R_OSAL_MmngrOpen with bellow config:
 *  - config.memory_limit                = 4096
 *  - config.max_allowed_allocations     = 1
 *  - config.max_registered_monitors_cbs = 2
 *  - config.mode = OSAL_MMNGR_ALLOC_MODE_FREE_LIST_PROT
 * -# Call R_OSAL_MmngrAlloc with size is 4096 and alignment is 64 to allocate a memory buffer.
 * -# Call R_OSAL_MmngrInvalidate with offset is 63 and size is 64
 * -# Call R_OSAL_MmngrDealloc to deallocate the allocated memory buffer.
 * -# Call R_OSAL_MmngrClose to close memory handle.
 * @subsection MmngrInvalidate_TC_09_011_038_ereb Expected Result/Behavior
 * -# The return of R_OSAL_MmngrOpen is OSAL_RETURN_OK.<br>
 * The returned handle is not OSAL_MEMORY_MANAGER_HANDLE_INVALID.
 * -# The return value of R_OSAL_MmngrAlloc is OSAL_RETURN_OK.<br>
 * The return buffer is not OSAL_MEMORY_BUFFER_HANDLE_INVALID.
 * -# The return value of R_OSAL_MmngrInvalidate is OSAL_RETURN_PAR.
 * -# The return value of R_OSAL_MmngrDealloc is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrClose is OSAL_RETURN_OK.
 * @subsection MmngrInvalidate_TC_09_011_038_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrInvalidate_TC_09_011_038
 */
// [MmngrInvalidate_TC_09_011_038]
TEST_F(MemoryApiTest, MmngrInvalidate_TC_09_011_038)
{
    // pre-process: open memory manager
    config.memory_limit                = 4096;
    config.max_allowed_allocations     = 1;
    config.max_registered_monitors_cbs = 2;
    config.mode = OSAL_MMNGR_ALLOC_MODE_FREE_LIST_PROT;
    size = 4096;
    alignment = 64;

    EXPECT_EQ(R_OSAL_MmngrOpen(&config, &hndl_mmngr), OSAL_RETURN_OK) <<  "pre-process failed";
    EXPECT_NE(hndl_mmngr,OSAL_MEMORY_MANAGER_HANDLE_INVALID) <<  "pre-process failed";

    // Test09_011_038
    // @brief: abnormal case: offset alignment is less than 64 bytes
    EXPECT_EQ(R_OSAL_MmngrAlloc(hndl_mmngr, size, alignment, &buffer_obj), OSAL_RETURN_OK);
    EXPECT_NE(buffer_obj,OSAL_MEMORY_BUFFER_HANDLE_INVALID);
    offset = 63;
    size = 64;
    EXPECT_EQ(R_OSAL_MmngrInvalidate(buffer_obj, offset, size), OSAL_RETURN_PAR) << "Test09_011_038 failed";
    EXPECT_EQ(R_OSAL_MmngrDealloc(hndl_mmngr, buffer_obj), OSAL_RETURN_OK);
    buffer_obj = OSAL_MEMORY_BUFFER_HANDLE_INVALID;

    // post-process: close memory manager
    EXPECT_EQ(R_OSAL_MmngrClose(hndl_mmngr), OSAL_RETURN_OK) <<  "post-process failed";
}
// [MmngrInvalidate_TC_09_011_038]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrInvalidate_TC_09_011_039 MemoryApiTest.MmngrInvalidate_TC_09_011_039
 * @subsection MmngrInvalidate_TC_09_011_039_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrInvalidate_TC_09_011_039_tci Test Case ID
 * MmngrInvalidate_S2_A_TC_09_011_039
 * @subsection MmngrInvalidate_TC_09_011_039_rr Related Requirement(s)
 * \#276557
 * @subsection MmngrInvalidate_TC_09_011_039_pp Prerequisite/Precondition
 * OSAL is initialized.
 * @subsection MmngrInvalidate_TC_09_011_039_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrInvalidate with abnormal condition and mode is OSAL_MMNGR_ALLOC_MODE_FREE_LIST.
 * - Test09_011_039: The buffer object has already been deallocated
 * @subsection MmngrInvalidate_TC_09_011_039_tpts Test Procedure/Test Steps
 * -# Call R_OSAL_MmngrOpen with bellow config:
 *  - config.memory_limit                = 4096
 *  - config.max_allowed_allocations     = 1
 *  - config.max_registered_monitors_cbs = 2
 *  - config.mode = OSAL_MMNGR_ALLOC_MODE_FREE_LIST
 * -# Call R_OSAL_MmngrAlloc to allocate a memory buffer.
 * -# Call R_OSAL_MmngrDealloc to deallocate the allocated memory buffer.
 * -# Call R_OSAL_MmngrInvalidate with offset is 0, size is 64.
 * -# Call R_OSAL_MmngrClose to close memory handle.
 * @subsection MmngrInvalidate_TC_09_011_039_ereb Expected Result/Behavior
 * -# The return of R_OSAL_MmngrOpen is OSAL_RETURN_OK.<br>
 * The returned handle is not OSAL_MEMORY_MANAGER_HANDLE_INVALID.
 * -# The return value of R_OSAL_MmngrAlloc is OSAL_RETURN_OK.<br>
 * the return buffer is not OSAL_MEMORY_BUFFER_HANDLE_INVALID.
 * -# The return value of R_OSAL_MmngrDealloc is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrInvalidate is OSAL_RETURN_HANDLE.
 * -# The return value of R_OSAL_MmngrClose is OSAL_RETURN_OK.
 * @subsection MmngrInvalidate_TC_09_011_039_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrInvalidate_TC_09_011_039
 */
// [MmngrInvalidate_TC_09_011_039]
TEST_F(MemoryApiTest, MmngrInvalidate_TC_09_011_039)
{
    // Test09_011_039
    // @brief: abnormal case: The buffer object has already been deallocated
    config.memory_limit                = 4096;
    config.max_allowed_allocations     = 1;
    config.max_registered_monitors_cbs = 2;
    config.mode = OSAL_MMNGR_ALLOC_MODE_FREE_LIST;
    size = 4096;
    alignment = 64;

    EXPECT_EQ(R_OSAL_MmngrOpen(&config, &hndl_mmngr), OSAL_RETURN_OK) << "Test09_011_039 failed";
    EXPECT_NE(hndl_mmngr,OSAL_MEMORY_MANAGER_HANDLE_INVALID) << "Test09_011_039 failed";
    EXPECT_EQ(R_OSAL_MmngrAlloc(hndl_mmngr, size, alignment, &buffer_obj), OSAL_RETURN_OK) << "Test09_011_039 failed";
    EXPECT_NE(buffer_obj,OSAL_MEMORY_BUFFER_HANDLE_INVALID) << "Test09_011_039 failed";
    EXPECT_EQ(R_OSAL_MmngrDealloc(hndl_mmngr, buffer_obj), OSAL_RETURN_OK) << "Test09_011_039 failed";
    offset = 0;
    size = 64;
    EXPECT_EQ(R_OSAL_MmngrInvalidate(buffer_obj, offset, size), OSAL_RETURN_HANDLE) << "Test09_011_039 failed";
    EXPECT_EQ(R_OSAL_MmngrClose(hndl_mmngr), OSAL_RETURN_OK) << "Test09_011_039 failed";
    hndl_mmngr = OSAL_MEMORY_MANAGER_HANDLE_INVALID;
    buffer_obj = OSAL_MEMORY_BUFFER_HANDLE_INVALID;
}
// [MmngrInvalidate_TC_09_011_039]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrInvalidate_TC_09_011_040 MemoryApiTest.MmngrInvalidate_TC_09_011_040
 * @subsection MmngrInvalidate_TC_09_011_040_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrInvalidate_TC_09_011_040_tci Test Case ID
 * MmngrInvalidate_S2_A_TC_09_011_040
 * @subsection MmngrInvalidate_TC_09_011_040_rr Related Requirement(s)
 * \#276557
 * @subsection MmngrInvalidate_TC_09_011_040_pp Prerequisite/Precondition
 * OSAL is initialized.
 * @subsection MmngrInvalidate_TC_09_011_040_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrInvalidate with abnormal condition and mode is OSAL_MMNGR_ALLOC_MODE_FREE_LIST_PROT.
 * - Test09_011_040: The buffer object has already been deallocated
 * @subsection MmngrInvalidate_TC_09_011_040_tpts Test Procedure/Test Steps
 * -# Call R_OSAL_MmngrOpen with bellow config:
 *  - config.memory_limit                = 4096
 *  - config.max_allowed_allocations     = 1
 *  - config.max_registered_monitors_cbs = 2
 *  - config.mode = OSAL_MMNGR_ALLOC_MODE_FREE_LIST_PROT
 * -# Call R_OSAL_MmngrAlloc to allocate a memory buffer.
 * -# Call R_OSAL_MmngrDealloc to deallocate the allocated memory buffer.
 * -# Call R_OSAL_MmngrInvalidate with offset is 0, size is 64.
 * -# Call R_OSAL_MmngrClose to close memory handle.
 * @subsection MmngrInvalidate_TC_09_011_040_ereb Expected Result/Behavior
 * -# The return of R_OSAL_MmngrOpen is OSAL_RETURN_OK.<br>
 * The returned handle is not OSAL_MEMORY_MANAGER_HANDLE_INVALID.
 * -# The return value of R_OSAL_MmngrAlloc is OSAL_RETURN_OK.<br>
 * the return buffer is not OSAL_MEMORY_BUFFER_HANDLE_INVALID.
 * -# The return value of R_OSAL_MmngrDealloc is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrInvalidate is OSAL_RETURN_HANDLE.
 * -# The return value of R_OSAL_MmngrClose is OSAL_RETURN_OK.
 * @subsection MmngrInvalidate_TC_09_011_040_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrInvalidate_TC_09_011_040
 */
// [MmngrInvalidate_TC_09_011_040]
TEST_F(MemoryApiTest, MmngrInvalidate_TC_09_011_040)
{
    // Test09_011_040
    // @brief: abnormal case: The buffer object has already been deallocated
    config.memory_limit                = 4096;
    config.max_allowed_allocations     = 1;
    config.max_registered_monitors_cbs = 2;
    config.mode = OSAL_MMNGR_ALLOC_MODE_FREE_LIST_PROT;
    size = 4096;
    alignment = 64;

    EXPECT_EQ(R_OSAL_MmngrOpen(&config, &hndl_mmngr), OSAL_RETURN_OK) << "Test09_011_040 failed";
    EXPECT_NE(hndl_mmngr,OSAL_MEMORY_MANAGER_HANDLE_INVALID) << "Test09_011_040 failed";
    EXPECT_EQ(R_OSAL_MmngrAlloc(hndl_mmngr, size, alignment, &buffer_obj), OSAL_RETURN_OK) << "Test09_011_040 failed";
    EXPECT_NE(buffer_obj,OSAL_MEMORY_BUFFER_HANDLE_INVALID) << "Test09_011_040 failed";
    EXPECT_EQ(R_OSAL_MmngrDealloc(hndl_mmngr, buffer_obj), OSAL_RETURN_OK) << "Test09_011_040 failed";
    offset = 0;
    size = 64;
    EXPECT_EQ(R_OSAL_MmngrInvalidate(buffer_obj, offset, size), OSAL_RETURN_HANDLE) << "Test09_011_040 failed";
    EXPECT_EQ(R_OSAL_MmngrClose(hndl_mmngr), OSAL_RETURN_OK) << "Test09_011_040 failed";
    hndl_mmngr = OSAL_MEMORY_MANAGER_HANDLE_INVALID;
    buffer_obj = OSAL_MEMORY_BUFFER_HANDLE_INVALID;
}
// [MmngrInvalidate_TC_09_011_040]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrInvalidate_TC_09_011_041 MemoryApiTest.MmngrInvalidate_TC_09_011_041
 * @subsection MmngrInvalidate_TC_09_011_041_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrInvalidate_TC_09_011_041_tci Test Case ID
 * MmngrInvalidate_S4_A_TC_09_011_041
 * @subsection MmngrInvalidate_TC_09_011_041_rr Related Requirement(s)
 * \#276557
 * @subsection MmngrInvalidate_TC_09_011_041_pp Prerequisite/Precondition
 * OSAL is initialized.
 * @subsection MmngrInvalidate_TC_09_011_041_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrInvalidate with abnormal condition and mode is OSAL_MMNGR_ALLOC_MODE_STACK.
 * - Test09_011_041: buffer_obj->mmngr_owner_hndl->p_ptr_self is invalid (NULL)
 * @subsection MmngrInvalidate_TC_09_011_041_tpts Test Procedure/Test Steps
 * -# Call R_OSAL_MmngrOpen with bellow config:
 *  - config.memory_limit                = 4096
 *  - config.max_allowed_allocations     = 1
 *  - config.max_registered_monitors_cbs = 2
 *  - config.mode = OSAL_MMNGR_ALLOC_MODE_STACK
 * -# Call R_OSAL_MmngrAlloc to allocate a memory buffer.
 * -# Call R_OSAL_MmngrInvalidate with buffer_obj->mmngr_owner_hndl->p_ptr_self is invalid (NULL)
 * -# Call R_OSAL_MmngrDealloc to deallocate the allocated memory buffer.
 * -# Call R_OSAL_MmngrClose to close memory handle.
 * @subsection MmngrInvalidate_TC_09_011_041_ereb Expected Result/Behavior
 * -# The return of R_OSAL_MmngrOpen is OSAL_RETURN_OK.<br>
 * The returned handle is not OSAL_MEMORY_MANAGER_HANDLE_INVALID.
 * -# The return value of R_OSAL_MmngrAlloc is OSAL_RETURN_OK.<br>
 * the return buffer is not OSAL_MEMORY_BUFFER_HANDLE_INVALID.
 * -# The return value of R_OSAL_MmngrInvalidate is OSAL_RETURN_HANDLE.
 * -# The return value of R_OSAL_MmngrDealloc is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrClose is OSAL_RETURN_OK.
 * @subsection MmngrInvalidate_TC_09_011_041_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrInvalidate_TC_09_011_041
 */
// [MmngrInvalidate_TC_09_011_041]
TEST_F(MemoryApiTest, MmngrInvalidate_TC_09_011_041)
{
    void *bk_ptr_self;

    // Test09_011_041
    // @brief: abnormal case: buffer_obj->mmngr_owner_hndl->p_ptr_self is invalid (NULL)
    config.memory_limit                = 4096;
    config.max_allowed_allocations     = 1;
    config.max_registered_monitors_cbs = 2;
    config.mode = OSAL_MMNGR_ALLOC_MODE_STACK;
    size = 4096;
    alignment = 64;

    EXPECT_EQ(R_OSAL_MmngrOpen(&config, &hndl_mmngr), OSAL_RETURN_OK) << "Test09_011_041 failed";
    EXPECT_NE(hndl_mmngr,OSAL_MEMORY_MANAGER_HANDLE_INVALID) << "Test09_011_041 failed";
    EXPECT_EQ(R_OSAL_MmngrAlloc(hndl_mmngr, size, alignment, &buffer_obj), OSAL_RETURN_OK) << "Test09_011_041 failed";
    EXPECT_NE(buffer_obj,OSAL_MEMORY_BUFFER_HANDLE_INVALID) << "Test09_011_041 failed";
    bk_ptr_self = buffer_obj->mmngr_owner_hndl->p_ptr_self;
    buffer_obj->mmngr_owner_hndl->p_ptr_self = NULL;
    offset = 0;
    size = 64;
    EXPECT_EQ(R_OSAL_MmngrInvalidate(buffer_obj, offset, size), OSAL_RETURN_HANDLE) << "Test09_011_041 failed";
    buffer_obj->mmngr_owner_hndl->p_ptr_self = bk_ptr_self;
    EXPECT_EQ(R_OSAL_MmngrDealloc(hndl_mmngr, buffer_obj), OSAL_RETURN_OK) << "Test09_011_041 failed";
    EXPECT_EQ(R_OSAL_MmngrClose(hndl_mmngr), OSAL_RETURN_OK) << "Test09_011_041 failed";
    hndl_mmngr = OSAL_MEMORY_MANAGER_HANDLE_INVALID;
    buffer_obj = OSAL_MEMORY_BUFFER_HANDLE_INVALID;
}
// [MmngrInvalidate_TC_09_011_041]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrInvalidate_TC_09_011_042 MemoryApiTest.MmngrInvalidate_TC_09_011_042
 * @subsection MmngrInvalidate_TC_09_011_042_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrInvalidate_TC_09_011_042_tci Test Case ID
 * MmngrInvalidate_S4_A_TC_09_011_042
 * @subsection MmngrInvalidate_TC_09_011_042_rr Related Requirement(s)
 * \#276557
 * @subsection MmngrInvalidate_TC_09_011_042_pp Prerequisite/Precondition
 * OSAL is initialized.
 * @subsection MmngrInvalidate_TC_09_011_042_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrInvalidate with abnormal condition and mode is OSAL_MMNGR_ALLOC_MODE_STACK_PROT.
 * - Test09_011_042: buffer_obj->mmngr_owner_hndl->p_ptr_self is invalid (NULL)
 * @subsection MmngrInvalidate_TC_09_011_042_tpts Test Procedure/Test Steps
 * -# Call R_OSAL_MmngrOpen with bellow config:
 *  - config.memory_limit                = 4096
 *  - config.max_allowed_allocations     = 1
 *  - config.max_registered_monitors_cbs = 2
 *  - config.mode = OSAL_MMNGR_ALLOC_MODE_STACK_PROT
 * -# Call R_OSAL_MmngrAlloc to allocate a memory buffer.
 * -# Call R_OSAL_MmngrInvalidate with buffer_obj->mmngr_owner_hndl->p_ptr_self is invalid (NULL)
 * -# Call R_OSAL_MmngrDealloc to deallocate the allocated memory buffer.
 * -# Call R_OSAL_MmngrClose to close memory handle.
 * @subsection MmngrInvalidate_TC_09_011_042_ereb Expected Result/Behavior
 * -# The return of R_OSAL_MmngrOpen is OSAL_RETURN_OK.<br>
 * The returned handle is not OSAL_MEMORY_MANAGER_HANDLE_INVALID.
 * -# The return value of R_OSAL_MmngrAlloc is OSAL_RETURN_OK.<br>
 * the return buffer is not OSAL_MEMORY_BUFFER_HANDLE_INVALID.
 * -# The return value of R_OSAL_MmngrInvalidate is OSAL_RETURN_HANDLE.
 * -# The return value of R_OSAL_MmngrDealloc is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrClose is OSAL_RETURN_OK.
 * @subsection MmngrInvalidate_TC_09_011_042_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrInvalidate_TC_09_011_042
 */
// [MmngrInvalidate_TC_09_011_042]
TEST_F(MemoryApiTest, MmngrInvalidate_TC_09_011_042)
{
    void *bk_ptr_self;

    // Test09_011_042
    // @brief: abnormal case: buffer_obj->mmngr_owner_hndl->p_ptr_self is invalid (NULL)
    config.memory_limit                = 4096;
    config.max_allowed_allocations     = 1;
    config.max_registered_monitors_cbs = 2;
    config.mode = OSAL_MMNGR_ALLOC_MODE_STACK_PROT;
    size = 4096;
    alignment = 64;

    EXPECT_EQ(R_OSAL_MmngrOpen(&config, &hndl_mmngr), OSAL_RETURN_OK) << "Test09_011_042 failed";
    EXPECT_NE(hndl_mmngr,OSAL_MEMORY_MANAGER_HANDLE_INVALID) << "Test09_011_042 failed";
    EXPECT_EQ(R_OSAL_MmngrAlloc(hndl_mmngr, size, alignment, &buffer_obj), OSAL_RETURN_OK) << "Test09_011_042 failed";
    EXPECT_NE(buffer_obj,OSAL_MEMORY_BUFFER_HANDLE_INVALID) << "Test09_011_042 failed";
    bk_ptr_self = buffer_obj->mmngr_owner_hndl->p_ptr_self;
    buffer_obj->mmngr_owner_hndl->p_ptr_self = NULL;
    offset = 0;
    size = 64;
    EXPECT_EQ(R_OSAL_MmngrInvalidate(buffer_obj, offset, size), OSAL_RETURN_HANDLE) << "Test09_011_042 failed";
    buffer_obj->mmngr_owner_hndl->p_ptr_self = bk_ptr_self;
    EXPECT_EQ(R_OSAL_MmngrDealloc(hndl_mmngr, buffer_obj), OSAL_RETURN_OK) << "Test09_011_042 failed";
    EXPECT_EQ(R_OSAL_MmngrClose(hndl_mmngr), OSAL_RETURN_OK) << "Test09_011_042 failed";
    hndl_mmngr = OSAL_MEMORY_MANAGER_HANDLE_INVALID;
    buffer_obj = OSAL_MEMORY_BUFFER_HANDLE_INVALID;
}
// [MmngrInvalidate_TC_09_011_042]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrInvalidate_TC_09_011_043 MemoryApiTest.MmngrInvalidate_TC_09_011_043
 * @subsection MmngrInvalidate_TC_09_011_043_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrInvalidate_TC_09_011_043_tci Test Case ID
 * MmngrInvalidate_S4_A_TC_09_011_043
 * @subsection MmngrInvalidate_TC_09_011_043_rr Related Requirement(s)
 * \#276557
 * @subsection MmngrInvalidate_TC_09_011_043_pp Prerequisite/Precondition
 * OSAL is initialized.
 * @subsection MmngrInvalidate_TC_09_011_043_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrInvalidate with abnormal condition and mode is OSAL_MMNGR_ALLOC_MODE_FREE_LIST.
 * - Test09_011_043: buffer_obj->mmngr_owner_hndl->p_ptr_self is invalid (NULL)
 * @subsection MmngrInvalidate_TC_09_011_043_tpts Test Procedure/Test Steps
 * -# Call R_OSAL_MmngrOpen with bellow config:
 *  - config.memory_limit                = 4096
 *  - config.max_allowed_allocations     = 1
 *  - config.max_registered_monitors_cbs = 2
 *  - config.mode = OSAL_MMNGR_ALLOC_MODE_FREE_LIST
 * -# Call R_OSAL_MmngrAlloc to allocate a memory buffer.
 * -# Call R_OSAL_MmngrInvalidate with buffer_obj->mmngr_owner_hndl->p_ptr_self is invalid (NULL)
 * -# Call R_OSAL_MmngrDealloc to deallocate the allocated memory buffer.
 * -# Call R_OSAL_MmngrClose to close memory handle.
 * @subsection MmngrInvalidate_TC_09_011_043_ereb Expected Result/Behavior
 * -# The return of R_OSAL_MmngrOpen is OSAL_RETURN_OK.<br>
 * The returned handle is not OSAL_MEMORY_MANAGER_HANDLE_INVALID.
 * -# The return value of R_OSAL_MmngrAlloc is OSAL_RETURN_OK.<br>
 * the return buffer is not OSAL_MEMORY_BUFFER_HANDLE_INVALID.
 * -# The return value of R_OSAL_MmngrInvalidate is OSAL_RETURN_HANDLE.
 * -# The return value of R_OSAL_MmngrDealloc is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrClose is OSAL_RETURN_OK.
 * @subsection MmngrInvalidate_TC_09_011_043_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrInvalidate_TC_09_011_043
 */
// [MmngrInvalidate_TC_09_011_043]
TEST_F(MemoryApiTest, MmngrInvalidate_TC_09_011_043)
{
    void *bk_ptr_self;

    // Test09_011_043
    // @brief: abnormal case: buffer_obj->mmngr_owner_hndl->p_ptr_self is invalid (NULL)
    config.memory_limit                = 4096;
    config.max_allowed_allocations     = 1;
    config.max_registered_monitors_cbs = 2;
    config.mode = OSAL_MMNGR_ALLOC_MODE_FREE_LIST;
    size = 4096;
    alignment = 64;

    EXPECT_EQ(R_OSAL_MmngrOpen(&config, &hndl_mmngr), OSAL_RETURN_OK) << "Test09_011_043 failed";
    EXPECT_NE(hndl_mmngr,OSAL_MEMORY_MANAGER_HANDLE_INVALID) << "Test09_011_043 failed";
    EXPECT_EQ(R_OSAL_MmngrAlloc(hndl_mmngr, size, alignment, &buffer_obj), OSAL_RETURN_OK) << "Test09_011_043 failed";
    EXPECT_NE(buffer_obj,OSAL_MEMORY_BUFFER_HANDLE_INVALID) << "Test09_011_043 failed";
    bk_ptr_self = buffer_obj->mmngr_owner_hndl->p_ptr_self;
    buffer_obj->mmngr_owner_hndl->p_ptr_self = NULL;
    offset = 0;
    size = 64;
    EXPECT_EQ(R_OSAL_MmngrInvalidate(buffer_obj, offset, size), OSAL_RETURN_HANDLE) << "Test09_011_043 failed";
    buffer_obj->mmngr_owner_hndl->p_ptr_self = bk_ptr_self;
    EXPECT_EQ(R_OSAL_MmngrDealloc(hndl_mmngr, buffer_obj), OSAL_RETURN_OK) << "Test09_011_043 failed";
    EXPECT_EQ(R_OSAL_MmngrClose(hndl_mmngr), OSAL_RETURN_OK) << "Test09_011_043 failed";
    hndl_mmngr = OSAL_MEMORY_MANAGER_HANDLE_INVALID;
    buffer_obj = OSAL_MEMORY_BUFFER_HANDLE_INVALID;
}
// [MmngrInvalidate_TC_09_011_043]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrInvalidate_TC_09_011_044 MemoryApiTest.MmngrInvalidate_TC_09_011_044
 * @subsection MmngrInvalidate_TC_09_011_044_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrInvalidate_TC_09_011_044_tci Test Case ID
 * MmngrInvalidate_S4_A_TC_09_011_044
 * @subsection MmngrInvalidate_TC_09_011_044_rr Related Requirement(s)
 * \#276557
 * @subsection MmngrInvalidate_TC_09_011_044_pp Prerequisite/Precondition
 * OSAL is initialized.
 * @subsection MmngrInvalidate_TC_09_011_044_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrInvalidate with abnormal condition and mode is OSAL_MMNGR_ALLOC_MODE_FREE_LIST_PROT.
 * - Test09_011_044: buffer_obj->mmngr_owner_hndl->p_ptr_self is invalid (NULL)
 * @subsection MmngrInvalidate_TC_09_011_044_tpts Test Procedure/Test Steps
 * -# Call R_OSAL_MmngrOpen with bellow config:
 *  - config.memory_limit                = 4096
 *  - config.max_allowed_allocations     = 1
 *  - config.max_registered_monitors_cbs = 2
 *  - config.mode = OSAL_MMNGR_ALLOC_MODE_FREE_LIST_PROT
 * -# Call R_OSAL_MmngrAlloc to allocate a memory buffer.
 * -# Call R_OSAL_MmngrInvalidate with buffer_obj->mmngr_owner_hndl->p_ptr_self is invalid (NULL)
 * -# Call R_OSAL_MmngrDealloc to deallocate the allocated memory buffer.
 * -# Call R_OSAL_MmngrClose to close memory handle.
 * @subsection MmngrInvalidate_TC_09_011_044_ereb Expected Result/Behavior
 * -# The return of R_OSAL_MmngrOpen is OSAL_RETURN_OK.<br>
 * The returned handle is not OSAL_MEMORY_MANAGER_HANDLE_INVALID.
 * -# The return value of R_OSAL_MmngrAlloc is OSAL_RETURN_OK.<br>
 * the return buffer is not OSAL_MEMORY_BUFFER_HANDLE_INVALID.
 * -# The return value of R_OSAL_MmngrInvalidate is OSAL_RETURN_HANDLE.
 * -# The return value of R_OSAL_MmngrDealloc is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrClose is OSAL_RETURN_OK.
 * @subsection MmngrInvalidate_TC_09_011_044_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrInvalidate_TC_09_011_044
 */
// [MmngrInvalidate_TC_09_011_044]
TEST_F(MemoryApiTest, MmngrInvalidate_TC_09_011_044)
{
    void *bk_ptr_self;

    // Test09_011_044
    // @brief: abnormal case: buffer_obj->mmngr_owner_hndl->p_ptr_self is invalid (NULL)
    config.memory_limit                = 4096;
    config.max_allowed_allocations     = 1;
    config.max_registered_monitors_cbs = 2;
    config.mode = OSAL_MMNGR_ALLOC_MODE_FREE_LIST_PROT;
    size = 4096;
    alignment = 64;

    EXPECT_EQ(R_OSAL_MmngrOpen(&config, &hndl_mmngr), OSAL_RETURN_OK) << "Test09_011_044 failed";
    EXPECT_NE(hndl_mmngr,OSAL_MEMORY_MANAGER_HANDLE_INVALID) << "Test09_011_044 failed";
    EXPECT_EQ(R_OSAL_MmngrAlloc(hndl_mmngr, size, alignment, &buffer_obj), OSAL_RETURN_OK) << "Test09_011_044 failed";
    EXPECT_NE(buffer_obj,OSAL_MEMORY_BUFFER_HANDLE_INVALID) << "Test09_011_044 failed";
    bk_ptr_self = buffer_obj->mmngr_owner_hndl->p_ptr_self;
    buffer_obj->mmngr_owner_hndl->p_ptr_self = NULL;
    offset = 0;
    size = 64;
    EXPECT_EQ(R_OSAL_MmngrInvalidate(buffer_obj, offset, size), OSAL_RETURN_HANDLE) << "Test09_011_044 failed";
    buffer_obj->mmngr_owner_hndl->p_ptr_self = bk_ptr_self;
    EXPECT_EQ(R_OSAL_MmngrDealloc(hndl_mmngr, buffer_obj), OSAL_RETURN_OK) << "Test09_011_044 failed";
    EXPECT_EQ(R_OSAL_MmngrClose(hndl_mmngr), OSAL_RETURN_OK) << "Test09_011_044 failed";
    hndl_mmngr = OSAL_MEMORY_MANAGER_HANDLE_INVALID;
    buffer_obj = OSAL_MEMORY_BUFFER_HANDLE_INVALID;
}
// [MmngrInvalidate_TC_09_011_044]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrInvalidate_TC_09_011_045 MemoryApiTest.MmngrInvalidate_TC_09_011_045
 * @subsection MmngrInvalidate_TC_09_011_045_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrInvalidate_TC_09_011_045_tci Test Case ID
 * MmngrInvalidate_S4_A_TC_09_011_045
 * @subsection MmngrInvalidate_TC_09_011_045_rr Related Requirement(s)
 * \#276557
 * @subsection MmngrInvalidate_TC_09_011_045_pp Prerequisite/Precondition
 * OSAL is initialized.
 * @subsection MmngrInvalidate_TC_09_011_045_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrInvalidate with abnormal condition and mode is OSAL_MMNGR_ALLOC_MODE_STACK.
 * - Test09_011_045: hndl_mmngr->p_ptr_self is invalid (NULL)
 * @subsection MmngrInvalidate_TC_09_011_045_tpts Test Procedure/Test Steps
 * -# Call R_OSAL_MmngrOpen with bellow config:
 *  - config.memory_limit                = 4096
 *  - config.max_allowed_allocations     = 1
 *  - config.max_registered_monitors_cbs = 2
 *  - config.mode = OSAL_MMNGR_ALLOC_MODE_STACK
 * -# Call R_OSAL_MmngrAlloc to allocate a memory buffer.
 * -# Call R_OSAL_MmngrInvalidate with hndl_mmngr->p_ptr_self is invalid (NULL)
 * -# Call R_OSAL_MmngrDealloc to deallocate the allocated memory buffer.
 * -# Call R_OSAL_MmngrClose to close memory handle.
 * @subsection MmngrInvalidate_TC_09_011_045_ereb Expected Result/Behavior
 * -# The return of R_OSAL_MmngrOpen is OSAL_RETURN_OK.<br>
 * The returned handle is not OSAL_MEMORY_MANAGER_HANDLE_INVALID.
 * -# The return value of R_OSAL_MmngrAlloc is OSAL_RETURN_OK.<br>
 * the return buffer is not OSAL_MEMORY_BUFFER_HANDLE_INVALID.
 * -# The return value of R_OSAL_MmngrInvalidate is OSAL_RETURN_HANDLE.
 * -# The return value of R_OSAL_MmngrDealloc is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrClose is OSAL_RETURN_OK.
 * @subsection MmngrInvalidate_TC_09_011_045_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrInvalidate_TC_09_011_045
 */
// [MmngrInvalidate_TC_09_011_045]
TEST_F(MemoryApiTest, MmngrInvalidate_TC_09_011_045)
{
    void *bk_ptr_self;

    // Test09_011_045
    // @brief: abnormal case: hndl_mmngr->p_ptr_self is invalid (NULL)
    config.memory_limit                = 4096;
    config.max_allowed_allocations     = 1;
    config.max_registered_monitors_cbs = 2;
    config.mode = OSAL_MMNGR_ALLOC_MODE_STACK;
    size = 4096;
    alignment = 64;

    EXPECT_EQ(R_OSAL_MmngrOpen(&config, &hndl_mmngr), OSAL_RETURN_OK) << "Test09_011_045 failed";
    EXPECT_NE(hndl_mmngr,OSAL_MEMORY_MANAGER_HANDLE_INVALID) << "Test09_011_045 failed";
    EXPECT_EQ(R_OSAL_MmngrAlloc(hndl_mmngr, size, alignment, &buffer_obj), OSAL_RETURN_OK) << "Test09_011_045 failed";
    EXPECT_NE(buffer_obj,OSAL_MEMORY_BUFFER_HANDLE_INVALID) << "Test09_011_045 failed";
    bk_ptr_self = hndl_mmngr->p_ptr_self;
    hndl_mmngr->p_ptr_self = NULL;
    offset = 0;
    size = 64;
    EXPECT_EQ(R_OSAL_MmngrInvalidate(buffer_obj, offset, size), OSAL_RETURN_HANDLE) << "Test09_011_045 failed";
    hndl_mmngr->p_ptr_self = bk_ptr_self;
    EXPECT_EQ(R_OSAL_MmngrDealloc(hndl_mmngr, buffer_obj), OSAL_RETURN_OK) << "Test09_011_045 failed";
    EXPECT_EQ(R_OSAL_MmngrClose(hndl_mmngr), OSAL_RETURN_OK) << "Test09_011_045 failed";
    hndl_mmngr = OSAL_MEMORY_MANAGER_HANDLE_INVALID;
    buffer_obj = OSAL_MEMORY_BUFFER_HANDLE_INVALID;
}
// [MmngrInvalidate_TC_09_011_045]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrInvalidate_TC_09_011_046 MemoryApiTest.MmngrInvalidate_TC_09_011_046
 * @subsection MmngrInvalidate_TC_09_011_046_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrInvalidate_TC_09_011_046_tci Test Case ID
 * MmngrInvalidate_S4_A_TC_09_011_046
 * @subsection MmngrInvalidate_TC_09_011_046_rr Related Requirement(s)
 * \#276557
 * @subsection MmngrInvalidate_TC_09_011_046_pp Prerequisite/Precondition
 * OSAL is initialized.
 * @subsection MmngrInvalidate_TC_09_011_046_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrInvalidate with abnormal condition and mode is OSAL_MMNGR_ALLOC_MODE_STACK_PROT.
 * - Test09_011_046: hndl_mmngr->p_ptr_self is invalid (NULL)
 * @subsection MmngrInvalidate_TC_09_011_046_tpts Test Procedure/Test Steps
 * -# Call R_OSAL_MmngrOpen with bellow config:
 *  - config.memory_limit                = 4096
 *  - config.max_allowed_allocations     = 1
 *  - config.max_registered_monitors_cbs = 2
 *  - config.mode = OSAL_MMNGR_ALLOC_MODE_STACK_PROT
 * -# Call R_OSAL_MmngrAlloc to allocate a memory buffer.
 * -# Call R_OSAL_MmngrInvalidate with hndl_mmngr->p_ptr_self is invalid (NULL)
 * -# Call R_OSAL_MmngrDealloc to deallocate the allocated memory buffer.
 * -# Call R_OSAL_MmngrClose to close memory handle.
 * @subsection MmngrInvalidate_TC_09_011_046_ereb Expected Result/Behavior
 * -# The return of R_OSAL_MmngrOpen is OSAL_RETURN_OK.<br>
 * The returned handle is not OSAL_MEMORY_MANAGER_HANDLE_INVALID.
 * -# The return value of R_OSAL_MmngrAlloc is OSAL_RETURN_OK.<br>
 * the return buffer is not OSAL_MEMORY_BUFFER_HANDLE_INVALID.
 * -# The return value of R_OSAL_MmngrInvalidate is OSAL_RETURN_HANDLE.
 * -# The return value of R_OSAL_MmngrDealloc is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrClose is OSAL_RETURN_OK.
 * @subsection MmngrInvalidate_TC_09_011_046_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrInvalidate_TC_09_011_046
 */
// [MmngrInvalidate_TC_09_011_046]
TEST_F(MemoryApiTest, MmngrInvalidate_TC_09_011_046)
{
    void *bk_ptr_self;

    // Test09_011_046
    // @brief: abnormal case: hndl_mmngr->p_ptr_self is invalid (NULL)
    config.memory_limit                = 4096;
    config.max_allowed_allocations     = 1;
    config.max_registered_monitors_cbs = 2;
    config.mode = OSAL_MMNGR_ALLOC_MODE_STACK_PROT;
    size = 4096;
    alignment = 64;

    EXPECT_EQ(R_OSAL_MmngrOpen(&config, &hndl_mmngr), OSAL_RETURN_OK) << "Test09_011_046 failed";
    EXPECT_NE(hndl_mmngr,OSAL_MEMORY_MANAGER_HANDLE_INVALID) << "Test09_011_046 failed";
    EXPECT_EQ(R_OSAL_MmngrAlloc(hndl_mmngr, size, alignment, &buffer_obj), OSAL_RETURN_OK) << "Test09_011_046 failed";
    EXPECT_NE(buffer_obj,OSAL_MEMORY_BUFFER_HANDLE_INVALID) << "Test09_011_046 failed";
    bk_ptr_self = hndl_mmngr->p_ptr_self;
    hndl_mmngr->p_ptr_self = NULL;
    offset = 0;
    size = 64;
    EXPECT_EQ(R_OSAL_MmngrInvalidate(buffer_obj, offset, size), OSAL_RETURN_HANDLE) << "Test09_011_046 failed";
    hndl_mmngr->p_ptr_self = bk_ptr_self;
    EXPECT_EQ(R_OSAL_MmngrDealloc(hndl_mmngr, buffer_obj), OSAL_RETURN_OK) << "Test09_011_046 failed";
    EXPECT_EQ(R_OSAL_MmngrClose(hndl_mmngr), OSAL_RETURN_OK) << "Test09_011_046 failed";
    hndl_mmngr = OSAL_MEMORY_MANAGER_HANDLE_INVALID;
    buffer_obj = OSAL_MEMORY_BUFFER_HANDLE_INVALID;
}
// [MmngrInvalidate_TC_09_011_046]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrInvalidate_TC_09_011_047 MemoryApiTest.MmngrInvalidate_TC_09_011_047
 * @subsection MmngrInvalidate_TC_09_011_047_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrInvalidate_TC_09_011_047_tci Test Case ID
 * MmngrInvalidate_S4_A_TC_09_011_047
 * @subsection MmngrInvalidate_TC_09_011_047_rr Related Requirement(s)
 * \#276557
 * @subsection MmngrInvalidate_TC_09_011_047_pp Prerequisite/Precondition
 * OSAL is initialized.
 * @subsection MmngrInvalidate_TC_09_011_047_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrInvalidate with abnormal condition and mode is OSAL_MMNGR_ALLOC_MODE_FREE_LIST.
 * - Test09_011_047: hndl_mmngr->p_ptr_self is invalid (NULL)
 * @subsection MmngrInvalidate_TC_09_011_047_tpts Test Procedure/Test Steps
 * -# Call R_OSAL_MmngrOpen with bellow config:
 *  - config.memory_limit                = 4096
 *  - config.max_allowed_allocations     = 1
 *  - config.max_registered_monitors_cbs = 2
 *  - config.mode = OSAL_MMNGR_ALLOC_MODE_FREE_LIST
 * -# Call R_OSAL_MmngrAlloc to allocate a memory buffer.
 * -# Call R_OSAL_MmngrInvalidate with hndl_mmngr->p_ptr_self is invalid (NULL)
 * -# Call R_OSAL_MmngrDealloc to deallocate the allocated memory buffer.
 * -# Call R_OSAL_MmngrClose to close memory handle.
 * @subsection MmngrInvalidate_TC_09_011_047_ereb Expected Result/Behavior
 * -# The return of R_OSAL_MmngrOpen is OSAL_RETURN_OK.<br>
 * The returned handle is not OSAL_MEMORY_MANAGER_HANDLE_INVALID.
 * -# The return value of R_OSAL_MmngrAlloc is OSAL_RETURN_OK.<br>
 * the return buffer is not OSAL_MEMORY_BUFFER_HANDLE_INVALID.
 * -# The return value of R_OSAL_MmngrInvalidate is OSAL_RETURN_HANDLE.
 * -# The return value of R_OSAL_MmngrDealloc is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrClose is OSAL_RETURN_OK.
 * @subsection MmngrInvalidate_TC_09_011_047_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrInvalidate_TC_09_011_047
 */
// [MmngrInvalidate_TC_09_011_047]
TEST_F(MemoryApiTest, MmngrInvalidate_TC_09_011_047)
{
    void *bk_ptr_self;

    // Test09_011_047
    // @brief: abnormal case: hndl_mmngr->p_ptr_self is invalid (NULL)
    config.memory_limit                = 4096;
    config.max_allowed_allocations     = 1;
    config.max_registered_monitors_cbs = 2;
    config.mode = OSAL_MMNGR_ALLOC_MODE_FREE_LIST;
    size = 4096;
    alignment = 64;

    EXPECT_EQ(R_OSAL_MmngrOpen(&config, &hndl_mmngr), OSAL_RETURN_OK) << "Test09_011_047 failed";
    EXPECT_NE(hndl_mmngr,OSAL_MEMORY_MANAGER_HANDLE_INVALID) << "Test09_011_047 failed";
    EXPECT_EQ(R_OSAL_MmngrAlloc(hndl_mmngr, size, alignment, &buffer_obj), OSAL_RETURN_OK) << "Test09_011_047 failed";
    EXPECT_NE(buffer_obj,OSAL_MEMORY_BUFFER_HANDLE_INVALID) << "Test09_011_047 failed";
    bk_ptr_self = hndl_mmngr->p_ptr_self;
    hndl_mmngr->p_ptr_self = NULL;
    offset = 0;
    size = 64;
    EXPECT_EQ(R_OSAL_MmngrInvalidate(buffer_obj, offset, size), OSAL_RETURN_HANDLE) << "Test09_011_047 failed";
    hndl_mmngr->p_ptr_self = bk_ptr_self;
    EXPECT_EQ(R_OSAL_MmngrDealloc(hndl_mmngr, buffer_obj), OSAL_RETURN_OK) << "Test09_011_047 failed";
    EXPECT_EQ(R_OSAL_MmngrClose(hndl_mmngr), OSAL_RETURN_OK) << "Test09_011_047 failed";
    hndl_mmngr = OSAL_MEMORY_MANAGER_HANDLE_INVALID;
    buffer_obj = OSAL_MEMORY_BUFFER_HANDLE_INVALID;
}
// [MmngrInvalidate_TC_09_011_047]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrInvalidate_TC_09_011_048 MemoryApiTest.MmngrInvalidate_TC_09_011_048
 * @subsection MmngrInvalidate_TC_09_011_048_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrInvalidate_TC_09_011_048_tci Test Case ID
 * MmngrInvalidate_S4_A_TC_09_011_048
 * @subsection MmngrInvalidate_TC_09_011_048_rr Related Requirement(s)
 * \#276557
 * @subsection MmngrInvalidate_TC_09_011_048_pp Prerequisite/Precondition
 * OSAL is initialized.
 * @subsection MmngrInvalidate_TC_09_011_048_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrInvalidate with abnormal condition and mode is OSAL_MMNGR_ALLOC_MODE_FREE_LIST_PROT.
 * - Test09_011_048: hndl_mmngr->p_ptr_self is invalid (NULL)
 * @subsection MmngrInvalidate_TC_09_011_048_tpts Test Procedure/Test Steps
 * -# Call R_OSAL_MmngrOpen with bellow config:
 *  - config.memory_limit                = 4096
 *  - config.max_allowed_allocations     = 1
 *  - config.max_registered_monitors_cbs = 2
 *  - config.mode = OSAL_MMNGR_ALLOC_MODE_FREE_LIST_PROT
 * -# Call R_OSAL_MmngrAlloc to allocate a memory buffer.
 * -# Call R_OSAL_MmngrInvalidate with hndl_mmngr->p_ptr_self is invalid (NULL)
 * -# Call R_OSAL_MmngrDealloc to deallocate the allocated memory buffer.
 * -# Call R_OSAL_MmngrClose to close memory handle.
 * @subsection MmngrInvalidate_TC_09_011_048_ereb Expected Result/Behavior
 * -# The return of R_OSAL_MmngrOpen is OSAL_RETURN_OK.<br>
 * The returned handle is not OSAL_MEMORY_MANAGER_HANDLE_INVALID.
 * -# The return value of R_OSAL_MmngrAlloc is OSAL_RETURN_OK.<br>
 * the return buffer is not OSAL_MEMORY_BUFFER_HANDLE_INVALID.
 * -# The return value of R_OSAL_MmngrInvalidate is OSAL_RETURN_HANDLE.
 * -# The return value of R_OSAL_MmngrDealloc is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrClose is OSAL_RETURN_OK.
 * @subsection MmngrInvalidate_TC_09_011_048_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrInvalidate_TC_09_011_048
 */
// [MmngrInvalidate_TC_09_011_048]
TEST_F(MemoryApiTest, MmngrInvalidate_TC_09_011_048)
{
    void *bk_ptr_self;

    // Test09_011_048
    // @brief: abnormal case: hndl_mmngr->p_ptr_self is invalid (NULL)
    config.memory_limit                = 4096;
    config.max_allowed_allocations     = 1;
    config.max_registered_monitors_cbs = 2;
    config.mode = OSAL_MMNGR_ALLOC_MODE_FREE_LIST_PROT;
    size = 4096;
    alignment = 64;

    EXPECT_EQ(R_OSAL_MmngrOpen(&config, &hndl_mmngr), OSAL_RETURN_OK) << "Test09_011_048 failed";
    EXPECT_NE(hndl_mmngr,OSAL_MEMORY_MANAGER_HANDLE_INVALID) << "Test09_011_048 failed";
    EXPECT_EQ(R_OSAL_MmngrAlloc(hndl_mmngr, size, alignment, &buffer_obj), OSAL_RETURN_OK) << "Test09_011_048 failed";
    EXPECT_NE(buffer_obj,OSAL_MEMORY_BUFFER_HANDLE_INVALID) << "Test09_011_048 failed";
    bk_ptr_self = hndl_mmngr->p_ptr_self;
    hndl_mmngr->p_ptr_self = NULL;
    offset = 0;
    size = 64;
    EXPECT_EQ(R_OSAL_MmngrInvalidate(buffer_obj, offset, size), OSAL_RETURN_HANDLE) << "Test09_011_048 failed";
    hndl_mmngr->p_ptr_self = bk_ptr_self;
    EXPECT_EQ(R_OSAL_MmngrDealloc(hndl_mmngr, buffer_obj), OSAL_RETURN_OK) << "Test09_011_048 failed";
    EXPECT_EQ(R_OSAL_MmngrClose(hndl_mmngr), OSAL_RETURN_OK) << "Test09_011_048 failed";
    hndl_mmngr = OSAL_MEMORY_MANAGER_HANDLE_INVALID;
    buffer_obj = OSAL_MEMORY_BUFFER_HANDLE_INVALID;
}
// [MmngrInvalidate_TC_09_011_048]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrGetHwAddr_TC_09_012_001 MemoryApiTest.MmngrGetHwAddr_TC_09_012_001
 * @subsection MmngrGetHwAddr_TC_09_012_001_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrGetHwAddr_TC_09_012_001_tci Test Case ID
 * MmngrGetHwAddr_S3_N_TC_09_012_001
 * @subsection MmngrGetHwAddr_TC_09_012_001_rr Related Requirement(s)
 * \#276560
 * @subsection MmngrGetHwAddr_TC_09_012_001_pp Prerequisite/Precondition
 * OSAL is initialized
 * @subsection MmngrGetHwAddr_TC_09_012_001_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrGetHwAddr with normal condition and mode is OSAL_MMNGR_ALLOC_MODE_STACK.
 * - pre-process: open new memory manager
 * - Test09_012_001: with all valid parameters.
 * - post-process: close memory manager
 * @subsection MmngrGetHwAddr_TC_09_012_001_tpts Test Procedure/Test Steps
 * -# Call R_OSAL_MmngrOpen with bellow config:
 *  - config.memory_limit                = 4096
 *  - config.max_allowed_allocations     = 1
 *  - config.max_registered_monitors_cbs = 2
 *  - config.mode = OSAL_MMNGR_ALLOC_MODE_STACK
 * -# Call R_OSAL_MmngrAlloc to allocate a memory buffer.
 * -# Call R_OSAL_MmngrGetHwAddr with all valid parameters. 
 * -# Call R_OSAL_MmngrDealloc to deallocate the allocated memory buffer.
 * -# Call R_OSAL_MmngrClose to close memory handle.
 * @subsection MmngrGetHwAddr_TC_09_012_001_ereb Expected Result/Behavior
 * -# The return of R_OSAL_MmngrOpen is OSAL_RETURN_OK.<br>
 * The returned handle is not OSAL_MEMORY_MANAGER_HANDLE_INVALID.
 * -# The return value of R_OSAL_MmngrAlloc is OSAL_RETURN_OK.<br>
 * The return buffer is not OSAL_MEMORY_BUFFER_HANDLE_INVALID.
 * -# The return value of R_OSAL_MmngrGetHwAddr is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrDealloc is OSAL_RETURN_OK.
 * -# R_OSAL_MmngrClose return OSAL_RETURN_OK
 * @subsection MmngrGetHwAddr_TC_09_012_001_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrGetHwAddr_TC_09_012_001
 */
// [MmngrGetHwAddr_TC_09_012_001]
TEST_F(MemoryApiTest, MmngrGetHwAddr_TC_09_012_001)
{
    osal_axi_bus_id_t axi_id = OSAL_AXI_BUS_ID_IPA_MAIN_MEMORY;
    uintptr_t hw_addr;

    // pre-process: open new memory manager
    config.memory_limit                = 4096;
    config.max_allowed_allocations     = 1;
    config.max_registered_monitors_cbs = 2;
    config.mode = OSAL_MMNGR_ALLOC_MODE_STACK;
    size = 128;
    alignment = 64;

    EXPECT_EQ(R_OSAL_MmngrOpen(&config, &hndl_mmngr), OSAL_RETURN_OK) << "pre-process failed";
    EXPECT_NE(hndl_mmngr,OSAL_MEMORY_MANAGER_HANDLE_INVALID) << "pre-process failed";

    // Test09_012_001
    // @brief: normal case: all valid argument
    EXPECT_EQ(R_OSAL_MmngrAlloc(hndl_mmngr, size, alignment, &buffer_obj), OSAL_RETURN_OK);
    EXPECT_NE(buffer_obj,OSAL_MEMORY_BUFFER_HANDLE_INVALID);
    EXPECT_EQ(R_OSAL_MmngrGetHwAddr(buffer_obj,axi_id, &hw_addr ), OSAL_RETURN_OK) << "Test09_012_001 failed";
    EXPECT_EQ(R_OSAL_MmngrDealloc(hndl_mmngr, buffer_obj), OSAL_RETURN_OK);
    buffer_obj = OSAL_MEMORY_BUFFER_HANDLE_INVALID;

    // post-process: close memory manager
    EXPECT_EQ(R_OSAL_MmngrClose(hndl_mmngr), OSAL_RETURN_OK) << "post-process failed";
    hndl_mmngr = OSAL_MEMORY_MANAGER_HANDLE_INVALID;
}
// [MmngrGetHwAddr_TC_09_012_001]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrGetHwAddr_TC_09_012_002 MemoryApiTest.MmngrGetHwAddr_TC_09_012_002
 * @subsection MmngrGetHwAddr_TC_09_012_002_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrGetHwAddr_TC_09_012_002_tci Test Case ID
 * MmngrGetHwAddr_S0_A_TC_09_012_002
 * @subsection MmngrGetHwAddr_TC_09_012_002_rr Related Requirement(s)
 * \#276560
 * @subsection MmngrGetHwAddr_TC_09_012_002_pp Prerequisite/Precondition
 * OSAL is initialized
 * @subsection MmngrGetHwAddr_TC_09_012_002_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrGetHwAddr with abnormal condition and mode is OSAL_MMNGR_ALLOC_MODE_STACK.
 * - Test09_012_002: buffer is NULL.
 * @subsection MmngrGetHwAddr_TC_09_012_002_tpts Test Procedure/Test Steps
 * -# Call R_OSAL_MmngrGetHwAddr with NULL buffer.
 * @subsection MmngrGetHwAddr_TC_09_012_002_ereb Expected Result/Behavior
 * -# The return value of R_OSAL_MmngrGetHwAddr is OSAL_RETURN_HANDLE.
 * @subsection MmngrGetHwAddr_TC_09_012_002_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrGetHwAddr_TC_09_012_002
 */
// [MmngrGetHwAddr_TC_09_012_002]
TEST_F(MemoryApiTest, MmngrGetHwAddr_TC_09_012_002)
{
    osal_axi_bus_id_t axi_id = OSAL_AXI_BUS_ID_IPA_MAIN_MEMORY;
    uintptr_t hw_addr;

    // Test09_012_002
    // @brief: abnormal case: buffer_obj is NULL
    EXPECT_EQ(R_OSAL_MmngrGetHwAddr(OSAL_MEMORY_BUFFER_HANDLE_INVALID,axi_id, &hw_addr ), OSAL_RETURN_HANDLE) << "Test09_012_002 failed";
}
// [MmngrGetHwAddr_TC_09_012_002]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrGetHwAddr_TC_09_012_003 MemoryApiTest.MmngrGetHwAddr_TC_09_012_003
 * @subsection MmngrGetHwAddr_TC_09_012_003_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrGetHwAddr_TC_09_012_003_tci Test Case ID
 * MmngrGetHwAddr_S4_A_TC_09_012_003
 * @subsection MmngrGetHwAddr_TC_09_012_003_rr Related Requirement(s)
 * \#276560
 * @subsection MmngrGetHwAddr_TC_09_012_003_pp Prerequisite/Precondition
 * OSAL is initialized
 * @subsection MmngrGetHwAddr_TC_09_012_003_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrGetHwAddr with abnormal condition and mode is OSAL_MMNGR_ALLOC_MODE_STACK.
 * - pre-process: open new memory manager
 * - Test09_012_003: parameter getHwAddr is NULL.
 * - post-process: close memory manager
 * @subsection MmngrGetHwAddr_TC_09_012_003_tpts Test Procedure/Test Steps
 * -# Call R_OSAL_MmngrOpen with bellow config:
 *  - config.memory_limit                = 4096
 *  - config.max_allowed_allocations     = 1
 *  - config.max_registered_monitors_cbs = 2
 *  - config.mode = OSAL_MMNGR_ALLOC_MODE_STACK
 * -# Call R_OSAL_MmngrAlloc to allocate a memory buffer.
 * -# Call R_OSAL_MmngrGetHwAddr with NULL getHwAddr parameter.
 * -# Call R_OSAL_MmngrDealloc to deallocate the allocated memory buffer.
 * -# Call R_OSAL_MmngrClose to close memory handle.
 * @subsection MmngrGetHwAddr_TC_09_012_003_ereb Expected Result/Behavior
 * -# The return of R_OSAL_MmngrOpen is OSAL_RETURN_OK.<br>
 * The returned handle is not OSAL_MEMORY_MANAGER_HANDLE_INVALID.
 * -# The return value of R_OSAL_MmngrAlloc is OSAL_RETURN_OK.<br>
 * The return buffer is not OSAL_MEMORY_BUFFER_HANDLE_INVALID.
 * -# The return value of R_OSAL_MmngrGetHwAddr is OSAL_RETURN_PAR.
 * -# The return value of R_OSAL_MmngrDealloc is OSAL_RETURN_OK.
 * -# Call R_OSAL_MmngrClose to close memory handle.
 * @subsection MmngrGetHwAddr_TC_09_012_003_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrGetHwAddr_TC_09_012_003
 */
// [MmngrGetHwAddr_TC_09_012_003]
TEST_F(MemoryApiTest, MmngrGetHwAddr_TC_09_012_003)
{
    osal_axi_bus_id_t axi_id = OSAL_AXI_BUS_ID_IPA_MAIN_MEMORY;
    uintptr_t * p_hw_addr = NULL;

    // pre-process: open new memory manager
    config.memory_limit                = 4096;
    config.max_allowed_allocations     = 1;
    config.max_registered_monitors_cbs = 2;
    config.mode = OSAL_MMNGR_ALLOC_MODE_STACK;
    size = 128;
    alignment = 64;

    EXPECT_EQ(R_OSAL_MmngrOpen(&config, &hndl_mmngr), OSAL_RETURN_OK) << "pre-process failed";
    EXPECT_NE(hndl_mmngr,OSAL_MEMORY_MANAGER_HANDLE_INVALID) << "pre-process failed";

    // Test09_012_003
    // @brief: abnormal case: getHwAddr = NULL
    EXPECT_EQ(R_OSAL_MmngrAlloc(hndl_mmngr, size, alignment, &buffer_obj), OSAL_RETURN_OK);
    EXPECT_NE(buffer_obj,OSAL_MEMORY_BUFFER_HANDLE_INVALID);
    EXPECT_EQ(R_OSAL_MmngrGetHwAddr(buffer_obj ,axi_id, p_hw_addr), OSAL_RETURN_PAR) << "Test09_012_003 failed";
    EXPECT_EQ(R_OSAL_MmngrDealloc(hndl_mmngr, buffer_obj), OSAL_RETURN_OK);
    buffer_obj = OSAL_MEMORY_BUFFER_HANDLE_INVALID;

    // post-process: close memory manager
    EXPECT_EQ(R_OSAL_MmngrClose(hndl_mmngr), OSAL_RETURN_OK) << "post-process failed";
    hndl_mmngr = OSAL_MEMORY_MANAGER_HANDLE_INVALID;
}
// [MmngrGetHwAddr_TC_09_012_003]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrGetHwAddr_TC_09_012_004 MemoryApiTest.MmngrGetHwAddr_TC_09_012_004
 * @subsection MmngrGetHwAddr_TC_09_012_004_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrGetHwAddr_TC_09_012_004_tci Test Case ID
 * MmngrGetHwAddr_S0_A_TC_09_012_004
 * @subsection MmngrGetHwAddr_TC_09_012_004_rr Related Requirement(s)
 * \#276560
 * @subsection MmngrGetHwAddr_TC_09_012_004_pp Prerequisite/Precondition
 * OSAL is initialized
 * @subsection MmngrGetHwAddr_TC_09_012_004_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrGetHwAddr with abnormal condition and mode is OSAL_MMNGR_ALLOC_MODE_STACK.
 * - pre-process: open new memory manager
 * - Test09_012_004: buffer does not support to get HW address.
 * - post-process: close memory manager
 * @subsection MmngrGetHwAddr_TC_09_012_004_tpts Test Procedure/Test Steps
 * -# Call R_OSAL_MmngrOpen with bellow config:
 *  - config.memory_limit                = 4096
 *  - config.max_allowed_allocations     = 1
 *  - config.max_registered_monitors_cbs = 2
 *  - config.mode = OSAL_MMNGR_ALLOC_MODE_STACK
 * -# Allocate "tmp_buffer_obj" by using malloc function.
 * -# Call R_OSAL_MmngrAlloc to allocate a memory buffer.
 * -# Store "buffer_obj->p_getHwAddr" to "tmp_buffer_obj->p_getHwAddr".<br>
 * Set "buffer_obj->p_getHwAddr" to NULL. <br>
 * Call R_OSAL_MmngrGetHwAddr with the changed buffer "buffer_obj".<br>
 * Re-assign "tmp_buffer_obj->p_getHwAddr" to "buffer_obj->p_getHwAddr".
 * -# Call R_OSAL_MmngrDealloc to deallocate the original allocated buffer.
 * -# Free buffer pointed by "tmp_buffer_obj"
 * -# Call R_OSAL_MmngrClose to close memory handle.
 * @subsection MmngrGetHwAddr_TC_09_012_004_ereb Expected Result/Behavior
 * -# The return of R_OSAL_MmngrOpen is OSAL_RETURN_OK.<br>
 * The returned handle is not OSAL_MEMORY_MANAGER_HANDLE_INVALID.
 * -# Memory allocation succeeded (Pointer to buffer != Nullpointer)
 * -# The return value of R_OSAL_MmngrAlloc is OSAL_RETURN_OK.<br>
 * The return buffer is not OSAL_MEMORY_BUFFER_HANDLE_INVALID.
 * -# The return value of R_OSAL_MmngrGetHwAddr is OSAL_RETURN_UNSUPPORTED_OPERATION.
 * -# The return value of R_OSAL_MmngrDealloc is OSAL_RETURN_OK.
 * -# Allocated memory free succeeded.
 * -# Call R_OSAL_MmngrClose to close memory handle.
 * @subsection MmngrGetHwAddr_TC_09_012_004_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrGetHwAddr_TC_09_012_004
 */
// [MmngrGetHwAddr_TC_09_012_004]
TEST_F(MemoryApiTest, MmngrGetHwAddr_TC_09_012_004)
{
    osal_memory_buffer_handle_t tmp_buffer_obj;
    osal_axi_bus_id_t axi_id = OSAL_AXI_BUS_ID_IPA_MAIN_MEMORY;
    uintptr_t hw_addr;

    // pre-process: open new memory manager
    config.memory_limit                = 4096;
    config.max_allowed_allocations     = 1;
    config.max_registered_monitors_cbs = 2;
    config.mode = OSAL_MMNGR_ALLOC_MODE_STACK;
    size = 128;
    alignment = 64;

    EXPECT_EQ(R_OSAL_MmngrOpen(&config, &hndl_mmngr), OSAL_RETURN_OK) << "pre-process failed";
    EXPECT_NE(hndl_mmngr,OSAL_MEMORY_MANAGER_HANDLE_INVALID) << "pre-process failed";

    // Test09_012_004
    // @brief: abnormal case: buffer_obj->getHwAddr = NULL
    tmp_buffer_obj = (osal_memory_buffer_handle_t)malloc (sizeof(st_osal_memory_buffer_obj));
    EXPECT_EQ(R_OSAL_MmngrAlloc(hndl_mmngr, size, alignment, &buffer_obj), OSAL_RETURN_OK);
    EXPECT_NE(buffer_obj,OSAL_MEMORY_BUFFER_HANDLE_INVALID);
    tmp_buffer_obj->p_getHwAddr = buffer_obj->p_getHwAddr;
    buffer_obj->p_getHwAddr = NULL;
    EXPECT_EQ(R_OSAL_MmngrGetHwAddr(buffer_obj ,axi_id, &hw_addr ), OSAL_RETURN_UNSUPPORTED_OPERATION) << "Test09_012_004 failed";
    buffer_obj->p_getHwAddr = tmp_buffer_obj->p_getHwAddr;
    EXPECT_EQ(R_OSAL_MmngrDealloc(hndl_mmngr, buffer_obj), OSAL_RETURN_OK);
    buffer_obj = OSAL_MEMORY_BUFFER_HANDLE_INVALID;
    free(tmp_buffer_obj);

    // post-process: close memory manager
    EXPECT_EQ(R_OSAL_MmngrClose(hndl_mmngr), OSAL_RETURN_OK) << "post-process failed";
    hndl_mmngr = OSAL_MEMORY_MANAGER_HANDLE_INVALID;
}
// [MmngrGetHwAddr_TC_09_012_004]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrGetHwAddr_TC_09_012_005 MemoryApiTest.MmngrGetHwAddr_TC_09_012_005
 * @subsection MmngrGetHwAddr_TC_09_012_005_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrGetHwAddr_TC_09_012_005_tci Test Case ID
 * MmngrGetHwAddr_S3_N_TC_09_012_005
 * @subsection MmngrGetHwAddr_TC_09_012_005_rr Related Requirement(s)
 * \#276560
 * @subsection MmngrGetHwAddr_TC_09_012_005_pp Prerequisite/Precondition
 * OSAL is initialized
 * @subsection MmngrGetHwAddr_TC_09_012_005_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrGetHwAddr with normal condition and mode is OSAL_MMNGR_ALLOC_MODE_FREE_LIST.
 * - pre-process: open new memory manager
 * - Test09_012_005: confirm with memory handle which opened with OSAL_MMNGR_ALLOC_MODE_FREE_LIST mode
 * - post-process: close memory manager
 * @subsection MmngrGetHwAddr_TC_09_012_005_tpts Test Procedure/Test Steps
 * -# Call R_OSAL_MmngrOpen with bellow config:
 *  - config.memory_limit                = 4096
 *  - config.max_allowed_allocations     = 1
 *  - config.max_registered_monitors_cbs = 2
 *  - config.mode = OSAL_MMNGR_ALLOC_MODE_FREE_LIST
 * -# Call R_OSAL_MmngrAlloc to allocate a memory buffer.
 * -# Call R_OSAL_MmngrGetHwAddr with all valid parameters.  
 * -# Call R_OSAL_MmngrDealloc to deallocate the allocated memory buffer.
 * -# Call R_OSAL_MmngrClose to close memory handle.
 * @subsection MmngrGetHwAddr_TC_09_012_005_ereb Expected Result/Behavior
 * -# The return of R_OSAL_MmngrOpen is OSAL_RETURN_OK.<br>
 * The returned handle is not OSAL_MEMORY_MANAGER_HANDLE_INVALID.
 * -# The return value of R_OSAL_MmngrAlloc is OSAL_RETURN_OK.<br>
 * The return buffer is not OSAL_MEMORY_BUFFER_HANDLE_INVALID.
 * -# The return value of R_OSAL_MmngrGetHwAddr is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrDealloc is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrClose is OSAL_RETURN_OK.
 * @subsection MmngrGetHwAddr_TC_09_012_005_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrGetHwAddr_TC_09_012_005
 */
// [MmngrGetHwAddr_TC_09_012_005]
TEST_F(MemoryApiTest, MmngrGetHwAddr_TC_09_012_005)
{
    osal_axi_bus_id_t axi_id = OSAL_AXI_BUS_ID_IPA_MAIN_MEMORY;
    uintptr_t hw_addr;

    // pre-process: open new memory manager
    config.memory_limit                = 4096;
    config.max_allowed_allocations     = 1;
    config.max_registered_monitors_cbs = 2;
    config.mode = OSAL_MMNGR_ALLOC_MODE_FREE_LIST;
    size = 128;
    alignment = 64;

    EXPECT_EQ(R_OSAL_MmngrOpen(&config, &hndl_mmngr), OSAL_RETURN_OK) << "pre-process failed";
    EXPECT_NE(hndl_mmngr,OSAL_MEMORY_MANAGER_HANDLE_INVALID) << "pre-process failed";

    // Test09_012_005
    // @brief: normal case: config.mode = OSAL_MMNGR_ALLOC_MODE_FREE_LIST;
    EXPECT_EQ(R_OSAL_MmngrAlloc(hndl_mmngr, size, alignment, &buffer_obj), OSAL_RETURN_OK);
    EXPECT_NE(buffer_obj,OSAL_MEMORY_BUFFER_HANDLE_INVALID);
    EXPECT_EQ(R_OSAL_MmngrGetHwAddr(buffer_obj,axi_id, &hw_addr ), OSAL_RETURN_OK) << "Test09_012_005 failed";
    EXPECT_EQ(R_OSAL_MmngrDealloc(hndl_mmngr, buffer_obj), OSAL_RETURN_OK);
    buffer_obj = OSAL_MEMORY_BUFFER_HANDLE_INVALID;

    // post-process: close memory manager
    EXPECT_EQ(R_OSAL_MmngrClose(hndl_mmngr), OSAL_RETURN_OK) << "post-process failed";
    hndl_mmngr = OSAL_MEMORY_MANAGER_HANDLE_INVALID;
}
// [MmngrGetHwAddr_TC_09_012_005]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrGetHwAddr_TC_09_012_006 MemoryApiTest.MmngrGetHwAddr_TC_09_012_006
 * @subsection MmngrGetHwAddr_TC_09_012_006_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrGetHwAddr_TC_09_012_006_tci Test Case ID
 * MmngrGetHwAddr_S3_N_TC_09_012_006
 * @subsection MmngrGetHwAddr_TC_09_012_006_rr Related Requirement(s)
 * \#276560
 * @subsection MmngrGetHwAddr_TC_09_012_006_pp Prerequisite/Precondition
 * OSAL is initialized
 * @subsection MmngrGetHwAddr_TC_09_012_006_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrGetHwAddr with normal condition and mode is OSAL_MMNGR_ALLOC_MODE_STACK_PROT.
 * - pre-process: open new memory manager
 * - Test09_012_006: with all valid parameters.
 * - post-process: close memory manager
 * @subsection MmngrGetHwAddr_TC_09_012_006_tpts Test Procedure/Test Steps
 * -# Call R_OSAL_MmngrOpen with bellow config:
 *  - config.memory_limit                = 4096
 *  - config.max_allowed_allocations     = 1
 *  - config.max_registered_monitors_cbs = 2
 *  - config.mode = OSAL_MMNGR_ALLOC_MODE_STACK_PROT
 * -# Call R_OSAL_MmngrAlloc to allocate a memory buffer.
 * -# Call R_OSAL_MmngrGetHwAddr with all valid parameters. 
 * -# Call R_OSAL_MmngrDealloc to deallocate the allocated memory buffer.
 * -# Call R_OSAL_MmngrClose to close memory handle.
 * @subsection MmngrGetHwAddr_TC_09_012_006_ereb Expected Result/Behavior
 * -# The return of R_OSAL_MmngrOpen is OSAL_RETURN_OK.<br>
 * The returned handle is not OSAL_MEMORY_MANAGER_HANDLE_INVALID.
 * -# The return value of R_OSAL_MmngrAlloc is OSAL_RETURN_OK.<br>
 * The return buffer is not OSAL_MEMORY_BUFFER_HANDLE_INVALID.
 * -# The return value of R_OSAL_MmngrGetHwAddr is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrDealloc is OSAL_RETURN_OK.
 * -# R_OSAL_MmngrClose return OSAL_RETURN_OK
 * @subsection MmngrGetHwAddr_TC_09_012_006_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrGetHwAddr_TC_09_012_006
 */
// [MmngrGetHwAddr_TC_09_012_006]
TEST_F(MemoryApiTest, MmngrGetHwAddr_TC_09_012_006)
{
    osal_axi_bus_id_t axi_id = OSAL_AXI_BUS_ID_IPA_MAIN_MEMORY;
    uintptr_t hw_addr;

    // pre-process: open new memory manager
    config.memory_limit                = 4096;
    config.max_allowed_allocations     = 1;
    config.max_registered_monitors_cbs = 2;
    config.mode = OSAL_MMNGR_ALLOC_MODE_STACK_PROT;
    size = 128;
    alignment = 64;

    EXPECT_EQ(R_OSAL_MmngrOpen(&config, &hndl_mmngr), OSAL_RETURN_OK) << "pre-process failed";
    EXPECT_NE(hndl_mmngr,OSAL_MEMORY_MANAGER_HANDLE_INVALID) << "pre-process failed";

    // Test09_012_006
    // @brief: normal case: all valid argument
    EXPECT_EQ(R_OSAL_MmngrAlloc(hndl_mmngr, size, alignment, &buffer_obj), OSAL_RETURN_OK);
    EXPECT_NE(buffer_obj,OSAL_MEMORY_BUFFER_HANDLE_INVALID);
    EXPECT_EQ(R_OSAL_MmngrGetHwAddr(buffer_obj,axi_id, &hw_addr ), OSAL_RETURN_OK) << "Test09_012_006 failed";
    EXPECT_EQ(R_OSAL_MmngrDealloc(hndl_mmngr, buffer_obj), OSAL_RETURN_OK);
    buffer_obj = OSAL_MEMORY_BUFFER_HANDLE_INVALID;

    // post-process: close memory manager
    EXPECT_EQ(R_OSAL_MmngrClose(hndl_mmngr), OSAL_RETURN_OK) << "post-process failed";
    hndl_mmngr = OSAL_MEMORY_MANAGER_HANDLE_INVALID;
}
// [MmngrGetHwAddr_TC_09_012_006]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrGetHwAddr_TC_09_012_007 MemoryApiTest.MmngrGetHwAddr_TC_09_012_007
 * @subsection MmngrGetHwAddr_TC_09_012_007_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrGetHwAddr_TC_09_012_007_tci Test Case ID
 * MmngrGetHwAddr_S4_A_TC_09_012_007
 * @subsection MmngrGetHwAddr_TC_09_012_007_rr Related Requirement(s)
 * \#276560
 * @subsection MmngrGetHwAddr_TC_09_012_007_pp Prerequisite/Precondition
 * OSAL is initialized
 * @subsection MmngrGetHwAddr_TC_09_012_007_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrGetHwAddr with abnormal condition and mode is OSAL_MMNGR_ALLOC_MODE_STACK_PROT.
 * - pre-process: open new memory manager
 * - Test09_012_007: parameter getHwAddr is NULL.
 * - post-process: close memory manager
 * @subsection MmngrGetHwAddr_TC_09_012_007_tpts Test Procedure/Test Steps
 * -# Call R_OSAL_MmngrOpen with bellow config:
 *  - config.memory_limit                = 4096
 *  - config.max_allowed_allocations     = 1
 *  - config.max_registered_monitors_cbs = 2
 *  - config.mode = OSAL_MMNGR_ALLOC_MODE_STACK_PROT
 * -# Call R_OSAL_MmngrAlloc to allocate a memory buffer.
 * -# Call R_OSAL_MmngrGetHwAddr with NULL getHwAddr parameter.
 * -# Call R_OSAL_MmngrDealloc to deallocate the allocated memory buffer.
 * -# Call R_OSAL_MmngrClose to close memory handle.
 * @subsection MmngrGetHwAddr_TC_09_012_007_ereb Expected Result/Behavior
 * -# The return of R_OSAL_MmngrOpen is OSAL_RETURN_OK.<br>
 * The returned handle is not OSAL_MEMORY_MANAGER_HANDLE_INVALID.
 * -# The return value of R_OSAL_MmngrAlloc is OSAL_RETURN_OK.<br>
 * The return buffer is not OSAL_MEMORY_BUFFER_HANDLE_INVALID.
 * -# The return value of R_OSAL_MmngrGetHwAddr is OSAL_RETURN_PAR.
 * -# The return value of R_OSAL_MmngrDealloc is OSAL_RETURN_OK.
 * -# Call R_OSAL_MmngrClose to close memory handle.
 * @subsection MmngrGetHwAddr_TC_09_012_007_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrGetHwAddr_TC_09_012_007
 */
// [MmngrGetHwAddr_TC_09_012_007]
TEST_F(MemoryApiTest, MmngrGetHwAddr_TC_09_012_007)
{
    osal_axi_bus_id_t axi_id = OSAL_AXI_BUS_ID_IPA_MAIN_MEMORY;
    uintptr_t * p_hw_addr = NULL;

    // pre-process: open new memory manager
    config.memory_limit                = 4096;
    config.max_allowed_allocations     = 1;
    config.max_registered_monitors_cbs = 2;
    config.mode = OSAL_MMNGR_ALLOC_MODE_STACK_PROT;
    size = 128;
    alignment = 64;

    EXPECT_EQ(R_OSAL_MmngrOpen(&config, &hndl_mmngr), OSAL_RETURN_OK) << "pre-process failed";
    EXPECT_NE(hndl_mmngr,OSAL_MEMORY_MANAGER_HANDLE_INVALID) << "pre-process failed";

    // Test09_012_007
    // @brief: abnormal case: getHwAddr = NULL
    EXPECT_EQ(R_OSAL_MmngrAlloc(hndl_mmngr, size, alignment, &buffer_obj), OSAL_RETURN_OK);
    EXPECT_NE(buffer_obj,OSAL_MEMORY_BUFFER_HANDLE_INVALID);
    EXPECT_EQ(R_OSAL_MmngrGetHwAddr(buffer_obj ,axi_id, p_hw_addr), OSAL_RETURN_PAR) << "Test09_012_007 failed";
    EXPECT_EQ(R_OSAL_MmngrDealloc(hndl_mmngr, buffer_obj), OSAL_RETURN_OK);
    buffer_obj = OSAL_MEMORY_BUFFER_HANDLE_INVALID;

    // post-process: close memory manager
    EXPECT_EQ(R_OSAL_MmngrClose(hndl_mmngr), OSAL_RETURN_OK) << "post-process failed";
    hndl_mmngr = OSAL_MEMORY_MANAGER_HANDLE_INVALID;
}
// [MmngrGetHwAddr_TC_09_012_007]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrGetHwAddr_TC_09_012_008 MemoryApiTest.MmngrGetHwAddr_TC_09_012_008
 * @subsection MmngrGetHwAddr_TC_09_012_008_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrGetHwAddr_TC_09_012_008_tci Test Case ID
 * MmngrGetHwAddr_S0_A_TC_09_012_008
 * @subsection MmngrGetHwAddr_TC_09_012_008_rr Related Requirement(s)
 * \#276560
 * @subsection MmngrGetHwAddr_TC_09_012_008_pp Prerequisite/Precondition
 * OSAL is initialized
 * @subsection MmngrGetHwAddr_TC_09_012_008_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrGetHwAddr with abnormal condition and mode is OSAL_MMNGR_ALLOC_MODE_STACK_PROT.
 * - pre-process: open new memory manager
 * - Test09_012_008: buffer does not support to get HW address.
 * - post-process: close memory manager
 * @subsection MmngrGetHwAddr_TC_09_012_008_tpts Test Procedure/Test Steps
 * -# Call R_OSAL_MmngrOpen with bellow config:
 *  - config.memory_limit                = 4096
 *  - config.max_allowed_allocations     = 1
 *  - config.max_registered_monitors_cbs = 2
 *  - config.mode = OSAL_MMNGR_ALLOC_MODE_STACK_PROT
 * -# Allocate "tmp_buffer_obj" by using malloc function.
 * -# Call R_OSAL_MmngrAlloc to allocate a memory buffer.
 * -# Store "buffer_obj->p_getHwAddr" to "tmp_buffer_obj->p_getHwAddr".<br>
 * Set "buffer_obj->p_getHwAddr" to NULL. <br>
 * Call R_OSAL_MmngrGetHwAddr with the changed buffer "buffer_obj".<br>
 * Re-assign "tmp_buffer_obj->p_getHwAddr" to "buffer_obj->p_getHwAddr".
 * -# Call R_OSAL_MmngrDealloc to deallocate the original allocated buffer.
 * -# Free buffer pointed by "tmp_buffer_obj"
 * -# Call R_OSAL_MmngrClose to close memory handle.
 * @subsection MmngrGetHwAddr_TC_09_012_008_ereb Expected Result/Behavior
 * -# The return of R_OSAL_MmngrOpen is OSAL_RETURN_OK.<br>
 * The returned handle is not OSAL_MEMORY_MANAGER_HANDLE_INVALID.
 * -# Memory allocation succeeded (Pointer to buffer != Nullpointer)
 * -# The return value of R_OSAL_MmngrAlloc is OSAL_RETURN_OK.<br>
 * The return buffer is not OSAL_MEMORY_BUFFER_HANDLE_INVALID.
 * -# The return value of R_OSAL_MmngrGetHwAddr is OSAL_RETURN_UNSUPPORTED_OPERATION.
 * -# The return value of R_OSAL_MmngrDealloc is OSAL_RETURN_OK.
 * -# Allocated memory free succeeded.
 * -# Call R_OSAL_MmngrClose to close memory handle.
 * @subsection MmngrGetHwAddr_TC_09_012_008_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrGetHwAddr_TC_09_012_008
 */
// [MmngrGetHwAddr_TC_09_012_008]
TEST_F(MemoryApiTest, MmngrGetHwAddr_TC_09_012_008)
{
    osal_memory_buffer_handle_t tmp_buffer_obj;
    osal_axi_bus_id_t axi_id = OSAL_AXI_BUS_ID_IPA_MAIN_MEMORY;
    uintptr_t hw_addr;

    // pre-process: open new memory manager
    config.memory_limit                = 4096;
    config.max_allowed_allocations     = 1;
    config.max_registered_monitors_cbs = 2;
    config.mode = OSAL_MMNGR_ALLOC_MODE_STACK_PROT;
    size = 128;
    alignment = 64;

    EXPECT_EQ(R_OSAL_MmngrOpen(&config, &hndl_mmngr), OSAL_RETURN_OK) << "pre-process failed";
    EXPECT_NE(hndl_mmngr,OSAL_MEMORY_MANAGER_HANDLE_INVALID) << "pre-process failed";

    // Test09_012_008
    // @brief: abnormal case: buffer_obj->getHwAddr = NULL
    tmp_buffer_obj = (osal_memory_buffer_handle_t)malloc (sizeof(st_osal_memory_buffer_obj));
    EXPECT_EQ(R_OSAL_MmngrAlloc(hndl_mmngr, size, alignment, &buffer_obj), OSAL_RETURN_OK);
    EXPECT_NE(buffer_obj,OSAL_MEMORY_BUFFER_HANDLE_INVALID);
    tmp_buffer_obj->p_getHwAddr = buffer_obj->p_getHwAddr;
    buffer_obj->p_getHwAddr = NULL;
    EXPECT_EQ(R_OSAL_MmngrGetHwAddr(buffer_obj ,axi_id, &hw_addr ), OSAL_RETURN_UNSUPPORTED_OPERATION) << "Test09_012_008 failed";
    buffer_obj->p_getHwAddr = tmp_buffer_obj->p_getHwAddr;
    EXPECT_EQ(R_OSAL_MmngrDealloc(hndl_mmngr, buffer_obj), OSAL_RETURN_OK);
    buffer_obj = OSAL_MEMORY_BUFFER_HANDLE_INVALID;
    free(tmp_buffer_obj);

    // post-process: close memory manager
    EXPECT_EQ(R_OSAL_MmngrClose(hndl_mmngr), OSAL_RETURN_OK) << "post-process failed";
    hndl_mmngr = OSAL_MEMORY_MANAGER_HANDLE_INVALID;
}
// [MmngrGetHwAddr_TC_09_012_008]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrGetHwAddr_TC_09_012_009 MemoryApiTest.MmngrGetHwAddr_TC_09_012_009
 * @subsection MmngrGetHwAddr_TC_09_012_009_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrGetHwAddr_TC_09_012_009_tci Test Case ID
 * MmngrGetHwAddr_S0_A_TC_09_012_009
 * @subsection MmngrGetHwAddr_TC_09_012_009_rr Related Requirement(s)
 * \#276560
 * @subsection MmngrGetHwAddr_TC_09_012_009_pp Prerequisite/Precondition
 * OSAL is initialized
 * @subsection MmngrGetHwAddr_TC_09_012_009_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrGetHwAddr with abnormal condition (OSAL_MMNGR_ALLOC_MODE_STACK mode).
 * - pre-process: open new memory manager
 * - Test09_012_009: axi_id is OSAL_AXI_BUS_ID_INVALID.
 * - post-process: close memory manager
 * @subsection MmngrGetHwAddr_TC_09_012_009_tpts Test Procedure/Test Steps
 * -# Call R_OSAL_MmngrOpen with bellow config:
 *  - config.memory_limit                = 4096
 *  - config.max_allowed_allocations     = 1
 *  - config.max_registered_monitors_cbs = 2
 *  - config.mode = OSAL_MMNGR_ALLOC_MODE_STACK
 * -# Call R_OSAL_MmngrAlloc to allocate a memory buffer.
 * -# Call R_OSAL_MmngrGetHwAddr with the axi_id is OSAL_AXI_BUS_ID_INVALID
 * -# Call R_OSAL_MmngrDealloc to deallocate the allocated memory buffer.
 * -# Call R_OSAL_MmngrClose to close memory handle.
 * @subsection MmngrGetHwAddr_TC_09_012_009_ereb Expected Result/Behavior
 * -# The return of R_OSAL_MmngrOpen is OSAL_RETURN_OK.<br>
 * The returned handle is not OSAL_MEMORY_MANAGER_HANDLE_INVALID.
 * -# The return value of R_OSAL_MmngrAlloc is OSAL_RETURN_OK.<br>
 * The return buffer is not OSAL_MEMORY_BUFFER_HANDLE_INVALID.
 * -# The return value of R_OSAL_MmngrGetHwAddr is OSAL_RETURN_PAR.
 * -# The return value of R_OSAL_MmngrDealloc is OSAL_RETURN_OK.
 * -# Call R_OSAL_MmngrClose to close memory handle.
 * @subsection MmngrGetHwAddr_TC_09_012_009_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrGetHwAddr_TC_09_012_009
 */
// [MmngrGetHwAddr_TC_09_012_009]
TEST_F(MemoryApiTest, MmngrGetHwAddr_TC_09_012_009)
{
    osal_axi_bus_id_t axi_id = OSAL_AXI_BUS_ID_INVALID;
    uintptr_t hw_addr;

    // pre-process: open new memory manager
    config.memory_limit                = 4096;
    config.max_allowed_allocations     = 1;
    config.max_registered_monitors_cbs = 2;
    config.mode = OSAL_MMNGR_ALLOC_MODE_STACK;
    size = 128;
    alignment = 64;

    EXPECT_EQ(R_OSAL_MmngrOpen(&config, &hndl_mmngr), OSAL_RETURN_OK) << "pre-process failed";
    EXPECT_NE(hndl_mmngr,OSAL_MEMORY_MANAGER_HANDLE_INVALID) << "pre-process failed";

    // Test09_012_009
    // @brief: abnormal case: axi_id is OSAL_AXI_BUS_ID_INVALID
    EXPECT_EQ(R_OSAL_MmngrAlloc(hndl_mmngr, size, alignment, &buffer_obj), OSAL_RETURN_OK);
    EXPECT_NE(buffer_obj,OSAL_MEMORY_BUFFER_HANDLE_INVALID);
    EXPECT_EQ(R_OSAL_MmngrGetHwAddr(buffer_obj , axi_id, &hw_addr), OSAL_RETURN_PAR) << "Test09_012_009 failed";
    EXPECT_EQ(R_OSAL_MmngrDealloc(hndl_mmngr, buffer_obj), OSAL_RETURN_OK);

    // post-process: close memory manager
    EXPECT_EQ(R_OSAL_MmngrClose(hndl_mmngr), OSAL_RETURN_OK) << "post-process failed";
    hndl_mmngr = OSAL_MEMORY_MANAGER_HANDLE_INVALID;
}
// [MmngrGetHwAddr_TC_09_012_009]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrGetHwAddr_TC_09_012_010 MemoryApiTest.MmngrGetHwAddr_TC_09_012_010
 * @subsection MmngrGetHwAddr_TC_09_012_010_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrGetHwAddr_TC_09_012_010_tci Test Case ID
 * MmngrGetHwAddr_S0_A_TC_09_012_010
 * @subsection MmngrGetHwAddr_TC_09_012_010_rr Related Requirement(s)
 * \#276560
 * @subsection MmngrGetHwAddr_TC_09_012_010_pp Prerequisite/Precondition
 * OSAL is initialized
 * @subsection MmngrGetHwAddr_TC_09_012_010_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrGetHwAddr with abnormal condition (OSAL_MMNGR_ALLOC_MODE_STACK_PROT mode).
 * - pre-process: open new memory manager
 * - Test09_012_010: axi_id is OSAL_AXI_BUS_ID_INVALID.
 * - post-process: close memory manager
 * @subsection MmngrGetHwAddr_TC_09_012_010_tpts Test Procedure/Test Steps
 * -# Call R_OSAL_MmngrOpen with bellow config:
 *  - config.memory_limit                = 4096
 *  - config.max_allowed_allocations     = 1
 *  - config.max_registered_monitors_cbs = 2
 *  - config.mode = OSAL_MMNGR_ALLOC_MODE_STACK_PROT
 * -# Call R_OSAL_MmngrAlloc to allocate a memory buffer.
 * -# Call R_OSAL_MmngrGetHwAddr with the axi_id is OSAL_AXI_BUS_ID_INVALID
 * -# Call R_OSAL_MmngrDealloc to deallocate the allocated memory buffer.
 * -# Call R_OSAL_MmngrClose to close memory handle.
 * @subsection MmngrGetHwAddr_TC_09_012_010_ereb Expected Result/Behavior
 * -# The return of R_OSAL_MmngrOpen is OSAL_RETURN_OK.<br>
 * The returned handle is not OSAL_MEMORY_MANAGER_HANDLE_INVALID.
 * -# The return value of R_OSAL_MmngrAlloc is OSAL_RETURN_OK.<br>
 * The return buffer is not OSAL_MEMORY_BUFFER_HANDLE_INVALID.
 * -# The return value of R_OSAL_MmngrGetHwAddr is OSAL_RETURN_PAR.
 * -# The return value of R_OSAL_MmngrDealloc is OSAL_RETURN_OK.
 * -# Call R_OSAL_MmngrClose to close memory handle.
 * @subsection MmngrGetHwAddr_TC_09_012_010_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrGetHwAddr_TC_09_012_010
 */
// [MmngrGetHwAddr_TC_09_012_010]
TEST_F(MemoryApiTest, MmngrGetHwAddr_TC_09_012_010)
{
    osal_axi_bus_id_t axi_id = OSAL_AXI_BUS_ID_INVALID;
    uintptr_t hw_addr;

    // pre-process: open new memory manager
    config.memory_limit                = 4096;
    config.max_allowed_allocations     = 1;
    config.max_registered_monitors_cbs = 2;
    config.mode = OSAL_MMNGR_ALLOC_MODE_STACK_PROT;
    size = 128;
    alignment = 64;

    EXPECT_EQ(R_OSAL_MmngrOpen(&config, &hndl_mmngr), OSAL_RETURN_OK) << "pre-process failed";
    EXPECT_NE(hndl_mmngr,OSAL_MEMORY_MANAGER_HANDLE_INVALID) << "pre-process failed";

    // Test09_012_010
    // @brief: abnormal case: axi_id is OSAL_AXI_BUS_ID_INVALID
    EXPECT_EQ(R_OSAL_MmngrAlloc(hndl_mmngr, size, alignment, &buffer_obj), OSAL_RETURN_OK);
    EXPECT_NE(buffer_obj,OSAL_MEMORY_BUFFER_HANDLE_INVALID);
    EXPECT_EQ(R_OSAL_MmngrGetHwAddr(buffer_obj , axi_id, &hw_addr), OSAL_RETURN_PAR) << "Test09_012_010 failed";
    EXPECT_EQ(R_OSAL_MmngrDealloc(hndl_mmngr, buffer_obj), OSAL_RETURN_OK);

    // post-process: close memory manager
    EXPECT_EQ(R_OSAL_MmngrClose(hndl_mmngr), OSAL_RETURN_OK) << "post-process failed";
    hndl_mmngr = OSAL_MEMORY_MANAGER_HANDLE_INVALID;
}
// [MmngrGetHwAddr_TC_09_012_010]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrGetHwAddr_TC_09_012_011 MemoryApiTest.MmngrGetHwAddr_TC_09_012_011
 * @subsection MmngrGetHwAddr_TC_09_012_011_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrGetHwAddr_TC_09_012_011_tci Test Case ID
 * MmngrGetHwAddr_S0_A_TC_09_012_011
 * @subsection MmngrGetHwAddr_TC_09_012_011_rr Related Requirement(s)
 * \#276560
 * @subsection MmngrGetHwAddr_TC_09_012_011_pp Prerequisite/Precondition
 * OSAL is initialized
 * @subsection MmngrGetHwAddr_TC_09_012_011_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrGetHwAddr with abnormal condition (OSAL_MMNGR_ALLOC_MODE_FREE_LIST mode).
 * - pre-process: open new memory manager
 * - Test09_012_011: axi_id is OSAL_AXI_BUS_ID_INVALID.
 * - post-process: close memory manager
 * @subsection MmngrGetHwAddr_TC_09_012_011_tpts Test Procedure/Test Steps
 * -# Call R_OSAL_MmngrOpen with bellow config:
 *  - config.memory_limit                = 4096
 *  - config.max_allowed_allocations     = 1
 *  - config.max_registered_monitors_cbs = 2
 *  - config.mode = OSAL_MMNGR_ALLOC_MODE_FREE_LIST
 * -# Call R_OSAL_MmngrAlloc to allocate a memory buffer.
 * -# Call R_OSAL_MmngrGetHwAddr with the axi_id is OSAL_AXI_BUS_ID_INVALID
 * -# Call R_OSAL_MmngrDealloc to deallocate the allocated memory buffer.
 * -# Call R_OSAL_MmngrClose to close memory handle.
 * @subsection MmngrGetHwAddr_TC_09_012_011_ereb Expected Result/Behavior
 * -# The return of R_OSAL_MmngrOpen is OSAL_RETURN_OK.<br>
 * The returned handle is not OSAL_MEMORY_MANAGER_HANDLE_INVALID.
 * -# The return value of R_OSAL_MmngrAlloc is OSAL_RETURN_OK.<br>
 * The return buffer is not OSAL_MEMORY_BUFFER_HANDLE_INVALID.
 * -# The return value of R_OSAL_MmngrGetHwAddr is OSAL_RETURN_PAR.
 * -# The return value of R_OSAL_MmngrDealloc is OSAL_RETURN_OK.
 * -# Call R_OSAL_MmngrClose to close memory handle.
 * @subsection MmngrGetHwAddr_TC_09_012_011_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrGetHwAddr_TC_09_012_011
 */
// [MmngrGetHwAddr_TC_09_012_011]
TEST_F(MemoryApiTest, MmngrGetHwAddr_TC_09_012_011)
{
    osal_axi_bus_id_t axi_id = OSAL_AXI_BUS_ID_INVALID;
    uintptr_t hw_addr;

    // pre-process: open new memory manager
    config.memory_limit                = 4096;
    config.max_allowed_allocations     = 1;
    config.max_registered_monitors_cbs = 2;
    config.mode = OSAL_MMNGR_ALLOC_MODE_FREE_LIST;
    size = 128;
    alignment = 64;

    EXPECT_EQ(R_OSAL_MmngrOpen(&config, &hndl_mmngr), OSAL_RETURN_OK) << "pre-process failed";
    EXPECT_NE(hndl_mmngr,OSAL_MEMORY_MANAGER_HANDLE_INVALID) << "pre-process failed";

    // Test09_012_011
    // @brief: abnormal case: axi_id is OSAL_AXI_BUS_ID_INVALID
    EXPECT_EQ(R_OSAL_MmngrAlloc(hndl_mmngr, size, alignment, &buffer_obj), OSAL_RETURN_OK);
    EXPECT_NE(buffer_obj,OSAL_MEMORY_BUFFER_HANDLE_INVALID);
    EXPECT_EQ(R_OSAL_MmngrGetHwAddr(buffer_obj , axi_id, &hw_addr), OSAL_RETURN_PAR) << "Test09_012_011 failed";
    EXPECT_EQ(R_OSAL_MmngrDealloc(hndl_mmngr, buffer_obj), OSAL_RETURN_OK);

    // post-process: close memory manager
    EXPECT_EQ(R_OSAL_MmngrClose(hndl_mmngr), OSAL_RETURN_OK) << "post-process failed";
    hndl_mmngr = OSAL_MEMORY_MANAGER_HANDLE_INVALID;
}
// [MmngrGetHwAddr_TC_09_012_011]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrGetHwAddr_TC_09_012_012 MemoryApiTest.MmngrGetHwAddr_TC_09_012_012
 * @subsection MmngrGetHwAddr_TC_09_012_012_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrGetHwAddr_TC_09_012_012_tci Test Case ID
 * MmngrGetHwAddr_S0_A_TC_09_012_012
 * @subsection MmngrGetHwAddr_TC_09_012_012_rr Related Requirement(s)
 * \#276560
 * @subsection MmngrGetHwAddr_TC_09_012_012_pp Prerequisite/Precondition
 * OSAL is initialized
 * @subsection MmngrGetHwAddr_TC_09_012_012_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrGetHwAddr with abnormal condition (OSAL_MMNGR_ALLOC_MODE_FREE_LIST_PROT mode).
 * - pre-process: open new memory manager
 * - Test09_012_012: axi_id is OSAL_AXI_BUS_ID_INVALID.
 * - post-process: close memory manager
 * @subsection MmngrGetHwAddr_TC_09_012_012_tpts Test Procedure/Test Steps
 * -# Call R_OSAL_MmngrOpen with bellow config:
 *  - config.memory_limit                = 4096
 *  - config.max_allowed_allocations     = 1
 *  - config.max_registered_monitors_cbs = 2
 *  - config.mode = OSAL_MMNGR_ALLOC_MODE_FREE_LIST_PROT
 * -# Call R_OSAL_MmngrAlloc to allocate a memory buffer.
 * -# Call R_OSAL_MmngrGetHwAddr with the axi_id is OSAL_AXI_BUS_ID_INVALID
 * -# Call R_OSAL_MmngrDealloc to deallocate the allocated memory buffer.
 * -# Call R_OSAL_MmngrClose to close memory handle.
 * @subsection MmngrGetHwAddr_TC_09_012_012_ereb Expected Result/Behavior
 * -# The return of R_OSAL_MmngrOpen is OSAL_RETURN_OK.<br>
 * The returned handle is not OSAL_MEMORY_MANAGER_HANDLE_INVALID.
 * -# The return value of R_OSAL_MmngrAlloc is OSAL_RETURN_OK.<br>
 * The return buffer is not OSAL_MEMORY_BUFFER_HANDLE_INVALID.
 * -# The return value of R_OSAL_MmngrGetHwAddr is OSAL_RETURN_PAR.
 * -# The return value of R_OSAL_MmngrDealloc is OSAL_RETURN_OK.
 * -# Call R_OSAL_MmngrClose to close memory handle.
 * @subsection MmngrGetHwAddr_TC_09_012_012_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrGetHwAddr_TC_09_012_012
 */
// [MmngrGetHwAddr_TC_09_012_012]
TEST_F(MemoryApiTest, MmngrGetHwAddr_TC_09_012_012)
{
    osal_axi_bus_id_t axi_id = OSAL_AXI_BUS_ID_INVALID;
    uintptr_t hw_addr;

    // pre-process: open new memory manager
    config.memory_limit                = 4096;
    config.max_allowed_allocations     = 1;
    config.max_registered_monitors_cbs = 2;
    config.mode = OSAL_MMNGR_ALLOC_MODE_FREE_LIST_PROT;
    size = 128;
    alignment = 64;

    EXPECT_EQ(R_OSAL_MmngrOpen(&config, &hndl_mmngr), OSAL_RETURN_OK) << "pre-process failed";
    EXPECT_NE(hndl_mmngr,OSAL_MEMORY_MANAGER_HANDLE_INVALID) << "pre-process failed";

    // Test09_012_012
    // @brief: abnormal case: axi_id is OSAL_AXI_BUS_ID_INVALID
    EXPECT_EQ(R_OSAL_MmngrAlloc(hndl_mmngr, size, alignment, &buffer_obj), OSAL_RETURN_OK);
    EXPECT_NE(buffer_obj,OSAL_MEMORY_BUFFER_HANDLE_INVALID);
    EXPECT_EQ(R_OSAL_MmngrGetHwAddr(buffer_obj , axi_id, &hw_addr), OSAL_RETURN_PAR) << "Test09_012_012 failed";
    EXPECT_EQ(R_OSAL_MmngrDealloc(hndl_mmngr, buffer_obj), OSAL_RETURN_OK);

    // post-process: close memory manager
    EXPECT_EQ(R_OSAL_MmngrClose(hndl_mmngr), OSAL_RETURN_OK) << "post-process failed";
    hndl_mmngr = OSAL_MEMORY_MANAGER_HANDLE_INVALID;
}
// [MmngrGetHwAddr_TC_09_012_012]

#endif

#ifndef SKIP_MEMORY_GETSIZE
/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrGetHwAddr_TC_09_012_013 MemoryApiTest.MmngrGetHwAddr_TC_09_012_013
 * @subsection MmngrGetHwAddr_TC_09_012_013_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrGetHwAddr_TC_09_012_013_tci Test Case ID
 * MmngrGetHwAddr_S4_A_TC_09_012_013
 * @subsection MmngrGetHwAddr_TC_09_012_013_rr Related Requirement(s)
 * \#276560
 * @subsection MmngrGetHwAddr_TC_09_012_013_pp Prerequisite/Precondition
 * OSAL is initialized.
 * @subsection MmngrGetHwAddr_TC_09_012_013_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrGetHwAddr with abnormal condition in OSAL_MMNGR_ALLOC_MODE_STACK mode.
 * - Test09_012_013: "buffer_obj->p_ptr_self" is invalid.
 * @subsection MmngrGetHwAddr_TC_09_012_013_tpts Test Procedure/Test Steps
 * -# Call R_OSAL_MmngrGetOsalMaxConfig to get the valid config then set config mode to OSAL_MMNGR_ALLOC_MODE_STACK
 * -# Call R_OSAL_MmngrOpen with valid parameter and above config.
 * -# Call R_OSAL_MmngrAlloc with valid parameter
 * -# Call R_OSAL_MmngrGetHwAddr with an invalid buffer_obj->p_ptr_self:
 *      - buffer_obj with p_ptr_self value changed to p_ptr_self_ng
 *      - "p_ptr_self_ng" is allocated by malloc function.
 * -# Deallocate buffer_obj by using R_OSAL_MmngrDealloc.
 *      - buffer_obj with valid p_ptr_self value
 * -# Call R_OSAL_MmngrClose to close the memory manager.
 * @subsection MmngrGetHwAddr_TC_09_012_013_ereb Expected Result/Behavior
 * -# The return value of R_OSAL_MmngrGetOsalMaxConfig is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrOpen is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrAlloc is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrGetHwAddr is OSAL_RETURN_HANDLE.
 * -# The return value of R_OSAL_MmngrDealloc is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrClose is OSAL_RETURN_OK.
 * @subsection MmngrGetHwAddr_TC_09_012_013_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrGetHwAddr_TC_09_012_013
 */
// [MmngrGetHwAddr_TC_09_012_013]
TEST_F(MemoryApiTest, MmngrGetHwAddr_TC_09_012_013)
{
    void* ptr_self_bak;
    void* ptr_self_ng;
    uintptr_t hw_addr;
    osal_axi_bus_id_t axi_id = OSAL_AXI_BUS_ID_IPA_MAIN_MEMORY;

    // Test09_012_013
    // @brief: abnormal case: handle->p_ptr_self is invalid
    EXPECT_EQ(R_OSAL_MmngrGetOsalMaxConfig(&config), OSAL_RETURN_OK);
    config.mode = OSAL_MMNGR_ALLOC_MODE_STACK;
    EXPECT_EQ(R_OSAL_MmngrOpen(&config, &hndl_mmngr), OSAL_RETURN_OK);
    size = 64;
    alignment = 64;
    EXPECT_EQ(R_OSAL_MmngrAlloc(hndl_mmngr, size, alignment, &buffer_obj), OSAL_RETURN_OK);
    ptr_self_bak = buffer_obj->p_ptr_self;
    ptr_self_ng = malloc(0x100);
    memset(ptr_self_ng, 0x0, 0x100);
    buffer_obj->p_ptr_self = ptr_self_ng;
    EXPECT_EQ(R_OSAL_MmngrGetHwAddr(buffer_obj, axi_id, &hw_addr), OSAL_RETURN_HANDLE) << "Test09_012_013 failed";
    free(ptr_self_ng);
    buffer_obj->p_ptr_self = ptr_self_bak;
    EXPECT_EQ(R_OSAL_MmngrDealloc(hndl_mmngr, buffer_obj), OSAL_RETURN_OK) << "Test09_012_013 failed";
    EXPECT_EQ(R_OSAL_MmngrClose(hndl_mmngr), OSAL_RETURN_OK) << "Test09_012_013 failed";
    hndl_mmngr = OSAL_MEMORY_MANAGER_HANDLE_INVALID;
    buffer_obj = OSAL_MEMORY_BUFFER_HANDLE_INVALID;
}
// [MmngrGetHwAddr_TC_09_012_013]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrGetHwAddr_TC_09_012_014 MemoryApiTest.MmngrGetHwAddr_TC_09_012_014
 * @subsection MmngrGetHwAddr_TC_09_012_014_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrGetHwAddr_TC_09_012_014_tci Test Case ID
 * MmngrGetHwAddr_S4_A_TC_09_012_014
 * @subsection MmngrGetHwAddr_TC_09_012_014_rr Related Requirement(s)
 * \#276560
 * @subsection MmngrGetHwAddr_TC_09_012_014_pp Prerequisite/Precondition
 * OSAL is initialized.
 * @subsection MmngrGetHwAddr_TC_09_012_014_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrGetHwAddr with abnormal condition in OSAL_MMNGR_ALLOC_MODE_STACK_PROT mode.
 * - Test09_012_014: "buffer_obj->p_ptr_self" is invalid.
 * @subsection MmngrGetHwAddr_TC_09_012_014_tpts Test Procedure/Test Steps
 * -# Call R_OSAL_MmngrGetOsalMaxConfig to get the valid config then set config mode to OSAL_MMNGR_ALLOC_MODE_STACK_PROT
 * -# Call R_OSAL_MmngrOpen with valid parameter and above config.
 * -# Call R_OSAL_MmngrAlloc with valid parameter
 * -# Call R_OSAL_MmngrGetHwAddr with an invalid buffer_obj->p_ptr_self:
 *      - buffer_obj with p_ptr_self value changed to p_ptr_self_ng
 *      - "p_ptr_self_ng" is allocated by malloc function.
 * -# Deallocate buffer_obj by using R_OSAL_MmngrDealloc.
 *      - buffer_obj with valid p_ptr_self value
 * -# Call R_OSAL_MmngrClose to close the memory manager.
 * @subsection MmngrGetHwAddr_TC_09_012_014_ereb Expected Result/Behavior
 * -# The return value of R_OSAL_MmngrGetOsalMaxConfig is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrOpen is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrAlloc is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrGetHwAddr is OSAL_RETURN_HANDLE.
 * -# The return value of R_OSAL_MmngrDealloc is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrClose is OSAL_RETURN_OK.
 * @subsection MmngrGetHwAddr_TC_09_012_014_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrGetHwAddr_TC_09_012_014
 */
// [MmngrGetHwAddr_TC_09_012_014]
TEST_F(MemoryApiTest, MmngrGetHwAddr_TC_09_012_014)
{
    void* ptr_self_bak;
    void* ptr_self_ng;
    uintptr_t hw_addr;
    osal_axi_bus_id_t axi_id = OSAL_AXI_BUS_ID_IPA_MAIN_MEMORY;

    // Test09_012_014
    // @brief: abnormal case: handle->p_ptr_self is invalid
    EXPECT_EQ(R_OSAL_MmngrGetOsalMaxConfig(&config), OSAL_RETURN_OK);
    config.mode = OSAL_MMNGR_ALLOC_MODE_STACK_PROT;
    EXPECT_EQ(R_OSAL_MmngrOpen(&config, &hndl_mmngr), OSAL_RETURN_OK);
    size = 64;
    alignment = 64;
    EXPECT_EQ(R_OSAL_MmngrAlloc(hndl_mmngr, size, alignment, &buffer_obj), OSAL_RETURN_OK);
    ptr_self_bak = buffer_obj->p_ptr_self;
    ptr_self_ng = malloc(0x100);
    memset(ptr_self_ng, 0x0, 0x100);
    buffer_obj->p_ptr_self = ptr_self_ng;
    EXPECT_EQ(R_OSAL_MmngrGetHwAddr(buffer_obj, axi_id, &hw_addr), OSAL_RETURN_HANDLE) << "Test09_012_014 failed";
    free(ptr_self_ng);
    buffer_obj->p_ptr_self = ptr_self_bak;
    EXPECT_EQ(R_OSAL_MmngrDealloc(hndl_mmngr, buffer_obj), OSAL_RETURN_OK) << "Test09_012_014 failed";
    EXPECT_EQ(R_OSAL_MmngrClose(hndl_mmngr), OSAL_RETURN_OK) << "Test09_012_014 failed";
    hndl_mmngr = OSAL_MEMORY_MANAGER_HANDLE_INVALID;
    buffer_obj = OSAL_MEMORY_BUFFER_HANDLE_INVALID;
}
// [MmngrGetHwAddr_TC_09_012_014]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrGetHwAddr_TC_09_012_015 MemoryApiTest.MmngrGetHwAddr_TC_09_012_015
 * @subsection MmngrGetHwAddr_TC_09_012_015_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrGetHwAddr_TC_09_012_015_tci Test Case ID
 * MmngrGetHwAddr_S4_A_TC_09_012_015
 * @subsection MmngrGetHwAddr_TC_09_012_015_rr Related Requirement(s)
 * \#276560
 * @subsection MmngrGetHwAddr_TC_09_012_015_pp Prerequisite/Precondition
 * OSAL is initialized.
 * @subsection MmngrGetHwAddr_TC_09_012_015_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrGetHwAddr with abnormal condition in OSAL_MMNGR_ALLOC_MODE_FREE_LIST mode.
 * - Test09_012_015: "buffer_obj->p_ptr_self" is invalid.
 * @subsection MmngrGetHwAddr_TC_09_012_015_tpts Test Procedure/Test Steps
 * -# Call R_OSAL_MmngrGetOsalMaxConfig to get the valid config then set config mode to OSAL_MMNGR_ALLOC_MODE_FREE_LIST
 * -# Call R_OSAL_MmngrOpen with valid parameter and above config.
 * -# Call R_OSAL_MmngrAlloc with valid parameter
 * -# Call R_OSAL_MmngrGetHwAddr with an invalid buffer_obj->p_ptr_self:
 *      - buffer_obj with p_ptr_self value changed to p_ptr_self_ng
 *      - "p_ptr_self_ng" is allocated by malloc function.
 * -# Deallocate buffer_obj by using R_OSAL_MmngrDealloc.
 *      - buffer_obj with valid p_ptr_self value
 * -# Call R_OSAL_MmngrClose to close the memory manager.
 * @subsection MmngrGetHwAddr_TC_09_012_015_ereb Expected Result/Behavior
 * -# The return value of R_OSAL_MmngrGetOsalMaxConfig is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrOpen is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrAlloc is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrGetHwAddr is OSAL_RETURN_HANDLE.
 * -# The return value of R_OSAL_MmngrDealloc is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrClose is OSAL_RETURN_OK.
 * @subsection MmngrGetHwAddr_TC_09_012_015_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrGetHwAddr_TC_09_012_015
 */
// [MmngrGetHwAddr_TC_09_012_015]
TEST_F(MemoryApiTest, MmngrGetHwAddr_TC_09_012_015)
{
    void* ptr_self_bak;
    void* ptr_self_ng;
    uintptr_t hw_addr;
    osal_axi_bus_id_t axi_id = OSAL_AXI_BUS_ID_IPA_MAIN_MEMORY;

    // Test09_012_015
    // @brief: abnormal case: handle->p_ptr_self is invalid
    EXPECT_EQ(R_OSAL_MmngrGetOsalMaxConfig(&config), OSAL_RETURN_OK);
    config.mode = OSAL_MMNGR_ALLOC_MODE_FREE_LIST;
    EXPECT_EQ(R_OSAL_MmngrOpen(&config, &hndl_mmngr), OSAL_RETURN_OK);
    size = 64;
    alignment = 64;
    EXPECT_EQ(R_OSAL_MmngrAlloc(hndl_mmngr, size, alignment, &buffer_obj), OSAL_RETURN_OK);
    ptr_self_bak = buffer_obj->p_ptr_self;
    ptr_self_ng = malloc(0x100);
    memset(ptr_self_ng, 0x0, 0x100);
    buffer_obj->p_ptr_self = ptr_self_ng;
    EXPECT_EQ(R_OSAL_MmngrGetHwAddr(buffer_obj, axi_id, &hw_addr), OSAL_RETURN_HANDLE) << "Test09_012_015 failed";
    free(ptr_self_ng);
    buffer_obj->p_ptr_self = ptr_self_bak;
    EXPECT_EQ(R_OSAL_MmngrDealloc(hndl_mmngr, buffer_obj), OSAL_RETURN_OK) << "Test09_012_015 failed";
    EXPECT_EQ(R_OSAL_MmngrClose(hndl_mmngr), OSAL_RETURN_OK) << "Test09_012_015 failed";
    hndl_mmngr = OSAL_MEMORY_MANAGER_HANDLE_INVALID;
    buffer_obj = OSAL_MEMORY_BUFFER_HANDLE_INVALID;
}
// [MmngrGetHwAddr_TC_09_012_015]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrGetHwAddr_TC_09_012_016 MemoryApiTest.MmngrGetHwAddr_TC_09_012_016
 * @subsection MmngrGetHwAddr_TC_09_012_016_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrGetHwAddr_TC_09_012_016_tci Test Case ID
 * MmngrGetHwAddr_S4_A_TC_09_012_016
 * @subsection MmngrGetHwAddr_TC_09_012_016_rr Related Requirement(s)
 * \#276560
 * @subsection MmngrGetHwAddr_TC_09_012_016_pp Prerequisite/Precondition
 * OSAL is initialized.
 * @subsection MmngrGetHwAddr_TC_09_012_016_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrGetHwAddr with abnormal condition in OSAL_MMNGR_ALLOC_MODE_FREE_LIST_PROT mode.
 * - Test09_012_016: "buffer_obj->p_ptr_self" is invalid.
 * @subsection MmngrGetHwAddr_TC_09_012_016_tpts Test Procedure/Test Steps
 * -# Call R_OSAL_MmngrGetOsalMaxConfig to get the valid config then set config mode to OSAL_MMNGR_ALLOC_MODE_FREE_LIST_PROT
 * -# Call R_OSAL_MmngrOpen with valid parameter and above config
 * -# Call R_OSAL_MmngrAlloc with valid parameter
 * -# Call R_OSAL_MmngrGetHwAddr with an invalid buffer_obj->p_ptr_self:
 *      - buffer_obj with p_ptr_self value changed to p_ptr_self_ng
 *      - "p_ptr_self_ng" is allocated by malloc function.
 * -# Deallocate buffer_obj by using R_OSAL_MmngrDealloc.
 *      - buffer_obj with valid p_ptr_self value
 * -# Call R_OSAL_MmngrClose to close the memory manager.
 * @subsection MmngrGetHwAddr_TC_09_012_016_ereb Expected Result/Behavior
 * -# The return value of R_OSAL_MmngrGetOsalMaxConfig is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrOpen is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrAlloc is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrGetHwAddr is OSAL_RETURN_HANDLE.
 * -# The return value of R_OSAL_MmngrDealloc is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrClose is OSAL_RETURN_OK.
 * @subsection MmngrGetHwAddr_TC_09_012_016_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrGetHwAddr_TC_09_012_016
 */
// [MmngrGetHwAddr_TC_09_012_016]
TEST_F(MemoryApiTest, MmngrGetHwAddr_TC_09_012_016)
{
    void* ptr_self_bak;
    void* ptr_self_ng;
    uintptr_t hw_addr;
    osal_axi_bus_id_t axi_id = OSAL_AXI_BUS_ID_IPA_MAIN_MEMORY;

    // Test09_012_016
    // @brief: abnormal case: handle->p_ptr_self is invalid
    EXPECT_EQ(R_OSAL_MmngrGetOsalMaxConfig(&config), OSAL_RETURN_OK);
    config.mode = OSAL_MMNGR_ALLOC_MODE_FREE_LIST_PROT;
    EXPECT_EQ(R_OSAL_MmngrOpen(&config, &hndl_mmngr), OSAL_RETURN_OK);
    size = 64;
    alignment = 64;
    EXPECT_EQ(R_OSAL_MmngrAlloc(hndl_mmngr, size, alignment, &buffer_obj), OSAL_RETURN_OK);
    ptr_self_bak = buffer_obj->p_ptr_self;
    ptr_self_ng = malloc(0x100);
    memset(ptr_self_ng, 0x0, 0x100);
    buffer_obj->p_ptr_self = ptr_self_ng;
    EXPECT_EQ(R_OSAL_MmngrGetHwAddr(buffer_obj, axi_id, &hw_addr), OSAL_RETURN_HANDLE) << "Test09_012_016 failed";
    free(ptr_self_ng);
    buffer_obj->p_ptr_self = ptr_self_bak;
    EXPECT_EQ(R_OSAL_MmngrDealloc(hndl_mmngr, buffer_obj), OSAL_RETURN_OK) << "Test09_012_016 failed";
    EXPECT_EQ(R_OSAL_MmngrClose(hndl_mmngr), OSAL_RETURN_OK) << "Test09_012_016 failed";
    hndl_mmngr = OSAL_MEMORY_MANAGER_HANDLE_INVALID;
    buffer_obj = OSAL_MEMORY_BUFFER_HANDLE_INVALID;
}
// [MmngrGetHwAddr_TC_09_012_016]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrGetHwAddr_TC_09_012_017 MemoryApiTest.MmngrGetHwAddr_TC_09_012_017
 * @subsection MmngrGetHwAddr_TC_09_012_017_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrGetHwAddr_TC_09_012_017_tci Test Case ID
 * MmngrGetHwAddr_S2_A_TC_09_012_017
 * @subsection MmngrGetHwAddr_TC_09_012_017_rr Related Requirement(s)
 * \#276560
 * @subsection MmngrGetHwAddr_TC_09_012_017_pp Prerequisite/Precondition
 * OSAL is initialized.
 * @subsection MmngrGetHwAddr_TC_09_012_017_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrGetHwAddr with abnormal condition in OSAL_MMNGR_ALLOC_MODE_STACK mode.
 * - Test09_012_017: buffer object has already been deallocated
 * @subsection MmngrGetHwAddr_TC_09_012_017_tpts Test Procedure/Test Steps
 * -# Call R_OSAL_MmngrGetOsalMaxConfig to get the valid config then set config mode to OSAL_MMNGR_ALLOC_MODE_STACK
 * -# Call R_OSAL_MmngrOpen with valid parameter and above config
 * -# Call R_OSAL_MmngrAlloc with valid parameter
 * -# Deallocate buffer_obj by using R_OSAL_MmngrDealloc.
 * -# Call R_OSAL_MmngrGetHwAddr with the buffer_obj which has already been deallocated
 * -# Call R_OSAL_MmngrClose to close the memory manager.
 * @subsection MmngrGetHwAddr_TC_09_012_017_ereb Expected Result/Behavior
 * -# The return value of R_OSAL_MmngrGetOsalMaxConfig is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrOpen is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrAlloc is OSAL_RETURN_OK.
 * # The return value of R_OSAL_MmngrDealloc is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrGetHwAddr is OSAL_RETURN_HANDLE.
 * -# The return value of R_OSAL_MmngrClose is OSAL_RETURN_OK.
 * @subsection MmngrGetHwAddr_TC_09_012_017_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrGetHwAddr_TC_09_012_017
 */
// [MmngrGetHwAddr_TC_09_012_017]
TEST_F(MemoryApiTest, MmngrGetHwAddr_TC_09_012_017)
{
    uintptr_t hw_addr;
    osal_axi_bus_id_t axi_id = OSAL_AXI_BUS_ID_IPA_MAIN_MEMORY;

    // Test09_012_017
    // @brief: abnormal case: buffer object has already been deallocated
    EXPECT_EQ(R_OSAL_MmngrGetOsalMaxConfig(&config), OSAL_RETURN_OK) << "Test09_012_017 failed";
    config.mode = OSAL_MMNGR_ALLOC_MODE_STACK;
    EXPECT_EQ(R_OSAL_MmngrOpen(&config, &hndl_mmngr), OSAL_RETURN_OK) << "Test09_012_017 failed";
    size = 64;
    alignment = 64;
    EXPECT_EQ(R_OSAL_MmngrAlloc(hndl_mmngr, size, alignment, &buffer_obj), OSAL_RETURN_OK) << "Test09_012_017 failed";
    EXPECT_EQ(R_OSAL_MmngrDealloc(hndl_mmngr, buffer_obj), OSAL_RETURN_OK) << "Test09_012_017 failed";
    EXPECT_EQ(R_OSAL_MmngrGetHwAddr(buffer_obj, axi_id, &hw_addr), OSAL_RETURN_HANDLE) << "Test09_012_017 failed";
    EXPECT_EQ(R_OSAL_MmngrClose(hndl_mmngr), OSAL_RETURN_OK) << "Test09_012_017 failed";
    hndl_mmngr = OSAL_MEMORY_MANAGER_HANDLE_INVALID;
    buffer_obj = OSAL_MEMORY_BUFFER_HANDLE_INVALID;
}
// [MmngrGetHwAddr_TC_09_012_017]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrGetHwAddr_TC_09_012_018 MemoryApiTest.MmngrGetHwAddr_TC_09_012_018
 * @subsection MmngrGetHwAddr_TC_09_012_018_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrGetHwAddr_TC_09_012_018_tci Test Case ID
 * MmngrGetHwAddr_S2_A_TC_09_012_018
 * @subsection MmngrGetHwAddr_TC_09_012_018_rr Related Requirement(s)
 * \#276560
 * @subsection MmngrGetHwAddr_TC_09_012_018_pp Prerequisite/Precondition
 * OSAL is initialized.
 * @subsection MmngrGetHwAddr_TC_09_012_018_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrGetHwAddr with abnormal condition in OSAL_MMNGR_ALLOC_MODE_STACK_PROT mode.
 * - Test09_012_018: buffer object has already been deallocated
 * @subsection MmngrGetHwAddr_TC_09_012_018_tpts Test Procedure/Test Steps
 * -# Call R_OSAL_MmngrGetOsalMaxConfig to get the valid config then set config mode to OSAL_MMNGR_ALLOC_MODE_STACK_PROT
 * -# Call R_OSAL_MmngrOpen with valid parameter and above config
 * -# Call R_OSAL_MmngrAlloc with valid parameter
 * -# Deallocate buffer_obj by using R_OSAL_MmngrDealloc.
 * -# Call R_OSAL_MmngrGetHwAddr with the buffer_obj which has already been deallocated
 * -# Call R_OSAL_MmngrClose to close the memory manager.
 * @subsection MmngrGetHwAddr_TC_09_012_018_ereb Expected Result/Behavior
 * -# The return value of R_OSAL_MmngrGetOsalMaxConfig is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrOpen is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrAlloc is OSAL_RETURN_OK.
 * # The return value of R_OSAL_MmngrDealloc is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrGetHwAddr is OSAL_RETURN_HANDLE.
 * -# The return value of R_OSAL_MmngrClose is OSAL_RETURN_OK.
 * @subsection MmngrGetHwAddr_TC_09_012_018_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrGetHwAddr_TC_09_012_018
 */
// [MmngrGetHwAddr_TC_09_012_018]
TEST_F(MemoryApiTest, MmngrGetHwAddr_TC_09_012_018)
{
    uintptr_t hw_addr;
    osal_axi_bus_id_t axi_id = OSAL_AXI_BUS_ID_IPA_MAIN_MEMORY;

    // Test09_012_018
    // @brief: abnormal case: buffer object has already been deallocated
    EXPECT_EQ(R_OSAL_MmngrGetOsalMaxConfig(&config), OSAL_RETURN_OK) << "Test09_012_018 failed";
    config.mode = OSAL_MMNGR_ALLOC_MODE_STACK_PROT;
    EXPECT_EQ(R_OSAL_MmngrOpen(&config, &hndl_mmngr), OSAL_RETURN_OK) << "Test09_012_018 failed";
    size = 64;
    alignment = 64;
    EXPECT_EQ(R_OSAL_MmngrAlloc(hndl_mmngr, size, alignment, &buffer_obj), OSAL_RETURN_OK) << "Test09_012_018 failed";
    EXPECT_EQ(R_OSAL_MmngrDealloc(hndl_mmngr, buffer_obj), OSAL_RETURN_OK) << "Test09_012_018 failed";
    EXPECT_EQ(R_OSAL_MmngrGetHwAddr(buffer_obj, axi_id, &hw_addr), OSAL_RETURN_HANDLE) << "Test09_012_018 failed";
    EXPECT_EQ(R_OSAL_MmngrClose(hndl_mmngr), OSAL_RETURN_OK) << "Test09_012_018 failed";
    hndl_mmngr = OSAL_MEMORY_MANAGER_HANDLE_INVALID;
    buffer_obj = OSAL_MEMORY_BUFFER_HANDLE_INVALID;
}
// [MmngrGetHwAddr_TC_09_012_018]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrGetHwAddr_TC_09_012_019 MemoryApiTest.MmngrGetHwAddr_TC_09_012_019
 * @subsection MmngrGetHwAddr_TC_09_012_019_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrGetHwAddr_TC_09_012_019_tci Test Case ID
 * MmngrGetHwAddr_S2_A_TC_09_012_019
 * @subsection MmngrGetHwAddr_TC_09_012_019_rr Related Requirement(s)
 * \#276560
 * @subsection MmngrGetHwAddr_TC_09_012_019_pp Prerequisite/Precondition
 * OSAL is initialized.
 * @subsection MmngrGetHwAddr_TC_09_012_019_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrGetHwAddr with abnormal condition in OSAL_MMNGR_ALLOC_MODE_FREE_LIST mode.
 * - Test09_012_019: buffer object has already been deallocated
 * @subsection MmngrGetHwAddr_TC_09_012_019_tpts Test Procedure/Test Steps
 * -# Call R_OSAL_MmngrGetOsalMaxConfig to get the valid config then set config mode to OSAL_MMNGR_ALLOC_MODE_FREE_LIST
 * -# Call R_OSAL_MmngrOpen with valid parameter and above config
 * -# Call R_OSAL_MmngrAlloc with valid parameter
 * -# Deallocate buffer_obj by using R_OSAL_MmngrDealloc.
 * -# Call R_OSAL_MmngrGetHwAddr with the buffer_obj which has already been deallocated
 * -# Call R_OSAL_MmngrClose to close the memory manager.
 * @subsection MmngrGetHwAddr_TC_09_012_019_ereb Expected Result/Behavior
 * -# The return value of R_OSAL_MmngrGetOsalMaxConfig is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrOpen is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrAlloc is OSAL_RETURN_OK.
 * # The return value of R_OSAL_MmngrDealloc is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrGetHwAddr is OSAL_RETURN_HANDLE.
 * -# The return value of R_OSAL_MmngrClose is OSAL_RETURN_OK.
 * @subsection MmngrGetHwAddr_TC_09_012_019_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrGetHwAddr_TC_09_012_019
 */
// [MmngrGetHwAddr_TC_09_012_019]
TEST_F(MemoryApiTest, MmngrGetHwAddr_TC_09_012_019)
{
    uintptr_t hw_addr;
    osal_axi_bus_id_t axi_id = OSAL_AXI_BUS_ID_IPA_MAIN_MEMORY;

    // Test09_012_019
    // @brief: abnormal case: buffer object has already been deallocated
    EXPECT_EQ(R_OSAL_MmngrGetOsalMaxConfig(&config), OSAL_RETURN_OK) << "Test09_012_019 failed";
    config.mode = OSAL_MMNGR_ALLOC_MODE_FREE_LIST;
    EXPECT_EQ(R_OSAL_MmngrOpen(&config, &hndl_mmngr), OSAL_RETURN_OK) << "Test09_012_019 failed";
    size = 64;
    alignment = 64;
    EXPECT_EQ(R_OSAL_MmngrAlloc(hndl_mmngr, size, alignment, &buffer_obj), OSAL_RETURN_OK) << "Test09_012_019 failed";
    EXPECT_EQ(R_OSAL_MmngrDealloc(hndl_mmngr, buffer_obj), OSAL_RETURN_OK) << "Test09_012_019 failed";
    EXPECT_EQ(R_OSAL_MmngrGetHwAddr(buffer_obj, axi_id, &hw_addr), OSAL_RETURN_HANDLE) << "Test09_012_019 failed";
    EXPECT_EQ(R_OSAL_MmngrClose(hndl_mmngr), OSAL_RETURN_OK) << "Test09_012_019 failed";
    hndl_mmngr = OSAL_MEMORY_MANAGER_HANDLE_INVALID;
    buffer_obj = OSAL_MEMORY_BUFFER_HANDLE_INVALID;
}
// [MmngrGetHwAddr_TC_09_012_019]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrGetHwAddr_TC_09_012_020 MemoryApiTest.MmngrGetHwAddr_TC_09_012_020
 * @subsection MmngrGetHwAddr_TC_09_012_020_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrGetHwAddr_TC_09_012_020_tci Test Case ID
 * MmngrGetHwAddr_S2_A_TC_09_012_020
 * @subsection MmngrGetHwAddr_TC_09_012_020_rr Related Requirement(s)
 * \#276560
 * @subsection MmngrGetHwAddr_TC_09_012_020_pp Prerequisite/Precondition
 * OSAL is initialized.
 * @subsection MmngrGetHwAddr_TC_09_012_020_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrGetHwAddr with abnormal condition in OSAL_MMNGR_ALLOC_MODE_FREE_LIST_PROT mode.
 * - Test09_012_020: buffer object has already been deallocated
 * @subsection MmngrGetHwAddr_TC_09_012_020_tpts Test Procedure/Test Steps
 * -# Call R_OSAL_MmngrGetOsalMaxConfig to get the valid config then set config mode to OSAL_MMNGR_ALLOC_MODE_FREE_LIST_PROT
 * -# Call R_OSAL_MmngrOpen with valid parameter and above config
 * -# Call R_OSAL_MmngrAlloc with valid parameter
 * -# Deallocate buffer_obj by using R_OSAL_MmngrDealloc.
 * -# Call R_OSAL_MmngrGetHwAddr with the buffer_obj which has already been deallocated
 * -# Call R_OSAL_MmngrClose to close the memory manager.
 * @subsection MmngrGetHwAddr_TC_09_012_020_ereb Expected Result/Behavior
 * -# The return value of R_OSAL_MmngrGetOsalMaxConfig is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrOpen is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrAlloc is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrDealloc is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrGetHwAddr is OSAL_RETURN_HANDLE.
 * -# The return value of R_OSAL_MmngrClose is OSAL_RETURN_OK.
 * @subsection MmngrGetHwAddr_TC_09_012_020_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrGetHwAddr_TC_09_012_020
 */
// [MmngrGetHwAddr_TC_09_012_020]
TEST_F(MemoryApiTest, MmngrGetHwAddr_TC_09_012_020)
{
    uintptr_t hw_addr;
    osal_axi_bus_id_t axi_id = OSAL_AXI_BUS_ID_IPA_MAIN_MEMORY;

    // Test09_012_020
    // @brief: abnormal case: buffer object has already been deallocated
    EXPECT_EQ(R_OSAL_MmngrGetOsalMaxConfig(&config), OSAL_RETURN_OK) << "Test09_012_020 failed";
    config.mode = OSAL_MMNGR_ALLOC_MODE_FREE_LIST_PROT;
    EXPECT_EQ(R_OSAL_MmngrOpen(&config, &hndl_mmngr), OSAL_RETURN_OK) << "Test09_012_020 failed";
    size = 64;
    alignment = 64;
    EXPECT_EQ(R_OSAL_MmngrAlloc(hndl_mmngr, size, alignment, &buffer_obj), OSAL_RETURN_OK) << "Test09_012_020 failed";
    EXPECT_EQ(R_OSAL_MmngrDealloc(hndl_mmngr, buffer_obj), OSAL_RETURN_OK) << "Test09_012_020 failed";
    EXPECT_EQ(R_OSAL_MmngrGetHwAddr(buffer_obj, axi_id, &hw_addr), OSAL_RETURN_HANDLE) << "Test09_012_020 failed";
    EXPECT_EQ(R_OSAL_MmngrClose(hndl_mmngr), OSAL_RETURN_OK) << "Test09_012_020 failed";
    hndl_mmngr = OSAL_MEMORY_MANAGER_HANDLE_INVALID;
    buffer_obj = OSAL_MEMORY_BUFFER_HANDLE_INVALID;
}
// [MmngrGetHwAddr_TC_09_012_020]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrGetHwAddr_TC_09_012_021 MemoryApiTest.MmngrGetHwAddr_TC_09_012_021
 * @subsection MmngrGetHwAddr_TC_09_012_021_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrGetHwAddr_TC_09_012_021_tci Test Case ID
 * MmngrGetHwAddr_S4_A_TC_09_012_021
 * @subsection MmngrGetHwAddr_TC_09_012_021_rr Related Requirement(s)
 * \#276560
 * @subsection MmngrGetHwAddr_TC_09_012_021_pp Prerequisite/Precondition
 * OSAL is initialized.
 * @subsection MmngrGetHwAddr_TC_09_012_021_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrGetHwAddr with abnormal condition in OSAL_MMNGR_ALLOC_MODE_STACK mode.
 * - Test09_012_021: buffer_obj->mmngr_owner_hndl->p_ptr_self is invalid (NULL)
 * @subsection MmngrGetHwAddr_TC_09_012_021_tpts Test Procedure/Test Steps
 * -# Call R_OSAL_MmngrGetOsalMaxConfig to get the valid config then set config mode to OSAL_MMNGR_ALLOC_MODE_STACK
 * -# Call R_OSAL_MmngrOpen with valid parameter and above config
 * -# Call R_OSAL_MmngrAlloc with valid parameter
 * -# Call R_OSAL_MmngrGetHwAddr with buffer_obj->mmngr_owner_hndl->p_ptr_self is invalid (NULL)
 * -# Deallocate buffer_obj by using R_OSAL_MmngrDealloc.
 * -# Call R_OSAL_MmngrClose to close the memory manager.
 * @subsection MmngrGetHwAddr_TC_09_012_021_ereb Expected Result/Behavior
 * -# The return value of R_OSAL_MmngrGetOsalMaxConfig is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrOpen is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrAlloc is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrGetHwAddr is OSAL_RETURN_HANDLE.
 * -# The return value of R_OSAL_MmngrDealloc is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrClose is OSAL_RETURN_OK.
 * @subsection MmngrGetHwAddr_TC_09_012_021_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrGetHwAddr_TC_09_012_021
 */
// [MmngrGetHwAddr_TC_09_012_021]
TEST_F(MemoryApiTest, MmngrGetHwAddr_TC_09_012_021)
{
    uintptr_t hw_addr;
    osal_axi_bus_id_t axi_id = OSAL_AXI_BUS_ID_IPA_MAIN_MEMORY;
    void* bk_ptr_self;

    // Test09_012_021
    // @brief: abnormal case: buffer_obj->mmngr_owner_hndl->p_ptr_self is invalid (NULL)
    EXPECT_EQ(R_OSAL_MmngrGetOsalMaxConfig(&config), OSAL_RETURN_OK) << "Test09_012_021 failed";
    config.mode = OSAL_MMNGR_ALLOC_MODE_STACK;
    EXPECT_EQ(R_OSAL_MmngrOpen(&config, &hndl_mmngr), OSAL_RETURN_OK) << "Test09_012_021 failed";
    size = 64;
    alignment = 64;
    EXPECT_EQ(R_OSAL_MmngrAlloc(hndl_mmngr, size, alignment, &buffer_obj), OSAL_RETURN_OK) << "Test09_012_021 failed";
    bk_ptr_self = buffer_obj->mmngr_owner_hndl->p_ptr_self;
    buffer_obj->mmngr_owner_hndl->p_ptr_self = NULL;
    EXPECT_EQ(R_OSAL_MmngrGetHwAddr(buffer_obj, axi_id, &hw_addr), OSAL_RETURN_HANDLE) << "Test09_012_021 failed";
    buffer_obj->mmngr_owner_hndl->p_ptr_self = bk_ptr_self;
    EXPECT_EQ(R_OSAL_MmngrDealloc(hndl_mmngr, buffer_obj), OSAL_RETURN_OK) << "Test09_012_021 failed";
    EXPECT_EQ(R_OSAL_MmngrClose(hndl_mmngr), OSAL_RETURN_OK) << "Test09_012_021 failed";
    hndl_mmngr = OSAL_MEMORY_MANAGER_HANDLE_INVALID;
    buffer_obj = OSAL_MEMORY_BUFFER_HANDLE_INVALID;
}
// [MmngrGetHwAddr_TC_09_012_021]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrGetHwAddr_TC_09_012_022 MemoryApiTest.MmngrGetHwAddr_TC_09_012_022
 * @subsection MmngrGetHwAddr_TC_09_012_022_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrGetHwAddr_TC_09_012_022_tci Test Case ID
 * MmngrGetHwAddr_S4_A_TC_09_012_022
 * @subsection MmngrGetHwAddr_TC_09_012_022_rr Related Requirement(s)
 * \#276560
 * @subsection MmngrGetHwAddr_TC_09_012_022_pp Prerequisite/Precondition
 * OSAL is initialized.
 * @subsection MmngrGetHwAddr_TC_09_012_022_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrGetHwAddr with abnormal condition in OSAL_MMNGR_ALLOC_MODE_STACK_PROT mode.
 * - Test09_012_022: buffer_obj->mmngr_owner_hndl->p_ptr_self is invalid (NULL)
 * @subsection MmngrGetHwAddr_TC_09_012_022_tpts Test Procedure/Test Steps
 * -# Call R_OSAL_MmngrGetOsalMaxConfig to get the valid config then set config mode to OSAL_MMNGR_ALLOC_MODE_STACK_PROT
 * -# Call R_OSAL_MmngrOpen with valid parameter and above config
 * -# Call R_OSAL_MmngrAlloc with valid parameter
 * -# Call R_OSAL_MmngrGetHwAddr with buffer_obj->mmngr_owner_hndl->p_ptr_self is invalid (NULL)
 * -# Deallocate buffer_obj by using R_OSAL_MmngrDealloc.
 * -# Call R_OSAL_MmngrClose to close the memory manager.
 * @subsection MmngrGetHwAddr_TC_09_012_022_ereb Expected Result/Behavior
 * -# The return value of R_OSAL_MmngrGetOsalMaxConfig is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrOpen is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrAlloc is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrGetHwAddr is OSAL_RETURN_HANDLE.
 * -# The return value of R_OSAL_MmngrDealloc is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrClose is OSAL_RETURN_OK.
 * @subsection MmngrGetHwAddr_TC_09_012_022_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrGetHwAddr_TC_09_012_022
 */
// [MmngrGetHwAddr_TC_09_012_022]
TEST_F(MemoryApiTest, MmngrGetHwAddr_TC_09_012_022)
{
    uintptr_t hw_addr;
    osal_axi_bus_id_t axi_id = OSAL_AXI_BUS_ID_IPA_MAIN_MEMORY;
    void* bk_ptr_self;

    // Test09_012_022
    // @brief: abnormal case: buffer_obj->mmngr_owner_hndl->p_ptr_self is invalid (NULL)
    EXPECT_EQ(R_OSAL_MmngrGetOsalMaxConfig(&config), OSAL_RETURN_OK) << "Test09_012_022 failed";
    config.mode = OSAL_MMNGR_ALLOC_MODE_STACK_PROT;
    EXPECT_EQ(R_OSAL_MmngrOpen(&config, &hndl_mmngr), OSAL_RETURN_OK) << "Test09_012_022 failed";
    size = 64;
    alignment = 64;
    EXPECT_EQ(R_OSAL_MmngrAlloc(hndl_mmngr, size, alignment, &buffer_obj), OSAL_RETURN_OK) << "Test09_012_022 failed";
    bk_ptr_self = buffer_obj->mmngr_owner_hndl->p_ptr_self;
    buffer_obj->mmngr_owner_hndl->p_ptr_self = NULL;
    EXPECT_EQ(R_OSAL_MmngrGetHwAddr(buffer_obj, axi_id, &hw_addr), OSAL_RETURN_HANDLE) << "Test09_012_022 failed";
    buffer_obj->mmngr_owner_hndl->p_ptr_self = bk_ptr_self;
    EXPECT_EQ(R_OSAL_MmngrDealloc(hndl_mmngr, buffer_obj), OSAL_RETURN_OK) << "Test09_012_022 failed";
    EXPECT_EQ(R_OSAL_MmngrClose(hndl_mmngr), OSAL_RETURN_OK) << "Test09_012_022 failed";
    hndl_mmngr = OSAL_MEMORY_MANAGER_HANDLE_INVALID;
    buffer_obj = OSAL_MEMORY_BUFFER_HANDLE_INVALID;
}
// [MmngrGetHwAddr_TC_09_012_022]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrGetHwAddr_TC_09_012_023 MemoryApiTest.MmngrGetHwAddr_TC_09_012_023
 * @subsection MmngrGetHwAddr_TC_09_012_023_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrGetHwAddr_TC_09_012_023_tci Test Case ID
 * MmngrGetHwAddr_S4_A_TC_09_012_023
 * @subsection MmngrGetHwAddr_TC_09_012_023_rr Related Requirement(s)
 * \#276560
 * @subsection MmngrGetHwAddr_TC_09_012_023_pp Prerequisite/Precondition
 * OSAL is initialized.
 * @subsection MmngrGetHwAddr_TC_09_012_023_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrGetHwAddr with abnormal condition in OSAL_MMNGR_ALLOC_MODE_FREE_LIST mode.
 * - Test09_012_023: buffer_obj->mmngr_owner_hndl->p_ptr_self is invalid (NULL)
 * @subsection MmngrGetHwAddr_TC_09_012_023_tpts Test Procedure/Test Steps
 * -# Call R_OSAL_MmngrGetOsalMaxConfig to get the valid config then set config mode to OSAL_MMNGR_ALLOC_MODE_FREE_LIST
 * -# Call R_OSAL_MmngrOpen with valid parameter and above config
 * -# Call R_OSAL_MmngrAlloc with valid parameter
 * -# Call R_OSAL_MmngrGetHwAddr with buffer_obj->mmngr_owner_hndl->p_ptr_self is invalid (NULL)
 * -# Deallocate buffer_obj by using R_OSAL_MmngrDealloc.
 * -# Call R_OSAL_MmngrClose to close the memory manager.
 * @subsection MmngrGetHwAddr_TC_09_012_023_ereb Expected Result/Behavior
 * -# The return value of R_OSAL_MmngrGetOsalMaxConfig is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrOpen is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrAlloc is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrGetHwAddr is OSAL_RETURN_HANDLE.
 * -# The return value of R_OSAL_MmngrDealloc is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrClose is OSAL_RETURN_OK.
 * @subsection MmngrGetHwAddr_TC_09_012_023_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrGetHwAddr_TC_09_012_023
 */
// [MmngrGetHwAddr_TC_09_012_023]
TEST_F(MemoryApiTest, MmngrGetHwAddr_TC_09_012_023)
{
    uintptr_t hw_addr;
    osal_axi_bus_id_t axi_id = OSAL_AXI_BUS_ID_IPA_MAIN_MEMORY;
    void* bk_ptr_self;

    // Test09_012_023
    // @brief: abnormal case: buffer_obj->mmngr_owner_hndl->p_ptr_self is invalid (NULL)
    EXPECT_EQ(R_OSAL_MmngrGetOsalMaxConfig(&config), OSAL_RETURN_OK) << "Test09_012_023 failed";
    config.mode = OSAL_MMNGR_ALLOC_MODE_FREE_LIST;
    EXPECT_EQ(R_OSAL_MmngrOpen(&config, &hndl_mmngr), OSAL_RETURN_OK) << "Test09_012_023 failed";
    size = 64;
    alignment = 64;
    EXPECT_EQ(R_OSAL_MmngrAlloc(hndl_mmngr, size, alignment, &buffer_obj), OSAL_RETURN_OK) << "Test09_012_023 failed";
    bk_ptr_self = buffer_obj->mmngr_owner_hndl->p_ptr_self;
    buffer_obj->mmngr_owner_hndl->p_ptr_self = NULL;
    EXPECT_EQ(R_OSAL_MmngrGetHwAddr(buffer_obj, axi_id, &hw_addr), OSAL_RETURN_HANDLE) << "Test09_012_023 failed";
    buffer_obj->mmngr_owner_hndl->p_ptr_self = bk_ptr_self;
    EXPECT_EQ(R_OSAL_MmngrDealloc(hndl_mmngr, buffer_obj), OSAL_RETURN_OK) << "Test09_012_023 failed";
    EXPECT_EQ(R_OSAL_MmngrClose(hndl_mmngr), OSAL_RETURN_OK) << "Test09_012_023 failed";
    hndl_mmngr = OSAL_MEMORY_MANAGER_HANDLE_INVALID;
    buffer_obj = OSAL_MEMORY_BUFFER_HANDLE_INVALID;
}
// [MmngrGetHwAddr_TC_09_012_023]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrGetHwAddr_TC_09_012_024 MemoryApiTest.MmngrGetHwAddr_TC_09_012_024
 * @subsection MmngrGetHwAddr_TC_09_012_024_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrGetHwAddr_TC_09_012_024_tci Test Case ID
 * MmngrGetHwAddr_S4_A_TC_09_012_024
 * @subsection MmngrGetHwAddr_TC_09_012_024_rr Related Requirement(s)
 * \#276560
 * @subsection MmngrGetHwAddr_TC_09_012_024_pp Prerequisite/Precondition
 * OSAL is initialized.
 * @subsection MmngrGetHwAddr_TC_09_012_024_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrGetHwAddr with abnormal condition in OSAL_MMNGR_ALLOC_MODE_FREE_LIST_PROT mode.
 * - Test09_012_024: buffer_obj->mmngr_owner_hndl->p_ptr_self is invalid (NULL)
 * @subsection MmngrGetHwAddr_TC_09_012_024_tpts Test Procedure/Test Steps
 * -# Call R_OSAL_MmngrGetOsalMaxConfig to get the valid config then set config mode to OSAL_MMNGR_ALLOC_MODE_FREE_LIST_PROT
 * -# Call R_OSAL_MmngrOpen with valid parameter and above config
 * -# Call R_OSAL_MmngrAlloc with valid parameter
 * -# Call R_OSAL_MmngrGetHwAddr with buffer_obj->mmngr_owner_hndl->p_ptr_self is invalid (NULL)
 * -# Deallocate buffer_obj by using R_OSAL_MmngrDealloc.
 * -# Call R_OSAL_MmngrClose to close the memory manager.
 * @subsection MmngrGetHwAddr_TC_09_012_024_ereb Expected Result/Behavior
 * -# The return value of R_OSAL_MmngrGetOsalMaxConfig is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrOpen is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrAlloc is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrGetHwAddr is OSAL_RETURN_HANDLE.
 * -# The return value of R_OSAL_MmngrDealloc is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrClose is OSAL_RETURN_OK.
 * @subsection MmngrGetHwAddr_TC_09_012_024_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrGetHwAddr_TC_09_012_024
 */
// [MmngrGetHwAddr_TC_09_012_024]
TEST_F(MemoryApiTest, MmngrGetHwAddr_TC_09_012_024)
{
    uintptr_t hw_addr;
    osal_axi_bus_id_t axi_id = OSAL_AXI_BUS_ID_IPA_MAIN_MEMORY;
    void* bk_ptr_self;

    // Test09_012_024
    // @brief: abnormal case: buffer_obj->mmngr_owner_hndl->p_ptr_self is invalid (NULL)
    EXPECT_EQ(R_OSAL_MmngrGetOsalMaxConfig(&config), OSAL_RETURN_OK) << "Test09_012_024 failed";
    config.mode = OSAL_MMNGR_ALLOC_MODE_FREE_LIST_PROT;
    EXPECT_EQ(R_OSAL_MmngrOpen(&config, &hndl_mmngr), OSAL_RETURN_OK) << "Test09_012_024 failed";
    size = 64;
    alignment = 64;
    EXPECT_EQ(R_OSAL_MmngrAlloc(hndl_mmngr, size, alignment, &buffer_obj), OSAL_RETURN_OK) << "Test09_012_024 failed";
    bk_ptr_self = buffer_obj->mmngr_owner_hndl->p_ptr_self;
    buffer_obj->mmngr_owner_hndl->p_ptr_self = NULL;
    EXPECT_EQ(R_OSAL_MmngrGetHwAddr(buffer_obj, axi_id, &hw_addr), OSAL_RETURN_HANDLE) << "Test09_012_024 failed";
    buffer_obj->mmngr_owner_hndl->p_ptr_self = bk_ptr_self;
    EXPECT_EQ(R_OSAL_MmngrDealloc(hndl_mmngr, buffer_obj), OSAL_RETURN_OK) << "Test09_012_024 failed";
    EXPECT_EQ(R_OSAL_MmngrClose(hndl_mmngr), OSAL_RETURN_OK) << "Test09_012_024 failed";
    hndl_mmngr = OSAL_MEMORY_MANAGER_HANDLE_INVALID;
    buffer_obj = OSAL_MEMORY_BUFFER_HANDLE_INVALID;
}
// [MmngrGetHwAddr_TC_09_012_024]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrGetHwAddr_TC_09_012_025 MemoryApiTest.MmngrGetHwAddr_TC_09_012_025
 * @subsection MmngrGetHwAddr_TC_09_012_025_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrGetHwAddr_TC_09_012_025_tci Test Case ID
 * MmngrGetHwAddr_S4_A_TC_09_012_025
 * @subsection MmngrGetHwAddr_TC_09_012_025_rr Related Requirement(s)
 * \#276560
 * @subsection MmngrGetHwAddr_TC_09_012_025_pp Prerequisite/Precondition
 * OSAL is initialized.
 * @subsection MmngrGetHwAddr_TC_09_012_025_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrGetHwAddr with abnormal condition in OSAL_MMNGR_ALLOC_MODE_STACK mode.
 * - Test09_012_025: hndl_mmngr->p_ptr_self is invalid (NULL)
 * @subsection MmngrGetHwAddr_TC_09_012_025_tpts Test Procedure/Test Steps
 * -# Call R_OSAL_MmngrGetOsalMaxConfig to get the valid config then set config mode to OSAL_MMNGR_ALLOC_MODE_STACK
 * -# Call R_OSAL_MmngrOpen with valid parameter and above config
 * -# Call R_OSAL_MmngrAlloc with valid parameter
 * -# Call R_OSAL_MmngrGetHwAddr with hndl_mmngr->p_ptr_self is invalid (NULL)
 * -# Deallocate buffer_obj by using R_OSAL_MmngrDealloc.
 * -# Call R_OSAL_MmngrClose to close the memory manager.
 * @subsection MmngrGetHwAddr_TC_09_012_025_ereb Expected Result/Behavior
 * -# The return value of R_OSAL_MmngrGetOsalMaxConfig is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrOpen is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrAlloc is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrGetHwAddr is OSAL_RETURN_HANDLE.
 * -# The return value of R_OSAL_MmngrDealloc is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrClose is OSAL_RETURN_OK.
 * @subsection MmngrGetHwAddr_TC_09_012_025_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrGetHwAddr_TC_09_012_025
 */
// [MmngrGetHwAddr_TC_09_012_025]
TEST_F(MemoryApiTest, MmngrGetHwAddr_TC_09_012_025)
{
    uintptr_t hw_addr;
    osal_axi_bus_id_t axi_id = OSAL_AXI_BUS_ID_IPA_MAIN_MEMORY;
    void* bk_ptr_self;

    // Test09_012_025
    // @brief: abnormal case: hndl_mmngr->p_ptr_self is invalid (NULL)
    EXPECT_EQ(R_OSAL_MmngrGetOsalMaxConfig(&config), OSAL_RETURN_OK) << "Test09_012_025 failed";
    config.mode = OSAL_MMNGR_ALLOC_MODE_STACK;
    EXPECT_EQ(R_OSAL_MmngrOpen(&config, &hndl_mmngr), OSAL_RETURN_OK) << "Test09_012_025 failed";
    size = 64;
    alignment = 64;
    EXPECT_EQ(R_OSAL_MmngrAlloc(hndl_mmngr, size, alignment, &buffer_obj), OSAL_RETURN_OK) << "Test09_012_025 failed";
    bk_ptr_self = hndl_mmngr->p_ptr_self;
    hndl_mmngr->p_ptr_self = NULL;
    EXPECT_EQ(R_OSAL_MmngrGetHwAddr(buffer_obj, axi_id, &hw_addr), OSAL_RETURN_HANDLE) << "Test09_012_025 failed";
    hndl_mmngr->p_ptr_self = bk_ptr_self;
    EXPECT_EQ(R_OSAL_MmngrDealloc(hndl_mmngr, buffer_obj), OSAL_RETURN_OK) << "Test09_012_025 failed";
    EXPECT_EQ(R_OSAL_MmngrClose(hndl_mmngr), OSAL_RETURN_OK) << "Test09_012_025 failed";
    hndl_mmngr = OSAL_MEMORY_MANAGER_HANDLE_INVALID;
    buffer_obj = OSAL_MEMORY_BUFFER_HANDLE_INVALID;
}
// [MmngrGetHwAddr_TC_09_012_025]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrGetHwAddr_TC_09_012_026 MemoryApiTest.MmngrGetHwAddr_TC_09_012_026
 * @subsection MmngrGetHwAddr_TC_09_012_026_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrGetHwAddr_TC_09_012_026_tci Test Case ID
 * MmngrGetHwAddr_S4_A_TC_09_012_026
 * @subsection MmngrGetHwAddr_TC_09_012_026_rr Related Requirement(s)
 * \#276560
 * @subsection MmngrGetHwAddr_TC_09_012_026_pp Prerequisite/Precondition
 * OSAL is initialized.
 * @subsection MmngrGetHwAddr_TC_09_012_026_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrGetHwAddr with abnormal condition in OSAL_MMNGR_ALLOC_MODE_STACK_PROT mode.
 * - Test09_012_026: hndl_mmngr->p_ptr_self is invalid (NULL)
 * @subsection MmngrGetHwAddr_TC_09_012_026_tpts Test Procedure/Test Steps
 * -# Call R_OSAL_MmngrGetOsalMaxConfig to get the valid config then set config mode to OSAL_MMNGR_ALLOC_MODE_STACK_PROT
 * -# Call R_OSAL_MmngrOpen with valid parameter and above config
 * -# Call R_OSAL_MmngrAlloc with valid parameter
 * -# Call R_OSAL_MmngrGetHwAddr with hndl_mmngr->p_ptr_self is invalid (NULL)
 * -# Deallocate buffer_obj by using R_OSAL_MmngrDealloc.
 * -# Call R_OSAL_MmngrClose to close the memory manager.
 * @subsection MmngrGetHwAddr_TC_09_012_026_ereb Expected Result/Behavior
 * -# The return value of R_OSAL_MmngrGetOsalMaxConfig is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrOpen is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrAlloc is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrGetHwAddr is OSAL_RETURN_HANDLE.
 * -# The return value of R_OSAL_MmngrDealloc is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrClose is OSAL_RETURN_OK.
 * @subsection MmngrGetHwAddr_TC_09_012_026_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrGetHwAddr_TC_09_012_026
 */
// [MmngrGetHwAddr_TC_09_012_026]
TEST_F(MemoryApiTest, MmngrGetHwAddr_TC_09_012_026)
{
    uintptr_t hw_addr;
    osal_axi_bus_id_t axi_id = OSAL_AXI_BUS_ID_IPA_MAIN_MEMORY;
    void* bk_ptr_self;

    // Test09_012_026
    // @brief: abnormal case: hndl_mmngr->p_ptr_self is invalid (NULL)
    EXPECT_EQ(R_OSAL_MmngrGetOsalMaxConfig(&config), OSAL_RETURN_OK) << "Test09_012_026 failed";
    config.mode = OSAL_MMNGR_ALLOC_MODE_STACK_PROT;
    EXPECT_EQ(R_OSAL_MmngrOpen(&config, &hndl_mmngr), OSAL_RETURN_OK) << "Test09_012_026 failed";
    size = 64;
    alignment = 64;
    EXPECT_EQ(R_OSAL_MmngrAlloc(hndl_mmngr, size, alignment, &buffer_obj), OSAL_RETURN_OK) << "Test09_012_026 failed";
    bk_ptr_self = hndl_mmngr->p_ptr_self;
    hndl_mmngr->p_ptr_self = NULL;
    EXPECT_EQ(R_OSAL_MmngrGetHwAddr(buffer_obj, axi_id, &hw_addr), OSAL_RETURN_HANDLE) << "Test09_012_026 failed";
    hndl_mmngr->p_ptr_self = bk_ptr_self;
    EXPECT_EQ(R_OSAL_MmngrDealloc(hndl_mmngr, buffer_obj), OSAL_RETURN_OK) << "Test09_012_026 failed";
    EXPECT_EQ(R_OSAL_MmngrClose(hndl_mmngr), OSAL_RETURN_OK) << "Test09_012_026 failed";
    hndl_mmngr = OSAL_MEMORY_MANAGER_HANDLE_INVALID;
    buffer_obj = OSAL_MEMORY_BUFFER_HANDLE_INVALID;
}
// [MmngrGetHwAddr_TC_09_012_026]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrGetHwAddr_TC_09_012_027 MemoryApiTest.MmngrGetHwAddr_TC_09_012_027
 * @subsection MmngrGetHwAddr_TC_09_012_027_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrGetHwAddr_TC_09_012_027_tci Test Case ID
 * MmngrGetHwAddr_S4_A_TC_09_012_027
 * @subsection MmngrGetHwAddr_TC_09_012_027_rr Related Requirement(s)
 * \#276560
 * @subsection MmngrGetHwAddr_TC_09_012_027_pp Prerequisite/Precondition
 * OSAL is initialized.
 * @subsection MmngrGetHwAddr_TC_09_012_027_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrGetHwAddr with abnormal condition in OSAL_MMNGR_ALLOC_MODE_FREE_LIST mode.
 * - Test09_012_027: hndl_mmngr->p_ptr_self is invalid (NULL)
 * @subsection MmngrGetHwAddr_TC_09_012_027_tpts Test Procedure/Test Steps
 * -# Call R_OSAL_MmngrGetOsalMaxConfig to get the valid config then set config mode to OSAL_MMNGR_ALLOC_MODE_FREE_LIST
 * -# Call R_OSAL_MmngrOpen with valid parameter and above config
 * -# Call R_OSAL_MmngrAlloc with valid parameter
 * -# Call R_OSAL_MmngrGetHwAddr with hndl_mmngr->p_ptr_self is invalid (NULL)
 * -# Deallocate buffer_obj by using R_OSAL_MmngrDealloc.
 * -# Call R_OSAL_MmngrClose to close the memory manager.
 * @subsection MmngrGetHwAddr_TC_09_012_027_ereb Expected Result/Behavior
 * -# The return value of R_OSAL_MmngrGetOsalMaxConfig is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrOpen is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrAlloc is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrGetHwAddr is OSAL_RETURN_HANDLE.
 * -# The return value of R_OSAL_MmngrDealloc is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrClose is OSAL_RETURN_OK.
 * @subsection MmngrGetHwAddr_TC_09_012_027_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrGetHwAddr_TC_09_012_027
 */
// [MmngrGetHwAddr_TC_09_012_027]
TEST_F(MemoryApiTest, MmngrGetHwAddr_TC_09_012_027)
{
    uintptr_t hw_addr;
    osal_axi_bus_id_t axi_id = OSAL_AXI_BUS_ID_IPA_MAIN_MEMORY;
    void* bk_ptr_self;

    // Test09_012_027
    // @brief: abnormal case: hndl_mmngr->p_ptr_self is invalid (NULL)
    EXPECT_EQ(R_OSAL_MmngrGetOsalMaxConfig(&config), OSAL_RETURN_OK) << "Test09_012_027 failed";
    config.mode = OSAL_MMNGR_ALLOC_MODE_FREE_LIST;
    EXPECT_EQ(R_OSAL_MmngrOpen(&config, &hndl_mmngr), OSAL_RETURN_OK) << "Test09_012_027 failed";
    size = 64;
    alignment = 64;
    EXPECT_EQ(R_OSAL_MmngrAlloc(hndl_mmngr, size, alignment, &buffer_obj), OSAL_RETURN_OK) << "Test09_012_027 failed";
    bk_ptr_self = hndl_mmngr->p_ptr_self;
    hndl_mmngr->p_ptr_self = NULL;
    EXPECT_EQ(R_OSAL_MmngrGetHwAddr(buffer_obj, axi_id, &hw_addr), OSAL_RETURN_HANDLE) << "Test09_012_027 failed";
    hndl_mmngr->p_ptr_self = bk_ptr_self;
    EXPECT_EQ(R_OSAL_MmngrDealloc(hndl_mmngr, buffer_obj), OSAL_RETURN_OK) << "Test09_012_027 failed";
    EXPECT_EQ(R_OSAL_MmngrClose(hndl_mmngr), OSAL_RETURN_OK) << "Test09_012_027 failed";
    hndl_mmngr = OSAL_MEMORY_MANAGER_HANDLE_INVALID;
    buffer_obj = OSAL_MEMORY_BUFFER_HANDLE_INVALID;
}
// [MmngrGetHwAddr_TC_09_012_027]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrGetHwAddr_TC_09_012_028 MemoryApiTest.MmngrGetHwAddr_TC_09_012_028
 * @subsection MmngrGetHwAddr_TC_09_012_028_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrGetHwAddr_TC_09_012_028_tci Test Case ID
 * MmngrGetHwAddr_S4_A_TC_09_012_028
 * @subsection MmngrGetHwAddr_TC_09_012_028_rr Related Requirement(s)
 * \#276560
 * @subsection MmngrGetHwAddr_TC_09_012_028_pp Prerequisite/Precondition
 * OSAL is initialized.
 * @subsection MmngrGetHwAddr_TC_09_012_028_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrGetHwAddr with abnormal condition in OSAL_MMNGR_ALLOC_MODE_FREE_LIST_PROT mode.
 * - Test09_012_028: hndl_mmngr->p_ptr_self is invalid (NULL)
 * @subsection MmngrGetHwAddr_TC_09_012_028_tpts Test Procedure/Test Steps
 * -# Call R_OSAL_MmngrGetOsalMaxConfig to get the valid config then set config mode to OSAL_MMNGR_ALLOC_MODE_FREE_LIST_PROT
 * -# Call R_OSAL_MmngrOpen with valid parameter and above config
 * -# Call R_OSAL_MmngrAlloc with valid parameter
 * -# Call R_OSAL_MmngrGetHwAddr with hndl_mmngr->p_ptr_self is invalid (NULL)
 * -# Deallocate buffer_obj by using R_OSAL_MmngrDealloc.
 * -# Call R_OSAL_MmngrClose to close the memory manager.
 * @subsection MmngrGetHwAddr_TC_09_012_028_ereb Expected Result/Behavior
 * -# The return value of R_OSAL_MmngrGetOsalMaxConfig is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrOpen is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrAlloc is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrGetHwAddr is OSAL_RETURN_HANDLE.
 * -# The return value of R_OSAL_MmngrDealloc is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrClose is OSAL_RETURN_OK.
 * @subsection MmngrGetHwAddr_TC_09_012_028_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrGetHwAddr_TC_09_012_028
 */
// [MmngrGetHwAddr_TC_09_012_028]
TEST_F(MemoryApiTest, MmngrGetHwAddr_TC_09_012_028)
{
    uintptr_t hw_addr;
    osal_axi_bus_id_t axi_id = OSAL_AXI_BUS_ID_IPA_MAIN_MEMORY;
    void* bk_ptr_self;

    // Test09_012_028
    // @brief: abnormal case: hndl_mmngr->p_ptr_self is invalid (NULL)
    EXPECT_EQ(R_OSAL_MmngrGetOsalMaxConfig(&config), OSAL_RETURN_OK) << "Test09_012_028 failed";
    config.mode = OSAL_MMNGR_ALLOC_MODE_FREE_LIST_PROT;
    EXPECT_EQ(R_OSAL_MmngrOpen(&config, &hndl_mmngr), OSAL_RETURN_OK) << "Test09_012_028 failed";
    size = 64;
    alignment = 64;
    EXPECT_EQ(R_OSAL_MmngrAlloc(hndl_mmngr, size, alignment, &buffer_obj), OSAL_RETURN_OK) << "Test09_012_028 failed";
    bk_ptr_self = hndl_mmngr->p_ptr_self;
    hndl_mmngr->p_ptr_self = NULL;
    EXPECT_EQ(R_OSAL_MmngrGetHwAddr(buffer_obj, axi_id, &hw_addr), OSAL_RETURN_HANDLE) << "Test09_012_028 failed";
    hndl_mmngr->p_ptr_self = bk_ptr_self;
    EXPECT_EQ(R_OSAL_MmngrDealloc(hndl_mmngr, buffer_obj), OSAL_RETURN_OK) << "Test09_012_028 failed";
    EXPECT_EQ(R_OSAL_MmngrClose(hndl_mmngr), OSAL_RETURN_OK) << "Test09_012_028 failed";
    hndl_mmngr = OSAL_MEMORY_MANAGER_HANDLE_INVALID;
    buffer_obj = OSAL_MEMORY_BUFFER_HANDLE_INVALID;
}
// [MmngrGetHwAddr_TC_09_012_028]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrGetSize_TC_09_013_001 MemoryApiTest.MmngrGetSize_TC_09_013_001
 * @subsection MmngrGetSize_TC_09_013_001_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrGetSize_TC_09_013_001_tci Test Case ID
 * MmngrGetSize_S3_N_TC_09_013_001
 * @subsection MmngrGetSize_TC_09_013_001_rr Related Requirement(s)
 * \#276561
 * @subsection MmngrGetSize_TC_09_013_001_pp Prerequisite/Precondition
 * OSAL is initialized
 * @subsection MmngrGetSize_TC_09_013_001_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrGetSize with normal condition and mode is OSAL_MMNGR_ALLOC_MODE_STACK.
 * - pre-process: open new memory manager
 * - Test09_013_001: with all valid parameters.
 * - post-process: close memory manager
 * @subsection MmngrGetSize_TC_09_013_001_tpts Test Procedure/Test Steps
 * -# Call R_OSAL_MmngrOpen with bellow config:
 *  - config.memory_limit                = 4096
 *  - config.max_allowed_allocations     = 1
 *  - config.max_registered_monitors_cbs = 2
 *  - config.mode = OSAL_MMNGR_ALLOC_MODE_STACK
 * -# Call R_OSAL_MmngrAlloc with size is 128 and alignment is 64 to allocate a memory buffer.
 * -# Call R_OSAL_MmngrGetSize with valid paramater.
 * -# Call R_OSAL_MmngrDealloc to deallocate the allocated memory buffer.
 * -# Call R_OSAL_MmngrClose to close memory manager
 * @subsection MmngrGetSize_TC_09_013_001_ereb Expected Result/Behavior
 * -# The return of R_OSAL_MmngrOpen is OSAL_RETURN_OK.<br>
 * The returned handle is not OSAL_MEMORY_MANAGER_HANDLE_INVALID.
 * -# The return value of R_OSAL_MmngrAlloc is OSAL_RETURN_OK.<br>
 * The return buffer is not OSAL_MEMORY_BUFFER_HANDLE_INVALID.
 * -# The return value of R_OSAL_MmngrGetSize is OSAL_RETURN_OK.<br>
 * The return "get_size" is 128.
 * -# The return value of R_OSAL_MmngrDealloc is OSAL_RETURN_OK.
 * -# R_OSAL_MmngrClose return OSAL_RETURN_OK
 * @subsection MmngrGetSize_TC_09_013_001_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrGetSize_TC_09_013_001
 */
// [MmngrGetSize_TC_09_013_001]
TEST_F(MemoryApiTest, MmngrGetSize_TC_09_013_001)
{
    size_t get_size;

    // pre-process: open memory manager
    config.memory_limit                = 4096;
    config.max_allowed_allocations     = 1;
    config.max_registered_monitors_cbs = 2;
    config.mode = OSAL_MMNGR_ALLOC_MODE_STACK;
    size = 128;
    alignment = 64;

    EXPECT_EQ(R_OSAL_MmngrOpen(&config, &hndl_mmngr), OSAL_RETURN_OK) << "pre-process failed";
    EXPECT_NE(hndl_mmngr,OSAL_MEMORY_MANAGER_HANDLE_INVALID) << "pre-process failed";

    // Test09_013_001
    // @brief: normal case: all valid argument
    EXPECT_EQ(R_OSAL_MmngrAlloc(hndl_mmngr, size, alignment, &buffer_obj), OSAL_RETURN_OK);
    EXPECT_NE(buffer_obj,OSAL_MEMORY_BUFFER_HANDLE_INVALID);
    EXPECT_EQ(R_OSAL_MmngrGetSize(buffer_obj, &get_size), OSAL_RETURN_OK) << "Test09_013_001 failed";
    EXPECT_EQ(get_size, 128) << "Test09_013_001 failed";
    EXPECT_EQ(R_OSAL_MmngrDealloc(hndl_mmngr, buffer_obj), OSAL_RETURN_OK);
    buffer_obj = OSAL_MEMORY_BUFFER_HANDLE_INVALID;

    // post-process: close memory manager
    EXPECT_EQ(R_OSAL_MmngrClose(hndl_mmngr), OSAL_RETURN_OK) << "post-process failed";
    hndl_mmngr = OSAL_MEMORY_MANAGER_HANDLE_INVALID;
}
// [MmngrGetSize_TC_09_013_001]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrGetSize_TC_09_013_002 MemoryApiTest.MmngrGetSize_TC_09_013_002
 * @subsection MmngrGetSize_TC_09_013_002_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrGetSize_TC_09_013_002_tci Test Case ID
 * MmngrGetSize_S0_A_TC_09_013_002
 * @subsection MmngrGetSize_TC_09_013_002_rr Related Requirement(s)
 * \#276561
 * @subsection MmngrGetSize_TC_09_013_002_pp Prerequisite/Precondition
 * OSAL is initialized
 * @subsection MmngrGetSize_TC_09_013_002_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrGetSize with abnormal condition and mode is OSAL_MMNGR_ALLOC_MODE_STACK.
 * - Test09_013_002: buffer is NULL.
 * @subsection MmngrGetSize_TC_09_013_002_tpts Test Procedure/Test Steps
 * -# Call R_OSAL_MmngrGetSize with NULL buffer.
 * @subsection MmngrGetSize_TC_09_013_002_ereb Expected Result/Behavior
 * -# The return value of R_OSAL_MmngrGetSize is OSAL_RETURN_HANDLE.
 * @subsection MmngrGetSize_TC_09_013_002_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrGetSize_TC_09_013_002
 */
// [MmngrGetSize_TC_09_013_002]
TEST_F(MemoryApiTest, MmngrGetSize_TC_09_013_002)
{
    size_t get_size = 0;

    // Test09_013_002
    // @brief: abnormal case: buffer_obj = NULL
    EXPECT_EQ(R_OSAL_MmngrGetSize(OSAL_MEMORY_BUFFER_HANDLE_INVALID, &get_size), OSAL_RETURN_HANDLE) << "Test09_013_002 failed";
    EXPECT_EQ(get_size, 0) << "Test09_013_002 failed";
}
// [MmngrGetSize_TC_09_013_002]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrGetSize_TC_09_013_003 MemoryApiTest.MmngrGetSize_TC_09_013_003
 * @subsection MmngrGetSize_TC_09_013_003_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrGetSize_TC_09_013_003_tci Test Case ID
 * MmngrGetSize_S4_A_TC_09_013_003
 * @subsection MmngrGetSize_TC_09_013_003_rr Related Requirement(s)
 * \#276561
 * @subsection MmngrGetSize_TC_09_013_003_pp Prerequisite/Precondition
 * OSAL is initialized
 * @subsection MmngrGetSize_TC_09_013_003_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrGetSize with abnormal condition and mode is OSAL_MMNGR_ALLOC_MODE_STACK.
 * - pre-process: open new memory manager
 * - Test09_013_003: buffer is not support to get size.
 * - post-process: close memory manager
 * @subsection MmngrGetSize_TC_09_013_003_tpts Test Procedure/Test Steps
 * -# Call R_OSAL_MmngrOpen with bellow config:
 *  - config.memory_limit                = 4096
 *  - config.max_allowed_allocations     = 1
 *  - config.max_registered_monitors_cbs = 2
 *  - config.mode = OSAL_MMNGR_ALLOC_MODE_STACK
 * -# Allocate "tmp_buffer_obj" by using malloc function.
 * -# Call R_OSAL_MmngrAlloc to allocate a memory buffer.
 * -# Store "buffer_obj->p_getSize" to "tmp_buffer_obj->p_getSize".<br>
 * Set "buffer_obj->p_getSize" to NULL. <br>
 * Call R_OSAL_MmngrGetSize with the changed buffer "buffer_obj".<br>
 * Re-assign "tmp_buffer_obj->p_getSize" to "buffer_obj->p_getSize".
 * -# Call R_OSAL_MmngrDealloc to deallocate the original allocated buffer.
 * -# Free buffer pointed by "tmp_buffer_obj"
 * -# Call R_OSAL_MmngrClose to close the handle.
 * @subsection MmngrGetSize_TC_09_013_003_ereb Expected Result/Behavior
 * -# The return of R_OSAL_MmngrOpen is OSAL_RETURN_OK.<br>
 * The returned handle is not OSAL_MEMORY_MANAGER_HANDLE_INVALID.
 * -# Memory allocation succeeded (Pointer to buffer != Nullpointer)
 * -# The return value of R_OSAL_MmngrAlloc is OSAL_RETURN_OK.<br>
 * The return buffer is not OSAL_MEMORY_BUFFER_HANDLE_INVALID.
 * -# The return value of R_OSAL_MmngrGetSize is OSAL_RETURN_UNSUPPORTED_OPERATION.
 * -# The return value of R_OSAL_MmngrDealloc is OSAL_RETURN_OK.
 * -# Allocated memory free succeeded.
 * -# The return value of R_OSAL_MmngrClose is OSAL_RETURN_OK.
 * @subsection MmngrGetSize_TC_09_013_003_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrGetSize_TC_09_013_003
 */
// [MmngrGetSize_TC_09_013_003]
TEST_F(MemoryApiTest, MmngrGetSize_TC_09_013_003)
{
    osal_memory_buffer_handle_t tmp_buffer_obj;
    size_t get_size;

    // pre-process: open memory manager
    config.memory_limit                = 4096;
    config.max_allowed_allocations     = 1;
    config.max_registered_monitors_cbs = 2;
    config.mode = OSAL_MMNGR_ALLOC_MODE_STACK;
    size = 128;
    alignment = 64;

    EXPECT_EQ(R_OSAL_MmngrOpen(&config, &hndl_mmngr), OSAL_RETURN_OK) << "pre-process failed";
    EXPECT_NE(hndl_mmngr,OSAL_MEMORY_MANAGER_HANDLE_INVALID) << "pre-process failed";

    // Test09_013_003
    // @brief: abnormal case: buffer_obj->getSize = NULL
    tmp_buffer_obj = (osal_memory_buffer_handle_t)malloc (sizeof(st_osal_memory_buffer_obj));
    EXPECT_EQ(R_OSAL_MmngrAlloc(hndl_mmngr, size, alignment, &buffer_obj), OSAL_RETURN_OK);
    EXPECT_NE(buffer_obj,OSAL_MEMORY_BUFFER_HANDLE_INVALID);
    tmp_buffer_obj->p_getSize = buffer_obj->p_getSize;
    buffer_obj->p_getSize = NULL;
    EXPECT_EQ(R_OSAL_MmngrGetSize(buffer_obj, &get_size), OSAL_RETURN_UNSUPPORTED_OPERATION) << "Test09_013_003 failed";
    buffer_obj->p_getSize = tmp_buffer_obj->p_getSize;
    EXPECT_EQ(R_OSAL_MmngrDealloc(hndl_mmngr, buffer_obj), OSAL_RETURN_OK);
    buffer_obj = OSAL_MEMORY_BUFFER_HANDLE_INVALID;
    free(tmp_buffer_obj);

    // post-process: close memory manager
    EXPECT_EQ(R_OSAL_MmngrClose(hndl_mmngr), OSAL_RETURN_OK) << "post-process failed";
    hndl_mmngr = OSAL_MEMORY_MANAGER_HANDLE_INVALID;
}
// [MmngrGetSize_TC_09_013_003]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrGetSize_TC_09_013_004 MemoryApiTest.MmngrGetSize_TC_09_013_004
 * @subsection MmngrGetSize_TC_09_013_004_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrGetSize_TC_09_013_004_tci Test Case ID
 * MmngrGetSize_S0_A_TC_09_013_004
 * @subsection MmngrGetSize_TC_09_013_004_rr Related Requirement(s)
 * \#276561
 * @subsection MmngrGetSize_TC_09_013_004_pp Prerequisite/Precondition
 * OSAL is initialized
 * @subsection MmngrGetSize_TC_09_013_004_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrGetSize with abnormal condition and mode is OSAL_MMNGR_ALLOC_MODE_STACK.
 * - pre-process: open new memory manager
 * - Test09_013_004: size is NULL.
 * - post-process: close memory manager
 * @subsection MmngrGetSize_TC_09_013_004_tpts Test Procedure/Test Steps
 * -# Call R_OSAL_MmngrOpen with bellow config:
 *  - config.memory_limit                = 4096
 *  - config.max_allowed_allocations     = 1
 *  - config.max_registered_monitors_cbs = 2
 *  - config.mode = OSAL_MMNGR_ALLOC_MODE_STACK
 * -# Call R_OSAL_MmngrAlloc with size is 128 and alignment is 64 to allocate a memory buffer.
 * -# Call R_OSAL_MmngrGetSize with size is NULL.
 * -# Call R_OSAL_MmngrDealloc to deallocate the allocated memory buffer.
 * -# Call R_OSAL_MmngrClose to close the handle.
 * @subsection MmngrGetSize_TC_09_013_004_ereb Expected Result/Behavior
 * -# The return of R_OSAL_MmngrOpen is OSAL_RETURN_OK.<br>
 * The returned handle is not OSAL_MEMORY_MANAGER_HANDLE_INVALID.
 * -# The return value of R_OSAL_MmngrAlloc is OSAL_RETURN_OK.<br>
 * The return buffer is not OSAL_MEMORY_BUFFER_HANDLE_INVALID.
 * -# The return value of the 1st R_OSAL_MmngrGetSize is OSAL_RETURN_OK.<br>
 * The return "get_size" is 128.
 * -# The return value of R_OSAL_MmngrDealloc is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrClose is OSAL_RETURN_OK.
 * @subsection MmngrGetSize_TC_09_013_004_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrGetSize_TC_09_013_004
 */
// [MmngrGetSize_TC_09_013_004]
TEST_F(MemoryApiTest, MmngrGetSize_TC_09_013_004)
{
    size_t * p_size = NULL;

    // pre-process: open memory manager
    config.memory_limit                = 4096;
    config.max_allowed_allocations     = 1;
    config.max_registered_monitors_cbs = 2;
    config.mode = OSAL_MMNGR_ALLOC_MODE_STACK;
    size = 128;
    alignment = 64;

    EXPECT_EQ(R_OSAL_MmngrOpen(&config, &hndl_mmngr), OSAL_RETURN_OK) << "pre-process failed";
    EXPECT_NE(hndl_mmngr,OSAL_MEMORY_MANAGER_HANDLE_INVALID) << "pre-process failed";

    // Test09_013_004
    // @brief: abnormal case: size = NULL
    EXPECT_EQ(R_OSAL_MmngrAlloc(hndl_mmngr, size, alignment, &buffer_obj), OSAL_RETURN_OK);
    EXPECT_NE(buffer_obj,OSAL_MEMORY_BUFFER_HANDLE_INVALID);
    EXPECT_EQ(R_OSAL_MmngrGetSize(buffer_obj, p_size), OSAL_RETURN_PAR) << "Test09_013_004 failed";
    EXPECT_EQ(R_OSAL_MmngrDealloc(hndl_mmngr, buffer_obj), OSAL_RETURN_OK);
    buffer_obj = OSAL_MEMORY_BUFFER_HANDLE_INVALID;

    // post-process: close memory manager
    EXPECT_EQ(R_OSAL_MmngrClose(hndl_mmngr), OSAL_RETURN_OK) << "post-process failed";
    hndl_mmngr = OSAL_MEMORY_MANAGER_HANDLE_INVALID;
}
// [MmngrGetSize_TC_09_013_004]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrGetSize_TC_09_013_005 MemoryApiTest.MmngrGetSize_TC_09_013_005
 * @subsection MmngrGetSize_TC_09_013_005_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrGetSize_TC_09_013_005_tci Test Case ID
 * MmngrGetSize_S3_N_TC_09_013_005
 * @subsection MmngrGetSize_TC_09_013_005_rr Related Requirement(s)
 * \#276561
 * @subsection MmngrGetSize_TC_09_013_005_pp Prerequisite/Precondition
 * OSAL is initialized
 * @subsection MmngrGetSize_TC_09_013_005_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrGetSize with normal condition and mode is OSAL_MMNGR_ALLOC_MODE_FREE_LIST.
 * - pre-process: open new memory manager
 * - Test09_013_005: confirm with memory handle which opened with OSAL_MMNGR_ALLOC_MODE_FREE_LIST mode
 * - post-process: close memory manager
 * @subsection MmngrGetSize_TC_09_013_005_tpts Test Procedure/Test Steps
 * -# Call R_OSAL_MmngrOpen with bellow config:
 *  - config.memory_limit                = 4096
 *  - config.max_allowed_allocations     = 1
 *  - config.max_registered_monitors_cbs = 2
 *  - config.mode = OSAL_MMNGR_ALLOC_MODE_FREE_LIST
 * -# Call R_OSAL_MmngrAlloc to allocate a memory buffer.
 * -# Call R_OSAL_MmngrGetSize with valid parameter.
 * -# Call R_OSAL_MmngrDealloc to deallocate the allocated memory buffer.
 * -# Call R_OSAL_MmngrClose to close memory handle.
 * @subsection MmngrGetSize_TC_09_013_005_ereb Expected Result/Behavior
 * -# The return of R_OSAL_MmngrOpen is OSAL_RETURN_OK.<br>
 * The returned handle is not OSAL_MEMORY_MANAGER_HANDLE_INVALID.
 * -# The return value of R_OSAL_MmngrAlloc is OSAL_RETURN_OK.<br>
 * The return buffer is not OSAL_MEMORY_BUFFER_HANDLE_INVALID.
 * -# The return value of the 1st R_OSAL_MmngrGetSize is OSAL_RETURN_OK.<br>
 * Return size is 128.
 * -# The return value of R_OSAL_MmngrDealloc is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrClose is OSAL_RETURN_OK.
 * @subsection MmngrGetSize_TC_09_013_005_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrGetSize_TC_09_013_005
 */
// [MmngrGetSize_TC_09_013_005]
TEST_F(MemoryApiTest, MmngrGetSize_TC_09_013_005)
{
    size_t get_size;

    // pre-process: open memory manager
    config.memory_limit                = 4096;
    config.max_allowed_allocations     = 1;
    config.max_registered_monitors_cbs = 2;
    config.mode = OSAL_MMNGR_ALLOC_MODE_FREE_LIST;
    size = 128;
    alignment = 64;

    EXPECT_EQ(R_OSAL_MmngrOpen(&config, &hndl_mmngr), OSAL_RETURN_OK) << "pre-process failed";
    EXPECT_NE(hndl_mmngr,OSAL_MEMORY_MANAGER_HANDLE_INVALID) << "pre-process failed";

    // Test09_013_005
    // @brief: normal case: config.mode = OSAL_MMNGR_ALLOC_MODE_FREE_LIST;
    EXPECT_EQ(R_OSAL_MmngrAlloc(hndl_mmngr, size, alignment, &buffer_obj), OSAL_RETURN_OK);
    EXPECT_NE(buffer_obj,OSAL_MEMORY_BUFFER_HANDLE_INVALID);
    EXPECT_EQ(R_OSAL_MmngrGetSize(buffer_obj, &get_size), OSAL_RETURN_OK) << "Test09_013_005 failed";
    EXPECT_EQ(get_size, 128) << "Test09_013_005 failed";
    EXPECT_EQ(R_OSAL_MmngrDealloc(hndl_mmngr, buffer_obj), OSAL_RETURN_OK);
    buffer_obj = OSAL_MEMORY_BUFFER_HANDLE_INVALID;

    // post-process: close memory manager
    EXPECT_EQ(R_OSAL_MmngrClose(hndl_mmngr), OSAL_RETURN_OK) << "post-process failed";
    hndl_mmngr = OSAL_MEMORY_MANAGER_HANDLE_INVALID;
}
// [MmngrGetSize_TC_09_013_005]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrGetSize_TC_09_013_006 MemoryApiTest.MmngrGetSize_TC_09_013_006
 * @subsection MmngrGetSize_TC_09_013_006_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrGetSize_TC_09_013_006_tci Test Case ID
 * MmngrGetSize_S3_N_TC_09_013_006
 * @subsection MmngrGetSize_TC_09_013_006_rr Related Requirement(s)
 * \#276561
 * @subsection MmngrGetSize_TC_09_013_006_pp Prerequisite/Precondition
 * OSAL is initialized
 * @subsection MmngrGetSize_TC_09_013_006_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrGetSize with normal condition and mode is OSAL_MMNGR_ALLOC_MODE_STACK.
 * - pre-process: open new memory manager
 * - Test09_013_006: confirm with alloc memory size is less than the alignment.
 * - post-process: close memory manager
 * @subsection MmngrGetSize_TC_09_013_006_tpts Test Procedure/Test Steps
 * -# Call R_OSAL_MmngrOpen with bellow config:
 *  - config.memory_limit                = 4096
 *  - config.max_allowed_allocations     = 1
 *  - config.max_registered_monitors_cbs = 2
 *  - config.mode = OSAL_MMNGR_ALLOC_MODE_STACK
 * -# Call R_OSAL_MmngrAlloc with "size" is 64 and "alignment" is 128 to allocate a memory buffer.
 * -# Call R_OSAL_MmngrGetSize to return the allocated buffer size.
 * -# Call R_OSAL_MmngrDealloc to deallocate the allocated memory buffer.
 * -# Call R_OSAL_MmngrClose to close the handle.
 * @subsection MmngrGetSize_TC_09_013_006_ereb Expected Result/Behavior
 * -# The return of R_OSAL_MmngrOpen is OSAL_RETURN_OK.<br>
 * The returned handle is not OSAL_MEMORY_MANAGER_HANDLE_INVALID.
 * -# The return value of R_OSAL_MmngrAlloc is OSAL_RETURN_OK.<br>
 * The return buffer is not OSAL_MEMORY_BUFFER_HANDLE_INVALID.
 * -# The return value of R_OSAL_MmngrGetSize is OSAL_RETURN_OK.<br>
 * The return size is 64
 * -# The return value of R_OSAL_MmngrDealloc is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrClose is OSAL_RETURN_OK.
 * @subsection MmngrGetSize_TC_09_013_006_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrGetSize_TC_09_013_006
 */
// [MmngrGetSize_TC_09_013_006]
TEST_F(MemoryApiTest, MmngrGetSize_TC_09_013_006)
{
    size_t get_size;

    // pre-process: open memory manager
    config.memory_limit                = 4096;
    config.max_allowed_allocations     = 1;
    config.max_registered_monitors_cbs = 2;
    config.mode = OSAL_MMNGR_ALLOC_MODE_STACK;
    size = 64;
    alignment = 128;

    EXPECT_EQ(R_OSAL_MmngrOpen(&config, &hndl_mmngr), OSAL_RETURN_OK) << "pre-process failed";
    EXPECT_NE(hndl_mmngr,OSAL_MEMORY_MANAGER_HANDLE_INVALID) << "pre-process failed";

    // Test09_013_006
    // @brief: normal case: Check with the allocated buffer size is less than the alignment.
    EXPECT_EQ(R_OSAL_MmngrAlloc(hndl_mmngr, size, alignment, &buffer_obj), OSAL_RETURN_OK);
    EXPECT_NE(buffer_obj,OSAL_MEMORY_BUFFER_HANDLE_INVALID);
    EXPECT_EQ(R_OSAL_MmngrGetSize(buffer_obj, &get_size), OSAL_RETURN_OK) << "Test09_013_006 failed";
    EXPECT_EQ(get_size, 64) << "Test09_013_006 failed";
    EXPECT_EQ(R_OSAL_MmngrDealloc(hndl_mmngr, buffer_obj), OSAL_RETURN_OK);
    buffer_obj = OSAL_MEMORY_BUFFER_HANDLE_INVALID;

    // post-process: close memory manager
    EXPECT_EQ(R_OSAL_MmngrClose(hndl_mmngr), OSAL_RETURN_OK) << "post-process failed";
    hndl_mmngr = OSAL_MEMORY_MANAGER_HANDLE_INVALID;
}
// [MmngrGetSize_TC_09_013_006]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrGetSize_TC_09_013_007 MemoryApiTest.MmngrGetSize_TC_09_013_007
 * @subsection MmngrGetSize_TC_09_013_007_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrGetSize_TC_09_013_007_tci Test Case ID
 * MmngrGetSize_S2_N_TC_09_013_007
 * @subsection MmngrGetSize_TC_09_013_007_rr Related Requirement(s)
 * \#276561
 * @subsection MmngrGetSize_TC_09_013_007_pp Prerequisite/Precondition
 * OSAL is initialized
 * @subsection MmngrGetSize_TC_09_013_007_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrGetSize with abnormal condition and mode is OSAL_MMNGR_ALLOC_MODE_STACK.
 * - pre-process: open new memory manager
 * - Test09_013_007: buffer has been deleted.
 * - post-process: close memory manager
 * @subsection MmngrGetSize_TC_09_013_007_tpts Test Procedure/Test Steps
 * -# Call R_OSAL_MmngrOpen with bellow config:
 *  - config.memory_limit                = 4096
 *  - config.max_allowed_allocations     = 1
 *  - config.max_registered_monitors_cbs = 2
 *  - config.mode = OSAL_MMNGR_ALLOC_MODE_STACK
 * -# Call R_OSAL_MmngrAlloc with valid parameter.
 * -# Call R_OSAL_MmngrDealloc with valid parameter to deallocate above buffer.
 * -# Call R_OSAL_MmngrGetSize to return the allocated buffer size.
 * -# Call R_OSAL_MmngrClose to close the handle.
 * @subsection MmngrGetSize_TC_09_013_007_ereb Expected Result/Behavior
 * -# The return of R_OSAL_MmngrOpen is OSAL_RETURN_OK.<br>
 * The returned handle is not OSAL_MEMORY_MANAGER_HANDLE_INVALID.
 * -# The return value of R_OSAL_MmngrAlloc is OSAL_RETURN_OK.<br>
 * The return buffer is not OSAL_MEMORY_BUFFER_HANDLE_INVALID.
 * -# The return value of R_OSAL_MmngrDealloc is OSAL_RETURN_OK.<br>
 * -# The return value of R_OSAL_MmngrGetSize is OSAL_RETURN_HANDLE.<br>
 * -# The return value of R_OSAL_MmngrClose is OSAL_RETURN_OK.
 * @subsection MmngrGetSize_TC_09_013_007_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrGetSize_TC_09_013_007
 */
// [MmngrGetSize_TC_09_013_007]
TEST_F(MemoryApiTest, MmngrGetSize_TC_09_013_007)
{
    size_t get_size;

    // pre-process: open memory manager
    config.memory_limit                = 4096;
    config.max_allowed_allocations     = 1;
    config.max_registered_monitors_cbs = 2;
    config.mode = OSAL_MMNGR_ALLOC_MODE_STACK;
    size = 64;
    alignment = 128;

    EXPECT_EQ(R_OSAL_MmngrOpen(&config, &hndl_mmngr), OSAL_RETURN_OK) << "pre-process failed";
    EXPECT_NE(hndl_mmngr,OSAL_MEMORY_MANAGER_HANDLE_INVALID) << "pre-process failed";

    // Test09_013_007
    // @brief: abnormal case: buffer has been deallocated
    EXPECT_EQ(R_OSAL_MmngrAlloc(hndl_mmngr, size, alignment, &buffer_obj), OSAL_RETURN_OK);
    EXPECT_NE(buffer_obj,OSAL_MEMORY_BUFFER_HANDLE_INVALID);
    EXPECT_EQ(R_OSAL_MmngrDealloc(hndl_mmngr, buffer_obj), OSAL_RETURN_OK);
    EXPECT_EQ(R_OSAL_MmngrGetSize(buffer_obj, &get_size), OSAL_RETURN_HANDLE) << "Test09_013_007 failed";

    // post-process: close memory manager
    EXPECT_EQ(R_OSAL_MmngrClose(hndl_mmngr), OSAL_RETURN_OK) << "post-process failed";
    hndl_mmngr = OSAL_MEMORY_MANAGER_HANDLE_INVALID;
}
// [MmngrGetSize_TC_09_013_007]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrGetSize_TC_09_013_008 MemoryApiTest.MmngrGetSize_TC_09_013_008
 * @subsection MmngrGetSize_TC_09_013_008_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrGetSize_TC_09_013_008_tci Test Case ID
 * MmngrGetSize_S3_N_TC_09_013_008
 * @subsection MmngrGetSize_TC_09_013_008_rr Related Requirement(s)
 * \#276561
 * @subsection MmngrGetSize_TC_09_013_008_pp Prerequisite/Precondition
 * OSAL is initialized
 * @subsection MmngrGetSize_TC_09_013_008_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrGetSize with normal condition and mode is OSAL_MMNGR_ALLOC_MODE_STACK_PROT.
 * - pre-process: open new memory manager
 * - Test09_013_008: with all valid parameters.
 * - post-process: close memory manager
 * @subsection MmngrGetSize_TC_09_013_008_tpts Test Procedure/Test Steps
 * -# Call R_OSAL_MmngrOpen with bellow config:
 *  - config.memory_limit                = 4096
 *  - config.max_allowed_allocations     = 1
 *  - config.max_registered_monitors_cbs = 2
 *  - config.mode = OSAL_MMNGR_ALLOC_MODE_STACK_PROT
 * -# Call R_OSAL_MmngrAlloc with size is 128 and alignment is 64 to allocate a memory buffer.
 * -# Call R_OSAL_MmngrGetSize with valid paramater.
 * -# Call R_OSAL_MmngrDealloc to deallocate the allocated memory buffer.
 * -# Call R_OSAL_MmngrClose to close memory manager
 * @subsection MmngrGetSize_TC_09_013_008_ereb Expected Result/Behavior
 * -# The return of R_OSAL_MmngrOpen is OSAL_RETURN_OK.<br>
 * The returned handle is not OSAL_MEMORY_MANAGER_HANDLE_INVALID.
 * -# The return value of R_OSAL_MmngrAlloc is OSAL_RETURN_OK.<br>
 * The return buffer is not OSAL_MEMORY_BUFFER_HANDLE_INVALID.
 * -# The return value of R_OSAL_MmngrGetSize is OSAL_RETURN_OK.<br>
 * The return "get_size" is 128.
 * -# The return value of R_OSAL_MmngrDealloc is OSAL_RETURN_OK.
 * -# R_OSAL_MmngrClose return OSAL_RETURN_OK
 * @subsection MmngrGetSize_TC_09_013_008_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrGetSize_TC_09_013_008
 */
// [MmngrGetSize_TC_09_013_008]
TEST_F(MemoryApiTest, MmngrGetSize_TC_09_013_008)
{
    size_t get_size;

    // pre-process: open memory manager
    config.memory_limit                = 4096;
    config.max_allowed_allocations     = 1;
    config.max_registered_monitors_cbs = 2;
    config.mode = OSAL_MMNGR_ALLOC_MODE_STACK_PROT;
    size = 128;
    alignment = 64;

    EXPECT_EQ(R_OSAL_MmngrOpen(&config, &hndl_mmngr), OSAL_RETURN_OK) << "pre-process failed";
    EXPECT_NE(hndl_mmngr,OSAL_MEMORY_MANAGER_HANDLE_INVALID) << "pre-process failed";

    // Test09_013_008
    // @brief: normal case: all valid argument
    EXPECT_EQ(R_OSAL_MmngrAlloc(hndl_mmngr, size, alignment, &buffer_obj), OSAL_RETURN_OK);
    EXPECT_NE(buffer_obj,OSAL_MEMORY_BUFFER_HANDLE_INVALID);
    EXPECT_EQ(R_OSAL_MmngrGetSize(buffer_obj, &get_size), OSAL_RETURN_OK) << "Test09_013_008 failed";
    EXPECT_EQ(get_size, 128) << "Test09_013_008 failed";
    EXPECT_EQ(R_OSAL_MmngrDealloc(hndl_mmngr, buffer_obj), OSAL_RETURN_OK);
    buffer_obj = OSAL_MEMORY_BUFFER_HANDLE_INVALID;

    // post-process: close memory manager
    EXPECT_EQ(R_OSAL_MmngrClose(hndl_mmngr), OSAL_RETURN_OK) << "post-process failed";
    hndl_mmngr = OSAL_MEMORY_MANAGER_HANDLE_INVALID;
}
// [MmngrGetSize_TC_09_013_008]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrGetSize_TC_09_013_009 MemoryApiTest.MmngrGetSize_TC_09_013_009
 * @subsection MmngrGetSize_TC_09_013_009_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrGetSize_TC_09_013_009_tci Test Case ID
 * MmngrGetSize_S4_A_TC_09_013_009
 * @subsection MmngrGetSize_TC_09_013_009_rr Related Requirement(s)
 * \#276561
 * @subsection MmngrGetSize_TC_09_013_009_pp Prerequisite/Precondition
 * OSAL is initialized
 * @subsection MmngrGetSize_TC_09_013_009_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrGetSize with abnormal condition and mode is OSAL_MMNGR_ALLOC_MODE_STACK_PROT.
 * - pre-process: open new memory manager
 * - Test09_013_009: buffer is not support to get size.
 * - post-process: close memory manager
 * @subsection MmngrGetSize_TC_09_013_009_tpts Test Procedure/Test Steps
 * -# Call R_OSAL_MmngrOpen with bellow config:
 *  - config.memory_limit                = 4096
 *  - config.max_allowed_allocations     = 1
 *  - config.max_registered_monitors_cbs = 2
 *  - config.mode = OSAL_MMNGR_ALLOC_MODE_STACK_PROT
 * -# Allocate "tmp_buffer_obj" by using malloc function.
 * -# Call R_OSAL_MmngrAlloc to allocate a memory buffer.
 * -# Store "buffer_obj->p_getSize" to "tmp_buffer_obj->p_getSize".<br>
 * Set "buffer_obj->p_getSize" to NULL. <br>
 * Call R_OSAL_MmngrGetSize with the changed buffer "buffer_obj".<br>
 * Re-assign "tmp_buffer_obj->p_getSize" to "buffer_obj->p_getSize".
 * -# Call R_OSAL_MmngrDealloc to deallocate the original allocated buffer.
 * -# Free buffer pointed by "tmp_buffer_obj"
 * -# Call R_OSAL_MmngrClose to close the handle.
 * @subsection MmngrGetSize_TC_09_013_009_ereb Expected Result/Behavior
 * -# The return of R_OSAL_MmngrOpen is OSAL_RETURN_OK.<br>
 * The returned handle is not OSAL_MEMORY_MANAGER_HANDLE_INVALID.
 * -# Memory allocation succeeded (Pointer to buffer != Nullpointer)
 * -# The return value of R_OSAL_MmngrAlloc is OSAL_RETURN_OK.<br>
 * The return buffer is not OSAL_MEMORY_BUFFER_HANDLE_INVALID.
 * -# The return value of R_OSAL_MmngrGetSize is OSAL_RETURN_UNSUPPORTED_OPERATION.
 * -# The return value of R_OSAL_MmngrDealloc is OSAL_RETURN_OK.
 * -# Allocated memory free succeeded.
 * -# The return value of R_OSAL_MmngrClose is OSAL_RETURN_OK.
 * @subsection MmngrGetSize_TC_09_013_009_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrGetSize_TC_09_013_009
 */
// [MmngrGetSize_TC_09_013_009]
TEST_F(MemoryApiTest, MmngrGetSize_TC_09_013_009)
{
    osal_memory_buffer_handle_t tmp_buffer_obj;
    size_t get_size;

    // pre-process: open memory manager
    config.memory_limit                = 4096;
    config.max_allowed_allocations     = 1;
    config.max_registered_monitors_cbs = 2;
    config.mode = OSAL_MMNGR_ALLOC_MODE_STACK_PROT;
    size = 128;
    alignment = 64;

    EXPECT_EQ(R_OSAL_MmngrOpen(&config, &hndl_mmngr), OSAL_RETURN_OK) << "pre-process failed";
    EXPECT_NE(hndl_mmngr,OSAL_MEMORY_MANAGER_HANDLE_INVALID) << "pre-process failed";

    // Test09_013_009
    // @brief: abnormal case: buffer_obj->getSize = NULL
    tmp_buffer_obj = (osal_memory_buffer_handle_t)malloc (sizeof(st_osal_memory_buffer_obj));
    EXPECT_EQ(R_OSAL_MmngrAlloc(hndl_mmngr, size, alignment, &buffer_obj), OSAL_RETURN_OK);
    EXPECT_NE(buffer_obj,OSAL_MEMORY_BUFFER_HANDLE_INVALID);
    tmp_buffer_obj->p_getSize = buffer_obj->p_getSize;
    buffer_obj->p_getSize = NULL;
    EXPECT_EQ(R_OSAL_MmngrGetSize(buffer_obj, &get_size), OSAL_RETURN_UNSUPPORTED_OPERATION) << "Test09_013_009 failed";
    buffer_obj->p_getSize = tmp_buffer_obj->p_getSize;
    EXPECT_EQ(R_OSAL_MmngrDealloc(hndl_mmngr, buffer_obj), OSAL_RETURN_OK);
    buffer_obj = OSAL_MEMORY_BUFFER_HANDLE_INVALID;
    free(tmp_buffer_obj);

    // post-process: close memory manager
    EXPECT_EQ(R_OSAL_MmngrClose(hndl_mmngr), OSAL_RETURN_OK) << "post-process failed";
    hndl_mmngr = OSAL_MEMORY_MANAGER_HANDLE_INVALID;
}
// [MmngrGetSize_TC_09_013_009]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrGetSize_TC_09_013_010 MemoryApiTest.MmngrGetSize_TC_09_013_010
 * @subsection MmngrGetSize_TC_09_013_010_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrGetSize_TC_09_013_010_tci Test Case ID
 * MmngrGetSize_S0_A_TC_09_013_010
 * @subsection MmngrGetSize_TC_09_013_010_rr Related Requirement(s)
 * \#276561
 * @subsection MmngrGetSize_TC_09_013_010_pp Prerequisite/Precondition
 * OSAL is initialized
 * @subsection MmngrGetSize_TC_09_013_010_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrGetSize with abnormal condition and mode is OSAL_MMNGR_ALLOC_MODE_STACK_PROT.
 * - pre-process: open new memory manager
 * - Test09_013_010: size is NULL.
 * - post-process: close memory manager
 * @subsection MmngrGetSize_TC_09_013_010_tpts Test Procedure/Test Steps
 * -# Call R_OSAL_MmngrOpen with bellow config:
 *  - config.memory_limit                = 4096
 *  - config.max_allowed_allocations     = 1
 *  - config.max_registered_monitors_cbs = 2
 *  - config.mode = OSAL_MMNGR_ALLOC_MODE_STACK_PROT
 * -# Call R_OSAL_MmngrAlloc with size is 128 and alignment is 64 to allocate a memory buffer.
 * -# Call R_OSAL_MmngrGetSize with size is NULL.
 * -# Call R_OSAL_MmngrDealloc to deallocate the allocated memory buffer.
 * -# Call R_OSAL_MmngrClose to close the handle.
 * @subsection MmngrGetSize_TC_09_013_010_ereb Expected Result/Behavior
 * -# The return of R_OSAL_MmngrOpen is OSAL_RETURN_OK.<br>
 * The returned handle is not OSAL_MEMORY_MANAGER_HANDLE_INVALID.
 * -# The return value of R_OSAL_MmngrAlloc is OSAL_RETURN_OK.<br>
 * The return buffer is not OSAL_MEMORY_BUFFER_HANDLE_INVALID.
 * -# The return value of the 1st R_OSAL_MmngrGetSize is OSAL_RETURN_PAR.
 * -# The return value of R_OSAL_MmngrDealloc is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrClose is OSAL_RETURN_OK.
 * @subsection MmngrGetSize_TC_09_013_010_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrGetSize_TC_09_013_010
 */
// [MmngrGetSize_TC_09_013_010]
TEST_F(MemoryApiTest, MmngrGetSize_TC_09_013_010)
{
    size_t * p_size = NULL;

    // pre-process: open memory manager
    config.memory_limit                = 4096;
    config.max_allowed_allocations     = 1;
    config.max_registered_monitors_cbs = 2;
    config.mode = OSAL_MMNGR_ALLOC_MODE_STACK_PROT;
    size = 128;
    alignment = 64;

    EXPECT_EQ(R_OSAL_MmngrOpen(&config, &hndl_mmngr), OSAL_RETURN_OK) << "pre-process failed";
    EXPECT_NE(hndl_mmngr,OSAL_MEMORY_MANAGER_HANDLE_INVALID) << "pre-process failed";

    // Test09_013_010
    // @brief: abnormal case: size = NULL
    EXPECT_EQ(R_OSAL_MmngrAlloc(hndl_mmngr, size, alignment, &buffer_obj), OSAL_RETURN_OK);
    EXPECT_NE(buffer_obj,OSAL_MEMORY_BUFFER_HANDLE_INVALID);
    EXPECT_EQ(R_OSAL_MmngrGetSize(buffer_obj, p_size), OSAL_RETURN_PAR) << "Test09_013_010 failed";
    EXPECT_EQ(R_OSAL_MmngrDealloc(hndl_mmngr, buffer_obj), OSAL_RETURN_OK);
    buffer_obj = OSAL_MEMORY_BUFFER_HANDLE_INVALID;

    // post-process: close memory manager
    EXPECT_EQ(R_OSAL_MmngrClose(hndl_mmngr), OSAL_RETURN_OK) << "post-process failed";
    hndl_mmngr = OSAL_MEMORY_MANAGER_HANDLE_INVALID;
}
// [MmngrGetSize_TC_09_013_010]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrGetSize_TC_09_013_011 MemoryApiTest.MmngrGetSize_TC_09_013_011
 * @subsection MmngrGetSize_TC_09_013_011_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrGetSize_TC_09_013_011_tci Test Case ID
 * MmngrGetSize_S3_N_TC_09_013_011
 * @subsection MmngrGetSize_TC_09_013_011_rr Related Requirement(s)
 * \#276561
 * @subsection MmngrGetSize_TC_09_013_011_pp Prerequisite/Precondition
 * OSAL is initialized
 * @subsection MmngrGetSize_TC_09_013_011_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrGetSize with normal condition and mode is OSAL_MMNGR_ALLOC_MODE_STACK_PROT.
 * - pre-process: open new memory manager
 * - Test09_013_011: confirm with alloc memory size is less than the alignment.
 * - post-process: close memory manager
 * @subsection MmngrGetSize_TC_09_013_011_tpts Test Procedure/Test Steps
 * -# Call R_OSAL_MmngrOpen with bellow config:
 *  - config.memory_limit                = 4096
 *  - config.max_allowed_allocations     = 1
 *  - config.max_registered_monitors_cbs = 2
 *  - config.mode = OSAL_MMNGR_ALLOC_MODE_STACK_PROT
 * -# Call R_OSAL_MmngrAlloc with "size" is 64 and "alignment" is 128 to allocate a memory buffer.
 * -# Call R_OSAL_MmngrGetSize to return the allocated buffer size.
 * -# Call R_OSAL_MmngrDealloc to deallocate the allocated memory buffer.
 * -# Call R_OSAL_MmngrClose to close the handle.
 * @subsection MmngrGetSize_TC_09_013_011_ereb Expected Result/Behavior
 * -# The return of R_OSAL_MmngrOpen is OSAL_RETURN_OK.<br>
 * The returned handle is not OSAL_MEMORY_MANAGER_HANDLE_INVALID.
 * -# The return value of R_OSAL_MmngrAlloc is OSAL_RETURN_OK.<br>
 * The return buffer is not OSAL_MEMORY_BUFFER_HANDLE_INVALID.
 * -# The return value of R_OSAL_MmngrGetSize is OSAL_RETURN_OK.<br>
 * The return size is 64
 * -# The return value of R_OSAL_MmngrDealloc is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrClose is OSAL_RETURN_OK.
 * @subsection MmngrGetSize_TC_09_013_011_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrGetSize_TC_09_013_011
 */
// [MmngrGetSize_TC_09_013_011]
TEST_F(MemoryApiTest, MmngrGetSize_TC_09_013_011)
{
    size_t get_size;

    // pre-process: open memory manager
    config.memory_limit                = 4096;
    config.max_allowed_allocations     = 1;
    config.max_registered_monitors_cbs = 2;
    config.mode = OSAL_MMNGR_ALLOC_MODE_STACK_PROT;
    size = 64;
    alignment = 128;

    EXPECT_EQ(R_OSAL_MmngrOpen(&config, &hndl_mmngr), OSAL_RETURN_OK) << "pre-process failed";
    EXPECT_NE(hndl_mmngr,OSAL_MEMORY_MANAGER_HANDLE_INVALID) << "pre-process failed";

    // Test09_013_011
    // @brief: normal case: Check with the allocated buffer size is less than the alignment.
    EXPECT_EQ(R_OSAL_MmngrAlloc(hndl_mmngr, size, alignment, &buffer_obj), OSAL_RETURN_OK);
    EXPECT_NE(buffer_obj,OSAL_MEMORY_BUFFER_HANDLE_INVALID);
    EXPECT_EQ(R_OSAL_MmngrGetSize(buffer_obj, &get_size), OSAL_RETURN_OK) << "Test09_013_011 failed";
    EXPECT_EQ(get_size, 64) << "Test09_013_011 failed";
    EXPECT_EQ(R_OSAL_MmngrDealloc(hndl_mmngr, buffer_obj), OSAL_RETURN_OK);
    buffer_obj = OSAL_MEMORY_BUFFER_HANDLE_INVALID;

    // post-process: close memory manager
    EXPECT_EQ(R_OSAL_MmngrClose(hndl_mmngr), OSAL_RETURN_OK) << "post-process failed";
    hndl_mmngr = OSAL_MEMORY_MANAGER_HANDLE_INVALID;
}
// [MmngrGetSize_TC_09_013_011]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrGetSize_TC_09_013_012 MemoryApiTest.MmngrGetSize_TC_09_013_012
 * @subsection MmngrGetSize_TC_09_013_012_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrGetSize_TC_09_013_012_tci Test Case ID
 * MmngrGetSize_S2_N_TC_09_013_012
 * @subsection MmngrGetSize_TC_09_013_012_rr Related Requirement(s)
 * \#276561
 * @subsection MmngrGetSize_TC_09_013_012_pp Prerequisite/Precondition
 * OSAL is initialized
 * @subsection MmngrGetSize_TC_09_013_012_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrGetSize with abnormal condition and mode is OSAL_MMNGR_ALLOC_MODE_STACK_PROT.
 * - pre-process: open new memory manager
 * - Test09_013_012: buffer has been deleted.
 * - post-process: close memory manager
 * @subsection MmngrGetSize_TC_09_013_012_tpts Test Procedure/Test Steps
 * -# Call R_OSAL_MmngrOpen with bellow config:
 *  - config.memory_limit                = 4096
 *  - config.max_allowed_allocations     = 1
 *  - config.max_registered_monitors_cbs = 2
 *  - config.mode = OSAL_MMNGR_ALLOC_MODE_STACK_PROT
 * -# Call R_OSAL_MmngrAlloc with valid parameter.
 * -# Call R_OSAL_MmngrDealloc with valid parameter to deallocate above buffer.
 * -# Call R_OSAL_MmngrGetSize to return the allocated buffer size.
 * -# Call R_OSAL_MmngrClose to close the handle.
 * @subsection MmngrGetSize_TC_09_013_012_ereb Expected Result/Behavior
 * -# The return of R_OSAL_MmngrOpen is OSAL_RETURN_OK.<br>
 * The returned handle is not OSAL_MEMORY_MANAGER_HANDLE_INVALID.
 * -# The return value of R_OSAL_MmngrAlloc is OSAL_RETURN_OK.<br>
 * The return buffer is not OSAL_MEMORY_BUFFER_HANDLE_INVALID.
 * -# The return value of R_OSAL_MmngrDealloc is OSAL_RETURN_OK.<br>
 * -# The return value of R_OSAL_MmngrGetSize is OSAL_RETURN_HANDLE.<br>
 * -# The return value of R_OSAL_MmngrClose is OSAL_RETURN_OK.
 * @subsection MmngrGetSize_TC_09_013_012_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrGetSize_TC_09_013_012
 */
// [MmngrGetSize_TC_09_013_012]
TEST_F(MemoryApiTest, MmngrGetSize_TC_09_013_012)
{
    size_t get_size;

    // pre-process: open memory manager
    config.memory_limit                = 4096;
    config.max_allowed_allocations     = 1;
    config.max_registered_monitors_cbs = 2;
    config.mode = OSAL_MMNGR_ALLOC_MODE_STACK_PROT;
    size = 64;
    alignment = 128;

    EXPECT_EQ(R_OSAL_MmngrOpen(&config, &hndl_mmngr), OSAL_RETURN_OK) << "pre-process failed";
    EXPECT_NE(hndl_mmngr,OSAL_MEMORY_MANAGER_HANDLE_INVALID) << "pre-process failed";

    // Test09_013_012
    // @brief: abnormal case: buffer has been deallocated
    EXPECT_EQ(R_OSAL_MmngrAlloc(hndl_mmngr, size, alignment, &buffer_obj), OSAL_RETURN_OK);
    EXPECT_NE(buffer_obj,OSAL_MEMORY_BUFFER_HANDLE_INVALID);
    EXPECT_EQ(R_OSAL_MmngrDealloc(hndl_mmngr, buffer_obj), OSAL_RETURN_OK);
    EXPECT_EQ(R_OSAL_MmngrGetSize(buffer_obj, &get_size), OSAL_RETURN_HANDLE) << "Test09_013_012 failed";

    // post-process: close memory manager
    EXPECT_EQ(R_OSAL_MmngrClose(hndl_mmngr), OSAL_RETURN_OK) << "post-process failed";
    hndl_mmngr = OSAL_MEMORY_MANAGER_HANDLE_INVALID;
}
// [MmngrGetSize_TC_09_013_012]
#endif

#ifndef SKIP_MEMORY_CHECKBUFFER
/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrGetSize_TC_09_013_013 MemoryApiTest.MmngrGetSize_TC_09_013_013
 * @subsection MmngrGetSize_TC_09_013_013_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrGetSize_TC_09_013_013_tci Test Case ID
 * MmngrGetSize_S4_A_TC_09_013_013
 * @subsection MmngrGetSize_TC_09_013_013_rr Related Requirement(s)
 * \#276561
 * @subsection MmngrGetSize_TC_09_013_013_pp Prerequisite/Precondition
 * OSAL is initialized.
 * @subsection MmngrGetSize_TC_09_013_013_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrGetSize with abnormal condition in OSAL_MMNGR_ALLOC_MODE_STACK mode.
 * - pre-process: open memory manager
 * - Test09_013_013: "buffer_obj->p_ptr_self" is invalid.
 * - post-process: close memory manager
 * @subsection MmngrGetSize_TC_09_013_013_tpts Test Procedure/Test Steps
 * -# Call R_OSAL_MmngrGetOsalMaxConfig to get the valid config then set config mode to OSAL_MMNGR_ALLOC_MODE_STACK
 * -# Call R_OSAL_MmngrOpen with valid parameter and above config.
 * -# Call R_OSAL_MmngrAlloc with valid parameter
 * -# Call R_OSAL_MmngrGetSize with an invalid buffer_obj->p_ptr_self:
 *      - buffer_obj with p_ptr_self value changed to p_ptr_self_ng
 *      - "p_ptr_self_ng" is allocated by malloc function.
 * -# Deallocate buffer_obj by using R_OSAL_MmngrDeallocate.
 *      - buffer_obj with valid p_ptr_self value
 * -# Call R_OSAL_MmngrClose to close the memory manager.
 * @subsection MmngrGetSize_TC_09_013_013_ereb Expected Result/Behavior
 * -# The return value of R_OSAL_MmngrGetOsalMaxConfig is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrOpen is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrAlloc is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrGetSize is OSAL_RETURN_HANDLE.
 * -# The return value of R_OSAL_MmngrDeallocate is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrClose is OSAL_RETURN_OK.
 * @subsection MmngrGetSize_TC_09_013_013_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrGetSize_TC_09_013_013
 */
// [MmngrGetSize_TC_09_013_013]
TEST_F(MemoryApiTest, MmngrGetSize_TC_09_013_013)
{
    void* ptr_self_bak;
    void* ptr_self_ng;
    size_t get_size;

    // Test09_013_013
    // @brief: abnormal case: "buffer_obj->p_ptr_self" is invalid.
    EXPECT_EQ(R_OSAL_MmngrGetOsalMaxConfig(&config), OSAL_RETURN_OK);
    config.mode = OSAL_MMNGR_ALLOC_MODE_STACK;
    EXPECT_EQ(R_OSAL_MmngrOpen(&config, &hndl_mmngr), OSAL_RETURN_OK);
    size = 64;
    alignment = 64;
    EXPECT_EQ(R_OSAL_MmngrAlloc(hndl_mmngr, size, alignment, &buffer_obj), OSAL_RETURN_OK);
    ptr_self_bak = buffer_obj->p_ptr_self;
    ptr_self_ng = malloc(0x100);
    memset(ptr_self_ng, 0x0, 0x100);
    buffer_obj->p_ptr_self = ptr_self_ng;
    EXPECT_EQ(R_OSAL_MmngrGetSize(buffer_obj, &get_size), OSAL_RETURN_HANDLE) << "Test09_013_013 failed";
    free(ptr_self_ng);
    buffer_obj->p_ptr_self = ptr_self_bak;
    EXPECT_EQ(R_OSAL_MmngrDealloc(hndl_mmngr, buffer_obj), OSAL_RETURN_OK) << "Test09_013_013 failed";
    EXPECT_EQ(R_OSAL_MmngrClose(hndl_mmngr), OSAL_RETURN_OK) << "Test09_013_013 failed";
    hndl_mmngr = OSAL_MEMORY_MANAGER_HANDLE_INVALID;
    buffer_obj = OSAL_MEMORY_BUFFER_HANDLE_INVALID;
}
// [MmngrGetSize_TC_09_013_013]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrGetSize_TC_09_013_014 MemoryApiTest.MmngrGetSize_TC_09_013_014
 * @subsection MmngrGetSize_TC_09_013_014_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrGetSize_TC_09_013_014_tci Test Case ID
 * MmngrGetSize_S4_A_TC_09_013_014
 * @subsection MmngrGetSize_TC_09_013_014_rr Related Requirement(s)
 * \#276561
 * @subsection MmngrGetSize_TC_09_013_014_pp Prerequisite/Precondition
 * OSAL is initialized.
 * @subsection MmngrGetSize_TC_09_013_014_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrGetSize with abnormal condition in OSAL_MMNGR_ALLOC_MODE_STACK_PROT mode.
 * - pre-process: open memory manager
 * - Test09_013_014: "buffer_obj->p_ptr_self" is invalid.
 * - post-process: close memory manager
 * @subsection MmngrGetSize_TC_09_013_014_tpts Test Procedure/Test Steps
 * -# Call R_OSAL_MmngrGetOsalMaxConfig to get the valid config then set config mode to OSAL_MMNGR_ALLOC_MODE_STACK_PROT
 * -# Call R_OSAL_MmngrOpen with valid parameter.
 * -# Call R_OSAL_MmngrAlloc with valid parameter
 * -# Call R_OSAL_MmngrGetSize with an invalid buffer_obj->p_ptr_self:
 *      - buffer_obj with p_ptr_self value changed to p_ptr_self_ng
 *      - "p_ptr_self_ng" is allocated by malloc function.
 * -# Deallocate buffer_obj by using R_OSAL_MmngrDeallocate.
 *      - buffer_obj with valid p_ptr_self value
 * -# Call R_OSAL_MmngrClose to close the memory manager.
 * @subsection MmngrGetSize_TC_09_013_014_ereb Expected Result/Behavior
 * -# The return value of R_OSAL_MmngrGetOsalMaxConfig is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrOpen is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrAlloc is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrGetSize is OSAL_RETURN_HANDLE.
 * -# The return value of R_OSAL_MmngrDeallocate is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrClose is OSAL_RETURN_OK.
 * @subsection MmngrGetSize_TC_09_013_014_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrGetSize_TC_09_013_014
 */
// [MmngrGetSize_TC_09_013_014]
TEST_F(MemoryApiTest, MmngrGetSize_TC_09_013_014)
{
    void* ptr_self_bak;
    void* ptr_self_ng;
    size_t get_size;

    // Test09_013_014
    // @brief: abnormal case: "buffer_obj->p_ptr_self" is invalid.
    EXPECT_EQ(R_OSAL_MmngrGetOsalMaxConfig(&config), OSAL_RETURN_OK);
    config.mode = OSAL_MMNGR_ALLOC_MODE_STACK_PROT;
    EXPECT_EQ(R_OSAL_MmngrOpen(&config, &hndl_mmngr), OSAL_RETURN_OK);
    size = 64;
    alignment = 64;
    EXPECT_EQ(R_OSAL_MmngrAlloc(hndl_mmngr, size, alignment, &buffer_obj), OSAL_RETURN_OK);
    ptr_self_bak = buffer_obj->p_ptr_self;
    ptr_self_ng = malloc(0x100);
    memset(ptr_self_ng, 0x0, 0x100);
    buffer_obj->p_ptr_self = ptr_self_ng;
    EXPECT_EQ(R_OSAL_MmngrGetSize(buffer_obj, &get_size), OSAL_RETURN_HANDLE) << "Test09_013_014 failed";
    free(ptr_self_ng);
    buffer_obj->p_ptr_self = ptr_self_bak;
    EXPECT_EQ(R_OSAL_MmngrDealloc(hndl_mmngr, buffer_obj), OSAL_RETURN_OK) << "Test09_013_014 failed";
    EXPECT_EQ(R_OSAL_MmngrClose(hndl_mmngr), OSAL_RETURN_OK) << "Test09_013_014 failed";
    hndl_mmngr = OSAL_MEMORY_MANAGER_HANDLE_INVALID;
    buffer_obj = OSAL_MEMORY_BUFFER_HANDLE_INVALID;
}
// [MmngrGetSize_TC_09_013_014]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrGetSize_TC_09_013_015 MemoryApiTest.MmngrGetSize_TC_09_013_015
 * @subsection MmngrGetSize_TC_09_013_015_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrGetSize_TC_09_013_015_tci Test Case ID
 * MmngrGetSize_S4_A_TC_09_013_015
 * @subsection MmngrGetSize_TC_09_013_015_rr Related Requirement(s)
 * \#276561
 * @subsection MmngrGetSize_TC_09_013_015_pp Prerequisite/Precondition
 * OSAL is initialized.
 * @subsection MmngrGetSize_TC_09_013_015_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrGetSize with abnormal condition in OSAL_MMNGR_ALLOC_MODE_FREE_LIST mode.
 * - pre-process: open memory manager
 * - Test09_013_015: "buffer_obj->p_ptr_self" is invalid.
 * - post-process: close memory manager
 * @subsection MmngrGetSize_TC_09_013_015_tpts Test Procedure/Test Steps
 * -# Call R_OSAL_MmngrGetOsalMaxConfig to get the valid config then set config mode to OSAL_MMNGR_ALLOC_MODE_FREE_LIST
 * -# Call R_OSAL_MmngrOpen with valid parameter and above config.
 * -# Call R_OSAL_MmngrAlloc with valid parameter
 * -# Call R_OSAL_MmngrGetSize with an invalid buffer_obj->p_ptr_self:
 *      - buffer_obj with p_ptr_self value changed to p_ptr_self_ng
 *      - "p_ptr_self_ng" is allocated by malloc function.
 * -# Deallocate buffer_obj by using R_OSAL_MmngrDeallocate.
 *      - buffer_obj with valid p_ptr_self value
 * -# Call R_OSAL_MmngrClose to close the memory manager.
 * @subsection MmngrGetSize_TC_09_013_015_ereb Expected Result/Behavior
 * -# The return value of R_OSAL_MmngrGetOsalMaxConfig is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrOpen is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrAlloc is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrGetSize is OSAL_RETURN_HANDLE.
 * -# The return value of R_OSAL_MmngrDeallocate is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrClose is OSAL_RETURN_OK.
 * @subsection MmngrGetSize_TC_09_013_015_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrGetSize_TC_09_013_015
 */
// [MmngrGetSize_TC_09_013_015]
TEST_F(MemoryApiTest, MmngrGetSize_TC_09_013_015)
{
    void* ptr_self_bak;
    void* ptr_self_ng;
    size_t get_size;

    // Test09_013_015
    // @brief: abnormal case: "buffer_obj->p_ptr_self" is invalid.
    EXPECT_EQ(R_OSAL_MmngrGetOsalMaxConfig(&config), OSAL_RETURN_OK);
    config.mode = OSAL_MMNGR_ALLOC_MODE_FREE_LIST;
    EXPECT_EQ(R_OSAL_MmngrOpen(&config, &hndl_mmngr), OSAL_RETURN_OK);
    size = 64;
    alignment = 64;
    EXPECT_EQ(R_OSAL_MmngrAlloc(hndl_mmngr, size, alignment, &buffer_obj), OSAL_RETURN_OK);
    ptr_self_bak = buffer_obj->p_ptr_self;
    ptr_self_ng = malloc(0x100);
    memset(ptr_self_ng, 0x0, 0x100);
    buffer_obj->p_ptr_self = ptr_self_ng;
    EXPECT_EQ(R_OSAL_MmngrGetSize(buffer_obj, &get_size), OSAL_RETURN_HANDLE) << "Test09_013_015 failed";
    free(ptr_self_ng);
    buffer_obj->p_ptr_self = ptr_self_bak;
    EXPECT_EQ(R_OSAL_MmngrDealloc(hndl_mmngr, buffer_obj), OSAL_RETURN_OK) << "Test09_013_015 failed";
    EXPECT_EQ(R_OSAL_MmngrClose(hndl_mmngr), OSAL_RETURN_OK) << "Test09_013_015 failed";
    hndl_mmngr = OSAL_MEMORY_MANAGER_HANDLE_INVALID;
    buffer_obj = OSAL_MEMORY_BUFFER_HANDLE_INVALID;
}
// [MmngrGetSize_TC_09_013_015]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrGetSize_TC_09_013_016 MemoryApiTest.MmngrGetSize_TC_09_013_016
 * @subsection MmngrGetSize_TC_09_013_016_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrGetSize_TC_09_013_016_tci Test Case ID
 * MmngrGetSize_S4_A_TC_09_013_016
 * @subsection MmngrGetSize_TC_09_013_016_rr Related Requirement(s)
 * \#276561
 * @subsection MmngrGetSize_TC_09_013_016_pp Prerequisite/Precondition
 * OSAL is initialized.
 * @subsection MmngrGetSize_TC_09_013_016_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrGetSize with abnormal condition in OSAL_MMNGR_ALLOC_MODE_FREE_LIST_PROT mode.
 * - pre-process: open memory manager
 * - Test09_013_016: "buffer_obj->p_ptr_self" is invalid.
 * - post-process: close memory manager
 * @subsection MmngrGetSize_TC_09_013_016_tpts Test Procedure/Test Steps
 * -# Call R_OSAL_MmngrGetOsalMaxConfig to get the valid config then set config mode to OSAL_MMNGR_ALLOC_MODE_FREE_LIST_PROT
 * -# Call R_OSAL_MmngrOpen with valid parameter.
 * -# Call R_OSAL_MmngrAlloc with valid parameter
 * -# Call R_OSAL_MmngrGetSize with an invalid buffer_obj->p_ptr_self:
 *      - buffer_obj with p_ptr_self value changed to p_ptr_self_ng
 *      - "p_ptr_self_ng" is allocated by malloc function.
 * -# Deallocate buffer_obj by using R_OSAL_MmngrDeallocate.
 *      - buffer_obj with valid p_ptr_self value
 * -# Call R_OSAL_MmngrClose to close the memory manager.
 * @subsection MmngrGetSize_TC_09_013_016_ereb Expected Result/Behavior
 * -# The return value of R_OSAL_MmngrGetOsalMaxConfig is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrOpen is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrAlloc is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrGetSize is OSAL_RETURN_HANDLE.
 * -# The return value of R_OSAL_MmngrDeallocate is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrClose is OSAL_RETURN_OK.
 * @subsection MmngrGetSize_TC_09_013_016_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrGetSize_TC_09_013_016
 */
// [MmngrGetSize_TC_09_013_016]
TEST_F(MemoryApiTest, MmngrGetSize_TC_09_013_016)
{
    void* ptr_self_bak;
    void* ptr_self_ng;
    size_t get_size;

    // Test09_013_016
    // @brief: abnormal case: "buffer_obj->p_ptr_self" is invalid.
    EXPECT_EQ(R_OSAL_MmngrGetOsalMaxConfig(&config), OSAL_RETURN_OK);
    config.mode = OSAL_MMNGR_ALLOC_MODE_FREE_LIST_PROT;
    EXPECT_EQ(R_OSAL_MmngrOpen(&config, &hndl_mmngr), OSAL_RETURN_OK);
    size = 64;
    alignment = 64;
    EXPECT_EQ(R_OSAL_MmngrAlloc(hndl_mmngr, size, alignment, &buffer_obj), OSAL_RETURN_OK);
    ptr_self_bak = buffer_obj->p_ptr_self;
    ptr_self_ng = malloc(0x100);
    memset(ptr_self_ng, 0x0, 0x100);
    buffer_obj->p_ptr_self = ptr_self_ng;
    EXPECT_EQ(R_OSAL_MmngrGetSize(buffer_obj, &get_size), OSAL_RETURN_HANDLE) << "Test09_013_016 failed";
    free(ptr_self_ng);
    buffer_obj->p_ptr_self = ptr_self_bak;
    EXPECT_EQ(R_OSAL_MmngrDealloc(hndl_mmngr, buffer_obj), OSAL_RETURN_OK) << "Test09_013_016 failed";
    EXPECT_EQ(R_OSAL_MmngrClose(hndl_mmngr), OSAL_RETURN_OK) << "Test09_013_016 failed";
    hndl_mmngr = OSAL_MEMORY_MANAGER_HANDLE_INVALID;
    buffer_obj = OSAL_MEMORY_BUFFER_HANDLE_INVALID;
}
// [MmngrGetSize_TC_09_013_016]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrGetSize_TC_09_013_017 MemoryApiTest.MmngrGetSize_TC_09_013_017
 * @subsection MmngrGetSize_TC_09_013_017_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrGetSize_TC_09_013_017_tci Test Case ID
 * MmngrGetSize_S2_A_TC_09_013_017
 * @subsection MmngrGetSize_TC_09_013_017_rr Related Requirement(s)
 * \#276561
 * @subsection MmngrGetSize_TC_09_013_017_pp Prerequisite/Precondition
 * OSAL is initialized
 * @subsection MmngrGetSize_TC_09_013_017_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrGetSize with abnormal condition and mode is OSAL_MMNGR_ALLOC_MODE_FREE_LIST.
 * - Test09_013_017: buffer has been deallocated.
 * @subsection MmngrGetSize_TC_09_013_017_tpts Test Procedure/Test Steps
 * -# Call R_OSAL_MmngrOpen with bellow config:
 *  - config.memory_limit                = 4096
 *  - config.max_allowed_allocations     = 1
 *  - config.max_registered_monitors_cbs = 2
 *  - config.mode = OSAL_MMNGR_ALLOC_MODE_FREE_LIST
 * -# Call R_OSAL_MmngrAlloc with valid parameter.
 * -# Call R_OSAL_MmngrDealloc with valid parameter to deallocate above buffer.
 * -# Call R_OSAL_MmngrGetSize to return the allocated buffer size.
 * -# Call R_OSAL_MmngrClose to close the handle.
 * @subsection MmngrGetSize_TC_09_013_017_ereb Expected Result/Behavior
 * -# The return of R_OSAL_MmngrOpen is OSAL_RETURN_OK.<br>
 * The returned handle is not OSAL_MEMORY_MANAGER_HANDLE_INVALID.
 * -# The return value of R_OSAL_MmngrAlloc is OSAL_RETURN_OK.<br>
 * The return buffer is not OSAL_MEMORY_BUFFER_HANDLE_INVALID.
 * -# The return value of R_OSAL_MmngrDealloc is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrGetSize is OSAL_RETURN_HANDLE.
 * -# The return value of R_OSAL_MmngrClose is OSAL_RETURN_OK.
 * @subsection MmngrGetSize_TC_09_013_017_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrGetSize_TC_09_013_017
 */
// [MmngrGetSize_TC_09_013_017]
TEST_F(MemoryApiTest, MmngrGetSize_TC_09_013_017)
{
    size_t get_size;

    // Test09_013_017
    // @brief: abnormal case: buffer has been deallocated
    config.memory_limit                = 4096;
    config.max_allowed_allocations     = 1;
    config.max_registered_monitors_cbs = 2;
    config.mode = OSAL_MMNGR_ALLOC_MODE_FREE_LIST;
    size = 64;
    alignment = 128;

    EXPECT_EQ(R_OSAL_MmngrOpen(&config, &hndl_mmngr), OSAL_RETURN_OK) << "Test09_013_017 failed";
    EXPECT_NE(hndl_mmngr,OSAL_MEMORY_MANAGER_HANDLE_INVALID) << "Test09_013_017 failed";
    EXPECT_EQ(R_OSAL_MmngrAlloc(hndl_mmngr, size, alignment, &buffer_obj), OSAL_RETURN_OK) << "Test09_013_017 failed";
    EXPECT_NE(buffer_obj,OSAL_MEMORY_BUFFER_HANDLE_INVALID) << "Test09_013_017 failed";
    EXPECT_EQ(R_OSAL_MmngrDealloc(hndl_mmngr, buffer_obj), OSAL_RETURN_OK) << "Test09_013_017 failed";
    EXPECT_EQ(R_OSAL_MmngrGetSize(buffer_obj, &get_size), OSAL_RETURN_HANDLE) << "Test09_013_017 failed";
    EXPECT_EQ(R_OSAL_MmngrClose(hndl_mmngr), OSAL_RETURN_OK) << "Test09_013_017 failed";
    hndl_mmngr = OSAL_MEMORY_MANAGER_HANDLE_INVALID;
}
// [MmngrGetSize_TC_09_013_017]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrGetSize_TC_09_013_018 MemoryApiTest.MmngrGetSize_TC_09_013_018
 * @subsection MmngrGetSize_TC_09_013_018_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrGetSize_TC_09_013_018_tci Test Case ID
 * MmngrGetSize_S2_A_TC_09_013_018
 * @subsection MmngrGetSize_TC_09_013_018_rr Related Requirement(s)
 * \#276561
 * @subsection MmngrGetSize_TC_09_013_018_pp Prerequisite/Precondition
 * OSAL is initialized
 * @subsection MmngrGetSize_TC_09_013_018_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrGetSize with abnormal condition and mode is OSAL_MMNGR_ALLOC_MODE_FREE_LIST_PROT.
 * - Test09_013_018: buffer has been deallocated.
 * @subsection MmngrGetSize_TC_09_013_018_tpts Test Procedure/Test Steps
 * -# Call R_OSAL_MmngrOpen with bellow config:
 *  - config.memory_limit                = 4096
 *  - config.max_allowed_allocations     = 1
 *  - config.max_registered_monitors_cbs = 2
 *  - config.mode = OSAL_MMNGR_ALLOC_MODE_FREE_LIST_PROT
 * -# Call R_OSAL_MmngrAlloc with valid parameter.
 * -# Call R_OSAL_MmngrDealloc with valid parameter to deallocate above buffer.
 * -# Call R_OSAL_MmngrGetSize to return the allocated buffer size.
 * -# Call R_OSAL_MmngrClose to close the handle.
 * @subsection MmngrGetSize_TC_09_013_018_ereb Expected Result/Behavior
 * -# The return of R_OSAL_MmngrOpen is OSAL_RETURN_OK.<br>
 * The returned handle is not OSAL_MEMORY_MANAGER_HANDLE_INVALID.
 * -# The return value of R_OSAL_MmngrAlloc is OSAL_RETURN_OK.<br>
 * The return buffer is not OSAL_MEMORY_BUFFER_HANDLE_INVALID.
 * -# The return value of R_OSAL_MmngrDealloc is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrGetSize is OSAL_RETURN_HANDLE.
 * -# The return value of R_OSAL_MmngrClose is OSAL_RETURN_OK.
 * @subsection MmngrGetSize_TC_09_013_018_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrGetSize_TC_09_013_018
 */
// [MmngrGetSize_TC_09_013_018]
TEST_F(MemoryApiTest, MmngrGetSize_TC_09_013_018)
{
    size_t get_size;

    // Test09_013_018
    // @brief: abnormal case: buffer has been deallocated
    config.memory_limit                = 4096;
    config.max_allowed_allocations     = 1;
    config.max_registered_monitors_cbs = 2;
    config.mode = OSAL_MMNGR_ALLOC_MODE_FREE_LIST_PROT;
    size = 64;
    alignment = 128;

    EXPECT_EQ(R_OSAL_MmngrOpen(&config, &hndl_mmngr), OSAL_RETURN_OK) << "Test09_013_018 failed";
    EXPECT_NE(hndl_mmngr,OSAL_MEMORY_MANAGER_HANDLE_INVALID) << "Test09_013_018 failed";
    EXPECT_EQ(R_OSAL_MmngrAlloc(hndl_mmngr, size, alignment, &buffer_obj), OSAL_RETURN_OK) << "Test09_013_018 failed";
    EXPECT_NE(buffer_obj,OSAL_MEMORY_BUFFER_HANDLE_INVALID) << "Test09_013_018 failed";
    EXPECT_EQ(R_OSAL_MmngrDealloc(hndl_mmngr, buffer_obj), OSAL_RETURN_OK) << "Test09_013_018 failed";
    EXPECT_EQ(R_OSAL_MmngrGetSize(buffer_obj, &get_size), OSAL_RETURN_HANDLE) << "Test09_013_018 failed";
    EXPECT_EQ(R_OSAL_MmngrClose(hndl_mmngr), OSAL_RETURN_OK) << "Test09_013_018 failed";
    hndl_mmngr = OSAL_MEMORY_MANAGER_HANDLE_INVALID;
}
// [MmngrGetSize_TC_09_013_018]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrGetSize_TC_09_013_019 MemoryApiTest.MmngrGetSize_TC_09_013_019
 * @subsection MmngrGetSize_TC_09_013_019_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrGetSize_TC_09_013_019_tci Test Case ID
 * MmngrGetSize_S4_A_TC_09_013_019
 * @subsection MmngrGetSize_TC_09_013_019_rr Related Requirement(s)
 * \#276561
 * @subsection MmngrGetSize_TC_09_013_019_pp Prerequisite/Precondition
 * OSAL is initialized
 * @subsection MmngrGetSize_TC_09_013_019_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrGetSize with abnormal condition and mode is OSAL_MMNGR_ALLOC_MODE_STACK.
 * - Test09_013_019: buffer_obj->mmngr_owner_hndl->p_ptr_self is invalid (NULL)
 * @subsection MmngrGetSize_TC_09_013_019_tpts Test Procedure/Test Steps
 * -# Call R_OSAL_MmngrOpen with bellow config:
 *  - config.memory_limit                = 4096
 *  - config.max_allowed_allocations     = 1
 *  - config.max_registered_monitors_cbs = 2
 *  - config.mode = OSAL_MMNGR_ALLOC_MODE_STACK
 * -# Call R_OSAL_MmngrAlloc with valid parameter.
 * -# Call R_OSAL_MmngrGetSize with buffer_obj->mmngr_owner_hndl->p_ptr_self is invalid (NULL)
 * -# Call R_OSAL_MmngrDealloc to deallocate above buffer.
 * -# Call R_OSAL_MmngrClose to close the handle.
 * @subsection MmngrGetSize_TC_09_013_019_ereb Expected Result/Behavior
 * -# The return of R_OSAL_MmngrOpen is OSAL_RETURN_OK.<br>
 * The returned handle is not OSAL_MEMORY_MANAGER_HANDLE_INVALID.
 * -# The return value of R_OSAL_MmngrAlloc is OSAL_RETURN_OK.<br>
 * The return buffer is not OSAL_MEMORY_BUFFER_HANDLE_INVALID.
 * -# The return value of R_OSAL_MmngrGetSize is OSAL_RETURN_HANDLE.
 * -# The return value of R_OSAL_MmngrDealloc is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrClose is OSAL_RETURN_OK.
 * @subsection MmngrGetSize_TC_09_013_019_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrGetSize_TC_09_013_019
 */
// [MmngrGetSize_TC_09_013_019]
TEST_F(MemoryApiTest, MmngrGetSize_TC_09_013_019)
{
    size_t get_size;
    void * bk_ptr_self;

    // Test09_013_019
    // @brief: abnormal case: buffer_obj->mmngr_owner_hndl->p_ptr_self is invalid (NULL)
    config.memory_limit                = 4096;
    config.max_allowed_allocations     = 1;
    config.max_registered_monitors_cbs = 2;
    config.mode = OSAL_MMNGR_ALLOC_MODE_STACK;
    size = 64;
    alignment = 128;

    EXPECT_EQ(R_OSAL_MmngrOpen(&config, &hndl_mmngr), OSAL_RETURN_OK) << "Test09_013_019 failed";
    EXPECT_NE(hndl_mmngr,OSAL_MEMORY_MANAGER_HANDLE_INVALID) << "Test09_013_019 failed";
    EXPECT_EQ(R_OSAL_MmngrAlloc(hndl_mmngr, size, alignment, &buffer_obj), OSAL_RETURN_OK) << "Test09_013_019 failed";
    EXPECT_NE(buffer_obj,OSAL_MEMORY_BUFFER_HANDLE_INVALID) << "Test09_013_019 failed";
    bk_ptr_self = buffer_obj->mmngr_owner_hndl->p_ptr_self;
    buffer_obj->mmngr_owner_hndl->p_ptr_self = NULL;
    EXPECT_EQ(R_OSAL_MmngrGetSize(buffer_obj, &get_size), OSAL_RETURN_HANDLE) << "Test09_013_019 failed";
    buffer_obj->mmngr_owner_hndl->p_ptr_self = bk_ptr_self;
    EXPECT_EQ(R_OSAL_MmngrDealloc(hndl_mmngr, buffer_obj), OSAL_RETURN_OK) << "Test09_013_019 failed";
    EXPECT_EQ(R_OSAL_MmngrClose(hndl_mmngr), OSAL_RETURN_OK) << "Test09_013_019 failed";
    hndl_mmngr = OSAL_MEMORY_MANAGER_HANDLE_INVALID;
}
// [MmngrGetSize_TC_09_013_019]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrGetSize_TC_09_013_020 MemoryApiTest.MmngrGetSize_TC_09_013_020
 * @subsection MmngrGetSize_TC_09_013_020_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrGetSize_TC_09_013_020_tci Test Case ID
 * MmngrGetSize_S4_A_TC_09_013_020
 * @subsection MmngrGetSize_TC_09_013_020_rr Related Requirement(s)
 * \#276561
 * @subsection MmngrGetSize_TC_09_013_020_pp Prerequisite/Precondition
 * OSAL is initialized
 * @subsection MmngrGetSize_TC_09_013_020_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrGetSize with abnormal condition and mode is OSAL_MMNGR_ALLOC_MODE_STACK_PROT.
 * - Test09_013_020: buffer_obj->mmngr_owner_hndl->p_ptr_self is invalid (NULL)
 * @subsection MmngrGetSize_TC_09_013_020_tpts Test Procedure/Test Steps
 * -# Call R_OSAL_MmngrOpen with bellow config:
 *  - config.memory_limit                = 4096
 *  - config.max_allowed_allocations     = 1
 *  - config.max_registered_monitors_cbs = 2
 *  - config.mode = OSAL_MMNGR_ALLOC_MODE_STACK_PROT
 * -# Call R_OSAL_MmngrAlloc with valid parameter.
 * -# Call R_OSAL_MmngrGetSize with buffer_obj->mmngr_owner_hndl->p_ptr_self is invalid (NULL)
 * -# Call R_OSAL_MmngrDealloc to deallocate above buffer.
 * -# Call R_OSAL_MmngrClose to close the handle.
 * @subsection MmngrGetSize_TC_09_013_020_ereb Expected Result/Behavior
 * -# The return of R_OSAL_MmngrOpen is OSAL_RETURN_OK.<br>
 * The returned handle is not OSAL_MEMORY_MANAGER_HANDLE_INVALID.
 * -# The return value of R_OSAL_MmngrAlloc is OSAL_RETURN_OK.<br>
 * The return buffer is not OSAL_MEMORY_BUFFER_HANDLE_INVALID.
 * -# The return value of R_OSAL_MmngrGetSize is OSAL_RETURN_HANDLE.
 * -# The return value of R_OSAL_MmngrDealloc is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrClose is OSAL_RETURN_OK.
 * @subsection MmngrGetSize_TC_09_013_020_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrGetSize_TC_09_013_020
 */
// [MmngrGetSize_TC_09_013_020]
TEST_F(MemoryApiTest, MmngrGetSize_TC_09_013_020)
{
    size_t get_size;
    void * bk_ptr_self;

    // Test09_013_020
    // @brief: abnormal case: buffer_obj->mmngr_owner_hndl->p_ptr_self is invalid (NULL)
    config.memory_limit                = 4096;
    config.max_allowed_allocations     = 1;
    config.max_registered_monitors_cbs = 2;
    config.mode = OSAL_MMNGR_ALLOC_MODE_STACK_PROT;
    size = 64;
    alignment = 128;

    EXPECT_EQ(R_OSAL_MmngrOpen(&config, &hndl_mmngr), OSAL_RETURN_OK) << "Test09_013_020 failed";
    EXPECT_NE(hndl_mmngr,OSAL_MEMORY_MANAGER_HANDLE_INVALID) << "Test09_013_020 failed";
    EXPECT_EQ(R_OSAL_MmngrAlloc(hndl_mmngr, size, alignment, &buffer_obj), OSAL_RETURN_OK) << "Test09_013_020 failed";
    EXPECT_NE(buffer_obj,OSAL_MEMORY_BUFFER_HANDLE_INVALID) << "Test09_013_020 failed";
    bk_ptr_self = buffer_obj->mmngr_owner_hndl->p_ptr_self;
    buffer_obj->mmngr_owner_hndl->p_ptr_self = NULL;
    EXPECT_EQ(R_OSAL_MmngrGetSize(buffer_obj, &get_size), OSAL_RETURN_HANDLE) << "Test09_013_020 failed";
    buffer_obj->mmngr_owner_hndl->p_ptr_self = bk_ptr_self;
    EXPECT_EQ(R_OSAL_MmngrDealloc(hndl_mmngr, buffer_obj), OSAL_RETURN_OK) << "Test09_013_020 failed";
    EXPECT_EQ(R_OSAL_MmngrClose(hndl_mmngr), OSAL_RETURN_OK) << "Test09_013_020 failed";
    hndl_mmngr = OSAL_MEMORY_MANAGER_HANDLE_INVALID;
}
// [MmngrGetSize_TC_09_013_020]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrGetSize_TC_09_013_021 MemoryApiTest.MmngrGetSize_TC_09_013_021
 * @subsection MmngrGetSize_TC_09_013_021_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrGetSize_TC_09_013_021_tci Test Case ID
 * MmngrGetSize_S4_A_TC_09_013_021
 * @subsection MmngrGetSize_TC_09_013_021_rr Related Requirement(s)
 * \#276561
 * @subsection MmngrGetSize_TC_09_013_021_pp Prerequisite/Precondition
 * OSAL is initialized
 * @subsection MmngrGetSize_TC_09_013_021_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrGetSize with abnormal condition and mode is OSAL_MMNGR_ALLOC_MODE_FREE_LIST.
 * - Test09_013_021: buffer_obj->mmngr_owner_hndl->p_ptr_self is invalid (NULL)
 * @subsection MmngrGetSize_TC_09_013_021_tpts Test Procedure/Test Steps
 * -# Call R_OSAL_MmngrOpen with bellow config:
 *  - config.memory_limit                = 4096
 *  - config.max_allowed_allocations     = 1
 *  - config.max_registered_monitors_cbs = 2
 *  - config.mode = OSAL_MMNGR_ALLOC_MODE_FREE_LIST
 * -# Call R_OSAL_MmngrAlloc with valid parameter.
 * -# Call R_OSAL_MmngrGetSize with buffer_obj->mmngr_owner_hndl->p_ptr_self is invalid (NULL)
 * -# Call R_OSAL_MmngrDealloc to deallocate above buffer.
 * -# Call R_OSAL_MmngrClose to close the handle.
 * @subsection MmngrGetSize_TC_09_013_021_ereb Expected Result/Behavior
 * -# The return of R_OSAL_MmngrOpen is OSAL_RETURN_OK.<br>
 * The returned handle is not OSAL_MEMORY_MANAGER_HANDLE_INVALID.
 * -# The return value of R_OSAL_MmngrAlloc is OSAL_RETURN_OK.<br>
 * The return buffer is not OSAL_MEMORY_BUFFER_HANDLE_INVALID.
 * -# The return value of R_OSAL_MmngrGetSize is OSAL_RETURN_HANDLE.
 * -# The return value of R_OSAL_MmngrDealloc is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrClose is OSAL_RETURN_OK.
 * @subsection MmngrGetSize_TC_09_013_021_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrGetSize_TC_09_013_021
 */
// [MmngrGetSize_TC_09_013_021]
TEST_F(MemoryApiTest, MmngrGetSize_TC_09_013_021)
{
    size_t get_size;
    void * bk_ptr_self;

    // Test09_013_021
    // @brief: abnormal case: buffer_obj->mmngr_owner_hndl->p_ptr_self is invalid (NULL)
    config.memory_limit                = 4096;
    config.max_allowed_allocations     = 1;
    config.max_registered_monitors_cbs = 2;
    config.mode = OSAL_MMNGR_ALLOC_MODE_FREE_LIST;
    size = 64;
    alignment = 128;

    EXPECT_EQ(R_OSAL_MmngrOpen(&config, &hndl_mmngr), OSAL_RETURN_OK) << "Test09_013_021 failed";
    EXPECT_NE(hndl_mmngr,OSAL_MEMORY_MANAGER_HANDLE_INVALID) << "Test09_013_021 failed";
    EXPECT_EQ(R_OSAL_MmngrAlloc(hndl_mmngr, size, alignment, &buffer_obj), OSAL_RETURN_OK) << "Test09_013_021 failed";
    EXPECT_NE(buffer_obj,OSAL_MEMORY_BUFFER_HANDLE_INVALID) << "Test09_013_021 failed";
    bk_ptr_self = buffer_obj->mmngr_owner_hndl->p_ptr_self;
    buffer_obj->mmngr_owner_hndl->p_ptr_self = NULL;
    EXPECT_EQ(R_OSAL_MmngrGetSize(buffer_obj, &get_size), OSAL_RETURN_HANDLE) << "Test09_013_021 failed";
    buffer_obj->mmngr_owner_hndl->p_ptr_self = bk_ptr_self;
    EXPECT_EQ(R_OSAL_MmngrDealloc(hndl_mmngr, buffer_obj), OSAL_RETURN_OK) << "Test09_013_021 failed";
    EXPECT_EQ(R_OSAL_MmngrClose(hndl_mmngr), OSAL_RETURN_OK) << "Test09_013_021 failed";
    hndl_mmngr = OSAL_MEMORY_MANAGER_HANDLE_INVALID;
}
// [MmngrGetSize_TC_09_013_021]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrGetSize_TC_09_013_022 MemoryApiTest.MmngrGetSize_TC_09_013_022
 * @subsection MmngrGetSize_TC_09_013_022_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrGetSize_TC_09_013_022_tci Test Case ID
 * MmngrGetSize_S4_A_TC_09_013_022
 * @subsection MmngrGetSize_TC_09_013_022_rr Related Requirement(s)
 * \#276561
 * @subsection MmngrGetSize_TC_09_013_022_pp Prerequisite/Precondition
 * OSAL is initialized
 * @subsection MmngrGetSize_TC_09_013_022_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrGetSize with abnormal condition and mode is OSAL_MMNGR_ALLOC_MODE_FREE_LIST_PROT.
 * - Test09_013_022: buffer_obj->mmngr_owner_hndl->p_ptr_self is invalid (NULL)
 * @subsection MmngrGetSize_TC_09_013_022_tpts Test Procedure/Test Steps
 * -# Call R_OSAL_MmngrOpen with bellow config:
 *  - config.memory_limit                = 4096
 *  - config.max_allowed_allocations     = 1
 *  - config.max_registered_monitors_cbs = 2
 *  - config.mode = OSAL_MMNGR_ALLOC_MODE_FREE_LIST_PROT
 * -# Call R_OSAL_MmngrAlloc with valid parameter.
 * -# Call R_OSAL_MmngrGetSize with buffer_obj->mmngr_owner_hndl->p_ptr_self is invalid (NULL)
 * -# Call R_OSAL_MmngrDealloc to deallocate above buffer.
 * -# Call R_OSAL_MmngrClose to close the handle.
 * @subsection MmngrGetSize_TC_09_013_022_ereb Expected Result/Behavior
 * -# The return of R_OSAL_MmngrOpen is OSAL_RETURN_OK.<br>
 * The returned handle is not OSAL_MEMORY_MANAGER_HANDLE_INVALID.
 * -# The return value of R_OSAL_MmngrAlloc is OSAL_RETURN_OK.<br>
 * The return buffer is not OSAL_MEMORY_BUFFER_HANDLE_INVALID.
 * -# The return value of R_OSAL_MmngrGetSize is OSAL_RETURN_HANDLE.
 * -# The return value of R_OSAL_MmngrDealloc is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrClose is OSAL_RETURN_OK.
 * @subsection MmngrGetSize_TC_09_013_022_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrGetSize_TC_09_013_022
 */
// [MmngrGetSize_TC_09_013_022]
TEST_F(MemoryApiTest, MmngrGetSize_TC_09_013_022)
{
    size_t get_size;
    void * bk_ptr_self;

    // Test09_013_022
    // @brief: abnormal case: buffer_obj->mmngr_owner_hndl->p_ptr_self is invalid (NULL)
    config.memory_limit                = 4096;
    config.max_allowed_allocations     = 1;
    config.max_registered_monitors_cbs = 2;
    config.mode = OSAL_MMNGR_ALLOC_MODE_FREE_LIST_PROT;
    size = 64;
    alignment = 128;

    EXPECT_EQ(R_OSAL_MmngrOpen(&config, &hndl_mmngr), OSAL_RETURN_OK) << "Test09_013_022 failed";
    EXPECT_NE(hndl_mmngr,OSAL_MEMORY_MANAGER_HANDLE_INVALID) << "Test09_013_022 failed";
    EXPECT_EQ(R_OSAL_MmngrAlloc(hndl_mmngr, size, alignment, &buffer_obj), OSAL_RETURN_OK) << "Test09_013_022 failed";
    EXPECT_NE(buffer_obj,OSAL_MEMORY_BUFFER_HANDLE_INVALID) << "Test09_013_022 failed";
    bk_ptr_self = buffer_obj->mmngr_owner_hndl->p_ptr_self;
    buffer_obj->mmngr_owner_hndl->p_ptr_self = NULL;
    EXPECT_EQ(R_OSAL_MmngrGetSize(buffer_obj, &get_size), OSAL_RETURN_HANDLE) << "Test09_013_022 failed";
    buffer_obj->mmngr_owner_hndl->p_ptr_self = bk_ptr_self;
    EXPECT_EQ(R_OSAL_MmngrDealloc(hndl_mmngr, buffer_obj), OSAL_RETURN_OK) << "Test09_013_022 failed";
    EXPECT_EQ(R_OSAL_MmngrClose(hndl_mmngr), OSAL_RETURN_OK) << "Test09_013_022 failed";
    hndl_mmngr = OSAL_MEMORY_MANAGER_HANDLE_INVALID;
}
// [MmngrGetSize_TC_09_013_022]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrGetSize_TC_09_013_023 MemoryApiTest.MmngrGetSize_TC_09_013_023
 * @subsection MmngrGetSize_TC_09_013_023_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrGetSize_TC_09_013_023_tci Test Case ID
 * MmngrGetSize_S4_A_TC_09_013_023
 * @subsection MmngrGetSize_TC_09_013_023_rr Related Requirement(s)
 * \#276561
 * @subsection MmngrGetSize_TC_09_013_023_pp Prerequisite/Precondition
 * OSAL is initialized
 * @subsection MmngrGetSize_TC_09_013_023_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrGetSize with abnormal condition and mode is OSAL_MMNGR_ALLOC_MODE_STACK.
 * - Test09_013_023: hndl_mmngr->p_ptr_self is invalid (NULL)
 * @subsection MmngrGetSize_TC_09_013_023_tpts Test Procedure/Test Steps
 * -# Call R_OSAL_MmngrOpen with bellow config:
 *  - config.memory_limit                = 4096
 *  - config.max_allowed_allocations     = 1
 *  - config.max_registered_monitors_cbs = 2
 *  - config.mode = OSAL_MMNGR_ALLOC_MODE_STACK
 * -# Call R_OSAL_MmngrAlloc with valid parameter.
 * -# Call R_OSAL_MmngrGetSize with hndl_mmngr->p_ptr_self is invalid (NULL)
 * -# Call R_OSAL_MmngrDealloc to deallocate above buffer.
 * -# Call R_OSAL_MmngrClose to close the handle.
 * @subsection MmngrGetSize_TC_09_013_023_ereb Expected Result/Behavior
 * -# The return of R_OSAL_MmngrOpen is OSAL_RETURN_OK.<br>
 * The returned handle is not OSAL_MEMORY_MANAGER_HANDLE_INVALID.
 * -# The return value of R_OSAL_MmngrAlloc is OSAL_RETURN_OK.<br>
 * The return buffer is not OSAL_MEMORY_BUFFER_HANDLE_INVALID.
 * -# The return value of R_OSAL_MmngrGetSize is OSAL_RETURN_HANDLE.
 * -# The return value of R_OSAL_MmngrDealloc is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrClose is OSAL_RETURN_OK.
 * @subsection MmngrGetSize_TC_09_013_023_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrGetSize_TC_09_013_023
 */
// [MmngrGetSize_TC_09_013_023]
TEST_F(MemoryApiTest, MmngrGetSize_TC_09_013_023)
{
    size_t get_size;
    void * bk_ptr_self;

    // Test09_013_023
    // @brief: abnormal case: hndl_mmngr->p_ptr_self is invalid (NULL)
    config.memory_limit                = 4096;
    config.max_allowed_allocations     = 1;
    config.max_registered_monitors_cbs = 2;
    config.mode = OSAL_MMNGR_ALLOC_MODE_STACK;
    size = 64;
    alignment = 128;

    EXPECT_EQ(R_OSAL_MmngrOpen(&config, &hndl_mmngr), OSAL_RETURN_OK) << "Test09_013_023 failed";
    EXPECT_NE(hndl_mmngr,OSAL_MEMORY_MANAGER_HANDLE_INVALID) << "Test09_013_023 failed";
    EXPECT_EQ(R_OSAL_MmngrAlloc(hndl_mmngr, size, alignment, &buffer_obj), OSAL_RETURN_OK) << "Test09_013_023 failed";
    EXPECT_NE(buffer_obj,OSAL_MEMORY_BUFFER_HANDLE_INVALID) << "Test09_013_023 failed";
    bk_ptr_self = hndl_mmngr->p_ptr_self;
    hndl_mmngr->p_ptr_self = NULL;
    EXPECT_EQ(R_OSAL_MmngrGetSize(buffer_obj, &get_size), OSAL_RETURN_HANDLE) << "Test09_013_023 failed";
    hndl_mmngr->p_ptr_self = bk_ptr_self;
    EXPECT_EQ(R_OSAL_MmngrDealloc(hndl_mmngr, buffer_obj), OSAL_RETURN_OK) << "Test09_013_023 failed";
    EXPECT_EQ(R_OSAL_MmngrClose(hndl_mmngr), OSAL_RETURN_OK) << "Test09_013_023 failed";
    hndl_mmngr = OSAL_MEMORY_MANAGER_HANDLE_INVALID;
}
// [MmngrGetSize_TC_09_013_023]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrGetSize_TC_09_013_024 MemoryApiTest.MmngrGetSize_TC_09_013_024
 * @subsection MmngrGetSize_TC_09_013_024_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrGetSize_TC_09_013_024_tci Test Case ID
 * MmngrGetSize_S4_A_TC_09_013_024
 * @subsection MmngrGetSize_TC_09_013_024_rr Related Requirement(s)
 * \#276561
 * @subsection MmngrGetSize_TC_09_013_024_pp Prerequisite/Precondition
 * OSAL is initialized
 * @subsection MmngrGetSize_TC_09_013_024_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrGetSize with abnormal condition and mode is OSAL_MMNGR_ALLOC_MODE_STACK_PROT.
 * - Test09_013_024: hndl_mmngr->p_ptr_self is invalid (NULL)
 * @subsection MmngrGetSize_TC_09_013_024_tpts Test Procedure/Test Steps
 * -# Call R_OSAL_MmngrOpen with bellow config:
 *  - config.memory_limit                = 4096
 *  - config.max_allowed_allocations     = 1
 *  - config.max_registered_monitors_cbs = 2
 *  - config.mode = OSAL_MMNGR_ALLOC_MODE_STACK_PROT
 * -# Call R_OSAL_MmngrAlloc with valid parameter.
 * -# Call R_OSAL_MmngrGetSize with hndl_mmngr->p_ptr_self is invalid (NULL)
 * -# Call R_OSAL_MmngrDealloc to deallocate above buffer.
 * -# Call R_OSAL_MmngrClose to close the handle.
 * @subsection MmngrGetSize_TC_09_013_024_ereb Expected Result/Behavior
 * -# The return of R_OSAL_MmngrOpen is OSAL_RETURN_OK.<br>
 * The returned handle is not OSAL_MEMORY_MANAGER_HANDLE_INVALID.
 * -# The return value of R_OSAL_MmngrAlloc is OSAL_RETURN_OK.<br>
 * The return buffer is not OSAL_MEMORY_BUFFER_HANDLE_INVALID.
 * -# The return value of R_OSAL_MmngrGetSize is OSAL_RETURN_HANDLE.
 * -# The return value of R_OSAL_MmngrDealloc is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrClose is OSAL_RETURN_OK.
 * @subsection MmngrGetSize_TC_09_013_024_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrGetSize_TC_09_013_024
 */
// [MmngrGetSize_TC_09_013_024]
TEST_F(MemoryApiTest, MmngrGetSize_TC_09_013_024)
{
    size_t get_size;
    void * bk_ptr_self;

    // Test09_013_024
    // @brief: abnormal case: hndl_mmngr->p_ptr_self is invalid (NULL)
    config.memory_limit                = 4096;
    config.max_allowed_allocations     = 1;
    config.max_registered_monitors_cbs = 2;
    config.mode = OSAL_MMNGR_ALLOC_MODE_STACK_PROT;
    size = 64;
    alignment = 128;

    EXPECT_EQ(R_OSAL_MmngrOpen(&config, &hndl_mmngr), OSAL_RETURN_OK) << "Test09_013_024 failed";
    EXPECT_NE(hndl_mmngr,OSAL_MEMORY_MANAGER_HANDLE_INVALID) << "Test09_013_024 failed";
    EXPECT_EQ(R_OSAL_MmngrAlloc(hndl_mmngr, size, alignment, &buffer_obj), OSAL_RETURN_OK) << "Test09_013_024 failed";
    EXPECT_NE(buffer_obj,OSAL_MEMORY_BUFFER_HANDLE_INVALID) << "Test09_013_024 failed";
    bk_ptr_self = hndl_mmngr->p_ptr_self;
    hndl_mmngr->p_ptr_self = NULL;
    EXPECT_EQ(R_OSAL_MmngrGetSize(buffer_obj, &get_size), OSAL_RETURN_HANDLE) << "Test09_013_024 failed";
    hndl_mmngr->p_ptr_self = bk_ptr_self;
    EXPECT_EQ(R_OSAL_MmngrDealloc(hndl_mmngr, buffer_obj), OSAL_RETURN_OK) << "Test09_013_024 failed";
    EXPECT_EQ(R_OSAL_MmngrClose(hndl_mmngr), OSAL_RETURN_OK) << "Test09_013_024 failed";
    hndl_mmngr = OSAL_MEMORY_MANAGER_HANDLE_INVALID;
}
// [MmngrGetSize_TC_09_013_024]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrGetSize_TC_09_013_025 MemoryApiTest.MmngrGetSize_TC_09_013_025
 * @subsection MmngrGetSize_TC_09_013_025_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrGetSize_TC_09_013_025_tci Test Case ID
 * MmngrGetSize_S4_A_TC_09_013_025
 * @subsection MmngrGetSize_TC_09_013_025_rr Related Requirement(s)
 * \#276561
 * @subsection MmngrGetSize_TC_09_013_025_pp Prerequisite/Precondition
 * OSAL is initialized
 * @subsection MmngrGetSize_TC_09_013_025_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrGetSize with abnormal condition and mode is OSAL_MMNGR_ALLOC_MODE_FREE_LIST.
 * - Test09_013_025: hndl_mmngr->p_ptr_self is invalid (NULL)
 * @subsection MmngrGetSize_TC_09_013_025_tpts Test Procedure/Test Steps
 * -# Call R_OSAL_MmngrOpen with bellow config:
 *  - config.memory_limit                = 4096
 *  - config.max_allowed_allocations     = 1
 *  - config.max_registered_monitors_cbs = 2
 *  - config.mode = OSAL_MMNGR_ALLOC_MODE_FREE_LIST
 * -# Call R_OSAL_MmngrAlloc with valid parameter.
 * -# Call R_OSAL_MmngrGetSize with hndl_mmngr->p_ptr_self is invalid (NULL)
 * -# Call R_OSAL_MmngrDealloc to deallocate above buffer.
 * -# Call R_OSAL_MmngrClose to close the handle.
 * @subsection MmngrGetSize_TC_09_013_025_ereb Expected Result/Behavior
 * -# The return of R_OSAL_MmngrOpen is OSAL_RETURN_OK.<br>
 * The returned handle is not OSAL_MEMORY_MANAGER_HANDLE_INVALID.
 * -# The return value of R_OSAL_MmngrAlloc is OSAL_RETURN_OK.<br>
 * The return buffer is not OSAL_MEMORY_BUFFER_HANDLE_INVALID.
 * -# The return value of R_OSAL_MmngrGetSize is OSAL_RETURN_HANDLE.
 * -# The return value of R_OSAL_MmngrDealloc is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrClose is OSAL_RETURN_OK.
 * @subsection MmngrGetSize_TC_09_013_025_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrGetSize_TC_09_013_025
 */
// [MmngrGetSize_TC_09_013_025]
TEST_F(MemoryApiTest, MmngrGetSize_TC_09_013_025)
{
    size_t get_size;
    void * bk_ptr_self;

    // Test09_013_025
    // @brief: abnormal case: hndl_mmngr->p_ptr_self is invalid (NULL)
    config.memory_limit                = 4096;
    config.max_allowed_allocations     = 1;
    config.max_registered_monitors_cbs = 2;
    config.mode = OSAL_MMNGR_ALLOC_MODE_FREE_LIST;
    size = 64;
    alignment = 128;

    EXPECT_EQ(R_OSAL_MmngrOpen(&config, &hndl_mmngr), OSAL_RETURN_OK) << "Test09_013_025 failed";
    EXPECT_NE(hndl_mmngr,OSAL_MEMORY_MANAGER_HANDLE_INVALID) << "Test09_013_025 failed";
    EXPECT_EQ(R_OSAL_MmngrAlloc(hndl_mmngr, size, alignment, &buffer_obj), OSAL_RETURN_OK) << "Test09_013_025 failed";
    EXPECT_NE(buffer_obj,OSAL_MEMORY_BUFFER_HANDLE_INVALID) << "Test09_013_025 failed";
    bk_ptr_self = hndl_mmngr->p_ptr_self;
    hndl_mmngr->p_ptr_self = NULL;
    EXPECT_EQ(R_OSAL_MmngrGetSize(buffer_obj, &get_size), OSAL_RETURN_HANDLE) << "Test09_013_025 failed";
    hndl_mmngr->p_ptr_self = bk_ptr_self;
    EXPECT_EQ(R_OSAL_MmngrDealloc(hndl_mmngr, buffer_obj), OSAL_RETURN_OK) << "Test09_013_025 failed";
    EXPECT_EQ(R_OSAL_MmngrClose(hndl_mmngr), OSAL_RETURN_OK) << "Test09_013_025 failed";
    hndl_mmngr = OSAL_MEMORY_MANAGER_HANDLE_INVALID;
}
// [MmngrGetSize_TC_09_013_025]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrGetSize_TC_09_013_026 MemoryApiTest.MmngrGetSize_TC_09_013_026
 * @subsection MmngrGetSize_TC_09_013_026_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrGetSize_TC_09_013_026_tci Test Case ID
 * MmngrGetSize_S4_A_TC_09_013_026
 * @subsection MmngrGetSize_TC_09_013_026_rr Related Requirement(s)
 * \#276561
 * @subsection MmngrGetSize_TC_09_013_026_pp Prerequisite/Precondition
 * OSAL is initialized
 * @subsection MmngrGetSize_TC_09_013_026_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrGetSize with abnormal condition and mode is OSAL_MMNGR_ALLOC_MODE_FREE_LIST_PROT.
 * - Test09_013_026: hndl_mmngr->p_ptr_self is invalid (NULL)
 * @subsection MmngrGetSize_TC_09_013_026_tpts Test Procedure/Test Steps
 * -# Call R_OSAL_MmngrOpen with bellow config:
 *  - config.memory_limit                = 4096
 *  - config.max_allowed_allocations     = 1
 *  - config.max_registered_monitors_cbs = 2
 *  - config.mode = OSAL_MMNGR_ALLOC_MODE_FREE_LIST_PROT
 * -# Call R_OSAL_MmngrAlloc with valid parameter.
 * -# Call R_OSAL_MmngrGetSize with hndl_mmngr->p_ptr_self is invalid (NULL)
 * -# Call R_OSAL_MmngrDealloc to deallocate above buffer.
 * -# Call R_OSAL_MmngrClose to close the handle.
 * @subsection MmngrGetSize_TC_09_013_026_ereb Expected Result/Behavior
 * -# The return of R_OSAL_MmngrOpen is OSAL_RETURN_OK.<br>
 * The returned handle is not OSAL_MEMORY_MANAGER_HANDLE_INVALID.
 * -# The return value of R_OSAL_MmngrAlloc is OSAL_RETURN_OK.<br>
 * The return buffer is not OSAL_MEMORY_BUFFER_HANDLE_INVALID.
 * -# The return value of R_OSAL_MmngrGetSize is OSAL_RETURN_HANDLE.
 * -# The return value of R_OSAL_MmngrDealloc is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrClose is OSAL_RETURN_OK.
 * @subsection MmngrGetSize_TC_09_013_026_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrGetSize_TC_09_013_026
 */
// [MmngrGetSize_TC_09_013_026]
TEST_F(MemoryApiTest, MmngrGetSize_TC_09_013_026)
{
    size_t get_size;
    void * bk_ptr_self;

    // Test09_013_026
    // @brief: abnormal case: hndl_mmngr->p_ptr_self is invalid (NULL)
    config.memory_limit                = 4096;
    config.max_allowed_allocations     = 1;
    config.max_registered_monitors_cbs = 2;
    config.mode = OSAL_MMNGR_ALLOC_MODE_FREE_LIST_PROT;
    size = 64;
    alignment = 128;

    EXPECT_EQ(R_OSAL_MmngrOpen(&config, &hndl_mmngr), OSAL_RETURN_OK) << "Test09_013_026 failed";
    EXPECT_NE(hndl_mmngr,OSAL_MEMORY_MANAGER_HANDLE_INVALID) << "Test09_013_026 failed";
    EXPECT_EQ(R_OSAL_MmngrAlloc(hndl_mmngr, size, alignment, &buffer_obj), OSAL_RETURN_OK) << "Test09_013_026 failed";
    EXPECT_NE(buffer_obj,OSAL_MEMORY_BUFFER_HANDLE_INVALID) << "Test09_013_026 failed";
    bk_ptr_self = hndl_mmngr->p_ptr_self;
    hndl_mmngr->p_ptr_self = NULL;
    EXPECT_EQ(R_OSAL_MmngrGetSize(buffer_obj, &get_size), OSAL_RETURN_HANDLE) << "Test09_013_026 failed";
    hndl_mmngr->p_ptr_self = bk_ptr_self;
    EXPECT_EQ(R_OSAL_MmngrDealloc(hndl_mmngr, buffer_obj), OSAL_RETURN_OK) << "Test09_013_026 failed";
    EXPECT_EQ(R_OSAL_MmngrClose(hndl_mmngr), OSAL_RETURN_OK) << "Test09_013_026 failed";
    hndl_mmngr = OSAL_MEMORY_MANAGER_HANDLE_INVALID;
}
// [MmngrGetSize_TC_09_013_026]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrCheckBuffer_TC_09_014_001 MemoryApiTest.MmngrCheckBuffer_TC_09_014_001
 * @subsection MmngrCheckBuffer_TC_09_014_001_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrCheckBuffer_TC_09_014_001_tci Test Case ID
 * MmngrCheckBuffer_S3_N_TC_09_014_001
 * @subsection MmngrCheckBuffer_TC_09_014_001_rr Related Requirement(s)
 * \#276562, \#276736
 * @subsection MmngrCheckBuffer_TC_09_014_001_pp Prerequisite/Precondition
 * OSAL is initialized.
 * @subsection MmngrCheckBuffer_TC_09_014_001_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrCheckBuffer with normal condition in OSAL_MMNGR_ALLOC_MODE_STACK mode.
 * - pre-process: open new memory manager
 * - Test09_014_001: with all valid parameter.
 * - post-process: close memory manager
 * @subsection MmngrCheckBuffer_TC_09_014_001_tpts Test Procedure/Test Steps
 * -# Call R_OSAL_MmngrOpen with bellow config:
 *  - config.memory_limit                = 4096
 *  - config.max_allowed_allocations     = 1
 *  - config.max_registered_monitors_cbs = 2
 *  - config.mode = OSAL_MMNGR_ALLOC_MODE_STACK.
 * -# Call R_OSAL_MmngrAlloc with size is 128 and align is 64 to allocate a memory buffer.
 * -# Call R_OSAL_MmngrCheckBuffer with valid paramater.
 * -# Call R_OSAL_MmngrDealloc to deallocate the allocated memory buffer.
 * -# Call R_OSAL_MmngrClose to close memory handle. 
 * @subsection MmngrCheckBuffer_TC_09_014_001_ereb Expected Result/Behavior
 * -# The return of R_OSAL_MmngrOpen is OSAL_RETURN_OK. <br>
 * The returned handle is not OSAL_MEMORY_MANAGER_HANDLE_INVALID.
 * -# The return value of R_OSAL_MmngrAlloc is OSAL_RETURN_OK. <br>
 * The return buffer is not OSAL_MEMORY_BUFFER_HANDLE_INVALID .
 * -# The return value of R_OSAL_MmngrCheckBuffer is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrDealloc is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrClose is OSAL_RETURN_OK.
 * @subsection MmngrCheckBuffer_TC_09_014_001_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrCheckBuffer_TC_09_014_001
 */
// [MmngrCheckBuffer_TC_09_014_001]
TEST_F(MemoryApiTest, MmngrCheckBuffer_TC_09_014_001)
{
    // pre-process: open memory manager
    config.memory_limit                = 4096;
    config.max_allowed_allocations     = 1;
    config.max_registered_monitors_cbs = 2;
    config.mode = OSAL_MMNGR_ALLOC_MODE_STACK;
    size = 128;
    alignment = 64;

    EXPECT_EQ(R_OSAL_MmngrOpen(&config, &hndl_mmngr), OSAL_RETURN_OK) << "pre-process failed";
    EXPECT_NE(hndl_mmngr,OSAL_MEMORY_MANAGER_HANDLE_INVALID) << "pre-process failed";

    // Test09_014_001
    // @brief: normal case: all valid argument
    EXPECT_EQ(R_OSAL_MmngrAlloc(hndl_mmngr, size, alignment, &buffer_obj), OSAL_RETURN_OK);
    EXPECT_NE(buffer_obj,OSAL_MEMORY_BUFFER_HANDLE_INVALID);
    EXPECT_EQ(R_OSAL_MmngrCheckBuffer(buffer_obj), OSAL_RETURN_OK) << "Test09_014_001 failed";
    EXPECT_EQ(R_OSAL_MmngrDealloc(hndl_mmngr, buffer_obj), OSAL_RETURN_OK);
    buffer_obj = OSAL_MEMORY_BUFFER_HANDLE_INVALID;

    // post-process: close memory manager
    EXPECT_EQ(R_OSAL_MmngrClose(hndl_mmngr), OSAL_RETURN_OK) << "post-process failed";
    hndl_mmngr = OSAL_MEMORY_MANAGER_HANDLE_INVALID;
}
// [MmngrCheckBuffer_TC_09_014_001]

 /**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrCheckBuffer_TC_09_014_002 MemoryApiTest.MmngrCheckBuffer_TC_09_014_002
 * @subsection MmngrCheckBuffer_TC_09_014_002_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrCheckBuffer_TC_09_014_002_tci Test Case ID
 * MmngrCheckBuffer_S0_A_TC_09_014_002
 * @subsection MmngrCheckBuffer_TC_09_014_002_rr Related Requirement(s)
 * \#276562, \#276736
 * @subsection MmngrCheckBuffer_TC_09_014_002_pp Prerequisite/Precondition
 * OSAL is initialized.
 * @subsection MmngrCheckBuffer_TC_09_014_002_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrCheckBuffer with abnormal condition in OSAL_MMNGR_ALLOC_MODE_STACK mode.
 * - Test09_014_002: buffer is NULL.
 * @subsection MmngrCheckBuffer_TC_09_014_002_tpts Test Procedure/Test Steps
 * -# Call R_OSAL_MmngrCheckBuffer with NULL buffer.
 * @subsection MmngrCheckBuffer_TC_09_014_002_ereb Expected Result/Behavior
 * -# The return value of R_OSAL_MmngrCheckBuffer is OSAL_RETURN_HANDLE.
 * @subsection MmngrCheckBuffer_TC_09_014_002_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrCheckBuffer_TC_09_014_002
 */
// [MmngrCheckBuffer_TC_09_014_002]
TEST_F(MemoryApiTest, MmngrCheckBuffer_TC_09_014_002)
{
    // Test09_014_002
    // @brief: abnormal case: buffer_obj is NULL
    EXPECT_EQ(R_OSAL_MmngrCheckBuffer(OSAL_MEMORY_BUFFER_HANDLE_INVALID), OSAL_RETURN_HANDLE) << "Test09_014_002 failed";
}
// [MmngrCheckBuffer_TC_09_014_002]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrCheckBuffer_TC_09_014_003 MemoryApiTest.MmngrCheckBuffer_TC_09_014_003
 * @subsection MmngrCheckBuffer_TC_09_014_003_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrCheckBuffer_TC_09_014_003_tci Test Case ID
 * MmngrCheckBuffer_S4_A_TC_09_014_003
 * @subsection MmngrCheckBuffer_TC_09_014_003_rr Related Requirement(s)
 * \#276562, \#276736
 * @subsection MmngrCheckBuffer_TC_09_014_003_pp Prerequisite/Precondition
 * OSAL is initialized.
 * @subsection MmngrCheckBuffer_TC_09_014_003_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrCheckBuffer with abnormal condition in OSAL_MMNGR_ALLOC_MODE_STACK mode.
 * - pre-process: open new memory manager
 * - Test09_014_003: buffer is not support to check buffer.
 * - post-process: close memory manager
 * @subsection MmngrCheckBuffer_TC_09_014_003_tpts Test Procedure/Test Steps
 * -# Call R_OSAL_MmngrOpen with bellow config:
 *  - config.memory_limit                = 4096
 *  - config.max_allowed_allocations     = 1
 *  - config.max_registered_monitors_cbs = 2
 *  - config.mode = OSAL_MMNGR_ALLOC_MODE_STACK.
 * -# Allocate "tmp_buffer_obj" by using malloc function.
 * -# Call R_OSAL_MmngrAlloc to allocate a memory buffer.
 * -# Store "buffer_obj->p_checkBuffer" to "tmp_buffer_obj->p_checkBuffer".<br>
 * Set "buffer_obj->p_checkBuffer" to NULL. <br>
 * Call R_OSAL_MmngrCheckBuffer with the changed buffer_obj. <br>
 * Re-assign "tmp_buffer_obj->p_checkBuffer" to "buffer_obj->p_checkBuffer"
 * -# Call R_OSAL_MmngrDealloc to deallocate the original allocated buffer.
 * -# Free buffer pointed by "tmp_buffer_obj"
 * -# Close memory manager by using R_OSAL_MmngrClose
 * @subsection MmngrCheckBuffer_TC_09_014_003_ereb Expected Result/Behavior
 * -# The return of R_OSAL_MmngrOpen is OSAL_RETURN_OK. <br>
 * The returned handle is not OSAL_MEMORY_MANAGER_HANDLE_INVALID.
 * -# Memory allocation succeeded (Pointer to buffer != Nullpointer)
 * -# The return value of R_OSAL_MmngrAlloc is OSAL_RETURN_OK.<br>
 * The return buffer is not OSAL_MEMORY_BUFFER_HANDLE_INVALID .
 * -# The return value of R_OSAL_MmngrCheckBuffer is OSAL_RETURN_UNSUPPORTED_OPERATION.
 * -# The return value of R_OSAL_MmngrDealloc is OSAL_RETURN_OK.
 * -# Allocated memory free succeeded.
 * -# R_OSAL_MmngrClose return OSAL_RETURN_OK
 * @subsection MmngrCheckBuffer_TC_09_014_003_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrCheckBuffer_TC_09_014_003
 */
// [MmngrCheckBuffer_TC_09_014_003]
TEST_F(MemoryApiTest, MmngrCheckBuffer_TC_09_014_003)
{
    osal_memory_buffer_handle_t tmp_buffer_obj;

    // pre-process: open memory manager
    config.memory_limit                = 4096;
    config.max_allowed_allocations     = 1;
    config.max_registered_monitors_cbs = 2;
    config.mode = OSAL_MMNGR_ALLOC_MODE_STACK;
    size = 128;
    alignment = 64;

    EXPECT_EQ(R_OSAL_MmngrOpen(&config, &hndl_mmngr), OSAL_RETURN_OK) << "pre-process failed";
    EXPECT_NE(hndl_mmngr,OSAL_MEMORY_MANAGER_HANDLE_INVALID) << "pre-process failed";

    // Test09_014_003
    // @brief: abnormal case: buffer_obj->checkBuffer = NULL
    tmp_buffer_obj = (osal_memory_buffer_handle_t)malloc (sizeof(st_osal_memory_buffer_obj));
    EXPECT_EQ(R_OSAL_MmngrAlloc(hndl_mmngr, size, alignment, &buffer_obj), OSAL_RETURN_OK);
    EXPECT_NE(buffer_obj,OSAL_MEMORY_BUFFER_HANDLE_INVALID);
    tmp_buffer_obj->p_checkBuffer = buffer_obj->p_checkBuffer;
    buffer_obj->p_checkBuffer = NULL;
    EXPECT_EQ(R_OSAL_MmngrCheckBuffer(buffer_obj), OSAL_RETURN_UNSUPPORTED_OPERATION) << "Test09_014_003 failed";
    buffer_obj->p_checkBuffer = tmp_buffer_obj->p_checkBuffer;
    EXPECT_EQ(R_OSAL_MmngrDealloc(hndl_mmngr, buffer_obj), OSAL_RETURN_OK);
    buffer_obj = OSAL_MEMORY_BUFFER_HANDLE_INVALID;
    free(tmp_buffer_obj);

    // post-process: close memory manager
    EXPECT_EQ(R_OSAL_MmngrClose(hndl_mmngr), OSAL_RETURN_OK) << "post-process failed";
    hndl_mmngr = OSAL_MEMORY_MANAGER_HANDLE_INVALID;
}
// [MmngrCheckBuffer_TC_09_014_003]

 /**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrCheckBuffer_TC_09_014_004 MemoryApiTest.MmngrCheckBuffer_TC_09_014_004
 * @subsection MmngrCheckBuffer_TC_09_014_004_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrCheckBuffer_TC_09_014_004_tci Test Case ID
 * MmngrCheckBuffer_S2_A_TC_09_014_004
 * @subsection MmngrCheckBuffer_TC_09_014_004_rr Related Requirement(s)
 * \#276562, \#276736
 * @subsection MmngrCheckBuffer_TC_09_014_004_pp Prerequisite/Precondition
 * OSAL is initialized.
 * @subsection MmngrCheckBuffer_TC_09_014_004_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrCheckBuffer with abnormal condition in OSAL_MMNGR_ALLOC_MODE_STACK_PROT mode.
 * - Test09_014_004: Check overflow with OSAL_MMNGR_ALLOC_MODE_STACK_PROT mode
 * @subsection MmngrCheckBuffer_TC_09_014_004_tpts Test Procedure/Test Steps
 * -# Call to "overflow_test" to confirm R_OSAL_MmngrCheckBuffer with OSAL_MMNGR_ALLOC_MODE_STACK_PROT mode:
 *      - Open memory manager by using R_OSAL_MmngrOpen with OSAL_MMNGR_ALLOC_MODE_STACK_PROT
 *      - Allocate new memory by using R_OSAL_MmngrAlloc
 *      - Register callback function for event OSAL_MMNGR_EVENT_OVERFLOW_DETECTED by using R_OSAL_MmngrRegisterMonitor
 *      - Get the cpu pointer by using R_OSAL_MmngrGetCpuPtr
 *      - Get allocated buffer size by using R_OSAL_MmngrGetSize
 *      - Set the "known_data" to allocated memory by using memset with size is "size + 1"
 *      - Call R_OSAL_MmngrCheckBuffer to check the updated buffer
 *      - Call R_OSAL_MmngrDealloc to deallocate allocated buffer
 *      - Call R_OSAL_MmngrClose to close memory handle.
 * @subsection MmngrCheckBuffer_TC_09_014_004_ereb Expected Result/Behavior
 * -# The expected return code of "overflow_test" in STACK_PROT mode as below:
 *      - R_OSAL_MmngrOpen return OSAL_RETURN_OK
 *      - R_OSAL_MmngrAlloc return OSAL_RETURN_OK
 *      - R_OSAL_MmngrRegisterMonitor return OSAL_RETURN_OK
 *      - R_OSAL_MmngrGetCpuPtr return OSAL_RETURN_OK
 *      - R_OSAL_MmngrGetSize return OSAL_RETURN_OK
 *      - memset successfully
 *      - R_OSAL_MmngrCheckBuffer return OSAL_RETURN_MEM
 *      - R_OSAL_MmngrDealloc return OSAL_RETURN_OK
 *      - R_OSAL_MmngrClose return OSAL_RETURN_OK
 * @subsection MmngrCheckBuffer_TC_09_014_004_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrCheckBuffer_TC_09_014_004
 * @snippet test_memory_api_basic.cpp overflow_test
 */
// [MmngrCheckBuffer_TC_09_014_004]
TEST_F(MemoryApiTest, MmngrCheckBuffer_TC_09_014_004)
{
    // Test09_014_004
    // @brief: normal case: Check overflow with OSAL_MMNGR_ALLOC_MODE_STACK_PROT mode
    overflow_test(OSAL_MMNGR_ALLOC_MODE_STACK_PROT, OSAL_RETURN_MEM, 1, "Test09_014_004 failed");
}
// [MmngrCheckBuffer_TC_09_014_004]
#ifndef SKIP_MEMORY_OVERFLOW
#if defined(SUPPORT_OVERFLOW_WO_PROT)
/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrCheckBuffer_TC_09_014_005 MemoryApiTest.MmngrCheckBuffer_TC_09_014_005
 * @subsection MmngrCheckBuffer_TC_09_014_005_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrCheckBuffer_TC_09_014_005_tci Test Case ID
 * MmngrCheckBuffer_S3_N_TC_09_014_005
 * @subsection MmngrCheckBuffer_TC_09_014_005_rr Related Requirement(s)
 * \#276562, \#276736
 * @subsection MmngrCheckBuffer_TC_09_014_005_pp Prerequisite/Precondition
 * OSAL is initialized.
 * @subsection MmngrCheckBuffer_TC_09_014_005_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrCheckBuffer with normal condition in OSAL_MMNGR_ALLOC_MODE_STACK mode.
 * - Test09_014_005: Check overflow with OSAL_MMNGR_ALLOC_MODE_STACK mode
 * @subsection MmngrCheckBuffer_TC_09_014_005_tpts Test Procedure/Test Steps
 * -# Call to "overflow_test" to confirm R_OSAL_MmngrCheckBuffer with OSAL_MMNGR_ALLOC_MODE_STACK mode:
 *      - Open memory manager by using R_OSAL_MmngrOpen with OSAL_MMNGR_ALLOC_MODE_STACK
 *      - Allocate new memory by using R_OSAL_MmngrAlloc
 *      - Register callback function for event OSAL_MMNGR_EVENT_OVERFLOW_DETECTED by using R_OSAL_MmngrRegisterMonitor
 *      - Get the cpu pointer by using R_OSAL_MmngrGetCpuPtr
 *      - Get allocated buffer size by using R_OSAL_MmngrGetSize
 *      - Set the "known_data" to allocated memory by using memset with size is "size + 1"
 *      - Call R_OSAL_MmngrCheckBuffer to check the updated buffer
 *      - Call R_OSAL_MmngrDealloc to deallocate allocated buffer
 *      - Call R_OSAL_MmngrClose to close memory handle.
 * @subsection MmngrCheckBuffer_TC_09_014_005_ereb Expected Result/Behavior
 * -# The expected return code of "overflow_test" in OSAL_MMNGR_ALLOC_MODE_STACK mode as below:
 *      - R_OSAL_MmngrOpen return OSAL_RETURN_OK
 *      - R_OSAL_MmngrAlloc return OSAL_RETURN_OK
 *      - R_OSAL_MmngrRegisterMonitor return OSAL_RETURN_OK
 *      - R_OSAL_MmngrGetCpuPtr return OSAL_RETURN_OK
 *      - R_OSAL_MmngrGetSize return OSAL_RETURN_OK
 *      - memset successfully
 *      - R_OSAL_MmngrCheckBuffer return OSAL_RETURN_OK
 *      - R_OSAL_MmngrDealloc return OSAL_RETURN_OK
 *      - R_OSAL_MmngrClose return OSAL_RETURN_OK
 * @subsection MmngrCheckBuffer_TC_09_014_005_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrCheckBuffer_TC_09_014_005
 * @snippet test_memory_api_basic.cpp overflow_test
 */
// [MmngrCheckBuffer_TC_09_014_005]
#endif
TEST_F(MemoryApiTest, DISABLED_MmngrCheckBuffer_TC_09_014_005)
{
    // Test09_014_005
    // @brief: normal case: Check overflow with OSAL_MMNGR_ALLOC_MODE_STACK mode
    overflow_test(OSAL_MMNGR_ALLOC_MODE_STACK, OSAL_RETURN_OK, 0, "Test09_014_005 failed");
}
#endif

// [MmngrCheckBuffer_TC_09_014_005]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrCheckBuffer_TC_09_014_006 MemoryApiTest.MmngrCheckBuffer_TC_09_014_006
 * @subsection MmngrCheckBuffer_TC_09_014_006_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrCheckBuffer_TC_09_014_006_tci Test Case ID
 * MmngrCheckBuffer_S2_A_TC_09_014_006
 * @subsection MmngrCheckBuffer_TC_09_014_006_rr Related Requirement(s)
 * \#276562, \#276736
 * @subsection MmngrCheckBuffer_TC_09_014_006_pp Prerequisite/Precondition
 * OSAL is initialized.
 * @subsection MmngrCheckBuffer_TC_09_014_006_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrCheckBuffer with abnormal condition in OSAL_MMNGR_ALLOC_MODE_STACK_PROT mode.
 * - Test09_014_006: Check underflow with OSAL_MMNGR_ALLOC_MODE_STACK_PROT mode
 * @subsection MmngrCheckBuffer_TC_09_014_006_tpts Test Procedure/Test Steps
 * -# Call to "underflow_test" to confirm R_OSAL_MmngrCheckBuffer with OSAL_MMNGR_ALLOC_MODE_STACK_PROT mode:
 *      - Open memory manager by using R_OSAL_MmngrOpen with OSAL_MMNGR_ALLOC_MODE_STACK_PROT
 *      - Allocate 2 new memory buffers by using R_OSAL_MmngrAlloc
 *      - Register callback function for event OSAL_MMNGR_EVENT_UNDERFLOW_DETECTED by using R_OSAL_MmngrRegisterMonitor
 *      - Get the cpu pointer "cpuPtr" of 2nd buffer by using R_OSAL_MmngrGetCpuPtr
 *      - Get allocated buffer "size" of 2nd buffer by using R_OSAL_MmngrGetSize
 *      - Set the "known_data" to allocated memory pointed by "cpuPtr-sizeof(long)" using memset with "size" above
 *      - Call R_OSAL_MmngrCheckBuffer to check the 2nd buffer
 *      - Call R_OSAL_MmngrDealloc to deallocate 2 allocated buffers
 *      - Call R_OSAL_MmngrClose to close memory handle.
 * @subsection MmngrCheckBuffer_TC_09_014_006_ereb Expected Result/Behavior
 * -# The expected return code of "underflow_test" in OSAL_MMNGR_ALLOC_MODE_STACK_PROT mode as below:
 *      - R_OSAL_MmngrOpen return OSAL_RETURN_OK
 *      - R_OSAL_MmngrAlloc for 2 buffers return OSAL_RETURN_OK
 *      - R_OSAL_MmngrRegisterMonitor return OSAL_RETURN_OK
 *      - R_OSAL_MmngrGetCpuPtr return OSAL_RETURN_OK
 *      - R_OSAL_MmngrGetSize return OSAL_RETURN_OK
 *      - memset successfully
 *      - R_OSAL_MmngrCheckBuffer return OSAL_RETURN_MEM
 *      - R_OSAL_MmngrDealloc return OSAL_RETURN_OK
 *      - R_OSAL_MmngrClose return OSAL_RETURN_OK
 * @subsection MmngrCheckBuffer_TC_09_014_006_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrCheckBuffer_TC_09_014_006
 * @snippet test_memory_api_basic.cpp underflow_test
 */
// [MmngrCheckBuffer_TC_09_014_006]
TEST_F(MemoryApiTest, MmngrCheckBuffer_TC_09_014_006)
{
    // Test09_014_006
    // @brief: normal case: Check underflow with OSAL_MMNGR_ALLOC_MODE_STACK_PROT mode
    underflow_test(OSAL_MMNGR_ALLOC_MODE_STACK_PROT, OSAL_RETURN_MEM, 1, "Test09_014_006 failed");
}
// [MmngrCheckBuffer_TC_09_014_006]

#if defined(SUPPORT_UNDERFLOW_WO_PROT)
/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrCheckBuffer_TC_09_014_007 MemoryApiTest.MmngrCheckBuffer_TC_09_014_007
 * @subsection MmngrCheckBuffer_TC_09_014_007_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrCheckBuffer_TC_09_014_007_tci Test Case ID
 * MmngrCheckBuffer_S3_N_TC_09_014_007
 * @subsection MmngrCheckBuffer_TC_09_014_007_rr Related Requirement(s)
 * \#276562, \#276736
 * @subsection MmngrCheckBuffer_TC_09_014_007_pp Prerequisite/Precondition
 * OSAL is initialized.
 * @subsection MmngrCheckBuffer_TC_09_014_007_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrCheckBuffer with normal condition in OSAL_MMNGR_ALLOC_MODE_STACK mode.
 * - Test09_014_007: Check underflow with OSAL_MMNGR_ALLOC_MODE_STACK mode
 * @subsection MmngrCheckBuffer_TC_09_014_007_tpts Test Procedure/Test Steps
 * -# Call to "underflow_test" to confirm R_OSAL_MmngrCheckBuffer with OSAL_MMNGR_ALLOC_MODE_STACK mode:
 *      - Open memory manager by using R_OSAL_MmngrOpen with OSAL_MMNGR_ALLOC_MODE_STACK
 *      - Allocate 2 new memory buffers by using R_OSAL_MmngrAlloc
 *      - Register callback function for event OSAL_MMNGR_EVENT_UNDERFLOW_DETECTED by using R_OSAL_MmngrRegisterMonitor
 *      - Get the cpu pointer "cpuPtr" of 2nd buffer by using R_OSAL_MmngrGetCpuPtr
 *      - Get allocated buffer "size" of 2nd buffer by using R_OSAL_MmngrGetSize
 *      - Set the "known_data" to allocated memory pointed by "cpuPtr-sizeof(long)" using memset with "size" above
 *      - Call R_OSAL_MmngrCheckBuffer to check the 2nd buffer
 *      - Call R_OSAL_MmngrDealloc to deallocate 2 allocated buffers
 *      - Call R_OSAL_MmngrClose to close memory handle.
 * @subsection MmngrCheckBuffer_TC_09_014_007_ereb Expected Result/Behavior
 * -# The expected return code of "underflow_test" in OSAL_MMNGR_ALLOC_MODE_STACK mode as below:
 *      - R_OSAL_MmngrOpen return OSAL_RETURN_OK
 *      - R_OSAL_MmngrAlloc for 2 buffers return OSAL_RETURN_OK
 *      - R_OSAL_MmngrRegisterMonitor return OSAL_RETURN_OK
 *      - R_OSAL_MmngrGetCpuPtr return OSAL_RETURN_OK
 *      - R_OSAL_MmngrGetSize return OSAL_RETURN_OK
 *      - memset successfully
 *      - R_OSAL_MmngrCheckBuffer return OSAL_RETURN_OK
 *      - R_OSAL_MmngrDealloc return OSAL_RETURN_OK
 *      - R_OSAL_MmngrClose return OSAL_RETURN_OK
 * @subsection MmngrCheckBuffer_TC_09_014_007_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrCheckBuffer_TC_09_014_007
 * @snippet test_memory_api_basic.cpp underflow_test
 */
// [MmngrCheckBuffer_TC_09_014_007]
#endif
TEST_F(MemoryApiTest, DISABLED_MmngrCheckBuffer_TC_09_014_007)
{
    // Test09_014_007
    // @brief: normal case: Check underflow with OSAL_MMNGR_ALLOC_MODE_STACK mode
    underflow_test(OSAL_MMNGR_ALLOC_MODE_STACK, OSAL_RETURN_OK, 0, "Test09_014_007 failed");
}
// [MmngrCheckBuffer_TC_09_014_007]

 /**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrCheckBuffer_TC_09_014_008 MemoryApiTest.MmngrCheckBuffer_TC_09_014_008
 * @subsection MmngrCheckBuffer_TC_09_014_008_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrCheckBuffer_TC_09_014_008_tci Test Case ID
 * MmngrCheckBuffer_S2_A_TC_09_014_008
 * @subsection MmngrCheckBuffer_TC_09_014_008_rr Related Requirement(s)
 * \#276562, \#276736
 * @subsection MmngrCheckBuffer_TC_09_014_008_pp Prerequisite/Precondition
 * OSAL is initialized.
 * @subsection MmngrCheckBuffer_TC_09_014_008_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrCheckBuffer with abnormal condition in OSAL_MMNGR_ALLOC_MODE_FREE_LIST_PROT mode.
 * - Test09_014_008: Check overflow with OSAL_MMNGR_ALLOC_MODE_FREE_LIST_PROT mode
 * @subsection MmngrCheckBuffer_TC_09_014_008_tpts Test Procedure/Test Steps
 * -# Call to "overflow_test" to confirm R_OSAL_MmngrCheckBuffer with OSAL_MMNGR_ALLOC_MODE_FREE_LIST_PROT mode:
 *      - Open memory manager by using R_OSAL_MmngrOpen with OSAL_MMNGR_ALLOC_MODE_FREE_LIST_PROT
 *      - Allocate new memory by using R_OSAL_MmngrAlloc
 *      - Register callback function for event OSAL_MMNGR_EVENT_OVERFLOW_DETECTED by using R_OSAL_MmngrRegisterMonitor
 *      - Get the cpu pointer by using R_OSAL_MmngrGetCpuPtr
 *      - Get allocated buffer size by using R_OSAL_MmngrGetSize
 *      - Set the "known_data" to allocated memory by using memset with size is "size + 1"
 *      - Call R_OSAL_MmngrCheckBuffer to check the updated buffer
 *      - Call R_OSAL_MmngrDealloc to deallocate allocated buffer
 *      - Call R_OSAL_MmngrClose to close memory handle.
 * @subsection MmngrCheckBuffer_TC_09_014_008_ereb Expected Result/Behavior
 * -# The expected return code of "overflow_test" in OSAL_MMNGR_ALLOC_MODE_FREE_LIST_PROT mode as below:
 *      - R_OSAL_MmngrOpen return OSAL_RETURN_OK
 *      - R_OSAL_MmngrAlloc return OSAL_RETURN_OK
 *      - R_OSAL_MmngrRegisterMonitor return OSAL_RETURN_OK
 *      - R_OSAL_MmngrGetCpuPtr return OSAL_RETURN_OK
 *      - R_OSAL_MmngrGetSize return OSAL_RETURN_OK
 *      - memset successfully
 *      - R_OSAL_MmngrCheckBuffer return OSAL_RETURN_MEM
 *      - R_OSAL_MmngrDealloc return OSAL_RETURN_OK
 *      - R_OSAL_MmngrClose return OSAL_RETURN_OK
 * @subsection MmngrCheckBuffer_TC_09_014_008_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrCheckBuffer_TC_09_014_008
 * @snippet test_memory_api_basic.cpp overflow_test
 */
// [MmngrCheckBuffer_TC_09_014_008]
TEST_F(MemoryApiTest, MmngrCheckBuffer_TC_09_014_008)
{
    // Test09_014_008
    // @brief: normal case: Check overflow with OSAL_MMNGR_ALLOC_MODE_FREE_LIST_PROT mode
    overflow_test(OSAL_MMNGR_ALLOC_MODE_FREE_LIST_PROT, OSAL_RETURN_MEM, 1, "Test09_014_008 failed");
}
// [MmngrCheckBuffer_TC_09_014_008]

#ifndef SKIP_MEMORY_OVERFLOW
#if defined(SUPPORT_OVERFLOW_WO_PROT)
/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrCheckBuffer_TC_09_014_009 MemoryApiTest.MmngrCheckBuffer_TC_09_014_009
 * @subsection MmngrCheckBuffer_TC_09_014_009_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrCheckBuffer_TC_09_014_009_tci Test Case ID
 * MmngrCheckBuffer_S3_N_TC_09_014_009
 * @subsection MmngrCheckBuffer_TC_09_014_009_rr Related Requirement(s)
 * \#276562, \#276736
 * @subsection MmngrCheckBuffer_TC_09_014_009_pp Prerequisite/Precondition
 * OSAL is initialized.
 * @subsection MmngrCheckBuffer_TC_09_014_009_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrCheckBuffer with normal condition in OSAL_MMNGR_ALLOC_MODE_FREE_LIST mode.
 * - Test09_014_009: Check overflow with OSAL_MMNGR_ALLOC_MODE_FREE_LIST mode
 * @subsection MmngrCheckBuffer_TC_09_014_009_tpts Test Procedure/Test Steps
 * -# Call to "overflow_test" to confirm R_OSAL_MmngrCheckBuffer with OSAL_MMNGR_ALLOC_MODE_FREE_LIST mode:
 *      - Open memory manager by using R_OSAL_MmngrOpen with OSAL_MMNGR_ALLOC_MODE_FREE_LIST
 *      - Allocate new memory by using R_OSAL_MmngrAlloc
 *      - Register callback function for event OSAL_MMNGR_EVENT_OVERFLOW_DETECTED by using R_OSAL_MmngrRegisterMonitor
 *      - Get the cpu pointer by using R_OSAL_MmngrGetCpuPtr
 *      - Get allocated buffer size by using R_OSAL_MmngrGetSize
 *      - Set the "known_data" to allocated memory by using memset with size is "size + 1"
 *      - Call R_OSAL_MmngrCheckBuffer to check the updated buffer
 *      - Call R_OSAL_MmngrDealloc to deallocate allocated buffer
 *      - Call R_OSAL_MmngrClose to close memory handle.
 * @subsection MmngrCheckBuffer_TC_09_014_009_ereb Expected Result/Behavior
 * -# The expected return code of "overflow_test" in OSAL_MMNGR_ALLOC_MODE_FREE_LIST mode as below:
 *      - R_OSAL_MmngrOpen return OSAL_RETURN_OK
 *      - R_OSAL_MmngrAlloc return OSAL_RETURN_OK
 *      - R_OSAL_MmngrRegisterMonitor return OSAL_RETURN_OK
 *      - R_OSAL_MmngrGetCpuPtr return OSAL_RETURN_OK
 *      - R_OSAL_MmngrGetSize return OSAL_RETURN_OK
 *      - memset successfully
 *      - R_OSAL_MmngrCheckBuffer return OSAL_RETURN_OK
 *      - R_OSAL_MmngrDealloc return OSAL_RETURN_OK
 *      - R_OSAL_MmngrClose return OSAL_RETURN_OK
 * @subsection MmngrCheckBuffer_TC_09_014_009_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrCheckBuffer_TC_09_014_009
 * @snippet test_memory_api_basic.cpp overflow_test
 */
// [MmngrCheckBuffer_TC_09_014_009]
#endif
TEST_F(MemoryApiTest, DISABLED_MmngrCheckBuffer_TC_09_014_009)
{
    // Test09_014_009
    // @brief: normal case: Check overflow with OSAL_MMNGR_ALLOC_MODE_FREE_LIST mode
    overflow_test(OSAL_MMNGR_ALLOC_MODE_FREE_LIST, OSAL_RETURN_OK, 0, "Test09_014_009 failed");
}
#endif

// [MmngrCheckBuffer_TC_09_014_009]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrCheckBuffer_TC_09_014_010 MemoryApiTest.MmngrCheckBuffer_TC_09_014_010
 * @subsection MmngrCheckBuffer_TC_09_014_010_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrCheckBuffer_TC_09_014_010_tci Test Case ID
 * MmngrCheckBuffer_S2_A_TC_09_014_010
 * @subsection MmngrCheckBuffer_TC_09_014_010_rr Related Requirement(s)
 * \#276562, \#276736
 * @subsection MmngrCheckBuffer_TC_09_014_010_pp Prerequisite/Precondition
 * OSAL is initialized.
 * @subsection MmngrCheckBuffer_TC_09_014_010_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrCheckBuffer with abnormal condition in OSAL_MMNGR_ALLOC_MODE_FREE_LIST_PROT mode.
 * - Test09_014_010: Check underflow with OSAL_MMNGR_ALLOC_MODE_FREE_LIST_PROT mode
 * @subsection MmngrCheckBuffer_TC_09_014_010_tpts Test Procedure/Test Steps
 * -# Call to "underflow_test" to confirm R_OSAL_MmngrCheckBuffer with OSAL_MMNGR_ALLOC_MODE_FREE_LIST_PROT mode:
 *      - Open memory manager by using R_OSAL_MmngrOpen with OSAL_MMNGR_ALLOC_MODE_FREE_LIST_PROT
 *      - Allocate 2 new memory buffers by using R_OSAL_MmngrAlloc
 *      - Register callback function for event OSAL_MMNGR_EVENT_UNDERFLOW_DETECTED by using R_OSAL_MmngrRegisterMonitor
 *      - Get the cpu pointer "cpuPtr" of 2nd buffer by using R_OSAL_MmngrGetCpuPtr
 *      - Get allocated buffer "size" of 2nd buffer by using R_OSAL_MmngrGetSize
 *      - Set the "known_data" to allocated memory pointed by "cpuPtr-sizeof(long)" using memset with "size" above
 *      - Call R_OSAL_MmngrCheckBuffer to check the 2nd buffer
 *      - Call R_OSAL_MmngrDealloc to deallocate 2 allocated buffers
 *      - Call R_OSAL_MmngrClose to close memory handle.
 * @subsection MmngrCheckBuffer_TC_09_014_010_ereb Expected Result/Behavior
 * -# The expected return code of "underflow_test" in OSAL_MMNGR_ALLOC_MODE_FREE_LIST_PROT mode as below:
 *      - R_OSAL_MmngrOpen return OSAL_RETURN_OK
 *      - R_OSAL_MmngrAlloc for 2 buffers return OSAL_RETURN_OK
 *      - R_OSAL_MmngrRegisterMonitor return OSAL_RETURN_OK
 *      - R_OSAL_MmngrGetCpuPtr return OSAL_RETURN_OK
 *      - R_OSAL_MmngrGetSize return OSAL_RETURN_OK
 *      - memset successfully
 *      - R_OSAL_MmngrCheckBuffer return OSAL_RETURN_MEM
 *      - R_OSAL_MmngrDealloc return OSAL_RETURN_OK
 *      - R_OSAL_MmngrClose return OSAL_RETURN_OK
 * @subsection MmngrCheckBuffer_TC_09_014_010_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrCheckBuffer_TC_09_014_010
 * @snippet test_memory_api_basic.cpp underflow_test
 */
// [MmngrCheckBuffer_TC_09_014_010]
TEST_F(MemoryApiTest, MmngrCheckBuffer_TC_09_014_010)
{
    // Test09_014_010
    // @brief: normal case: Check underflow with OSAL_MMNGR_ALLOC_MODE_FREE_LIST_PROT mode
    underflow_test(OSAL_MMNGR_ALLOC_MODE_FREE_LIST_PROT, OSAL_RETURN_MEM, 1, "Test09_014_010 failed");
}
// [MmngrCheckBuffer_TC_09_014_010]

#if defined(SUPPORT_UNDERFLOW_WO_PROT)
/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrCheckBuffer_TC_09_014_011 MemoryApiTest.MmngrCheckBuffer_TC_09_014_011
 * @subsection MmngrCheckBuffer_TC_09_014_011_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrCheckBuffer_TC_09_014_011_tci Test Case ID
 * MmngrCheckBuffer_S3_N_TC_09_014_011
 * @subsection MmngrCheckBuffer_TC_09_014_011_rr Related Requirement(s)
 * \#276562, \#276736
 * @subsection MmngrCheckBuffer_TC_09_014_011_pp Prerequisite/Precondition
 * OSAL is initialized.
 * @subsection MmngrCheckBuffer_TC_09_014_011_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrCheckBuffer with normal condition in OSAL_MMNGR_ALLOC_MODE_FREE_LIST mode.
 * - Test09_014_011: Check underflow with OSAL_MMNGR_ALLOC_MODE_FREE_LIST mode
 * @subsection MmngrCheckBuffer_TC_09_014_011_tpts Test Procedure/Test Steps
 * -# Call to "underflow_test" to confirm R_OSAL_MmngrCheckBuffer with OSAL_MMNGR_ALLOC_MODE_FREE_LIST mode:
 *      - Open memory manager by using R_OSAL_MmngrOpen with OSAL_MMNGR_ALLOC_MODE_FREE_LIST
 *      - Allocate 2 new memory buffers by using R_OSAL_MmngrAlloc
 *      - Register callback function for event OSAL_MMNGR_EVENT_UNDERFLOW_DETECTED by using R_OSAL_MmngrRegisterMonitor
 *      - Get the cpu pointer "cpuPtr" of 2nd buffer by using R_OSAL_MmngrGetCpuPtr
 *      - Get allocated buffer "size" of 2nd buffer by using R_OSAL_MmngrGetSize
 *      - Set the "known_data" to allocated memory pointed by "cpuPtr-sizeof(long)" using memset with "size" above
 *      - Call R_OSAL_MmngrCheckBuffer to check the 2nd buffer
 *      - Call R_OSAL_MmngrDealloc to deallocate 2 allocated buffers
 *      - Call R_OSAL_MmngrClose to close memory handle.
 * @subsection MmngrCheckBuffer_TC_09_014_011_ereb Expected Result/Behavior
 * -# The expected return code of "underflow_test" in OSAL_MMNGR_ALLOC_MODE_FREE_LIST mode as below:
 *      - R_OSAL_MmngrOpen return OSAL_RETURN_OK
 *      - R_OSAL_MmngrAlloc for 2 buffers return OSAL_RETURN_OK
 *      - R_OSAL_MmngrRegisterMonitor return OSAL_RETURN_OK
 *      - R_OSAL_MmngrGetCpuPtr return OSAL_RETURN_OK
 *      - R_OSAL_MmngrGetSize return OSAL_RETURN_OK
 *      - memset successfully
 *      - R_OSAL_MmngrCheckBuffer return OSAL_RETURN_OK
 *      - R_OSAL_MmngrDealloc return OSAL_RETURN_OK
 *      - R_OSAL_MmngrClose return OSAL_RETURN_OK
 * @subsection MmngrCheckBuffer_TC_09_014_011_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrCheckBuffer_TC_09_014_011
 * @snippet test_memory_api_basic.cpp underflow_test
 */
// [MmngrCheckBuffer_TC_09_014_011]
#endif
TEST_F(MemoryApiTest, DISABLED_MmngrCheckBuffer_TC_09_014_011)
{
    // Test09_014_011
    // @brief: normal case: Check underflow with OSAL_MMNGR_ALLOC_MODE_FREE_LIST mode
    underflow_test(OSAL_MMNGR_ALLOC_MODE_FREE_LIST, OSAL_RETURN_OK, 0, "Test09_014_011 failed");
}

// [MmngrCheckBuffer_TC_09_014_011]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrCheckBuffer_TC_09_014_012 MemoryApiTest.MmngrCheckBuffer_TC_09_014_012
 * @subsection MmngrCheckBuffer_TC_09_014_012_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrCheckBuffer_TC_09_014_012_tci Test Case ID
 * MmngrCheckBuffer_S3_N_TC_09_014_012
 * @subsection MmngrCheckBuffer_TC_09_014_012_rr Related Requirement(s)
 * \#276562, \#276736
 * @subsection MmngrCheckBuffer_TC_09_014_012_pp Prerequisite/Precondition
 * OSAL is initialized.
 * @subsection MmngrCheckBuffer_TC_09_014_012_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrCheckBuffer with normal condition in OSAL_MMNGR_ALLOC_MODE_STACK_PROT mode.
 * - pre-process: open new memory manager
 * - Test09_014_012: with all valid parameter.
 * - post-process: close memory manager
 * @subsection MmngrCheckBuffer_TC_09_014_012_tpts Test Procedure/Test Steps
 * -# Call R_OSAL_MmngrOpen with bellow config:
 *  - config.memory_limit                = 4096
 *  - config.max_allowed_allocations     = 1
 *  - config.max_registered_monitors_cbs = 2
 *  - config.mode = OSAL_MMNGR_ALLOC_MODE_STACK_PROT.
 * -# Call R_OSAL_MmngrAlloc with size is 128 and align is 64 to allocate a memory buffer.
 * -# Call R_OSAL_MmngrCheckBuffer with valid paramater.
 * -# Call R_OSAL_MmngrDealloc to deallocate the allocated memory buffer.
 * -# Call R_OSAL_MmngrClose to close memory handle. 
 * @subsection MmngrCheckBuffer_TC_09_014_012_ereb Expected Result/Behavior
 * -# The return of R_OSAL_MmngrOpen is OSAL_RETURN_OK. <br>
 * The returned handle is not OSAL_MEMORY_MANAGER_HANDLE_INVALID.
 * -# The return value of R_OSAL_MmngrAlloc is OSAL_RETURN_OK. <br>
 * The return buffer is not OSAL_MEMORY_BUFFER_HANDLE_INVALID .
 * -# The return value of R_OSAL_MmngrCheckBuffer is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrDealloc is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrClose is OSAL_RETURN_OK.
 * @subsection MmngrCheckBuffer_TC_09_014_012_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrCheckBuffer_TC_09_014_012
 */
// [MmngrCheckBuffer_TC_09_014_012]
TEST_F(MemoryApiTest, MmngrCheckBuffer_TC_09_014_012)
{
    // pre-process: open memory manager
    config.memory_limit                = 4096;
    config.max_allowed_allocations     = 1;
    config.max_registered_monitors_cbs = 2;
    config.mode = OSAL_MMNGR_ALLOC_MODE_STACK_PROT;
    size = 128;
    alignment = 64;

    EXPECT_EQ(R_OSAL_MmngrOpen(&config, &hndl_mmngr), OSAL_RETURN_OK) << "pre-process failed";
    EXPECT_NE(hndl_mmngr,OSAL_MEMORY_MANAGER_HANDLE_INVALID) << "pre-process failed";

    // Test09_014_012
    // @brief: normal case: all valid argument
    EXPECT_EQ(R_OSAL_MmngrAlloc(hndl_mmngr, size, alignment, &buffer_obj), OSAL_RETURN_OK);
    EXPECT_NE(buffer_obj,OSAL_MEMORY_BUFFER_HANDLE_INVALID);
    EXPECT_EQ(R_OSAL_MmngrCheckBuffer(buffer_obj), OSAL_RETURN_OK) << "Test09_014_012 failed";
    EXPECT_EQ(R_OSAL_MmngrDealloc(hndl_mmngr, buffer_obj), OSAL_RETURN_OK);
    buffer_obj = OSAL_MEMORY_BUFFER_HANDLE_INVALID;

    // post-process: close memory manager
    EXPECT_EQ(R_OSAL_MmngrClose(hndl_mmngr), OSAL_RETURN_OK) << "post-process failed";
    hndl_mmngr = OSAL_MEMORY_MANAGER_HANDLE_INVALID;
}
// [MmngrCheckBuffer_TC_09_014_012]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrCheckBuffer_TC_09_014_013 MemoryApiTest.MmngrCheckBuffer_TC_09_014_013
 * @subsection MmngrCheckBuffer_TC_09_014_013_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrCheckBuffer_TC_09_014_013_tci Test Case ID
 * MmngrCheckBuffer_S4_A_TC_09_014_013
 * @subsection MmngrCheckBuffer_TC_09_014_013_rr Related Requirement(s)
 * \#276562, \#276736
 * @subsection MmngrCheckBuffer_TC_09_014_013_pp Prerequisite/Precondition
 * OSAL is initialized.
 * @subsection MmngrCheckBuffer_TC_09_014_013_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrCheckBuffer with abnormal condition in OSAL_MMNGR_ALLOC_MODE_STACK_PROT mode.
 * - pre-process: open new memory manager
 * - Test09_014_013: buffer is not support to check buffer.
 * - post-process: close memory manager
 * @subsection MmngrCheckBuffer_TC_09_014_013_tpts Test Procedure/Test Steps
 * -# Call R_OSAL_MmngrOpen with bellow config:
 *  - config.memory_limit                = 4096
 *  - config.max_allowed_allocations     = 1
 *  - config.max_registered_monitors_cbs = 2
 *  - config.mode = OSAL_MMNGR_ALLOC_MODE_STACK_PROT.
 * -# Allocate "tmp_buffer_obj" by using malloc function.
 * -# Call R_OSAL_MmngrAlloc to allocate a memory buffer.
 * -# Store "buffer_obj->p_checkBuffer" to "tmp_buffer_obj->p_checkBuffer".<br>
 * Set "buffer_obj->p_checkBuffer" to NULL. <br>
 * Call R_OSAL_MmngrCheckBuffer with the changed buffer_obj. <br>
 * Re-assign "tmp_buffer_obj->p_checkBuffer" to "buffer_obj->p_checkBuffer"
 * -# Call R_OSAL_MmngrDealloc to deallocate the original allocated buffer.
 * -# Free buffer pointed by "tmp_buffer_obj"
 * -# Close memory manager by using R_OSAL_MmngrClose
 * @subsection MmngrCheckBuffer_TC_09_014_013_ereb Expected Result/Behavior
 * -# The return of R_OSAL_MmngrOpen is OSAL_RETURN_OK. <br>
 * The returned handle is not OSAL_MEMORY_MANAGER_HANDLE_INVALID.
 * -# Memory allocation succeeded (Pointer to buffer != Nullpointer)
 * -# The return value of R_OSAL_MmngrAlloc is OSAL_RETURN_OK.<br>
 * The return buffer is not OSAL_MEMORY_BUFFER_HANDLE_INVALID .
 * -# The return value of R_OSAL_MmngrCheckBuffer is OSAL_RETURN_UNSUPPORTED_OPERATION.
 * -# The return value of R_OSAL_MmngrDealloc is OSAL_RETURN_OK.
 * -# Allocated memory free succeeded.
 * -# R_OSAL_MmngrClose return OSAL_RETURN_OK
 * @subsection MmngrCheckBuffer_TC_09_014_013_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrCheckBuffer_TC_09_014_013
 */
// [MmngrCheckBuffer_TC_09_014_013]
TEST_F(MemoryApiTest, MmngrCheckBuffer_TC_09_014_013)
{
    osal_memory_buffer_handle_t tmp_buffer_obj;

    // pre-process: open memory manager
    config.memory_limit                = 4096;
    config.max_allowed_allocations     = 1;
    config.max_registered_monitors_cbs = 2;
    config.mode = OSAL_MMNGR_ALLOC_MODE_STACK_PROT;
    size = 128;
    alignment = 64;

    EXPECT_EQ(R_OSAL_MmngrOpen(&config, &hndl_mmngr), OSAL_RETURN_OK) << "pre-process failed";
    EXPECT_NE(hndl_mmngr,OSAL_MEMORY_MANAGER_HANDLE_INVALID) << "pre-process failed";

    // Test09_014_013
    // @brief: abnormal case: buffer_obj->checkBuffer = NULL
    tmp_buffer_obj = (osal_memory_buffer_handle_t)malloc (sizeof(st_osal_memory_buffer_obj));
    EXPECT_EQ(R_OSAL_MmngrAlloc(hndl_mmngr, size, alignment, &buffer_obj), OSAL_RETURN_OK);
    EXPECT_NE(buffer_obj,OSAL_MEMORY_BUFFER_HANDLE_INVALID);
    tmp_buffer_obj->p_checkBuffer = buffer_obj->p_checkBuffer;
    buffer_obj->p_checkBuffer = NULL;
    EXPECT_EQ(R_OSAL_MmngrCheckBuffer(buffer_obj), OSAL_RETURN_UNSUPPORTED_OPERATION) << "Test09_014_013 failed";
    buffer_obj->p_checkBuffer = tmp_buffer_obj->p_checkBuffer;
    EXPECT_EQ(R_OSAL_MmngrDealloc(hndl_mmngr, buffer_obj), OSAL_RETURN_OK);
    buffer_obj = OSAL_MEMORY_BUFFER_HANDLE_INVALID;
    free(tmp_buffer_obj);

    // post-process: close memory manager
    EXPECT_EQ(R_OSAL_MmngrClose(hndl_mmngr), OSAL_RETURN_OK) << "post-process failed";
    hndl_mmngr = OSAL_MEMORY_MANAGER_HANDLE_INVALID;
}
// [MmngrCheckBuffer_TC_09_014_013]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrCheckBuffer_TC_09_014_014 MemoryApiTest.MmngrCheckBuffer_TC_09_014_014
 * @subsection MmngrCheckBuffer_TC_09_014_014_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrCheckBuffer_TC_09_014_014_tci Test Case ID
 * MmngrCheckBuffer_S3_N_TC_09_014_014
 * @subsection MmngrCheckBuffer_TC_09_014_014_rr Related Requirement(s)
 * \#276562, \#276736
 * @subsection MmngrCheckBuffer_TC_09_014_014_pp Prerequisite/Precondition
 * OSAL is initialized.
 * @subsection MmngrCheckBuffer_TC_09_014_014_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrCheckBuffer with normal condition in OSAL_MMNGR_ALLOC_MODE_FREE_LIST mode.
 * - pre-process: open new memory manager
 * - Test09_014_014: with all valid parameter.
 * - post-process: close memory manager
 * @subsection MmngrCheckBuffer_TC_09_014_014_tpts Test Procedure/Test Steps
 * -# Call R_OSAL_MmngrOpen with bellow config:
 *  - config.memory_limit                = 4096
 *  - config.max_allowed_allocations     = 1
 *  - config.max_registered_monitors_cbs = 2
 *  - config.mode = OSAL_MMNGR_ALLOC_MODE_FREE_LIST.
 * -# Call R_OSAL_MmngrAlloc with size is 128 and align is 64 to allocate a memory buffer.
 * -# Call R_OSAL_MmngrCheckBuffer with valid paramater.
 * -# Call R_OSAL_MmngrDealloc to deallocate the allocated memory buffer.
 * -# Call R_OSAL_MmngrClose to close memory handle. 
 * @subsection MmngrCheckBuffer_TC_09_014_014_ereb Expected Result/Behavior
 * -# The return of R_OSAL_MmngrOpen is OSAL_RETURN_OK. <br>
 * The returned handle is not OSAL_MEMORY_MANAGER_HANDLE_INVALID.
 * -# The return value of R_OSAL_MmngrAlloc is OSAL_RETURN_OK. <br>
 * The return buffer is not OSAL_MEMORY_BUFFER_HANDLE_INVALID .
 * -# The return value of R_OSAL_MmngrCheckBuffer is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrDealloc is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrClose is OSAL_RETURN_OK.
 * @subsection MmngrCheckBuffer_TC_09_014_014_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrCheckBuffer_TC_09_014_014
 */
// [MmngrCheckBuffer_TC_09_014_014]
TEST_F(MemoryApiTest, MmngrCheckBuffer_TC_09_014_014)
{
    // pre-process: open memory manager
    config.memory_limit                = 4096;
    config.max_allowed_allocations     = 1;
    config.max_registered_monitors_cbs = 2;
    config.mode = OSAL_MMNGR_ALLOC_MODE_FREE_LIST;
    size = 128;
    alignment = 64;

    EXPECT_EQ(R_OSAL_MmngrOpen(&config, &hndl_mmngr), OSAL_RETURN_OK) << "pre-process failed";
    EXPECT_NE(hndl_mmngr,OSAL_MEMORY_MANAGER_HANDLE_INVALID) << "pre-process failed";

    // Test09_014_014
    // @brief: normal case: all valid argument
    EXPECT_EQ(R_OSAL_MmngrAlloc(hndl_mmngr, size, alignment, &buffer_obj), OSAL_RETURN_OK);
    EXPECT_NE(buffer_obj,OSAL_MEMORY_BUFFER_HANDLE_INVALID);
    EXPECT_EQ(R_OSAL_MmngrCheckBuffer(buffer_obj), OSAL_RETURN_OK) << "Test09_014_014 failed";
    EXPECT_EQ(R_OSAL_MmngrDealloc(hndl_mmngr, buffer_obj), OSAL_RETURN_OK);
    buffer_obj = OSAL_MEMORY_BUFFER_HANDLE_INVALID;

    // post-process: close memory manager
    EXPECT_EQ(R_OSAL_MmngrClose(hndl_mmngr), OSAL_RETURN_OK) << "post-process failed";
    hndl_mmngr = OSAL_MEMORY_MANAGER_HANDLE_INVALID;
}
// [MmngrCheckBuffer_TC_09_014_014]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrCheckBuffer_TC_09_014_015 MemoryApiTest.MmngrCheckBuffer_TC_09_014_015
 * @subsection MmngrCheckBuffer_TC_09_014_015_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrCheckBuffer_TC_09_014_015_tci Test Case ID
 * MmngrCheckBuffer_S4_A_TC_09_014_015
 * @subsection MmngrCheckBuffer_TC_09_014_015_rr Related Requirement(s)
 * \#276562, \#276736
 * @subsection MmngrCheckBuffer_TC_09_014_015_pp Prerequisite/Precondition
 * OSAL is initialized.
 * @subsection MmngrCheckBuffer_TC_09_014_015_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrCheckBuffer with abnormal condition in OSAL_MMNGR_ALLOC_MODE_FREE_LIST mode.
 * - pre-process: open new memory manager
 * - Test09_014_015: buffer is not support to check buffer.
 * - post-process: close memory manager
 * @subsection MmngrCheckBuffer_TC_09_014_015_tpts Test Procedure/Test Steps
 * -# Call R_OSAL_MmngrOpen with bellow config:
 *  - config.memory_limit                = 4096
 *  - config.max_allowed_allocations     = 1
 *  - config.max_registered_monitors_cbs = 2
 *  - config.mode = OSAL_MMNGR_ALLOC_MODE_FREE_LIST.
 * -# Allocate "tmp_buffer_obj" by using malloc function.
 * -# Call R_OSAL_MmngrAlloc to allocate a memory buffer.
 * -# Store "buffer_obj->p_checkBuffer" to "tmp_buffer_obj->p_checkBuffer".<br>
 * Set "buffer_obj->p_checkBuffer" to NULL. <br>
 * Call R_OSAL_MmngrCheckBuffer with the changed buffer_obj. <br>
 * Re-assign "tmp_buffer_obj->p_checkBuffer" to "buffer_obj->p_checkBuffer"
 * -# Call R_OSAL_MmngrDealloc to deallocate the original allocated buffer.
 * -# Free buffer pointed by "tmp_buffer_obj"
 * -# Close memory manager by using R_OSAL_MmngrClose
 * @subsection MmngrCheckBuffer_TC_09_014_015_ereb Expected Result/Behavior
 * -# The return of R_OSAL_MmngrOpen is OSAL_RETURN_OK. <br>
 * The returned handle is not OSAL_MEMORY_MANAGER_HANDLE_INVALID.
 * -# Memory allocation succeeded (Pointer to buffer != Nullpointer)
 * -# The return value of R_OSAL_MmngrAlloc is OSAL_RETURN_OK.<br>
 * The return buffer is not OSAL_MEMORY_BUFFER_HANDLE_INVALID .
 * -# The return value of R_OSAL_MmngrCheckBuffer is OSAL_RETURN_UNSUPPORTED_OPERATION.
 * -# The return value of R_OSAL_MmngrDealloc is OSAL_RETURN_OK.
 * -# Allocated memory free succeeded.
 * -# R_OSAL_MmngrClose return OSAL_RETURN_OK
 * @subsection MmngrCheckBuffer_TC_09_014_015_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrCheckBuffer_TC_09_014_015
 */
// [MmngrCheckBuffer_TC_09_014_015]
TEST_F(MemoryApiTest, MmngrCheckBuffer_TC_09_014_015)
{
    osal_memory_buffer_handle_t tmp_buffer_obj;

    // pre-process: open memory manager
    config.memory_limit                = 4096;
    config.max_allowed_allocations     = 1;
    config.max_registered_monitors_cbs = 2;
    config.mode = OSAL_MMNGR_ALLOC_MODE_FREE_LIST;
    size = 128;
    alignment = 64;

    EXPECT_EQ(R_OSAL_MmngrOpen(&config, &hndl_mmngr), OSAL_RETURN_OK) << "pre-process failed";
    EXPECT_NE(hndl_mmngr,OSAL_MEMORY_MANAGER_HANDLE_INVALID) << "pre-process failed";

    // Test09_014_015
    // @brief: abnormal case: buffer_obj->checkBuffer = NULL
    tmp_buffer_obj = (osal_memory_buffer_handle_t)malloc (sizeof(st_osal_memory_buffer_obj));
    EXPECT_EQ(R_OSAL_MmngrAlloc(hndl_mmngr, size, alignment, &buffer_obj), OSAL_RETURN_OK);
    EXPECT_NE(buffer_obj,OSAL_MEMORY_BUFFER_HANDLE_INVALID);
    tmp_buffer_obj->p_checkBuffer = buffer_obj->p_checkBuffer;
    buffer_obj->p_checkBuffer = NULL;
    EXPECT_EQ(R_OSAL_MmngrCheckBuffer(buffer_obj), OSAL_RETURN_UNSUPPORTED_OPERATION) << "Test09_014_015 failed";
    buffer_obj->p_checkBuffer = tmp_buffer_obj->p_checkBuffer;
    EXPECT_EQ(R_OSAL_MmngrDealloc(hndl_mmngr, buffer_obj), OSAL_RETURN_OK);
    buffer_obj = OSAL_MEMORY_BUFFER_HANDLE_INVALID;
    free(tmp_buffer_obj);

    // post-process: close memory manager
    EXPECT_EQ(R_OSAL_MmngrClose(hndl_mmngr), OSAL_RETURN_OK) << "post-process failed";
    hndl_mmngr = OSAL_MEMORY_MANAGER_HANDLE_INVALID;
}
// [MmngrCheckBuffer_TC_09_014_015]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrCheckBuffer_TC_09_014_016 MemoryApiTest.MmngrCheckBuffer_TC_09_014_016
 * @subsection MmngrCheckBuffer_TC_09_014_016_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrCheckBuffer_TC_09_014_016_tci Test Case ID
 * MmngrCheckBuffer_S3_N_TC_09_014_016
 * @subsection MmngrCheckBuffer_TC_09_014_016_rr Related Requirement(s)
 * \#276562, \#276736
 * @subsection MmngrCheckBuffer_TC_09_014_016_pp Prerequisite/Precondition
 * OSAL is initialized.
 * @subsection MmngrCheckBuffer_TC_09_014_016_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrCheckBuffer with normal condition in OSAL_MMNGR_ALLOC_MODE_FREE_LIST_PROT mode.
 * - pre-process: open new memory manager
 * - Test09_014_016: with all valid parameter.
 * - post-process: close memory manager
 * @subsection MmngrCheckBuffer_TC_09_014_016_tpts Test Procedure/Test Steps
 * -# Call R_OSAL_MmngrOpen with bellow config:
 *  - config.memory_limit                = 4096
 *  - config.max_allowed_allocations     = 1
 *  - config.max_registered_monitors_cbs = 2
 *  - config.mode = OSAL_MMNGR_ALLOC_MODE_FREE_LIST_PROT.
 * -# Call R_OSAL_MmngrAlloc with size is 128 and align is 64 to allocate a memory buffer.
 * -# Call R_OSAL_MmngrCheckBuffer with valid paramater.
 * -# Call R_OSAL_MmngrDealloc to deallocate the allocated memory buffer.
 * -# Call R_OSAL_MmngrClose to close memory handle. 
 * @subsection MmngrCheckBuffer_TC_09_014_016_ereb Expected Result/Behavior
 * -# The return of R_OSAL_MmngrOpen is OSAL_RETURN_OK. <br>
 * The returned handle is not OSAL_MEMORY_MANAGER_HANDLE_INVALID.
 * -# The return value of R_OSAL_MmngrAlloc is OSAL_RETURN_OK. <br>
 * The return buffer is not OSAL_MEMORY_BUFFER_HANDLE_INVALID .
 * -# The return value of R_OSAL_MmngrCheckBuffer is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrDealloc is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrClose is OSAL_RETURN_OK.
 * @subsection MmngrCheckBuffer_TC_09_014_016_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrCheckBuffer_TC_09_014_016
 */
// [MmngrCheckBuffer_TC_09_014_016]
TEST_F(MemoryApiTest, MmngrCheckBuffer_TC_09_014_016)
{
    // pre-process: open memory manager
    config.memory_limit                = 4096;
    config.max_allowed_allocations     = 1;
    config.max_registered_monitors_cbs = 2;
    config.mode = OSAL_MMNGR_ALLOC_MODE_FREE_LIST_PROT;
    size = 128;
    alignment = 64;

    EXPECT_EQ(R_OSAL_MmngrOpen(&config, &hndl_mmngr), OSAL_RETURN_OK) << "pre-process failed";
    EXPECT_NE(hndl_mmngr,OSAL_MEMORY_MANAGER_HANDLE_INVALID) << "pre-process failed";

    // Test09_014_016
    // @brief: normal case: all valid argument
    EXPECT_EQ(R_OSAL_MmngrAlloc(hndl_mmngr, size, alignment, &buffer_obj), OSAL_RETURN_OK);
    EXPECT_NE(buffer_obj,OSAL_MEMORY_BUFFER_HANDLE_INVALID);
    EXPECT_EQ(R_OSAL_MmngrCheckBuffer(buffer_obj), OSAL_RETURN_OK) << "Test09_014_016 failed";
    EXPECT_EQ(R_OSAL_MmngrDealloc(hndl_mmngr, buffer_obj), OSAL_RETURN_OK);
    buffer_obj = OSAL_MEMORY_BUFFER_HANDLE_INVALID;

    // post-process: close memory manager
    EXPECT_EQ(R_OSAL_MmngrClose(hndl_mmngr), OSAL_RETURN_OK) << "post-process failed";
    hndl_mmngr = OSAL_MEMORY_MANAGER_HANDLE_INVALID;
}
// [MmngrCheckBuffer_TC_09_014_016]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrCheckBuffer_TC_09_014_017 MemoryApiTest.MmngrCheckBuffer_TC_09_014_017
 * @subsection MmngrCheckBuffer_TC_09_014_017_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrCheckBuffer_TC_09_014_017_tci Test Case ID
 * MmngrCheckBuffer_S4_A_TC_09_014_017
 * @subsection MmngrCheckBuffer_TC_09_014_017_rr Related Requirement(s)
 * \#276562, \#276736
 * @subsection MmngrCheckBuffer_TC_09_014_017_pp Prerequisite/Precondition
 * OSAL is initialized.
 * @subsection MmngrCheckBuffer_TC_09_014_017_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrCheckBuffer with abnormal condition in OSAL_MMNGR_ALLOC_MODE_FREE_LIST_PROT mode.
 * - pre-process: open new memory manager
 * - Test09_014_017: buffer is not support to check buffer.
 * - post-process: close memory manager
 * @subsection MmngrCheckBuffer_TC_09_014_017_tpts Test Procedure/Test Steps
 * -# Call R_OSAL_MmngrOpen with bellow config:
 *  - config.memory_limit                = 4096
 *  - config.max_allowed_allocations     = 1
 *  - config.max_registered_monitors_cbs = 2
 *  - config.mode = OSAL_MMNGR_ALLOC_MODE_FREE_LIST_PROT.
 * -# Allocate "tmp_buffer_obj" by using malloc function.
 * -# Call R_OSAL_MmngrAlloc to allocate a memory buffer.
 * -# Store "buffer_obj->p_checkBuffer" to "tmp_buffer_obj->p_checkBuffer".<br>
 * Set "buffer_obj->p_checkBuffer" to NULL. <br>
 * Call R_OSAL_MmngrCheckBuffer with the changed buffer_obj. <br>
 * Re-assign "tmp_buffer_obj->p_checkBuffer" to "buffer_obj->p_checkBuffer"
 * -# Call R_OSAL_MmngrDealloc to deallocate the original allocated buffer.
 * -# Free buffer pointed by "tmp_buffer_obj"
 * -# Close memory manager by using R_OSAL_MmngrClose
 * @subsection MmngrCheckBuffer_TC_09_014_017_ereb Expected Result/Behavior
 * -# The return of R_OSAL_MmngrOpen is OSAL_RETURN_OK. <br>
 * The returned handle is not OSAL_MEMORY_MANAGER_HANDLE_INVALID.
 * -# Memory allocation succeeded (Pointer to buffer != Nullpointer)
 * -# The return value of R_OSAL_MmngrAlloc is OSAL_RETURN_OK.<br>
 * The return buffer is not OSAL_MEMORY_BUFFER_HANDLE_INVALID .
 * -# The return value of R_OSAL_MmngrCheckBuffer is OSAL_RETURN_UNSUPPORTED_OPERATION.
 * -# The return value of R_OSAL_MmngrDealloc is OSAL_RETURN_OK.
 * -# Allocated memory free succeeded.
 * -# R_OSAL_MmngrClose return OSAL_RETURN_OK
 * @subsection MmngrCheckBuffer_TC_09_014_017_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrCheckBuffer_TC_09_014_017
 */
// [MmngrCheckBuffer_TC_09_014_017]
TEST_F(MemoryApiTest, MmngrCheckBuffer_TC_09_014_017)
{
    osal_memory_buffer_handle_t tmp_buffer_obj;

    // pre-process: open memory manager
    config.memory_limit                = 4096;
    config.max_allowed_allocations     = 1;
    config.max_registered_monitors_cbs = 2;
    config.mode = OSAL_MMNGR_ALLOC_MODE_FREE_LIST_PROT;
    size = 128;
    alignment = 64;

    EXPECT_EQ(R_OSAL_MmngrOpen(&config, &hndl_mmngr), OSAL_RETURN_OK) << "pre-process failed";
    EXPECT_NE(hndl_mmngr,OSAL_MEMORY_MANAGER_HANDLE_INVALID) << "pre-process failed";

    // Test09_014_017
    // @brief: abnormal case: buffer_obj->checkBuffer = NULL
    tmp_buffer_obj = (osal_memory_buffer_handle_t)malloc (sizeof(st_osal_memory_buffer_obj));
    EXPECT_EQ(R_OSAL_MmngrAlloc(hndl_mmngr, size, alignment, &buffer_obj), OSAL_RETURN_OK);
    EXPECT_NE(buffer_obj,OSAL_MEMORY_BUFFER_HANDLE_INVALID);
    tmp_buffer_obj->p_checkBuffer = buffer_obj->p_checkBuffer;
    buffer_obj->p_checkBuffer = NULL;
    EXPECT_EQ(R_OSAL_MmngrCheckBuffer(buffer_obj), OSAL_RETURN_UNSUPPORTED_OPERATION) << "Test09_014_017 failed";
    buffer_obj->p_checkBuffer = tmp_buffer_obj->p_checkBuffer;
    EXPECT_EQ(R_OSAL_MmngrDealloc(hndl_mmngr, buffer_obj), OSAL_RETURN_OK);
    buffer_obj = OSAL_MEMORY_BUFFER_HANDLE_INVALID;
    free(tmp_buffer_obj);

    // post-process: close memory manager
    EXPECT_EQ(R_OSAL_MmngrClose(hndl_mmngr), OSAL_RETURN_OK) << "post-process failed";
    hndl_mmngr = OSAL_MEMORY_MANAGER_HANDLE_INVALID;
}
// [MmngrCheckBuffer_TC_09_014_017]
#endif

#ifndef SKIP_MEMORY_DEBUG
/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrCheckBuffer_TC_09_014_018 MemoryApiTest.MmngrCheckBuffer_TC_09_014_018
 * @subsection MmngrCheckBuffer_TC_09_014_018_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrCheckBuffer_TC_09_014_018_tci Test Case ID
 * MmngrCheckBuffer_S4_A_TC_09_014_018
 * @subsection MmngrCheckBuffer_TC_09_014_018_rr Related Requirement(s)
 * \#276562, \#276736
 * @subsection MmngrCheckBuffer_TC_09_014_018_pp Prerequisite/Precondition
 * OSAL is initialized.
 * @subsection MmngrCheckBuffer_TC_09_014_018_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrCheckBuffer with abnormal condition in OSAL_MMNGR_ALLOC_MODE_STACK mode.
 * - pre-process: open memory manager
 * - Test09_014_018: "buffer_obj->p_ptr_self" is invalid.
 * - post-process: close memory manager
 * @subsection MmngrCheckBuffer_TC_09_014_018_tpts Test Procedure/Test Steps
 * -# Call R_OSAL_MmngrOpen with bellow config:
 *  - config.memory_limit                = 4096
 *  - config.max_allowed_allocations     = 1
 *  - config.max_registered_monitors_cbs = 2
 *  - config.mode = OSAL_MMNGR_ALLOC_MODE_STACK.
 * -# Call R_OSAL_MmngrAlloc with valid parameter
 * -# Call R_OSAL_MmngrCheckBuffer with an invalid buffer_obj->p_ptr_self:
 *      - buffer_obj with p_ptr_self value changed to p_ptr_self_ng
 *      - "p_ptr_self_ng" is allocated by malloc function.
 * -# Deallocate buffer_obj by using R_OSAL_MmngrDeallocate.
 *      - buffer_obj with valid p_ptr_self value
 * -# Call R_OSAL_MmngrClose to close the memory manager.
 * @subsection MmngrCheckBuffer_TC_09_014_018_ereb Expected Result/Behavior
 * -# The return value of R_OSAL_MmngrOpen is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrAlloc is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrCheckBuffer is OSAL_RETURN_HANDLE.
 * -# The return value of R_OSAL_MmngrDeallocate is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrClose is OSAL_RETURN_OK.
 * @subsection MmngrCheckBuffer_TC_09_014_018_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrCheckBuffer_TC_09_014_018
 */
// [MmngrCheckBuffer_TC_09_014_018]
TEST_F(MemoryApiTest, MmngrCheckBuffer_TC_09_014_018)
{
    void* ptr_self_bak;
    void* ptr_self_ng;
    // pre-process: open memory manager
    config.memory_limit                = 4096;
    config.max_allowed_allocations     = 1;
    config.max_registered_monitors_cbs = 2;
    config.mode = OSAL_MMNGR_ALLOC_MODE_STACK;
    size = 128;
    alignment = 64;

    EXPECT_EQ(R_OSAL_MmngrOpen(&config, &hndl_mmngr), OSAL_RETURN_OK) << "pre-process failed";
    EXPECT_NE(hndl_mmngr,OSAL_MEMORY_MANAGER_HANDLE_INVALID) << "pre-process failed";

    // Test09_014_018
    // @brief: abnormal case: "buffer_obj->p_ptr_self" is invalid.
    EXPECT_EQ(R_OSAL_MmngrAlloc(hndl_mmngr, size, alignment, &buffer_obj), OSAL_RETURN_OK);
    EXPECT_NE(buffer_obj,OSAL_MEMORY_BUFFER_HANDLE_INVALID);
    ptr_self_bak = buffer_obj->p_ptr_self;
    ptr_self_ng = malloc(0x100);
    memset(ptr_self_ng, 0x0, 0x100);
    buffer_obj->p_ptr_self = ptr_self_ng;
    EXPECT_EQ(R_OSAL_MmngrCheckBuffer(buffer_obj), OSAL_RETURN_HANDLE) << "Test09_014_018 failed";
    free(ptr_self_ng);
    buffer_obj->p_ptr_self = ptr_self_bak;
    EXPECT_EQ(R_OSAL_MmngrDealloc(hndl_mmngr, buffer_obj), OSAL_RETURN_OK);
    buffer_obj = OSAL_MEMORY_BUFFER_HANDLE_INVALID;

    // post-process: close memory manager
    EXPECT_EQ(R_OSAL_MmngrClose(hndl_mmngr), OSAL_RETURN_OK) << "post-process failed";
    hndl_mmngr = OSAL_MEMORY_MANAGER_HANDLE_INVALID;
}
// [MmngrCheckBuffer_TC_09_014_018]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrCheckBuffer_TC_09_014_019 MemoryApiTest.MmngrCheckBuffer_TC_09_014_019
 * @subsection MmngrCheckBuffer_TC_09_014_019_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrCheckBuffer_TC_09_014_019_tci Test Case ID
 * MmngrCheckBuffer_S4_A_TC_09_014_019
 * @subsection MmngrCheckBuffer_TC_09_014_019_rr Related Requirement(s)
 * \#276562, \#276736
 * @subsection MmngrCheckBuffer_TC_09_014_019_pp Prerequisite/Precondition
 * OSAL is initialized.
 * @subsection MmngrCheckBuffer_TC_09_014_019_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrCheckBuffer with abnormal condition in OSAL_MMNGR_ALLOC_MODE_STACK_PROT mode.
 * - pre-process: open memory manager
 * - Test09_014_019: "buffer_obj->p_ptr_self" is invalid.
 * - post-process: close memory manager
 * @subsection MmngrCheckBuffer_TC_09_014_019_tpts Test Procedure/Test Steps
 * -# Call R_OSAL_MmngrOpen with bellow config:
 *  - config.memory_limit                = 4096
 *  - config.max_allowed_allocations     = 1
 *  - config.max_registered_monitors_cbs = 2
 *  - config.mode = OSAL_MMNGR_ALLOC_MODE_STACK_PROT.
 * -# Call R_OSAL_MmngrAlloc with valid parameter
 * -# Call R_OSAL_MmngrCheckBuffer with an invalid buffer_obj->p_ptr_self:
 *      - buffer_obj with p_ptr_self value changed to p_ptr_self_ng
 *      - "p_ptr_self_ng" is allocated by malloc function.
 * -# Deallocate buffer_obj by using R_OSAL_MmngrDeallocate.
 *      - buffer_obj with valid p_ptr_self value
 * -# Call R_OSAL_MmngrClose to close the memory manager.
 * @subsection MmngrCheckBuffer_TC_09_014_019_ereb Expected Result/Behavior
 * -# The return value of R_OSAL_MmngrOpen is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrAlloc is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrCheckBuffer is OSAL_RETURN_HANDLE.
 * -# The return value of R_OSAL_MmngrDeallocate is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrClose is OSAL_RETURN_OK.
 * @subsection MmngrCheckBuffer_TC_09_014_019_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrCheckBuffer_TC_09_014_019
 */
// [MmngrCheckBuffer_TC_09_014_019]
TEST_F(MemoryApiTest, MmngrCheckBuffer_TC_09_014_019)
{
    void* ptr_self_bak;
    void* ptr_self_ng;
    // pre-process: open memory manager
    config.memory_limit                = 4096;
    config.max_allowed_allocations     = 1;
    config.max_registered_monitors_cbs = 2;
    config.mode = OSAL_MMNGR_ALLOC_MODE_STACK_PROT;
    size = 128;
    alignment = 64;

    EXPECT_EQ(R_OSAL_MmngrOpen(&config, &hndl_mmngr), OSAL_RETURN_OK) << "pre-process failed";
    EXPECT_NE(hndl_mmngr,OSAL_MEMORY_MANAGER_HANDLE_INVALID) << "pre-process failed";

    // Test09_014_019
    // @brief: abnormal case: "buffer_obj->p_ptr_self" is invalid.
    EXPECT_EQ(R_OSAL_MmngrAlloc(hndl_mmngr, size, alignment, &buffer_obj), OSAL_RETURN_OK);
    EXPECT_NE(buffer_obj,OSAL_MEMORY_BUFFER_HANDLE_INVALID);
    ptr_self_bak = buffer_obj->p_ptr_self;
    ptr_self_ng = malloc(0x100);
    memset(ptr_self_ng, 0x0, 0x100);
    buffer_obj->p_ptr_self = ptr_self_ng;
    EXPECT_EQ(R_OSAL_MmngrCheckBuffer(buffer_obj), OSAL_RETURN_HANDLE) << "Test09_014_019 failed";
    free(ptr_self_ng);
    buffer_obj->p_ptr_self = ptr_self_bak;
    EXPECT_EQ(R_OSAL_MmngrDealloc(hndl_mmngr, buffer_obj), OSAL_RETURN_OK);
    buffer_obj = OSAL_MEMORY_BUFFER_HANDLE_INVALID;

    // post-process: close memory manager
    EXPECT_EQ(R_OSAL_MmngrClose(hndl_mmngr), OSAL_RETURN_OK) << "post-process failed";
    hndl_mmngr = OSAL_MEMORY_MANAGER_HANDLE_INVALID;
}
// [MmngrCheckBuffer_TC_09_014_019]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrCheckBuffer_TC_09_014_020 MemoryApiTest.MmngrCheckBuffer_TC_09_014_020
 * @subsection MmngrCheckBuffer_TC_09_014_020_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrCheckBuffer_TC_09_014_020_tci Test Case ID
 * MmngrCheckBuffer_S4_A_TC_09_014_020
 * @subsection MmngrCheckBuffer_TC_09_014_020_rr Related Requirement(s)
 * \#276562, \#276736
 * @subsection MmngrCheckBuffer_TC_09_014_020_pp Prerequisite/Precondition
 * OSAL is initialized.
 * @subsection MmngrCheckBuffer_TC_09_014_020_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrCheckBuffer with abnormal condition in OSAL_MMNGR_ALLOC_MODE_FREE_LIST mode.
 * - pre-process: open memory manager
 * - Test09_014_020: "buffer_obj->p_ptr_self" is invalid.
 * - post-process: close memory manager
 * @subsection MmngrCheckBuffer_TC_09_014_020_tpts Test Procedure/Test Steps
 * -# Call R_OSAL_MmngrOpen with bellow config:
 *  - config.memory_limit                = 4096
 *  - config.max_allowed_allocations     = 1
 *  - config.max_registered_monitors_cbs = 2
 *  - config.mode = OSAL_MMNGR_ALLOC_MODE_FREE_LIST.
 * -# Call R_OSAL_MmngrAlloc with valid parameter
 * -# Call R_OSAL_MmngrCheckBuffer with an invalid buffer_obj->p_ptr_self:
 *      - buffer_obj with p_ptr_self value changed to p_ptr_self_ng
 *      - "p_ptr_self_ng" is allocated by malloc function.
 * -# Deallocate buffer_obj by using R_OSAL_MmngrDeallocate.
 *      - buffer_obj with valid p_ptr_self value
 * -# Call R_OSAL_MmngrClose to close the memory manager.
 * @subsection MmngrCheckBuffer_TC_09_014_020_ereb Expected Result/Behavior
 * -# The return value of R_OSAL_MmngrOpen is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrAlloc is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrCheckBuffer is OSAL_RETURN_HANDLE.
 * -# The return value of R_OSAL_MmngrDeallocate is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrClose is OSAL_RETURN_OK.
 * @subsection MmngrCheckBuffer_TC_09_014_020_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrCheckBuffer_TC_09_014_020
 */
// [MmngrCheckBuffer_TC_09_014_020]
TEST_F(MemoryApiTest, MmngrCheckBuffer_TC_09_014_020)
{
    void* ptr_self_bak;
    void* ptr_self_ng;
    // pre-process: open memory manager
    config.memory_limit                = 4096;
    config.max_allowed_allocations     = 1;
    config.max_registered_monitors_cbs = 2;
    config.mode = OSAL_MMNGR_ALLOC_MODE_FREE_LIST;
    size = 128;
    alignment = 64;

    EXPECT_EQ(R_OSAL_MmngrOpen(&config, &hndl_mmngr), OSAL_RETURN_OK) << "pre-process failed";
    EXPECT_NE(hndl_mmngr,OSAL_MEMORY_MANAGER_HANDLE_INVALID) << "pre-process failed";

    // Test09_014_020
    // @brief: abnormal case: "buffer_obj->p_ptr_self" is invalid.
    EXPECT_EQ(R_OSAL_MmngrAlloc(hndl_mmngr, size, alignment, &buffer_obj), OSAL_RETURN_OK);
    EXPECT_NE(buffer_obj,OSAL_MEMORY_BUFFER_HANDLE_INVALID);
    ptr_self_bak = buffer_obj->p_ptr_self;
    ptr_self_ng = malloc(0x100);
    memset(ptr_self_ng, 0x0, 0x100);
    buffer_obj->p_ptr_self = ptr_self_ng;
    EXPECT_EQ(R_OSAL_MmngrCheckBuffer(buffer_obj), OSAL_RETURN_HANDLE) << "Test09_014_020 failed";
    free(ptr_self_ng);
    buffer_obj->p_ptr_self = ptr_self_bak;
    EXPECT_EQ(R_OSAL_MmngrDealloc(hndl_mmngr, buffer_obj), OSAL_RETURN_OK);
    buffer_obj = OSAL_MEMORY_BUFFER_HANDLE_INVALID;

    // post-process: close memory manager
    EXPECT_EQ(R_OSAL_MmngrClose(hndl_mmngr), OSAL_RETURN_OK) << "post-process failed";
    hndl_mmngr = OSAL_MEMORY_MANAGER_HANDLE_INVALID;
}
// [MmngrCheckBuffer_TC_09_014_020]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrCheckBuffer_TC_09_014_021 MemoryApiTest.MmngrCheckBuffer_TC_09_014_021
 * @subsection MmngrCheckBuffer_TC_09_014_021_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrCheckBuffer_TC_09_014_021_tci Test Case ID
 * MmngrCheckBuffer_S4_A_TC_09_014_021
 * @subsection MmngrCheckBuffer_TC_09_014_021_rr Related Requirement(s)
 * \#276562, \#276736
 * @subsection MmngrCheckBuffer_TC_09_014_021_pp Prerequisite/Precondition
 * OSAL is initialized.
 * @subsection MmngrCheckBuffer_TC_09_014_021_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrCheckBuffer with abnormal condition in OSAL_MMNGR_ALLOC_MODE_FREE_LIST_PROT mode.
 * - pre-process: open memory manager
 * - Test09_014_021: "buffer_obj->p_ptr_self" is invalid.
 * - post-process: close memory manager
 * @subsection MmngrCheckBuffer_TC_09_014_021_tpts Test Procedure/Test Steps
 * -# Call R_OSAL_MmngrOpen with bellow config:
 *  - config.memory_limit                = 4096
 *  - config.max_allowed_allocations     = 1
 *  - config.max_registered_monitors_cbs = 2
 *  - config.mode = OSAL_MMNGR_ALLOC_MODE_FREE_LIST_PROT.
 * -# Call R_OSAL_MmngrAlloc with valid parameter
 * -# Call R_OSAL_MmngrCheckBuffer with an invalid buffer_obj->p_ptr_self:
 *      - buffer_obj with p_ptr_self value changed to p_ptr_self_ng
 *      - "p_ptr_self_ng" is allocated by malloc function.
 * -# Deallocate buffer_obj by using R_OSAL_MmngrDeallocate.
 *      - buffer_obj with valid p_ptr_self value
 * -# Call R_OSAL_MmngrClose to close the memory manager.
 * @subsection MmngrCheckBuffer_TC_09_014_021_ereb Expected Result/Behavior
 * -# The return value of R_OSAL_MmngrOpen is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrAlloc is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrCheckBuffer is OSAL_RETURN_HANDLE.
 * -# The return value of R_OSAL_MmngrDeallocate is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrClose is OSAL_RETURN_OK.
 * @subsection MmngrCheckBuffer_TC_09_014_021_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrCheckBuffer_TC_09_014_021
 */
// [MmngrCheckBuffer_TC_09_014_021]
TEST_F(MemoryApiTest, MmngrCheckBuffer_TC_09_014_021)
{
    void* ptr_self_bak;
    void* ptr_self_ng;
    // pre-process: open memory manager
    config.memory_limit                = 4096;
    config.max_allowed_allocations     = 1;
    config.max_registered_monitors_cbs = 2;
    config.mode = OSAL_MMNGR_ALLOC_MODE_FREE_LIST_PROT;
    size = 128;
    alignment = 64;

    EXPECT_EQ(R_OSAL_MmngrOpen(&config, &hndl_mmngr), OSAL_RETURN_OK) << "pre-process failed";
    EXPECT_NE(hndl_mmngr,OSAL_MEMORY_MANAGER_HANDLE_INVALID) << "pre-process failed";

    // Test09_014_021
    // @brief: abnormal case: "buffer_obj->p_ptr_self" is invalid.
    EXPECT_EQ(R_OSAL_MmngrAlloc(hndl_mmngr, size, alignment, &buffer_obj), OSAL_RETURN_OK);
    EXPECT_NE(buffer_obj,OSAL_MEMORY_BUFFER_HANDLE_INVALID);
    ptr_self_bak = buffer_obj->p_ptr_self;
    ptr_self_ng = malloc(0x100);
    memset(ptr_self_ng, 0x0, 0x100);
    buffer_obj->p_ptr_self = ptr_self_ng;
    EXPECT_EQ(R_OSAL_MmngrCheckBuffer(buffer_obj), OSAL_RETURN_HANDLE) << "Test09_014_021 failed";
    free(ptr_self_ng);
    buffer_obj->p_ptr_self = ptr_self_bak;
    EXPECT_EQ(R_OSAL_MmngrDealloc(hndl_mmngr, buffer_obj), OSAL_RETURN_OK);
    buffer_obj = OSAL_MEMORY_BUFFER_HANDLE_INVALID;

    // post-process: close memory manager
    EXPECT_EQ(R_OSAL_MmngrClose(hndl_mmngr), OSAL_RETURN_OK) << "post-process failed";
    hndl_mmngr = OSAL_MEMORY_MANAGER_HANDLE_INVALID;
}
// [MmngrCheckBuffer_TC_09_014_021]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrCheckBuffer_TC_09_014_022 MemoryApiTest.MmngrCheckBuffer_TC_09_014_022
 * @subsection MmngrCheckBuffer_TC_09_014_022_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrCheckBuffer_TC_09_014_022_tci Test Case ID
 * MmngrCheckBuffer_S2_A_TC_09_014_022
 * @subsection MmngrCheckBuffer_TC_09_014_022_rr Related Requirement(s)
 * \#276562, \#276736
 * @subsection MmngrCheckBuffer_TC_09_014_022_pp Prerequisite/Precondition
 * OSAL is initialized.
 * @subsection MmngrCheckBuffer_TC_09_014_022_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrCheckBuffer with abnormal condition in OSAL_MMNGR_ALLOC_MODE_STACK mode.
 * - Test09_014_022: buffer has already been deallocated
 * @subsection MmngrCheckBuffer_TC_09_014_022_tpts Test Procedure/Test Steps
 * -# Call R_OSAL_MmngrOpen with bellow config:
 *  - config.memory_limit                = 4096
 *  - config.max_allowed_allocations     = 1
 *  - config.max_registered_monitors_cbs = 2
 *  - config.mode = OSAL_MMNGR_ALLOC_MODE_STACK.
 * -# Call R_OSAL_MmngrAlloc with valid parameter
 * -# Deallocate buffer_obj by using R_OSAL_MmngrDealloc.
 * -# Call R_OSAL_MmngrCheckBuffer with buffer_object has already been deallocated
 * -# Call R_OSAL_MmngrClose to close the memory manager.
 * @subsection MmngrCheckBuffer_TC_09_014_022_ereb Expected Result/Behavior
 * -# The return value of R_OSAL_MmngrOpen is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrAlloc is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrDealloc is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrCheckBuffer is OSAL_RETURN_HANDLE.
 * -# The return value of R_OSAL_MmngrClose is OSAL_RETURN_OK.
 * @subsection MmngrCheckBuffer_TC_09_014_022_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrCheckBuffer_TC_09_014_022
 */
// [MmngrCheckBuffer_TC_09_014_022]
TEST_F(MemoryApiTest, MmngrCheckBuffer_TC_09_014_022)
{
    // Test09_014_022
    // @brief: abnormal case: buffer has already been deallocated
    config.memory_limit                = 4096;
    config.max_allowed_allocations     = 1;
    config.max_registered_monitors_cbs = 2;
    config.mode = OSAL_MMNGR_ALLOC_MODE_STACK;

    EXPECT_EQ(R_OSAL_MmngrOpen(&config, &hndl_mmngr), OSAL_RETURN_OK) << "Test09_014_022 failed";
    EXPECT_NE(hndl_mmngr,OSAL_MEMORY_MANAGER_HANDLE_INVALID) << "Test09_014_022 failed";
    size = 128;
    alignment = 64;
    EXPECT_EQ(R_OSAL_MmngrAlloc(hndl_mmngr, size, alignment, &buffer_obj), OSAL_RETURN_OK) << "Test09_014_022 failed";
    EXPECT_NE(buffer_obj,OSAL_MEMORY_BUFFER_HANDLE_INVALID) << "Test09_014_022 failed";
    EXPECT_EQ(R_OSAL_MmngrDealloc(hndl_mmngr, buffer_obj), OSAL_RETURN_OK) << "Test09_014_022 failed";
    EXPECT_EQ(R_OSAL_MmngrCheckBuffer(buffer_obj), OSAL_RETURN_HANDLE) << "Test09_014_022 failed";
    EXPECT_EQ(R_OSAL_MmngrClose(hndl_mmngr), OSAL_RETURN_OK) << "Test09_014_022 failed";
    hndl_mmngr = OSAL_MEMORY_MANAGER_HANDLE_INVALID;
    buffer_obj = OSAL_MEMORY_BUFFER_HANDLE_INVALID;
}
// [MmngrCheckBuffer_TC_09_014_022]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrCheckBuffer_TC_09_014_023 MemoryApiTest.MmngrCheckBuffer_TC_09_014_023
 * @subsection MmngrCheckBuffer_TC_09_014_023_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrCheckBuffer_TC_09_014_023_tci Test Case ID
 * MmngrCheckBuffer_S2_A_TC_09_014_023
 * @subsection MmngrCheckBuffer_TC_09_014_023_rr Related Requirement(s)
 * \#276562, \#276736
 * @subsection MmngrCheckBuffer_TC_09_014_023_pp Prerequisite/Precondition
 * OSAL is initialized.
 * @subsection MmngrCheckBuffer_TC_09_014_023_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrCheckBuffer with abnormal condition in OSAL_MMNGR_ALLOC_MODE_STACK_PROT mode.
 * - Test09_014_023: buffer has already been deallocated
 * @subsection MmngrCheckBuffer_TC_09_014_023_tpts Test Procedure/Test Steps
 * -# Call R_OSAL_MmngrOpen with bellow config:
 *  - config.memory_limit                = 4096
 *  - config.max_allowed_allocations     = 1
 *  - config.max_registered_monitors_cbs = 2
 *  - config.mode = OSAL_MMNGR_ALLOC_MODE_STACK_PROT.
 * -# Call R_OSAL_MmngrAlloc with valid parameter
 * -# Deallocate buffer_obj by using R_OSAL_MmngrDealloc.
 * -# Call R_OSAL_MmngrCheckBuffer with buffer_object has already been deallocated
 * -# Call R_OSAL_MmngrClose to close the memory manager.
 * @subsection MmngrCheckBuffer_TC_09_014_023_ereb Expected Result/Behavior
 * -# The return value of R_OSAL_MmngrOpen is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrAlloc is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrDealloc is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrCheckBuffer is OSAL_RETURN_HANDLE.
 * -# The return value of R_OSAL_MmngrClose is OSAL_RETURN_OK.
 * @subsection MmngrCheckBuffer_TC_09_014_023_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrCheckBuffer_TC_09_014_023
 */
// [MmngrCheckBuffer_TC_09_014_023]
TEST_F(MemoryApiTest, MmngrCheckBuffer_TC_09_014_023)
{
    // Test09_014_023
    // @brief: abnormal case: buffer has already been deallocated
    config.memory_limit                = 4096;
    config.max_allowed_allocations     = 1;
    config.max_registered_monitors_cbs = 2;
    config.mode = OSAL_MMNGR_ALLOC_MODE_STACK_PROT;

    EXPECT_EQ(R_OSAL_MmngrOpen(&config, &hndl_mmngr), OSAL_RETURN_OK) << "Test09_014_023 failed";
    EXPECT_NE(hndl_mmngr,OSAL_MEMORY_MANAGER_HANDLE_INVALID) << "Test09_014_023 failed";
    size = 128;
    alignment = 64;
    EXPECT_EQ(R_OSAL_MmngrAlloc(hndl_mmngr, size, alignment, &buffer_obj), OSAL_RETURN_OK) << "Test09_014_023 failed";
    EXPECT_NE(buffer_obj,OSAL_MEMORY_BUFFER_HANDLE_INVALID) << "Test09_014_023 failed";
    EXPECT_EQ(R_OSAL_MmngrDealloc(hndl_mmngr, buffer_obj), OSAL_RETURN_OK) << "Test09_014_023 failed";
    EXPECT_EQ(R_OSAL_MmngrCheckBuffer(buffer_obj), OSAL_RETURN_HANDLE) << "Test09_014_023 failed";
    EXPECT_EQ(R_OSAL_MmngrClose(hndl_mmngr), OSAL_RETURN_OK) << "Test09_014_023 failed";
    hndl_mmngr = OSAL_MEMORY_MANAGER_HANDLE_INVALID;
    buffer_obj = OSAL_MEMORY_BUFFER_HANDLE_INVALID;
}
// [MmngrCheckBuffer_TC_09_014_023]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrCheckBuffer_TC_09_014_024 MemoryApiTest.MmngrCheckBuffer_TC_09_014_024
 * @subsection MmngrCheckBuffer_TC_09_014_024_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrCheckBuffer_TC_09_014_024_tci Test Case ID
 * MmngrCheckBuffer_S2_A_TC_09_014_024
 * @subsection MmngrCheckBuffer_TC_09_014_024_rr Related Requirement(s)
 * \#276562, \#276736
 * @subsection MmngrCheckBuffer_TC_09_014_024_pp Prerequisite/Precondition
 * OSAL is initialized.
 * @subsection MmngrCheckBuffer_TC_09_014_024_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrCheckBuffer with abnormal condition in OSAL_MMNGR_ALLOC_MODE_FREE_LIST mode.
 * - Test09_014_024: buffer has already been deallocated
 * @subsection MmngrCheckBuffer_TC_09_014_024_tpts Test Procedure/Test Steps
 * -# Call R_OSAL_MmngrOpen with bellow config:
 *  - config.memory_limit                = 4096
 *  - config.max_allowed_allocations     = 1
 *  - config.max_registered_monitors_cbs = 2
 *  - config.mode = OSAL_MMNGR_ALLOC_MODE_FREE_LIST.
 * -# Call R_OSAL_MmngrAlloc with valid parameter
 * -# Deallocate buffer_obj by using R_OSAL_MmngrDealloc.
 * -# Call R_OSAL_MmngrCheckBuffer with buffer_object has already been deallocated
 * -# Call R_OSAL_MmngrClose to close the memory manager.
 * @subsection MmngrCheckBuffer_TC_09_014_024_ereb Expected Result/Behavior
 * -# The return value of R_OSAL_MmngrOpen is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrAlloc is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrDealloc is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrCheckBuffer is OSAL_RETURN_HANDLE.
 * -# The return value of R_OSAL_MmngrClose is OSAL_RETURN_OK.
 * @subsection MmngrCheckBuffer_TC_09_014_024_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrCheckBuffer_TC_09_014_024
 */
// [MmngrCheckBuffer_TC_09_014_024]
TEST_F(MemoryApiTest, MmngrCheckBuffer_TC_09_014_024)
{
    // Test09_014_024
    // @brief: abnormal case: buffer has already been deallocated
    config.memory_limit                = 4096;
    config.max_allowed_allocations     = 1;
    config.max_registered_monitors_cbs = 2;
    config.mode = OSAL_MMNGR_ALLOC_MODE_FREE_LIST;

    EXPECT_EQ(R_OSAL_MmngrOpen(&config, &hndl_mmngr), OSAL_RETURN_OK) << "Test09_014_024 failed";
    EXPECT_NE(hndl_mmngr,OSAL_MEMORY_MANAGER_HANDLE_INVALID) << "Test09_014_024 failed";
    size = 128;
    alignment = 64;
    EXPECT_EQ(R_OSAL_MmngrAlloc(hndl_mmngr, size, alignment, &buffer_obj), OSAL_RETURN_OK) << "Test09_014_024 failed";
    EXPECT_NE(buffer_obj,OSAL_MEMORY_BUFFER_HANDLE_INVALID) << "Test09_014_024 failed";
    EXPECT_EQ(R_OSAL_MmngrDealloc(hndl_mmngr, buffer_obj), OSAL_RETURN_OK) << "Test09_014_024 failed";
    EXPECT_EQ(R_OSAL_MmngrCheckBuffer(buffer_obj), OSAL_RETURN_HANDLE) << "Test09_014_024 failed";
    EXPECT_EQ(R_OSAL_MmngrClose(hndl_mmngr), OSAL_RETURN_OK) << "Test09_014_024 failed";
    hndl_mmngr = OSAL_MEMORY_MANAGER_HANDLE_INVALID;
    buffer_obj = OSAL_MEMORY_BUFFER_HANDLE_INVALID;
}
// [MmngrCheckBuffer_TC_09_014_024]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrCheckBuffer_TC_09_014_025 MemoryApiTest.MmngrCheckBuffer_TC_09_014_025
 * @subsection MmngrCheckBuffer_TC_09_014_025_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrCheckBuffer_TC_09_014_025_tci Test Case ID
 * MmngrCheckBuffer_S2_A_TC_09_014_025
 * @subsection MmngrCheckBuffer_TC_09_014_025_rr Related Requirement(s)
 * \#276562, \#276736
 * @subsection MmngrCheckBuffer_TC_09_014_025_pp Prerequisite/Precondition
 * OSAL is initialized.
 * @subsection MmngrCheckBuffer_TC_09_014_025_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrCheckBuffer with abnormal condition in OSAL_MMNGR_ALLOC_MODE_FREE_LIST_PROT mode.
 * - Test09_014_025: buffer has already been deallocated
 * @subsection MmngrCheckBuffer_TC_09_014_025_tpts Test Procedure/Test Steps
 * -# Call R_OSAL_MmngrOpen with bellow config:
 *  - config.memory_limit                = 4096
 *  - config.max_allowed_allocations     = 1
 *  - config.max_registered_monitors_cbs = 2
 *  - config.mode = OSAL_MMNGR_ALLOC_MODE_FREE_LIST_PROT.
 * -# Call R_OSAL_MmngrAlloc with valid parameter
 * -# Deallocate buffer_obj by using R_OSAL_MmngrDealloc.
 * -# Call R_OSAL_MmngrCheckBuffer with buffer_object has already been deallocated
 * -# Call R_OSAL_MmngrClose to close the memory manager.
 * @subsection MmngrCheckBuffer_TC_09_014_025_ereb Expected Result/Behavior
 * -# The return value of R_OSAL_MmngrOpen is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrAlloc is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrDealloc is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrCheckBuffer is OSAL_RETURN_HANDLE.
 * -# The return value of R_OSAL_MmngrClose is OSAL_RETURN_OK.
 * @subsection MmngrCheckBuffer_TC_09_014_025_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrCheckBuffer_TC_09_014_025
 */
// [MmngrCheckBuffer_TC_09_014_025]
TEST_F(MemoryApiTest, MmngrCheckBuffer_TC_09_014_025)
{
    // Test09_014_025
    // @brief: abnormal case: buffer has already been deallocated
    config.memory_limit                = 4096;
    config.max_allowed_allocations     = 1;
    config.max_registered_monitors_cbs = 2;
    config.mode = OSAL_MMNGR_ALLOC_MODE_FREE_LIST_PROT;

    EXPECT_EQ(R_OSAL_MmngrOpen(&config, &hndl_mmngr), OSAL_RETURN_OK) << "Test09_014_025 failed";
    EXPECT_NE(hndl_mmngr,OSAL_MEMORY_MANAGER_HANDLE_INVALID) << "Test09_014_025 failed";
    size = 128;
    alignment = 64;
    EXPECT_EQ(R_OSAL_MmngrAlloc(hndl_mmngr, size, alignment, &buffer_obj), OSAL_RETURN_OK) << "Test09_014_025 failed";
    EXPECT_NE(buffer_obj,OSAL_MEMORY_BUFFER_HANDLE_INVALID) << "Test09_014_025 failed";
    EXPECT_EQ(R_OSAL_MmngrDealloc(hndl_mmngr, buffer_obj), OSAL_RETURN_OK) << "Test09_014_025 failed";
    EXPECT_EQ(R_OSAL_MmngrCheckBuffer(buffer_obj), OSAL_RETURN_HANDLE) << "Test09_014_025 failed";
    EXPECT_EQ(R_OSAL_MmngrClose(hndl_mmngr), OSAL_RETURN_OK) << "Test09_014_025 failed";
    hndl_mmngr = OSAL_MEMORY_MANAGER_HANDLE_INVALID;
    buffer_obj = OSAL_MEMORY_BUFFER_HANDLE_INVALID;
}
// [MmngrCheckBuffer_TC_09_014_025]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrCheckBuffer_TC_09_014_026 MemoryApiTest.MmngrCheckBuffer_TC_09_014_026
 * @subsection MmngrCheckBuffer_TC_09_014_026_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrCheckBuffer_TC_09_014_026_tci Test Case ID
 * MmngrCheckBuffer_S4_A_TC_09_014_026
 * @subsection MmngrCheckBuffer_TC_09_014_026_rr Related Requirement(s)
 * \#276562, \#276736
 * @subsection MmngrCheckBuffer_TC_09_014_026_pp Prerequisite/Precondition
 * OSAL is initialized.
 * @subsection MmngrCheckBuffer_TC_09_014_026_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrCheckBuffer with abnormal condition in OSAL_MMNGR_ALLOC_MODE_STACK mode.
 * - Test09_014_026: buffer_obj->mmngr_owner_hndl->p_ptr_self is invalid (NULL)
 * @subsection MmngrCheckBuffer_TC_09_014_026_tpts Test Procedure/Test Steps
 * -# Call R_OSAL_MmngrOpen with bellow config:
 *  - config.memory_limit                = 4096
 *  - config.max_allowed_allocations     = 1
 *  - config.max_registered_monitors_cbs = 2
 *  - config.mode = OSAL_MMNGR_ALLOC_MODE_STACK.
 * -# Call R_OSAL_MmngrAlloc with valid parameter
 * -# Call R_OSAL_MmngrCheckBuffer with buffer_obj->mmngr_owner_hndl->p_ptr_self is invalid (NULL)
 * -# Deallocate buffer_obj by using R_OSAL_MmngrDealloc.
 * -# Call R_OSAL_MmngrClose to close the memory manager.
 * @subsection MmngrCheckBuffer_TC_09_014_026_ereb Expected Result/Behavior
 * -# The return value of R_OSAL_MmngrOpen is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrAlloc is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrCheckBuffer is OSAL_RETURN_HANDLE.
 * -# The return value of R_OSAL_MmngrDealloc is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrClose is OSAL_RETURN_OK.
 * @subsection MmngrCheckBuffer_TC_09_014_026_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrCheckBuffer_TC_09_014_026
 */
// [MmngrCheckBuffer_TC_09_014_026]
TEST_F(MemoryApiTest, MmngrCheckBuffer_TC_09_014_026)
{
    void* bk_ptr_self;

    // Test09_014_026
    // @brief: abnormal case: buffer_obj->mmngr_owner_hndl->p_ptr_self is invalid (NULL)
    config.memory_limit                = 4096;
    config.max_allowed_allocations     = 1;
    config.max_registered_monitors_cbs = 2;
    config.mode = OSAL_MMNGR_ALLOC_MODE_STACK;

    EXPECT_EQ(R_OSAL_MmngrOpen(&config, &hndl_mmngr), OSAL_RETURN_OK) << "Test09_014_026 failed";
    EXPECT_NE(hndl_mmngr,OSAL_MEMORY_MANAGER_HANDLE_INVALID) << "Test09_014_026 failed";
    size = 128;
    alignment = 64;
    EXPECT_EQ(R_OSAL_MmngrAlloc(hndl_mmngr, size, alignment, &buffer_obj), OSAL_RETURN_OK) << "Test09_014_026 failed";
    EXPECT_NE(buffer_obj,OSAL_MEMORY_BUFFER_HANDLE_INVALID) << "Test09_014_026 failed";
    bk_ptr_self = buffer_obj->mmngr_owner_hndl->p_ptr_self;
    buffer_obj->mmngr_owner_hndl->p_ptr_self = NULL;
    EXPECT_EQ(R_OSAL_MmngrCheckBuffer(buffer_obj), OSAL_RETURN_HANDLE) << "Test09_014_026 failed";
    buffer_obj->mmngr_owner_hndl->p_ptr_self = bk_ptr_self;
    EXPECT_EQ(R_OSAL_MmngrDealloc(hndl_mmngr, buffer_obj), OSAL_RETURN_OK) << "Test09_014_026 failed";
    EXPECT_EQ(R_OSAL_MmngrClose(hndl_mmngr), OSAL_RETURN_OK) << "Test09_014_026 failed";
    hndl_mmngr = OSAL_MEMORY_MANAGER_HANDLE_INVALID;
    buffer_obj = OSAL_MEMORY_BUFFER_HANDLE_INVALID;
}
// [MmngrCheckBuffer_TC_09_014_026]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrCheckBuffer_TC_09_014_027 MemoryApiTest.MmngrCheckBuffer_TC_09_014_027
 * @subsection MmngrCheckBuffer_TC_09_014_027_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrCheckBuffer_TC_09_014_027_tci Test Case ID
 * MmngrCheckBuffer_S4_A_TC_09_014_027
 * @subsection MmngrCheckBuffer_TC_09_014_027_rr Related Requirement(s)
 * \#276562, \#276736
 * @subsection MmngrCheckBuffer_TC_09_014_027_pp Prerequisite/Precondition
 * OSAL is initialized.
 * @subsection MmngrCheckBuffer_TC_09_014_027_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrCheckBuffer with abnormal condition in OSAL_MMNGR_ALLOC_MODE_STACK_PROT mode.
 * - Test09_014_027: buffer_obj->mmngr_owner_hndl->p_ptr_self is invalid (NULL)
 * @subsection MmngrCheckBuffer_TC_09_014_027_tpts Test Procedure/Test Steps
 * -# Call R_OSAL_MmngrOpen with bellow config:
 *  - config.memory_limit                = 4096
 *  - config.max_allowed_allocations     = 1
 *  - config.max_registered_monitors_cbs = 2
 *  - config.mode = OSAL_MMNGR_ALLOC_MODE_STACK_PROT.
 * -# Call R_OSAL_MmngrAlloc with valid parameter
 * -# Call R_OSAL_MmngrCheckBuffer with buffer_obj->mmngr_owner_hndl->p_ptr_self is invalid (NULL)
 * -# Deallocate buffer_obj by using R_OSAL_MmngrDealloc.
 * -# Call R_OSAL_MmngrClose to close the memory manager.
 * @subsection MmngrCheckBuffer_TC_09_014_027_ereb Expected Result/Behavior
 * -# The return value of R_OSAL_MmngrOpen is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrAlloc is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrCheckBuffer is OSAL_RETURN_HANDLE.
 * -# The return value of R_OSAL_MmngrDealloc is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrClose is OSAL_RETURN_OK.
 * @subsection MmngrCheckBuffer_TC_09_014_027_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrCheckBuffer_TC_09_014_027
 */
// [MmngrCheckBuffer_TC_09_014_027]
TEST_F(MemoryApiTest, MmngrCheckBuffer_TC_09_014_027)
{
    void* bk_ptr_self;

    // Test09_014_027
    // @brief: abnormal case: buffer_obj->mmngr_owner_hndl->p_ptr_self is invalid (NULL)
    config.memory_limit                = 4096;
    config.max_allowed_allocations     = 1;
    config.max_registered_monitors_cbs = 2;
    config.mode = OSAL_MMNGR_ALLOC_MODE_STACK_PROT;

    EXPECT_EQ(R_OSAL_MmngrOpen(&config, &hndl_mmngr), OSAL_RETURN_OK) << "Test09_014_027 failed";
    EXPECT_NE(hndl_mmngr,OSAL_MEMORY_MANAGER_HANDLE_INVALID) << "Test09_014_027 failed";
    size = 128;
    alignment = 64;
    EXPECT_EQ(R_OSAL_MmngrAlloc(hndl_mmngr, size, alignment, &buffer_obj), OSAL_RETURN_OK) << "Test09_014_027 failed";
    EXPECT_NE(buffer_obj,OSAL_MEMORY_BUFFER_HANDLE_INVALID) << "Test09_014_027 failed";
    bk_ptr_self = buffer_obj->mmngr_owner_hndl->p_ptr_self;
    buffer_obj->mmngr_owner_hndl->p_ptr_self = NULL;
    EXPECT_EQ(R_OSAL_MmngrCheckBuffer(buffer_obj), OSAL_RETURN_HANDLE) << "Test09_014_027 failed";
    buffer_obj->mmngr_owner_hndl->p_ptr_self = bk_ptr_self;
    EXPECT_EQ(R_OSAL_MmngrDealloc(hndl_mmngr, buffer_obj), OSAL_RETURN_OK) << "Test09_014_027 failed";
    EXPECT_EQ(R_OSAL_MmngrClose(hndl_mmngr), OSAL_RETURN_OK) << "Test09_014_027 failed";
    hndl_mmngr = OSAL_MEMORY_MANAGER_HANDLE_INVALID;
    buffer_obj = OSAL_MEMORY_BUFFER_HANDLE_INVALID;
}
// [MmngrCheckBuffer_TC_09_014_027]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrCheckBuffer_TC_09_014_028 MemoryApiTest.MmngrCheckBuffer_TC_09_014_028
 * @subsection MmngrCheckBuffer_TC_09_014_028_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrCheckBuffer_TC_09_014_028_tci Test Case ID
 * MmngrCheckBuffer_S4_A_TC_09_014_028
 * @subsection MmngrCheckBuffer_TC_09_014_028_rr Related Requirement(s)
 * \#276562, \#276736
 * @subsection MmngrCheckBuffer_TC_09_014_028_pp Prerequisite/Precondition
 * OSAL is initialized.
 * @subsection MmngrCheckBuffer_TC_09_014_028_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrCheckBuffer with abnormal condition in OSAL_MMNGR_ALLOC_MODE_FREE_LIST mode.
 * - Test09_014_028: buffer_obj->mmngr_owner_hndl->p_ptr_self is invalid (NULL)
 * @subsection MmngrCheckBuffer_TC_09_014_028_tpts Test Procedure/Test Steps
 * -# Call R_OSAL_MmngrOpen with bellow config:
 *  - config.memory_limit                = 4096
 *  - config.max_allowed_allocations     = 1
 *  - config.max_registered_monitors_cbs = 2
 *  - config.mode = OSAL_MMNGR_ALLOC_MODE_FREE_LIST.
 * -# Call R_OSAL_MmngrAlloc with valid parameter
 * -# Call R_OSAL_MmngrCheckBuffer with buffer_obj->mmngr_owner_hndl->p_ptr_self is invalid (NULL)
 * -# Deallocate buffer_obj by using R_OSAL_MmngrDealloc.
 * -# Call R_OSAL_MmngrClose to close the memory manager.
 * @subsection MmngrCheckBuffer_TC_09_014_028_ereb Expected Result/Behavior
 * -# The return value of R_OSAL_MmngrOpen is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrAlloc is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrCheckBuffer is OSAL_RETURN_HANDLE.
 * -# The return value of R_OSAL_MmngrDealloc is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrClose is OSAL_RETURN_OK.
 * @subsection MmngrCheckBuffer_TC_09_014_028_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrCheckBuffer_TC_09_014_028
 */
// [MmngrCheckBuffer_TC_09_014_028]
TEST_F(MemoryApiTest, MmngrCheckBuffer_TC_09_014_028)
{
    void* bk_ptr_self;

    // Test09_014_028
    // @brief: abnormal case: buffer_obj->mmngr_owner_hndl->p_ptr_self is invalid (NULL)
    config.memory_limit                = 4096;
    config.max_allowed_allocations     = 1;
    config.max_registered_monitors_cbs = 2;
    config.mode = OSAL_MMNGR_ALLOC_MODE_FREE_LIST;

    EXPECT_EQ(R_OSAL_MmngrOpen(&config, &hndl_mmngr), OSAL_RETURN_OK) << "Test09_014_028 failed";
    EXPECT_NE(hndl_mmngr,OSAL_MEMORY_MANAGER_HANDLE_INVALID) << "Test09_014_028 failed";
    size = 128;
    alignment = 64;
    EXPECT_EQ(R_OSAL_MmngrAlloc(hndl_mmngr, size, alignment, &buffer_obj), OSAL_RETURN_OK) << "Test09_014_028 failed";
    EXPECT_NE(buffer_obj,OSAL_MEMORY_BUFFER_HANDLE_INVALID) << "Test09_014_028 failed";
    bk_ptr_self = buffer_obj->mmngr_owner_hndl->p_ptr_self;
    buffer_obj->mmngr_owner_hndl->p_ptr_self = NULL;
    EXPECT_EQ(R_OSAL_MmngrCheckBuffer(buffer_obj), OSAL_RETURN_HANDLE) << "Test09_014_028 failed";
    buffer_obj->mmngr_owner_hndl->p_ptr_self = bk_ptr_self;
    EXPECT_EQ(R_OSAL_MmngrDealloc(hndl_mmngr, buffer_obj), OSAL_RETURN_OK) << "Test09_014_028 failed";
    EXPECT_EQ(R_OSAL_MmngrClose(hndl_mmngr), OSAL_RETURN_OK) << "Test09_014_028 failed";
    hndl_mmngr = OSAL_MEMORY_MANAGER_HANDLE_INVALID;
    buffer_obj = OSAL_MEMORY_BUFFER_HANDLE_INVALID;
}
// [MmngrCheckBuffer_TC_09_014_028]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrCheckBuffer_TC_09_014_029 MemoryApiTest.MmngrCheckBuffer_TC_09_014_029
 * @subsection MmngrCheckBuffer_TC_09_014_029_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrCheckBuffer_TC_09_014_029_tci Test Case ID
 * MmngrCheckBuffer_S4_A_TC_09_014_029
 * @subsection MmngrCheckBuffer_TC_09_014_029_rr Related Requirement(s)
 * \#276562, \#276736
 * @subsection MmngrCheckBuffer_TC_09_014_029_pp Prerequisite/Precondition
 * OSAL is initialized.
 * @subsection MmngrCheckBuffer_TC_09_014_029_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrCheckBuffer with abnormal condition in OSAL_MMNGR_ALLOC_MODE_FREE_LIST_PROT mode.
 * - Test09_014_029: buffer_obj->mmngr_owner_hndl->p_ptr_self is invalid (NULL)
 * @subsection MmngrCheckBuffer_TC_09_014_029_tpts Test Procedure/Test Steps
 * -# Call R_OSAL_MmngrOpen with bellow config:
 *  - config.memory_limit                = 4096
 *  - config.max_allowed_allocations     = 1
 *  - config.max_registered_monitors_cbs = 2
 *  - config.mode = OSAL_MMNGR_ALLOC_MODE_FREE_LIST_PROT.
 * -# Call R_OSAL_MmngrAlloc with valid parameter
 * -# Call R_OSAL_MmngrCheckBuffer with buffer_obj->mmngr_owner_hndl->p_ptr_self is invalid (NULL)
 * -# Deallocate buffer_obj by using R_OSAL_MmngrDealloc.
 * -# Call R_OSAL_MmngrClose to close the memory manager.
 * @subsection MmngrCheckBuffer_TC_09_014_029_ereb Expected Result/Behavior
 * -# The return value of R_OSAL_MmngrOpen is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrAlloc is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrCheckBuffer is OSAL_RETURN_HANDLE.
 * -# The return value of R_OSAL_MmngrDealloc is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrClose is OSAL_RETURN_OK.
 * @subsection MmngrCheckBuffer_TC_09_014_029_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrCheckBuffer_TC_09_014_029
 */
// [MmngrCheckBuffer_TC_09_014_029]
TEST_F(MemoryApiTest, MmngrCheckBuffer_TC_09_014_029)
{
    void* bk_ptr_self;

    // Test09_014_029
    // @brief: abnormal case: buffer_obj->mmngr_owner_hndl->p_ptr_self is invalid (NULL)
    config.memory_limit                = 4096;
    config.max_allowed_allocations     = 1;
    config.max_registered_monitors_cbs = 2;
    config.mode = OSAL_MMNGR_ALLOC_MODE_FREE_LIST_PROT;

    EXPECT_EQ(R_OSAL_MmngrOpen(&config, &hndl_mmngr), OSAL_RETURN_OK) << "Test09_014_029 failed";
    EXPECT_NE(hndl_mmngr,OSAL_MEMORY_MANAGER_HANDLE_INVALID) << "Test09_014_029 failed";
    size = 128;
    alignment = 64;
    EXPECT_EQ(R_OSAL_MmngrAlloc(hndl_mmngr, size, alignment, &buffer_obj), OSAL_RETURN_OK) << "Test09_014_029 failed";
    EXPECT_NE(buffer_obj,OSAL_MEMORY_BUFFER_HANDLE_INVALID) << "Test09_014_029 failed";
    bk_ptr_self = buffer_obj->mmngr_owner_hndl->p_ptr_self;
    buffer_obj->mmngr_owner_hndl->p_ptr_self = NULL;
    EXPECT_EQ(R_OSAL_MmngrCheckBuffer(buffer_obj), OSAL_RETURN_HANDLE) << "Test09_014_029 failed";
    buffer_obj->mmngr_owner_hndl->p_ptr_self = bk_ptr_self;
    EXPECT_EQ(R_OSAL_MmngrDealloc(hndl_mmngr, buffer_obj), OSAL_RETURN_OK) << "Test09_014_029 failed";
    EXPECT_EQ(R_OSAL_MmngrClose(hndl_mmngr), OSAL_RETURN_OK) << "Test09_014_029 failed";
    hndl_mmngr = OSAL_MEMORY_MANAGER_HANDLE_INVALID;
    buffer_obj = OSAL_MEMORY_BUFFER_HANDLE_INVALID;
}
// [MmngrCheckBuffer_TC_09_014_029]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrCheckBuffer_TC_09_014_030 MemoryApiTest.MmngrCheckBuffer_TC_09_014_030
 * @subsection MmngrCheckBuffer_TC_09_014_030_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrCheckBuffer_TC_09_014_030_tci Test Case ID
 * MmngrCheckBuffer_S4_A_TC_09_014_030
 * @subsection MmngrCheckBuffer_TC_09_014_030_rr Related Requirement(s)
 * \#276562, \#276736
 * @subsection MmngrCheckBuffer_TC_09_014_030_pp Prerequisite/Precondition
 * OSAL is initialized.
 * @subsection MmngrCheckBuffer_TC_09_014_030_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrCheckBuffer with abnormal condition in OSAL_MMNGR_ALLOC_MODE_STACK mode.
 * - Test09_014_030: hndl_mmngr->p_ptr_self is invalid (NULL)
 * @subsection MmngrCheckBuffer_TC_09_014_030_tpts Test Procedure/Test Steps
 * -# Call R_OSAL_MmngrOpen with bellow config:
 *  - config.memory_limit                = 4096
 *  - config.max_allowed_allocations     = 1
 *  - config.max_registered_monitors_cbs = 2
 *  - config.mode = OSAL_MMNGR_ALLOC_MODE_STACK.
 * -# Call R_OSAL_MmngrAlloc with valid parameter
 * -# Call R_OSAL_MmngrCheckBuffer with hndl_mmngr->p_ptr_self is invalid (NULL)
 * -# Deallocate buffer_obj by using R_OSAL_MmngrDealloc.
 * -# Call R_OSAL_MmngrClose to close the memory manager.
 * @subsection MmngrCheckBuffer_TC_09_014_030_ereb Expected Result/Behavior
 * -# The return value of R_OSAL_MmngrOpen is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrAlloc is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrCheckBuffer is OSAL_RETURN_HANDLE.
 * -# The return value of R_OSAL_MmngrDealloc is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrClose is OSAL_RETURN_OK.
 * @subsection MmngrCheckBuffer_TC_09_014_030_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrCheckBuffer_TC_09_014_030
 */
// [MmngrCheckBuffer_TC_09_014_030]
TEST_F(MemoryApiTest, MmngrCheckBuffer_TC_09_014_030)
{
    void* bk_ptr_self;

    // Test09_014_030
    // @brief: abnormal case: hndl_mmngr->p_ptr_self is invalid (NULL)
    config.memory_limit                = 4096;
    config.max_allowed_allocations     = 1;
    config.max_registered_monitors_cbs = 2;
    config.mode = OSAL_MMNGR_ALLOC_MODE_STACK;

    EXPECT_EQ(R_OSAL_MmngrOpen(&config, &hndl_mmngr), OSAL_RETURN_OK) << "Test09_014_030 failed";
    EXPECT_NE(hndl_mmngr,OSAL_MEMORY_MANAGER_HANDLE_INVALID) << "Test09_014_030 failed";
    size = 128;
    alignment = 64;
    EXPECT_EQ(R_OSAL_MmngrAlloc(hndl_mmngr, size, alignment, &buffer_obj), OSAL_RETURN_OK) << "Test09_014_030 failed";
    EXPECT_NE(buffer_obj,OSAL_MEMORY_BUFFER_HANDLE_INVALID) << "Test09_014_030 failed";
    bk_ptr_self = hndl_mmngr->p_ptr_self;
    hndl_mmngr->p_ptr_self = NULL;
    EXPECT_EQ(R_OSAL_MmngrCheckBuffer(buffer_obj), OSAL_RETURN_HANDLE) << "Test09_014_030 failed";
    hndl_mmngr->p_ptr_self = bk_ptr_self;
    EXPECT_EQ(R_OSAL_MmngrDealloc(hndl_mmngr, buffer_obj), OSAL_RETURN_OK) << "Test09_014_030 failed";
    EXPECT_EQ(R_OSAL_MmngrClose(hndl_mmngr), OSAL_RETURN_OK) << "Test09_014_030 failed";
    hndl_mmngr = OSAL_MEMORY_MANAGER_HANDLE_INVALID;
    buffer_obj = OSAL_MEMORY_BUFFER_HANDLE_INVALID;
}
// [MmngrCheckBuffer_TC_09_014_030]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrCheckBuffer_TC_09_014_031 MemoryApiTest.MmngrCheckBuffer_TC_09_014_031
 * @subsection MmngrCheckBuffer_TC_09_014_031_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrCheckBuffer_TC_09_014_031_tci Test Case ID
 * MmngrCheckBuffer_S4_A_TC_09_014_031
 * @subsection MmngrCheckBuffer_TC_09_014_031_rr Related Requirement(s)
 * \#276562, \#276736
 * @subsection MmngrCheckBuffer_TC_09_014_031_pp Prerequisite/Precondition
 * OSAL is initialized.
 * @subsection MmngrCheckBuffer_TC_09_014_031_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrCheckBuffer with abnormal condition in OSAL_MMNGR_ALLOC_MODE_STACK_PROT mode.
 * - Test09_014_031: hndl_mmngr->p_ptr_self is invalid (NULL)
 * @subsection MmngrCheckBuffer_TC_09_014_031_tpts Test Procedure/Test Steps
 * -# Call R_OSAL_MmngrOpen with bellow config:
 *  - config.memory_limit                = 4096
 *  - config.max_allowed_allocations     = 1
 *  - config.max_registered_monitors_cbs = 2
 *  - config.mode = OSAL_MMNGR_ALLOC_MODE_STACK_PROT.
 * -# Call R_OSAL_MmngrAlloc with valid parameter
 * -# Call R_OSAL_MmngrCheckBuffer with hndl_mmngr->p_ptr_self is invalid (NULL)
 * -# Deallocate buffer_obj by using R_OSAL_MmngrDealloc.
 * -# Call R_OSAL_MmngrClose to close the memory manager.
 * @subsection MmngrCheckBuffer_TC_09_014_031_ereb Expected Result/Behavior
 * -# The return value of R_OSAL_MmngrOpen is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrAlloc is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrCheckBuffer is OSAL_RETURN_HANDLE.
 * -# The return value of R_OSAL_MmngrDealloc is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrClose is OSAL_RETURN_OK.
 * @subsection MmngrCheckBuffer_TC_09_014_031_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrCheckBuffer_TC_09_014_031
 */
// [MmngrCheckBuffer_TC_09_014_031]
TEST_F(MemoryApiTest, MmngrCheckBuffer_TC_09_014_031)
{
    void* bk_ptr_self;

    // Test09_014_031
    // @brief: abnormal case: hndl_mmngr->p_ptr_self is invalid (NULL)
    config.memory_limit                = 4096;
    config.max_allowed_allocations     = 1;
    config.max_registered_monitors_cbs = 2;
    config.mode = OSAL_MMNGR_ALLOC_MODE_STACK_PROT;

    EXPECT_EQ(R_OSAL_MmngrOpen(&config, &hndl_mmngr), OSAL_RETURN_OK) << "Test09_014_031 failed";
    EXPECT_NE(hndl_mmngr,OSAL_MEMORY_MANAGER_HANDLE_INVALID) << "Test09_014_031 failed";
    size = 128;
    alignment = 64;
    EXPECT_EQ(R_OSAL_MmngrAlloc(hndl_mmngr, size, alignment, &buffer_obj), OSAL_RETURN_OK) << "Test09_014_031 failed";
    EXPECT_NE(buffer_obj,OSAL_MEMORY_BUFFER_HANDLE_INVALID) << "Test09_014_031 failed";
    bk_ptr_self = hndl_mmngr->p_ptr_self;
    hndl_mmngr->p_ptr_self = NULL;
    EXPECT_EQ(R_OSAL_MmngrCheckBuffer(buffer_obj), OSAL_RETURN_HANDLE) << "Test09_014_031 failed";
    hndl_mmngr->p_ptr_self = bk_ptr_self;
    EXPECT_EQ(R_OSAL_MmngrDealloc(hndl_mmngr, buffer_obj), OSAL_RETURN_OK) << "Test09_014_031 failed";
    EXPECT_EQ(R_OSAL_MmngrClose(hndl_mmngr), OSAL_RETURN_OK) << "Test09_014_031 failed";
    hndl_mmngr = OSAL_MEMORY_MANAGER_HANDLE_INVALID;
    buffer_obj = OSAL_MEMORY_BUFFER_HANDLE_INVALID;
}
// [MmngrCheckBuffer_TC_09_014_031]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrCheckBuffer_TC_09_014_032 MemoryApiTest.MmngrCheckBuffer_TC_09_014_032
 * @subsection MmngrCheckBuffer_TC_09_014_032_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrCheckBuffer_TC_09_014_032_tci Test Case ID
 * MmngrCheckBuffer_S4_A_TC_09_014_032
 * @subsection MmngrCheckBuffer_TC_09_014_032_rr Related Requirement(s)
 * \#276562, \#276736
 * @subsection MmngrCheckBuffer_TC_09_014_032_pp Prerequisite/Precondition
 * OSAL is initialized.
 * @subsection MmngrCheckBuffer_TC_09_014_032_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrCheckBuffer with abnormal condition in OSAL_MMNGR_ALLOC_MODE_FREE_LIST mode.
 * - Test09_014_031: hndl_mmngr->p_ptr_self is invalid (NULL)
 * @subsection MmngrCheckBuffer_TC_09_014_032_tpts Test Procedure/Test Steps
 * -# Call R_OSAL_MmngrOpen with bellow config:
 *  - config.memory_limit                = 4096
 *  - config.max_allowed_allocations     = 1
 *  - config.max_registered_monitors_cbs = 2
 *  - config.mode = OSAL_MMNGR_ALLOC_MODE_FREE_LIST.
 * -# Call R_OSAL_MmngrAlloc with valid parameter
 * -# Call R_OSAL_MmngrCheckBuffer with hndl_mmngr->p_ptr_self is invalid (NULL)
 * -# Deallocate buffer_obj by using R_OSAL_MmngrDealloc.
 * -# Call R_OSAL_MmngrClose to close the memory manager.
 * @subsection MmngrCheckBuffer_TC_09_014_032_ereb Expected Result/Behavior
 * -# The return value of R_OSAL_MmngrOpen is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrAlloc is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrCheckBuffer is OSAL_RETURN_HANDLE.
 * -# The return value of R_OSAL_MmngrDealloc is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrClose is OSAL_RETURN_OK.
 * @subsection MmngrCheckBuffer_TC_09_014_032_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrCheckBuffer_TC_09_014_032
 */
// [MmngrCheckBuffer_TC_09_014_032]
TEST_F(MemoryApiTest, MmngrCheckBuffer_TC_09_014_032)
{
    void* bk_ptr_self;

    // Test09_014_031
    // @brief: abnormal case: hndl_mmngr->p_ptr_self is invalid (NULL)
    config.memory_limit                = 4096;
    config.max_allowed_allocations     = 1;
    config.max_registered_monitors_cbs = 2;
    config.mode = OSAL_MMNGR_ALLOC_MODE_FREE_LIST;

    EXPECT_EQ(R_OSAL_MmngrOpen(&config, &hndl_mmngr), OSAL_RETURN_OK) << "Test09_014_031 failed";
    EXPECT_NE(hndl_mmngr,OSAL_MEMORY_MANAGER_HANDLE_INVALID) << "Test09_014_031 failed";
    size = 128;
    alignment = 64;
    EXPECT_EQ(R_OSAL_MmngrAlloc(hndl_mmngr, size, alignment, &buffer_obj), OSAL_RETURN_OK) << "Test09_014_031 failed";
    EXPECT_NE(buffer_obj,OSAL_MEMORY_BUFFER_HANDLE_INVALID) << "Test09_014_031 failed";
    bk_ptr_self = hndl_mmngr->p_ptr_self;
    hndl_mmngr->p_ptr_self = NULL;
    EXPECT_EQ(R_OSAL_MmngrCheckBuffer(buffer_obj), OSAL_RETURN_HANDLE) << "Test09_014_031 failed";
    hndl_mmngr->p_ptr_self = bk_ptr_self;
    EXPECT_EQ(R_OSAL_MmngrDealloc(hndl_mmngr, buffer_obj), OSAL_RETURN_OK) << "Test09_014_031 failed";
    EXPECT_EQ(R_OSAL_MmngrClose(hndl_mmngr), OSAL_RETURN_OK) << "Test09_014_031 failed";
    hndl_mmngr = OSAL_MEMORY_MANAGER_HANDLE_INVALID;
    buffer_obj = OSAL_MEMORY_BUFFER_HANDLE_INVALID;
}
// [MmngrCheckBuffer_TC_09_014_032]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrCheckBuffer_TC_09_014_033 MemoryApiTest.MmngrCheckBuffer_TC_09_014_033
 * @subsection MmngrCheckBuffer_TC_09_014_033_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrCheckBuffer_TC_09_014_033_tci Test Case ID
 * MmngrCheckBuffer_S4_A_TC_09_014_033
 * @subsection MmngrCheckBuffer_TC_09_014_033_rr Related Requirement(s)
 * \#276562, \#276736
 * @subsection MmngrCheckBuffer_TC_09_014_033_pp Prerequisite/Precondition
 * OSAL is initialized.
 * @subsection MmngrCheckBuffer_TC_09_014_033_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrCheckBuffer with abnormal condition in OSAL_MMNGR_ALLOC_MODE_FREE_LIST_PROT mode.
 * - Test09_014_031: hndl_mmngr->p_ptr_self is invalid (NULL)
 * @subsection MmngrCheckBuffer_TC_09_014_033_tpts Test Procedure/Test Steps
 * -# Call R_OSAL_MmngrOpen with bellow config:
 *  - config.memory_limit                = 4096
 *  - config.max_allowed_allocations     = 1
 *  - config.max_registered_monitors_cbs = 2
 *  - config.mode = OSAL_MMNGR_ALLOC_MODE_FREE_LIST_PROT.
 * -# Call R_OSAL_MmngrAlloc with valid parameter
 * -# Call R_OSAL_MmngrCheckBuffer with hndl_mmngr->p_ptr_self is invalid (NULL)
 * -# Deallocate buffer_obj by using R_OSAL_MmngrDealloc.
 * -# Call R_OSAL_MmngrClose to close the memory manager.
 * @subsection MmngrCheckBuffer_TC_09_014_033_ereb Expected Result/Behavior
 * -# The return value of R_OSAL_MmngrOpen is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrAlloc is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrCheckBuffer is OSAL_RETURN_HANDLE.
 * -# The return value of R_OSAL_MmngrDealloc is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrClose is OSAL_RETURN_OK.
 * @subsection MmngrCheckBuffer_TC_09_014_033_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrCheckBuffer_TC_09_014_033
 */
// [MmngrCheckBuffer_TC_09_014_033]
TEST_F(MemoryApiTest, MmngrCheckBuffer_TC_09_014_033)
{
    void* bk_ptr_self;

    // Test09_014_031
    // @brief: abnormal case: hndl_mmngr->p_ptr_self is invalid (NULL)
    config.memory_limit                = 4096;
    config.max_allowed_allocations     = 1;
    config.max_registered_monitors_cbs = 2;
    config.mode = OSAL_MMNGR_ALLOC_MODE_FREE_LIST_PROT;

    EXPECT_EQ(R_OSAL_MmngrOpen(&config, &hndl_mmngr), OSAL_RETURN_OK) << "Test09_014_031 failed";
    EXPECT_NE(hndl_mmngr,OSAL_MEMORY_MANAGER_HANDLE_INVALID) << "Test09_014_031 failed";
    size = 128;
    alignment = 64;
    EXPECT_EQ(R_OSAL_MmngrAlloc(hndl_mmngr, size, alignment, &buffer_obj), OSAL_RETURN_OK) << "Test09_014_031 failed";
    EXPECT_NE(buffer_obj,OSAL_MEMORY_BUFFER_HANDLE_INVALID) << "Test09_014_031 failed";
    bk_ptr_self = hndl_mmngr->p_ptr_self;
    hndl_mmngr->p_ptr_self = NULL;
    EXPECT_EQ(R_OSAL_MmngrCheckBuffer(buffer_obj), OSAL_RETURN_HANDLE) << "Test09_014_031 failed";
    hndl_mmngr->p_ptr_self = bk_ptr_self;
    EXPECT_EQ(R_OSAL_MmngrDealloc(hndl_mmngr, buffer_obj), OSAL_RETURN_OK) << "Test09_014_031 failed";
    EXPECT_EQ(R_OSAL_MmngrClose(hndl_mmngr), OSAL_RETURN_OK) << "Test09_014_031 failed";
    hndl_mmngr = OSAL_MEMORY_MANAGER_HANDLE_INVALID;
    buffer_obj = OSAL_MEMORY_BUFFER_HANDLE_INVALID;
}
// [MmngrCheckBuffer_TC_09_014_033]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrDebugMmngrPrint_TC_09_015_001 MemoryApiTest.MmngrDebugMmngrPrint_TC_09_015_001
 * @subsection MmngrDebugMmngrPrint_TC_09_015_001_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrDebugMmngrPrint_TC_09_015_001_tci Test Case ID
 * MmngrDebugMmngrPrint_S3_N_TC_09_015_001
 * @subsection MmngrDebugMmngrPrint_TC_09_015_001_rr Related Requirement(s)
 * \#276572
 * @subsection MmngrDebugMmngrPrint_TC_09_015_001_pp Prerequisite/Precondition
 * OSAL is initialized and debug mode<br>
 * If not debug debug mode, The return value is OSAL_RETURN_UNSUPPORTED_OPERATION.
 * @subsection MmngrDebugMmngrPrint_TC_09_015_001_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrDebugMmngrPrint with normal condition.
 * - pre-process: open new memory manager 
 * - Test09_015_001: with all valid parameter.
 * - post-process: close memory manager
 * @subsection MmngrDebugMmngrPrint_TC_09_015_001_tpts Test Procedure/Test Steps
 * -# Call R_OSAL_MmngrOpen with bellow config:
 *  - config.memory_limit                = 4096
 *  - config.max_allowed_allocations     = 1
 *  - config.max_registered_monitors_cbs = 2
 *  - config.mode = OSAL_MMNGR_ALLOC_MODE_STACK 
 * -# Call R_OSAL_MmngrDebugMmngrPrint with valid paramater.
 * -# Call R_OSAL_MmngrClose to close memory handle.
 * @subsection MmngrDebugMmngrPrint_TC_09_015_001_ereb Expected Result/Behavior
 * -# The return of R_OSAL_MmngrOpen is OSAL_RETURN_OK.<br>
 * The returned handle is not OSAL_MEMORY_MANAGER_HANDLE_INVALID.
 * -# The return value of the R_OSAL_MmngrDebugMmngrPrint is OSAL_RETURN_OK in DEBUG mode or OSAL_RETURN_HANDLE_NOT_SUPPORTED in RELEASE mode.
 * -# The return value of R_OSAL_MmngrClose is OSAL_RETURN_OK.
 * @subsection MmngrDebugMmngrPrint_TC_09_015_001_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrDebugMmngrPrint_TC_09_015_001
 */
// [MmngrDebugMmngrPrint_TC_09_015_001]
TEST_F(MemoryApiTest, MmngrDebugMmngrPrint_TC_09_015_001)
{
    // pre-process: open memory manager
    config.memory_limit                = 4096;
    config.max_allowed_allocations     = 1;
    config.max_registered_monitors_cbs = 2;
    config.mode = OSAL_MMNGR_ALLOC_MODE_STACK;

    EXPECT_EQ(R_OSAL_MmngrOpen(&config, &hndl_mmngr), OSAL_RETURN_OK) << "pre-process failed";
    EXPECT_NE(hndl_mmngr,OSAL_MEMORY_MANAGER_HANDLE_INVALID) << "pre-process failed";

    // Test09_015_001 and 09_015_012
    // @brief: normal case:  all valid argument
    if(hndl_mmngr->p_print != NULL) //DEBUG mode
    {
        EXPECT_EQ(R_OSAL_MmngrDebugMmngrPrint(hndl_mmngr, stdout), OSAL_RETURN_OK) << "Test09_015_001 failed";
    }
    else //RELEASE mode
    {
        EXPECT_EQ(R_OSAL_MmngrDebugMmngrPrint(hndl_mmngr, stdout), OSAL_RETURN_HANDLE_NOT_SUPPORTED) << "Test09_015_012 failed";
    }

    // post-process: close memory manager
    EXPECT_EQ(R_OSAL_MmngrClose(hndl_mmngr), OSAL_RETURN_OK) << "post-process failed";
    hndl_mmngr = OSAL_MEMORY_MANAGER_HANDLE_INVALID;
}
// [MmngrDebugMmngrPrint_TC_09_015_001]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrDebugMmngrPrint_TC_09_015_002 MemoryApiTest.MmngrDebugMmngrPrint_TC_09_015_002
 * @subsection MmngrDebugMmngrPrint_TC_09_015_002_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrDebugMmngrPrint_TC_09_015_002_tci Test Case ID
 * MmngrDebugMmngrPrint_S3_N_TC_09_015_002
 * @subsection MmngrDebugMmngrPrint_TC_09_015_002_rr Related Requirement(s)
 * \#276572
 * @subsection MmngrDebugMmngrPrint_TC_09_015_002_pp Prerequisite/Precondition
 * OSAL is initialized and debug mode<br>
 * If not debug debug mode, The return value is OSAL_RETURN_UNSUPPORTED_OPERATION.
 * @subsection MmngrDebugMmngrPrint_TC_09_015_002_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrDebugMmngrPrint with normal condition.
 * - pre-process: open new memory manager 
 * - Test09_015_002: R_OSAL_MmngrAlloc -> R_OSAL_MmngrDebugMmngrPrint.
 * - post-process: close memory manager
 * @subsection MmngrDebugMmngrPrint_TC_09_015_002_tpts Test Procedure/Test Steps
 * -# Call R_OSAL_MmngrOpen with bellow config:
 *  - config.memory_limit                = 4096
 *  - config.max_allowed_allocations     = 1
 *  - config.max_registered_monitors_cbs = 2
 *  - config.mode = OSAL_MMNGR_ALLOC_MODE_STACK 
 * -# Call R_OSAL_MmngrAlloc to allocate a memory buffer.
 * -# Call R_OSAL_MmngrDebugMmngrPrint with valid parameter.
 * -# Call R_OSAL_MmngrDealloc to deallocate the allocated memory buffer.
 * -# Call R_OSAL_MmngrClose to close memory handle.
 * @subsection MmngrDebugMmngrPrint_TC_09_015_002_ereb Expected Result/Behavior
 * -# The return of R_OSAL_MmngrOpen is OSAL_RETURN_OK.<br>
 * The returned handle is not OSAL_MEMORY_MANAGER_HANDLE_INVALID.
 * -# The return value of R_OSAL_MmngrAlloc is OSAL_RETURN_OK.<br>
 * The return buffer is not OSAL_MEMORY_BUFFER_HANDLE_INVALID .
 * -# The return value of R_OSAL_MmngrDebugMmngrPrint is OSAL_RETURN_OK in DEBUG mode or OSAL_RETURN_HANDLE_NOT_SUPPORTED in RELEASE mode.
 * -# The return value of R_OSAL_MmngrDealloc is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrClose is OSAL_RETURN_OK.
 * @subsection MmngrDebugMmngrPrint_TC_09_015_002_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrDebugMmngrPrint_TC_09_015_002
 */
// [MmngrDebugMmngrPrint_TC_09_015_002]
TEST_F(MemoryApiTest, MmngrDebugMmngrPrint_TC_09_015_002)
{
    // pre-process: open memory manager
    config.memory_limit                = 4096;
    config.max_allowed_allocations     = 1;
    config.max_registered_monitors_cbs = 2;
    config.mode = OSAL_MMNGR_ALLOC_MODE_STACK;

    EXPECT_EQ(R_OSAL_MmngrOpen(&config, &hndl_mmngr), OSAL_RETURN_OK) << "pre-process failed";
    EXPECT_NE(hndl_mmngr,OSAL_MEMORY_MANAGER_HANDLE_INVALID) << "pre-process failed";

    // Test09_015_002 and 09_015_013
    // @brief: normal case:  R_OSAL_MmngrOpen -> R_OSAL_MmngrAlloc -> R_OSAL_MmngrDebugMmngrPrint
    size = 64;
    alignment = 64;

    EXPECT_EQ(R_OSAL_MmngrAlloc(hndl_mmngr, size, alignment, &buffer_obj), OSAL_RETURN_OK);
    EXPECT_NE(buffer_obj,OSAL_MEMORY_BUFFER_HANDLE_INVALID);
    if(hndl_mmngr->p_print != NULL) //DEBUG mode
    {
        EXPECT_EQ(R_OSAL_MmngrDebugMmngrPrint(hndl_mmngr, stdout), OSAL_RETURN_OK) << "Test09_015_002 failed";
    }
    else //RELEASE mode
    {
        EXPECT_EQ(R_OSAL_MmngrDebugMmngrPrint(hndl_mmngr, stdout), OSAL_RETURN_HANDLE_NOT_SUPPORTED) << "Test09_015_013 failed";
    }
    EXPECT_EQ(R_OSAL_MmngrDealloc(hndl_mmngr, buffer_obj), OSAL_RETURN_OK);
    buffer_obj = OSAL_MEMORY_BUFFER_HANDLE_INVALID;

    // post-process: close memory manager
    EXPECT_EQ(R_OSAL_MmngrClose(hndl_mmngr), OSAL_RETURN_OK) << "post-process failed";
    hndl_mmngr = OSAL_MEMORY_MANAGER_HANDLE_INVALID;
}
// [MmngrDebugMmngrPrint_TC_09_015_002]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrDebugMmngrPrint_TC_09_015_003 MemoryApiTest.MmngrDebugMmngrPrint_TC_09_015_003
 * @subsection MmngrDebugMmngrPrint_TC_09_015_003_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrDebugMmngrPrint_TC_09_015_003_tci Test Case ID
 * MmngrDebugMmngrPrint_S3_N_TC_09_015_003
 * @subsection MmngrDebugMmngrPrint_TC_09_015_003_rr Related Requirement(s)
 * \#276572
 * @subsection MmngrDebugMmngrPrint_TC_09_015_003_pp Prerequisite/Precondition
 * OSAL is initialized and debug mode<br>
 * If not debug debug mode, The return value is OSAL_RETURN_UNSUPPORTED_OPERATION.
 * @subsection MmngrDebugMmngrPrint_TC_09_015_003_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrDebugMmngrPrint with normal condition.
 * - pre-process: open new memory manager 
 * - Test09_015_003: R_OSAL_MmngrAlloc -> R_OSAL_MmngrDealloc -> R_OSAL_MmngrDebugMmngrPrint.
 * - post-process: close memory manager
 * @subsection MmngrDebugMmngrPrint_TC_09_015_003_tpts Test Procedure/Test Steps
 * -# Call R_OSAL_MmngrOpen with bellow config:
 *  - config.memory_limit                = 4096
 *  - config.max_allowed_allocations     = 1
 *  - config.max_registered_monitors_cbs = 2
 *  - config.mode = OSAL_MMNGR_ALLOC_MODE_STACK 
 * -# Call R_OSAL_MmngrAlloc to allocate a memory buffer.
 * -# Call R_OSAL_MmngrDealloc to deallocate the allocated memory buffer.
 * -# Call R_OSAL_MmngrDebugMmngrPrint with valid parameter.
 * -# Call R_OSAL_MmngrClose to close memory handle.
 * @subsection MmngrDebugMmngrPrint_TC_09_015_003_ereb Expected Result/Behavior
 * -# The return of R_OSAL_MmngrOpen is OSAL_RETURN_OK.<br>
 * The returned handle is not OSAL_MEMORY_MANAGER_HANDLE_INVALID.
 * -# The return value of R_OSAL_MmngrAlloc is OSAL_RETURN_OK.<br>
 * The return buffer is not OSAL_MEMORY_BUFFER_HANDLE_INVALID.
 * -# The return value of R_OSAL_MmngrDealloc is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrDebugMmngrPrint is OSAL_RETURN_OK in DEBUG mode or OSAL_RETURN_HANDLE_NOT_SUPPORTED in RELEASE mode.
 * -# The return value of R_OSAL_MmngrClose is OSAL_RETURN_OK.
 * @subsection MmngrDebugMmngrPrint_TC_09_015_003_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrDebugMmngrPrint_TC_09_015_003
 */
// [MmngrDebugMmngrPrint_TC_09_015_003]
TEST_F(MemoryApiTest, MmngrDebugMmngrPrint_TC_09_015_003)
{
    // pre-process: open memory manager
    config.memory_limit                = 4096;
    config.max_allowed_allocations     = 1;
    config.max_registered_monitors_cbs = 2;
    config.mode = OSAL_MMNGR_ALLOC_MODE_STACK;

    EXPECT_EQ(R_OSAL_MmngrOpen(&config, &hndl_mmngr), OSAL_RETURN_OK) << "pre-process failed";
    EXPECT_NE(hndl_mmngr,OSAL_MEMORY_MANAGER_HANDLE_INVALID) << "pre-process failed";

    // Test09_015_003 and 09_015_014
    // @brief: normal case:  R_OSAL_MmngrOpen -> R_OSAL_MmngrAlloc -> R_OSAL_MmngrDealloc -> R_OSAL_MmngrDebugMmngrPrint
    size = 64;
    alignment = 64;
    EXPECT_EQ(R_OSAL_MmngrAlloc(hndl_mmngr, size, alignment, &buffer_obj), OSAL_RETURN_OK);
    EXPECT_NE(buffer_obj,OSAL_MEMORY_BUFFER_HANDLE_INVALID);
    EXPECT_EQ(R_OSAL_MmngrDealloc(hndl_mmngr,buffer_obj), OSAL_RETURN_OK);
    if(hndl_mmngr->p_print != NULL) //DEBUG mode
    {
        EXPECT_EQ(R_OSAL_MmngrDebugMmngrPrint(hndl_mmngr, stdout), OSAL_RETURN_OK) << "Test09_015_003 failed";
    }
    else //RELEASE mode
    {
        EXPECT_EQ(R_OSAL_MmngrDebugMmngrPrint(hndl_mmngr, stdout), OSAL_RETURN_HANDLE_NOT_SUPPORTED) << "Test09_015_014 failed";
    }
    buffer_obj = OSAL_MEMORY_BUFFER_HANDLE_INVALID;

    // post-process: close memory manager
    EXPECT_EQ(R_OSAL_MmngrClose(hndl_mmngr), OSAL_RETURN_OK) << "post-process failed";
    hndl_mmngr = OSAL_MEMORY_MANAGER_HANDLE_INVALID;
}
// [MmngrDebugMmngrPrint_TC_09_015_003]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrDebugMmngrPrint_TC_09_015_004 MemoryApiTest.MmngrDebugMmngrPrint_TC_09_015_004
 * @subsection MmngrDebugMmngrPrint_TC_09_015_004_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrDebugMmngrPrint_TC_09_015_004_tci Test Case ID
 * MmngrDebugMmngrPrint_S3_N_TC_09_015_004
 * @subsection MmngrDebugMmngrPrint_TC_09_015_004_rr Related Requirement(s)
 * \#276572
 * @subsection MmngrDebugMmngrPrint_TC_09_015_004_pp Prerequisite/Precondition
 * OSAL is initialized and debug mode<br>
 * If not debug debug mode, The return value is OSAL_RETURN_UNSUPPORTED_OPERATION.
 * @subsection MmngrDebugMmngrPrint_TC_09_015_004_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrDebugMmngrPrint with normal condition.
 * - pre-process: open new memory manager 
 * - Test09_015_004: R_OSAL_MmngrRegisterMonitor -> R_OSAL_MmngrAlloc -> R_OSAL_MmngrDealloc -> R_OSAL_MmngrDebugMmngrPrint.
 * - post-process: close memory manager
 * @subsection MmngrDebugMmngrPrint_TC_09_015_004_tpts Test Procedure/Test Steps
 * -# Call R_OSAL_MmngrOpen with bellow config:
 *  - config.memory_limit                = 4096
 *  - config.max_allowed_allocations     = 1
 *  - config.max_registered_monitors_cbs = 2
 *  - config.mode = OSAL_MMNGR_ALLOC_MODE_STACK 
 * -# Call R_OSAL_MmngrRegisterMonitor with valid parameter.
 * -# Call R_OSAL_MmngrAlloc to allocate a memory buffer.
 * -# Call R_OSAL_MmngrDealloc to deallocate the allocated memory buffer.
 * -# Call R_OSAL_MmngrDebugMmngrPrint with valid parameter.
 * -# Call R_OSAL_MmngrClose to close memory handle.
 * @subsection MmngrDebugMmngrPrint_TC_09_015_004_ereb Expected Result/Behavior
 * -# The return of R_OSAL_MmngrOpen is OSAL_RETURN_OK.<br>
 * The returned handle is not OSAL_MEMORY_MANAGER_HANDLE_INVALID.
 * -# The return value of R_OSAL_MmngrRegisterMonitor is OSAL_RETURN_OK. 
 * -# The return value of R_OSAL_MmngrAlloc is OSAL_RETURN_OK.<br>
 * The return buffer is not OSAL_MEMORY_BUFFER_HANDLE_INVALID.
 * -# The return value of R_OSAL_MmngrDealloc is OSAL_RETURN_OK.  
 * -# The return value of R_OSAL_MmngrDebugMmngrPrint is OSAL_RETURN_OK in DEBUG mode or OSAL_RETURN_HANDLE_NOT_SUPPORTED in RELEASE mode.
 * -# The return value of R_OSAL_MmngrClose is OSAL_RETURN_OK.
 * @subsection MmngrDebugMmngrPrint_TC_09_015_004_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrDebugMmngrPrint_TC_09_015_004
 */
// [MmngrDebugMmngrPrint_TC_09_015_004]
TEST_F(MemoryApiTest, MmngrDebugMmngrPrint_TC_09_015_004)
{
    MockMonitorHelper  allocationEventMonitor;
    auto NormalmonitorCb = cb_wrapper<decltype(&MonitorHelper::NormalmonitorCb)>::make_cb<&MonitorHelper::NormalmonitorCb>();

    EXPECT_CALL(allocationEventMonitor, NormalmonitorCb(OSAL_MMNGR_EVENT_ALLOCATE, _, _)).Times(1);
    // pre-process: open memory manager
    config.memory_limit                = 4096;
    config.max_allowed_allocations     = 1;
    config.max_registered_monitors_cbs = 2;
    config.mode = OSAL_MMNGR_ALLOC_MODE_STACK;

    EXPECT_EQ(R_OSAL_MmngrOpen(&config, &hndl_mmngr), OSAL_RETURN_OK) << "pre-process failed";
    EXPECT_NE(hndl_mmngr,OSAL_MEMORY_MANAGER_HANDLE_INVALID) << "pre-process failed";

    // Test09_015_004 and 09_015_015
    // @brief: normal case:  R_OSAL_MmngrOpen -> R_OSAL_MmngrRegisterMonitor -> R_OSAL_MmngrAlloc -> R_OSAL_MmngrDealloc -> R_OSAL_MmngrDebugMmngrPrint
    EXPECT_EQ(R_OSAL_MmngrRegisterMonitor(hndl_mmngr, OSAL_MMNGR_EVENT_ALLOCATE, NormalmonitorCb, &allocationEventMonitor ), OSAL_RETURN_OK);
    size = 64;
    alignment = 64;
    EXPECT_EQ(R_OSAL_MmngrAlloc(hndl_mmngr, size, alignment, &buffer_obj), OSAL_RETURN_OK);
    EXPECT_NE(buffer_obj,OSAL_MEMORY_BUFFER_HANDLE_INVALID);
    EXPECT_EQ(R_OSAL_MmngrDealloc(hndl_mmngr,buffer_obj), OSAL_RETURN_OK);
    if(hndl_mmngr->p_print != NULL) //DEBUG mode
    {
        EXPECT_EQ(R_OSAL_MmngrDebugMmngrPrint(hndl_mmngr, stdout), OSAL_RETURN_OK) << "Test09_015_004 failed";
    }
    else //RELEASE mode
    {
        EXPECT_EQ(R_OSAL_MmngrDebugMmngrPrint(hndl_mmngr, stdout), OSAL_RETURN_HANDLE_NOT_SUPPORTED) << "Test09_015_015 failed";
    }
    buffer_obj = OSAL_MEMORY_BUFFER_HANDLE_INVALID;

    // post-process: close memory manager
    EXPECT_EQ(R_OSAL_MmngrClose(hndl_mmngr), OSAL_RETURN_OK) << "post-process failed";
    hndl_mmngr = OSAL_MEMORY_MANAGER_HANDLE_INVALID;
}
// [MmngrDebugMmngrPrint_TC_09_015_004]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrDebugMmngrPrint_TC_09_015_005 MemoryApiTest.MmngrDebugMmngrPrint_TC_09_015_005
 * @subsection MmngrDebugMmngrPrint_TC_09_015_005_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrDebugMmngrPrint_TC_09_015_005_tci Test Case ID
 * MmngrDebugMmngrPrint_S3_N_TC_09_015_005
 * @subsection MmngrDebugMmngrPrint_TC_09_015_005_rr Related Requirement(s)
 * \#276572
 * @subsection MmngrDebugMmngrPrint_TC_09_015_005_pp Prerequisite/Precondition
 * OSAL is initialized and debug mode<br>
 * If not debug debug mode, The return value is OSAL_RETURN_UNSUPPORTED_OPERATION.
 * @subsection MmngrDebugMmngrPrint_TC_09_015_005_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrDebugMmngrPrint with normal condition.
 * - pre-process: open new memory manager 
 * - Test09_015_005: R_OSAL_MmngrRegisterMonitor -> R_OSAL_MmngrAlloc -> R_OSAL_MmngrDebugMmngrPrint -> R_OSAL_MmngrDealloc.
 * - post-process: close memory manager
 * @subsection MmngrDebugMmngrPrint_TC_09_015_005_tpts Test Procedure/Test Steps
 * -# Call R_OSAL_MmngrOpen with bellow config:
 *  - config.memory_limit                = 4096
 *  - config.max_allowed_allocations     = 1
 *  - config.max_registered_monitors_cbs = 2
 *  - config.mode = OSAL_MMNGR_ALLOC_MODE_STACK 
 * -# Call R_OSAL_MmngrRegisterMonitor with valid parameter.
 * -# Call R_OSAL_MmngrAlloc to allocate a memory buffer.
 * -# Call R_OSAL_MmngrDebugMmngrPrint with valid parameter.
 * -# Call R_OSAL_MmngrDealloc to deallocate the allocated memory buffer.
 * -# Call R_OSAL_MmngrClose to close memory manager
 * @subsection MmngrDebugMmngrPrint_TC_09_015_005_ereb Expected Result/Behavior
 * -# The return of R_OSAL_MmngrOpen is OSAL_RETURN_OK.<br>
 * The returned handle is not OSAL_MEMORY_MANAGER_HANDLE_INVALID.
 * -# The return value of R_OSAL_MmngrRegisterMonitor is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrAlloc is OSAL_RETURN_OK.<br>
 * The return buffer is not OSAL_MEMORY_BUFFER_HANDLE_INVALID.
 * -# The return value of R_OSAL_MmngrDebugMmngrPrint is OSAL_RETURN_OK in DEBUG mode or OSAL_RETURN_HANDLE_NOT_SUPPORTED in RELEASE mode.
 * -# The return value of R_OSAL_MmngrDealloc is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrClose is OSAL_RETURN_OK.
 * @subsection MmngrDebugMmngrPrint_TC_09_015_005_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrDebugMmngrPrint_TC_09_015_005
 */
// [MmngrDebugMmngrPrint_TC_09_015_005]
TEST_F(MemoryApiTest, MmngrDebugMmngrPrint_TC_09_015_005)
{
    MockMonitorHelper  allocationEventMonitor;
    auto NormalmonitorCb = cb_wrapper<decltype(&MonitorHelper::NormalmonitorCb)>::make_cb<&MonitorHelper::NormalmonitorCb>();

    EXPECT_CALL(allocationEventMonitor, NormalmonitorCb(OSAL_MMNGR_EVENT_ALLOCATE, _, _)).Times(1);
    // pre-process: open memory manager
    config.memory_limit                = 4096;
    config.max_allowed_allocations     = 1;
    config.max_registered_monitors_cbs = 2;
    config.mode = OSAL_MMNGR_ALLOC_MODE_STACK;

    EXPECT_EQ(R_OSAL_MmngrOpen(&config, &hndl_mmngr), OSAL_RETURN_OK) << "pre-process failed";
    EXPECT_NE(hndl_mmngr,OSAL_MEMORY_MANAGER_HANDLE_INVALID) << "pre-process failed";

    // Test09_015_005 and 09_015_016
    // @brief: normal case:  R_OSAL_MmngrOpen -> R_OSAL_MmngrRegisterMonitor -> R_OSAL_MmngrAlloc -> R_OSAL_MmngrDebugMmngrPrint -> R_OSAL_MmngrDealloc
    EXPECT_EQ(R_OSAL_MmngrRegisterMonitor(hndl_mmngr, OSAL_MMNGR_EVENT_ALLOCATE, NormalmonitorCb, &allocationEventMonitor ), OSAL_RETURN_OK);
    size = 64;
    alignment = 64;
    EXPECT_EQ(R_OSAL_MmngrAlloc(hndl_mmngr, size, alignment, &buffer_obj), OSAL_RETURN_OK);
    EXPECT_NE(buffer_obj,OSAL_MEMORY_BUFFER_HANDLE_INVALID);
    if(hndl_mmngr->p_print != NULL) //DEBUG mode
    {
        EXPECT_EQ(R_OSAL_MmngrDebugMmngrPrint(hndl_mmngr, stdout), OSAL_RETURN_OK) << "Test09_015_005 failed";
    }
    else //RELEASE mode
    {
        EXPECT_EQ(R_OSAL_MmngrDebugMmngrPrint(hndl_mmngr, stdout), OSAL_RETURN_HANDLE_NOT_SUPPORTED) << "Test09_015_016 failed";
    }
    EXPECT_EQ(R_OSAL_MmngrDealloc(hndl_mmngr,buffer_obj), OSAL_RETURN_OK);
    buffer_obj = OSAL_MEMORY_BUFFER_HANDLE_INVALID;

    // post-process: close memory manager
    EXPECT_EQ(R_OSAL_MmngrClose(hndl_mmngr), OSAL_RETURN_OK) << "post-process failed";
    hndl_mmngr = OSAL_MEMORY_MANAGER_HANDLE_INVALID;
}
// [MmngrDebugMmngrPrint_TC_09_015_005]

 /**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrDebugMmngrPrint_TC_09_015_006 MemoryApiTest.MmngrDebugMmngrPrint_TC_09_015_006
 * @subsection MmngrDebugMmngrPrint_TC_09_015_006_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrDebugMmngrPrint_TC_09_015_006_tci Test Case ID
 * MmngrDebugMmngrPrint_S0_A_TC_09_015_006
 * @subsection MmngrDebugMmngrPrint_TC_09_015_006_rr Related Requirement(s)
 * \#276402, \#276572
 * @subsection MmngrDebugMmngrPrint_TC_09_015_006_pp Prerequisite/Precondition
 * OSAL is initialized and debug mode<br>
 * If not debug debug mode, The return value is OSAL_RETURN_UNSUPPORTED_OPERATION.
 * @subsection MmngrDebugMmngrPrint_TC_09_015_006_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrDebugMmngrPrint with abnormal condition.
 * - Test09_015_006: handle is NULL.
 * @subsection MmngrDebugMmngrPrint_TC_09_015_006_tpts Test Procedure/Test Steps
 * -# Call R_OSAL_MmngrDebugMmngrPrint with NULL handle.
 * @subsection MmngrDebugMmngrPrint_TC_09_015_006_ereb Expected Result/Behavior
 * -# The return value of R_OSAL_MmngrDebugMmngrPrint is OSAL_RETURN_HANDLE.
 * @subsection MmngrDebugMmngrPrint_TC_09_015_006_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrDebugMmngrPrint_TC_09_015_006
 */
// [MmngrDebugMmngrPrint_TC_09_015_006]
TEST_F(MemoryApiTest, MmngrDebugMmngrPrint_TC_09_015_006)
{
    // Test09_015_006
    // @brief: abnormal case:  hndl_mmngr = NULL
    // If the parameter is Abnormal, no case classification is performed.
    // Because OSAL_RETURN_HANDLE_NOT_SUPPORTED is determined when calling p_print
    EXPECT_EQ(R_OSAL_MmngrDebugMmngrPrint(OSAL_MEMORY_MANAGER_HANDLE_INVALID, stdout), OSAL_RETURN_HANDLE) << "Test09_015_006 failed";
}
// [MmngrDebugMmngrPrint_TC_09_015_006]

 /**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrDebugMmngrPrint_TC_09_015_007 MemoryApiTest.MmngrDebugMmngrPrint_TC_09_015_007
 * @subsection MmngrDebugMmngrPrint_TC_09_015_007_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrDebugMmngrPrint_TC_09_015_007_tci Test Case ID
 * MmngrDebugMmngrPrint_S4_A_TC_09_015_007
 * @subsection MmngrDebugMmngrPrint_TC_09_015_007_rr Related Requirement(s)
 * \#276572
 * @subsection MmngrDebugMmngrPrint_TC_09_015_007_pp Prerequisite/Precondition
 * OSAL is initialized and debug mode<br>
 * If not debug debug mode, The return value is OSAL_RETURN_UNSUPPORTED_OPERATION.
 * @subsection MmngrDebugMmngrPrint_TC_09_015_007_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrDebugMmngrPrint with abnormal condition.
 * - pre-process: open new memory manager 
 * - Test09_015_007: handle is not support to print handle information.
 * - post-process: close memory manager
 * @subsection MmngrDebugMmngrPrint_TC_09_015_007_tpts Test Procedure/Test Steps
 * -# Call R_OSAL_MmngrOpen with bellow config:
 *  - config.memory_limit                = 4096
 *  - config.max_allowed_allocations     = 1
 *  - config.max_registered_monitors_cbs = 2
 *  - config.mode = OSAL_MMNGR_ALLOC_MODE_STACK 
 * -# Malloc "tmp_hndl_mmngr" by using malloc function.
 * -# Store "hndl_mmngr->p_print" to "tmp_hndl_mmngr->p_print".<br>
 * Set "hndl_mmngr->p_print" to NULL. <br>
 * Call R_OSAL_MmngrDebugMmngrPrint with the changed buffer "hndl_mmngr".<br>
 * Re-assign "tmp_hndl_mmngr->p_print" to "hndl_mmngr->p_print".
 * -# Free buffer pointed by "tmp_hndl_mmngr".
 * -# Call R_OSAL_MmngrClose to close memory handle.
 * @subsection MmngrDebugMmngrPrint_TC_09_015_007_ereb Expected Result/Behavior
 * -# The return of R_OSAL_MmngrOpen is OSAL_RETURN_OK.<br>
 * The returned handle is not OSAL_MEMORY_MANAGER_HANDLE_INVALID.
 * -# Memory allocation succeeded (Pointer to buffer != Nullpointer)
 * -# The return value of R_OSAL_MmngrDebugMmngrPrint is OSAL_RETURN_HANDLE_NOT_SUPPORTED.
 * -# Allocated memory free succeeded.
 * -# The return value of R_OSAL_MmngrClose is OSAL_RETURN_OK.
 * @subsection MmngrDebugMmngrPrint_TC_09_015_007_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrDebugMmngrPrint_TC_09_015_007
 */
// [MmngrDebugMmngrPrint_TC_09_015_007]
TEST_F(MemoryApiTest, MmngrDebugMmngrPrint_TC_09_015_007)
{
    osal_memory_manager_handle_t tmp_hndl_mmngr;

    // pre-process: open memory manager
    config.memory_limit                = 4096;
    config.max_allowed_allocations     = 1;
    config.max_registered_monitors_cbs = 2;
    config.mode = OSAL_MMNGR_ALLOC_MODE_STACK;

    EXPECT_EQ(R_OSAL_MmngrOpen(&config, &hndl_mmngr), OSAL_RETURN_OK) << "pre-process failed";
    EXPECT_NE(hndl_mmngr,OSAL_MEMORY_MANAGER_HANDLE_INVALID) << "pre-process failed";

    // Test09_015_007
    // @brief: abnormal case:  hndl_mmngr.print = NULL
    // If the parameter is Abnormal, no case classification is performed.
    // Because OSAL_RETURN_HANDLE_NOT_SUPPORTED is determined when calling p_print
    tmp_hndl_mmngr = (osal_memory_manager_handle_t)malloc (sizeof(st_osal_memory_manager_obj));
    EXPECT_NE(tmp_hndl_mmngr, NULL_PTR);
    tmp_hndl_mmngr->p_print = hndl_mmngr->p_print;
    hndl_mmngr->p_print = NULL;
    EXPECT_EQ(R_OSAL_MmngrDebugMmngrPrint(hndl_mmngr, stdout), OSAL_RETURN_HANDLE_NOT_SUPPORTED) << "Test09_015_007 failed";
    hndl_mmngr->p_print = tmp_hndl_mmngr->p_print;
    free(tmp_hndl_mmngr);

    // post-process: close memory manager
    EXPECT_EQ(R_OSAL_MmngrClose(hndl_mmngr), OSAL_RETURN_OK) << "post-process failed";
    hndl_mmngr = OSAL_MEMORY_MANAGER_HANDLE_INVALID;
}
// [MmngrDebugMmngrPrint_TC_09_015_007]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrDebugMmngrPrint_TC_09_015_008 MemoryApiTest.MmngrDebugMmngrPrint_TC_09_015_008
 * @subsection MmngrDebugMmngrPrint_TC_09_015_008_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrDebugMmngrPrint_TC_09_015_008_tci Test Case ID
 * MmngrDebugMmngrPrint_S0_A_TC_09_015_008
 * @subsection MmngrDebugMmngrPrint_TC_09_015_008_rr Related Requirement(s)
 * \#276572
 * @subsection MmngrDebugMmngrPrint_TC_09_015_008_pp Prerequisite/Precondition
 * OSAL is initialized and debug mode<br>
 * If not debug debug mode, The return value is OSAL_RETURN_UNSUPPORTED_OPERATION.
 * @subsection MmngrDebugMmngrPrint_TC_09_015_008_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrDebugMmngrPrint with abnormal condition.
 * - pre-process: open new memory manager 
 * - Test09_015_008: paramater p_output is NULL.
 * - post-process: close memory manager
 * @subsection MmngrDebugMmngrPrint_TC_09_015_008_tpts Test Procedure/Test Steps
 * -# Call R_OSAL_MmngrOpen with bellow config:
 *  - config.memory_limit                = 4096
 *  - config.max_allowed_allocations     = 1
 *  - config.max_registered_monitors_cbs = 2
 *  - config.mode = OSAL_MMNGR_ALLOC_MODE_STACK 
 * -# Call R_OSAL_MmngrDebugMmngrPrint with parameter p_output is NULL.
 * -# Call R_OSAL_MmngrClose to close memory handle.
 * @subsection MmngrDebugMmngrPrint_TC_09_015_008_ereb Expected Result/Behavior
 * -# The return of R_OSAL_MmngrOpen is OSAL_RETURN_OK.<br>
 * The returned handle is not OSAL_MEMORY_MANAGER_HANDLE_INVALID.
 * -# The return value of R_OSAL_MmngrDebugMmngrPrint is OSAL_RETURN_PAR.
 * -# The return value of R_OSAL_MmngrClose is OSAL_RETURN_OK.
 * @subsection MmngrDebugMmngrPrint_TC_09_015_008_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrDebugMmngrPrint_TC_09_015_008
 */
// [MmngrDebugMmngrPrint_TC_09_015_008]
TEST_F(MemoryApiTest, MmngrDebugMmngrPrint_TC_09_015_008)
{
    FILE * output = NULL;

    // pre-process: open memory manager
    config.memory_limit                = 4096;
    config.max_allowed_allocations     = 1;
    config.max_registered_monitors_cbs = 2;
    config.mode = OSAL_MMNGR_ALLOC_MODE_STACK;

    EXPECT_EQ(R_OSAL_MmngrOpen(&config, &hndl_mmngr), OSAL_RETURN_OK) << "pre-process failed";
    EXPECT_NE(hndl_mmngr,OSAL_MEMORY_MANAGER_HANDLE_INVALID) << "pre-process failed";

    // Test09_015_008
    // @brief: abnormal case:  p_output = NULL
    // If the parameter is Abnormal, no case classification is performed.
    // Because OSAL_RETURN_HANDLE_NOT_SUPPORTED is determined when calling p_print
    EXPECT_EQ(R_OSAL_MmngrDebugMmngrPrint(hndl_mmngr, output), OSAL_RETURN_PAR) << "Test09_015_008 failed";

    // post-process: close memory manager
    EXPECT_EQ(R_OSAL_MmngrClose(hndl_mmngr), OSAL_RETURN_OK) << "post-process failed";
    hndl_mmngr = OSAL_MEMORY_MANAGER_HANDLE_INVALID;
}
// [MmngrDebugMmngrPrint_TC_09_015_008]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrDebugMmngrPrint_TC_09_015_010 MemoryApiTest.MmngrDebugMmngrPrint_TC_09_015_010
 * @subsection MmngrDebugMmngrPrint_TC_09_015_010_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrDebugMmngrPrint_TC_09_015_010_tci Test Case ID
 * MmngrDebugMmngrPrint_S3_N_TC_09_015_010
 * @subsection MmngrDebugMmngrPrint_TC_09_015_010_rr Related Requirement(s)
 * \#276572
 * @subsection MmngrDebugMmngrPrint_TC_09_015_010_pp Prerequisite/Precondition
 * OSAL is initialized and debug mode<br>
 * If not debug debug mode, The return value is OSAL_RETURN_UNSUPPORTED_OPERATION.
 * @subsection MmngrDebugMmngrPrint_TC_09_015_010_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrDebugMmngrPrint with normal condition.
 * - pre-process: open new memory manager 
 * - Test09_015_010: confirm with OSAL_MMNGR_ALLOC_MODE_FREE_LIST mode.
 * - post-process: close memory manager
 * @subsection MmngrDebugMmngrPrint_TC_09_015_010_tpts Test Procedure/Test Steps
 * -# Call R_OSAL_MmngrOpen with bellow config:
 *  - config.memory_limit                = 4096
 *  - config.max_allowed_allocations     = 1
 *  - config.max_registered_monitors_cbs = 2
 *  - config.mode = OSAL_MMNGR_ALLOC_MODE_FREE_LIST 
 * -# Call R_OSAL_MmngrDebugMmngrPrint with valid paramater.
 * -# Call R_OSAL_MmngrClose to close memory handle.
 * @subsection MmngrDebugMmngrPrint_TC_09_015_010_ereb Expected Result/Behavior
 * -# The return of R_OSAL_MmngrOpen is OSAL_RETURN_OK.<br>
 * The returned handle is not OSAL_MEMORY_MANAGER_HANDLE_INVALID.
 * -# The return value of the R_OSAL_MmngrDebugMmngrPrint is OSAL_RETURN_OK in DEBUG mode or OSAL_RETURN_HANDLE_NOT_SUPPORTED in RELEASE mode.
 * -# The return value of R_OSAL_MmngrClose is OSAL_RETURN_OK.
 * @subsection MmngrDebugMmngrPrint_TC_09_015_010_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrDebugMmngrPrint_TC_09_015_010
 */
// [MmngrDebugMmngrPrint_TC_09_015_010]
TEST_F(MemoryApiTest, MmngrDebugMmngrPrint_TC_09_015_010)
{
    // pre-process: open memory manager
    config.memory_limit                = 4096;
    config.max_allowed_allocations     = 1;
    config.max_registered_monitors_cbs = 2;
    config.mode = OSAL_MMNGR_ALLOC_MODE_FREE_LIST;

    EXPECT_EQ(R_OSAL_MmngrOpen(&config, &hndl_mmngr), OSAL_RETURN_OK) << "pre-process failed";
    EXPECT_NE(hndl_mmngr,OSAL_MEMORY_MANAGER_HANDLE_INVALID) << "pre-process failed";

    // Test09_015_010 and 09_015_018
    // @brief: normal case: config.mode = OSAL_MMNGR_ALLOC_MODE_FREE_LIST;
    if(hndl_mmngr->p_print != NULL) //DEBUG mode
    {
        EXPECT_EQ(R_OSAL_MmngrDebugMmngrPrint(hndl_mmngr, stdout), OSAL_RETURN_OK) << "Test09_015_010 failed";
    }
    else //RELEASE mode
    {
        EXPECT_EQ(R_OSAL_MmngrDebugMmngrPrint(hndl_mmngr, stdout), OSAL_RETURN_HANDLE_NOT_SUPPORTED) << "Test09_015_018 failed";
    }

    // post-process: close memory manager
    EXPECT_EQ(R_OSAL_MmngrClose(hndl_mmngr), OSAL_RETURN_OK) << "post-process failed";
    hndl_mmngr = OSAL_MEMORY_MANAGER_HANDLE_INVALID;
}
// [MmngrDebugMmngrPrint_TC_09_015_010]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrDebugMmngrPrint_TC_09_015_011 MemoryApiTest.MmngrDebugMmngrPrint_TC_09_015_011
 * @subsection MmngrDebugMmngrPrint_TC_09_015_011_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrDebugMmngrPrint_TC_09_015_011_tci Test Case ID
 * MmngrDebugMmngrPrint_S3_N_TC_09_015_011
 * @subsection MmngrDebugMmngrPrint_TC_09_015_011_rr Related Requirement(s)
 * \#276572
 * @subsection MmngrDebugMmngrPrint_TC_09_015_011_pp Prerequisite/Precondition
 * OSAL is initialized and debug mode<br>
 * If not debug debug mode, The return value is OSAL_RETURN_UNSUPPORTED_OPERATION.
 * @subsection MmngrDebugMmngrPrint_TC_09_015_011_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrDebugMmngrPrint with abnormal condition.
 * - pre-process: open new memory manager 
 * - Test09_015_011: confirm with the debug mode is not enabled
 * - post-process: close memory manager
 * @subsection MmngrDebugMmngrPrint_TC_09_015_011_tpts Test Procedure/Test Steps
 * -# Call R_OSAL_MmngrOpen with bellow config:
 *  - config.memory_limit                = 4096
 *  - config.max_allowed_allocations     = 1
 *  - config.max_registered_monitors_cbs = 2
 *  - config.mode = OSAL_MMNGR_ALLOC_MODE_STACK 
 * -# Call R_OSAL_MmngrDebugMmngrPrint.
 * -# Call R_OSAL_MmngrClose to close memory handle.
 * @subsection MmngrDebugMmngrPrint_TC_09_015_011_ereb Expected Result/Behavior
 * -# The return of R_OSAL_MmngrOpen is OSAL_RETURN_OK.<br>
 * The returned handle is not OSAL_MEMORY_MANAGER_HANDLE_INVALID.
 * -# The return value of R_OSAL_MmngrDebugMmngrPrint is OSAL_RETURN_HANDLE_NOT_SUPPORTED.
 * -# The return value of R_OSAL_MmngrClose is OSAL_RETURN_OK.
 * @subsection MmngrDebugMmngrPrint_TC_09_015_011_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrDebugMmngrPrint_TC_09_015_011
 */
// [MmngrDebugMmngrPrint_TC_09_015_011]
TEST_F(MemoryApiTest, MmngrDebugMmngrPrint_TC_09_015_011)
{
    // pre-process: open memory manager
    config.memory_limit                = 4096;
    config.max_allowed_allocations     = 1;
    config.max_registered_monitors_cbs = 2;
    config.mode = OSAL_MMNGR_ALLOC_MODE_STACK;

    EXPECT_EQ(R_OSAL_MmngrOpen(&config, &hndl_mmngr), OSAL_RETURN_OK) << "pre-process failed";
    EXPECT_NE(hndl_mmngr,OSAL_MEMORY_MANAGER_HANDLE_INVALID) << "pre-process failed";

    // Test09_015_011 and 09_015_019
    // @brief: abnormal case: config with DEBUG mode is OFF
    if(hndl_mmngr->p_print != NULL) //enter this path because p_print!=NULL in OSAL Wrapper DEBUG mode
    {
        EXPECT_EQ(R_OSAL_MmngrDebugMmngrPrint(hndl_mmngr, stdout), OSAL_RETURN_OK) << "Test09_015_011 failed";
    }
    else //enter this path because p_print=NULL in OSAL Wrapper RELEASE mode
    {
        EXPECT_EQ(R_OSAL_MmngrDebugMmngrPrint(hndl_mmngr, stdout), OSAL_RETURN_HANDLE_NOT_SUPPORTED) << "Test09_015_019 failed";
    }

    // post-process: close memory manager
    EXPECT_EQ(R_OSAL_MmngrClose(hndl_mmngr), OSAL_RETURN_OK) << "post-process failed";
    hndl_mmngr = OSAL_MEMORY_MANAGER_HANDLE_INVALID;
}
// [MmngrDebugMmngrPrint_TC_09_015_011]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrDebugMmngrPrint_TC_09_015_021 MemoryApiTest.MmngrDebugMmngrPrint_TC_09_015_021
 * @subsection MmngrDebugMmngrPrint_TC_09_015_021_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrDebugMmngrPrint_TC_09_015_021_tci Test Case ID
 * MmngrDebugMmngrPrint_S2_A_TC_09_015_021
 * @subsection MmngrDebugMmngrPrint_TC_09_015_021_rr Related Requirement(s)
 * \#276572
 * @subsection MmngrDebugMmngrPrint_TC_09_015_021_pp Prerequisite/Precondition
 * - A dummy handle is created by copy the data from a valid handle in SetUpTestSuite()
 * - The dummy handle will be free after all test cases was executed.
 * - OSAL is initialized.
 * @subsection MmngrDebugMmngrPrint_TC_09_015_021_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrDebugMmngrPrint and R_OSAL_MmngrDebugMmngrPrint with abnormal condition.
 * - Test09_015_021: confirm the use case the of R_OSAL_MmngrDebugMmngrPrint when Memory Manager is not opened
 * @subsection MmngrDebugMmngrPrint_TC_09_015_021_tpts Test Procedure/Test Steps
 * -# Call R_OSAL_MmngrDebugMmngrPrint to allocate the buffer using the dummy handle.
 * @subsection MmngrDebugMmngrPrint_TC_09_015_021_ereb Expected Result/Behavior
 * -# The return value when calling R_OSAL_MmngrDebugMmngrPrint is OSAL_RETURN_STATE.
 * @subsection MmngrDebugMmngrPrint_TC_09_015_021_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrDebugMmngrPrint_TC_09_015_021
 */
// [MmngrDebugMmngrPrint_TC_09_015_021]
TEST_F(MemoryApiTest, MmngrDebugMmngrPrint_TC_09_015_021)
{
    // Test09_015_021
    // @brief: abnormal case: confirm the use case the of R_OSAL_MmngrDebugMmngrPrint when Memory Manager is not opened
    if(dummy_hndl_mmngr->p_print != NULL) //DEBUG mode
    {
        EXPECT_EQ(R_OSAL_MmngrDebugMmngrPrint(dummy_hndl_mmngr, stdout), OSAL_RETURN_STATE) << "Test09_015_021 failed";
    }
    else //RELEASE mode
    {
        EXPECT_EQ(R_OSAL_MmngrDebugMmngrPrint(dummy_hndl_mmngr, stdout), OSAL_RETURN_HANDLE_NOT_SUPPORTED) << "Test09_015_021 failed";
    }
}
// [MmngrDebugMmngrPrint_TC_09_015_021]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrDebugMmngrPrint_TC_09_015_022 MemoryApiTest.MmngrDebugMmngrPrint_TC_09_015_022
 * @subsection MmngrDebugMmngrPrint_TC_09_015_022_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrDebugMmngrPrint_TC_09_015_022_tci Test Case ID
 * MmngrDebugMmngrPrint_S4_A_TC_09_015_022
 * @subsection MmngrDebugMmngrPrint_TC_09_015_022_rr Related Requirement(s)
 * \#276572
 * @subsection MmngrDebugMmngrPrint_TC_09_015_022_pp Prerequisite/Precondition
 * OSAL is initialized.
 * @subsection MmngrDebugMmngrPrint_TC_09_015_022_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrDebugMmngrPrint with abnormal condition in OSAL_MMNGR_ALLOC_MODE_STACK mode.
 * - Test09_015_022: "hndl_mmngr->p_ptr_self" is invalid (not NULL).
 * @subsection MmngrDebugMmngrPrint_TC_09_015_022_tpts Test Procedure/Test Steps
 * -# Call R_OSAL_MmngrGetOsalMaxConfig to get the valid config then set config mode to OSAL_MMNGR_ALLOC_MODE_STACK
 * -# Call R_OSAL_MmngrOpen with valid parameter.
 * -# Call R_OSAL_MmngrDebugMmngrPrint with "hndl_mmngr->p_ptr_self" is invalid (not NULL)
 *      - hndl_mmngr with p_ptr_self value changed to p_ptr_self_ng
 *      - "p_ptr_self_ng" is allocated by malloc function.
 * -# Call R_OSAL_MmngrClose to close the memory manager.
 *      - hndl_mmngr with valid p_ptr_self value
 * @subsection MmngrDebugMmngrPrint_TC_09_015_022_ereb Expected Result/Behavior
 * -# The return value of R_OSAL_MmngrGetOsalMaxConfig is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrOpen is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrDebugMmngrPrint is OSAL_RETURN_HANDLE.
 * -# The return value of R_OSAL_MmngrClose is OSAL_RETURN_OK.
 * @subsection MmngrDebugMmngrPrint_TC_09_015_022_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrDebugMmngrPrint_TC_09_015_022
 */
// [MmngrDebugMmngrPrint_TC_09_015_022]
TEST_F(MemoryApiTest, MmngrDebugMmngrPrint_TC_09_015_022)
{
    void* ptr_self_bak;
    void* ptr_self_ng;

    // Test09_015_022
    // @brief: abnormal case: "hndl_mmngr->p_ptr_self" is invalid (not NULL)
    EXPECT_EQ(R_OSAL_MmngrGetOsalMaxConfig(&config), OSAL_RETURN_OK);
    config.mode = OSAL_MMNGR_ALLOC_MODE_STACK;
    EXPECT_EQ(R_OSAL_MmngrOpen(&config, &hndl_mmngr), OSAL_RETURN_OK);
    ptr_self_bak = hndl_mmngr->p_ptr_self;
    ptr_self_ng = malloc(0x100);
    memset(ptr_self_ng, 0x0, 0x100);
    hndl_mmngr->p_ptr_self = ptr_self_ng;
    if(hndl_mmngr->p_print != NULL) // DEBUG mode
    {
        EXPECT_EQ(R_OSAL_MmngrDebugMmngrPrint(hndl_mmngr, stdout), OSAL_RETURN_HANDLE) << "Test09_015_022 failed";
    }
    else
    {
        EXPECT_EQ(R_OSAL_MmngrDebugMmngrPrint(hndl_mmngr, stdout), OSAL_RETURN_HANDLE_NOT_SUPPORTED) << "Test09_015_022 failed";
    }
    free(ptr_self_ng);
    hndl_mmngr->p_ptr_self = ptr_self_bak;
    EXPECT_EQ(R_OSAL_MmngrClose(hndl_mmngr), OSAL_RETURN_OK) << "Test09_015_022 failed";
    hndl_mmngr = OSAL_MEMORY_MANAGER_HANDLE_INVALID;
}
// [MmngrDebugMmngrPrint_TC_09_015_022]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrDebugMmngrPrint_TC_09_015_023 MemoryApiTest.MmngrDebugMmngrPrint_TC_09_015_023
 * @subsection MmngrDebugMmngrPrint_TC_09_015_023_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrDebugMmngrPrint_TC_09_015_023_tci Test Case ID
 * MmngrDebugMmngrPrint_S4_A_TC_09_015_023
 * @subsection MmngrDebugMmngrPrint_TC_09_015_023_rr Related Requirement(s)
 * \#276572
 * @subsection MmngrDebugMmngrPrint_TC_09_015_023_pp Prerequisite/Precondition
 * OSAL is initialized.
 * @subsection MmngrDebugMmngrPrint_TC_09_015_023_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrDebugMmngrPrint with abnormal condition in OSAL_MMNGR_ALLOC_MODE_STACK_PROT mode.
 * - Test09_015_023: "hndl_mmngr->p_ptr_self" is invalid (not NULL)
 * @subsection MmngrDebugMmngrPrint_TC_09_015_023_tpts Test Procedure/Test Steps
 * -# Call R_OSAL_MmngrGetOsalMaxConfig to get the valid config then set config mode to OSAL_MMNGR_ALLOC_MODE_STACK_PROT
 * -# Call R_OSAL_MmngrOpen with valid parameter.
 * -# Call R_OSAL_MmngrDebugMmngrPrint with "hndl_mmngr->p_ptr_self" is invalid (not NULL)
 *      - hndl_mmngr with p_ptr_self value changed to p_ptr_self_ng
 *      - "p_ptr_self_ng" is allocated by malloc function.
 * -# Call R_OSAL_MmngrClose to close the memory manager.
 *      - hndl_mmngr with valid p_ptr_self value
 * @subsection MmngrDebugMmngrPrint_TC_09_015_023_ereb Expected Result/Behavior
 * -# The return value of R_OSAL_MmngrGetOsalMaxConfig is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrOpen is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrDebugMmngrPrint is OSAL_RETURN_HANDLE.
 * -# The return value of R_OSAL_MmngrClose is OSAL_RETURN_OK.
 * @subsection MmngrDebugMmngrPrint_TC_09_015_023_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrDebugMmngrPrint_TC_09_015_023
 */
// [MmngrDebugMmngrPrint_TC_09_015_023]
TEST_F(MemoryApiTest, MmngrDebugMmngrPrint_TC_09_015_023)
{
    void* ptr_self_bak;
    void* ptr_self_ng;

    // Test09_015_023
    // @brief: abnormal case: "hndl_mmngr->p_ptr_self" is invalid (not NULL)
    EXPECT_EQ(R_OSAL_MmngrGetOsalMaxConfig(&config), OSAL_RETURN_OK);
    config.mode = OSAL_MMNGR_ALLOC_MODE_STACK_PROT;
    EXPECT_EQ(R_OSAL_MmngrOpen(&config, &hndl_mmngr), OSAL_RETURN_OK);
    ptr_self_bak = hndl_mmngr->p_ptr_self;
    ptr_self_ng = malloc(0x100);
    memset(ptr_self_ng, 0x0, 0x100);
    hndl_mmngr->p_ptr_self = ptr_self_ng;
    if(hndl_mmngr->p_print != NULL) // DEBUG mode
    {
        EXPECT_EQ(R_OSAL_MmngrDebugMmngrPrint(hndl_mmngr, stdout), OSAL_RETURN_HANDLE) << "Test09_015_023 failed";
    }
    else
    {
        EXPECT_EQ(R_OSAL_MmngrDebugMmngrPrint(hndl_mmngr, stdout), OSAL_RETURN_HANDLE_NOT_SUPPORTED) << "Test09_015_023 failed";
    }
    free(ptr_self_ng);
    hndl_mmngr->p_ptr_self = ptr_self_bak;
    EXPECT_EQ(R_OSAL_MmngrClose(hndl_mmngr), OSAL_RETURN_OK) << "Test09_015_023 failed";
    hndl_mmngr = OSAL_MEMORY_MANAGER_HANDLE_INVALID;
}
// [MmngrDebugMmngrPrint_TC_09_015_023]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrDebugMmngrPrint_TC_09_015_024 MemoryApiTest.MmngrDebugMmngrPrint_TC_09_015_024
 * @subsection MmngrDebugMmngrPrint_TC_09_015_024_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrDebugMmngrPrint_TC_09_015_024_tci Test Case ID
 * MmngrDebugMmngrPrint_S4_A_TC_09_015_024
 * @subsection MmngrDebugMmngrPrint_TC_09_015_024_rr Related Requirement(s)
 * \#276572
 * @subsection MmngrDebugMmngrPrint_TC_09_015_024_pp Prerequisite/Precondition
 * OSAL is initialized.
 * @subsection MmngrDebugMmngrPrint_TC_09_015_024_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrDebugMmngrPrint with abnormal condition in OSAL_MMNGR_ALLOC_MODE_FREE_LIST mode.
 * - Test09_015_024: "hndl_mmngr->p_ptr_self" is invalid (not NULL)
 * @subsection MmngrDebugMmngrPrint_TC_09_015_024_tpts Test Procedure/Test Steps
 * -# Call R_OSAL_MmngrGetOsalMaxConfig to get the valid config then set config mode to OSAL_MMNGR_ALLOC_MODE_FREE_LIST
 * -# Call R_OSAL_MmngrOpen with valid parameter.
 * -# Call R_OSAL_MmngrDebugMmngrPrint with "hndl_mmngr->p_ptr_self" is invalid (not NULL)
 *      - hndl_mmngr with p_ptr_self value changed to p_ptr_self_ng
 *      - "p_ptr_self_ng" is allocated by malloc function.
 * -# Call R_OSAL_MmngrClose to close the memory manager.
 *      - hndl_mmngr with valid p_ptr_self value
 * @subsection MmngrDebugMmngrPrint_TC_09_015_024_ereb Expected Result/Behavior
 * -# The return value of R_OSAL_MmngrGetOsalMaxConfig is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrOpen is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrDebugMmngrPrint is OSAL_RETURN_HANDLE.
 * -# The return value of R_OSAL_MmngrClose is OSAL_RETURN_OK.
 * @subsection MmngrDebugMmngrPrint_TC_09_015_024_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrDebugMmngrPrint_TC_09_015_024
 */
// [MmngrDebugMmngrPrint_TC_09_015_024]
TEST_F(MemoryApiTest, MmngrDebugMmngrPrint_TC_09_015_024)
{
    void* ptr_self_bak;
    void* ptr_self_ng;

    // Test09_015_024
    // @brief: abnormal case: "hndl_mmngr->p_ptr_self" is invalid (not NULL)
    EXPECT_EQ(R_OSAL_MmngrGetOsalMaxConfig(&config), OSAL_RETURN_OK);
    config.mode = OSAL_MMNGR_ALLOC_MODE_FREE_LIST;
    EXPECT_EQ(R_OSAL_MmngrOpen(&config, &hndl_mmngr), OSAL_RETURN_OK);
    ptr_self_bak = hndl_mmngr->p_ptr_self;
    ptr_self_ng = malloc(0x100);
    memset(ptr_self_ng, 0x0, 0x100);
    hndl_mmngr->p_ptr_self = ptr_self_ng;
    if(hndl_mmngr->p_print != NULL) // DEBUG mode
    {
        EXPECT_EQ(R_OSAL_MmngrDebugMmngrPrint(hndl_mmngr, stdout), OSAL_RETURN_HANDLE) << "Test09_015_024 failed";
    }
    else
    {
        EXPECT_EQ(R_OSAL_MmngrDebugMmngrPrint(hndl_mmngr, stdout), OSAL_RETURN_HANDLE_NOT_SUPPORTED) << "Test09_015_024 failed";
    }
    free(ptr_self_ng);
    hndl_mmngr->p_ptr_self = ptr_self_bak;
    EXPECT_EQ(R_OSAL_MmngrClose(hndl_mmngr), OSAL_RETURN_OK) << "Test09_015_024 failed";
    hndl_mmngr = OSAL_MEMORY_MANAGER_HANDLE_INVALID;
}
// [MmngrDebugMmngrPrint_TC_09_015_024]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrDebugMmngrPrint_TC_09_015_025 MemoryApiTest.MmngrDebugMmngrPrint_TC_09_015_025
 * @subsection MmngrDebugMmngrPrint_TC_09_015_025_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrDebugMmngrPrint_TC_09_015_025_tci Test Case ID
 * MmngrDebugMmngrPrint_S4_A_TC_09_015_025
 * @subsection MmngrDebugMmngrPrint_TC_09_015_025_rr Related Requirement(s)
 * \#276572
 * @subsection MmngrDebugMmngrPrint_TC_09_015_025_pp Prerequisite/Precondition
 * OSAL is initialized.
 * @subsection MmngrDebugMmngrPrint_TC_09_015_025_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrDebugMmngrPrint with abnormal condition in OSAL_MMNGR_ALLOC_MODE_FREE_LIST_PROT mode.
 * - Test09_015_025: "hndl_mmngr->p_ptr_self" is invalid (not NULL)
 * @subsection MmngrDebugMmngrPrint_TC_09_015_025_tpts Test Procedure/Test Steps
 * -# Call R_OSAL_MmngrGetOsalMaxConfig to get the valid config then set config mode to OSAL_MMNGR_ALLOC_MODE_FREE_LIST_PROT
 * -# Call R_OSAL_MmngrOpen with valid parameter.
 * -# Call R_OSAL_MmngrDebugMmngrPrint with "hndl_mmngr->p_ptr_self" is invalid (not NULL)
 *      - hndl_mmngr with p_ptr_self value changed to p_ptr_self_ng
 *      - "p_ptr_self_ng" is allocated by malloc function.
 * -# Call R_OSAL_MmngrClose to close the memory manager.
 *      - hndl_mmngr with valid p_ptr_self value
 * @subsection MmngrDebugMmngrPrint_TC_09_015_025_ereb Expected Result/Behavior
 * -# The return value of R_OSAL_MmngrGetOsalMaxConfig is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrOpen is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrDebugMmngrPrint is OSAL_RETURN_HANDLE.
 * -# The return value of R_OSAL_MmngrClose is OSAL_RETURN_OK.
 * @subsection MmngrDebugMmngrPrint_TC_09_015_025_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrDebugMmngrPrint_TC_09_015_025
 */
// [MmngrDebugMmngrPrint_TC_09_015_025]
TEST_F(MemoryApiTest, MmngrDebugMmngrPrint_TC_09_015_025)
{
    void* ptr_self_bak;
    void* ptr_self_ng;

    // Test09_015_025
    // @brief: abnormal case: "hndl_mmngr->p_ptr_self" is invalid (not NULL)
    EXPECT_EQ(R_OSAL_MmngrGetOsalMaxConfig(&config), OSAL_RETURN_OK);
    config.mode = OSAL_MMNGR_ALLOC_MODE_FREE_LIST_PROT;
    EXPECT_EQ(R_OSAL_MmngrOpen(&config, &hndl_mmngr), OSAL_RETURN_OK);
    ptr_self_bak = hndl_mmngr->p_ptr_self;
    ptr_self_ng = malloc(0x100);
    memset(ptr_self_ng, 0x0, 0x100);
    hndl_mmngr->p_ptr_self = ptr_self_ng;
    if(hndl_mmngr->p_print != NULL) // DEBUG mode
    {
        EXPECT_EQ(R_OSAL_MmngrDebugMmngrPrint(hndl_mmngr, stdout), OSAL_RETURN_HANDLE) << "Test09_015_025 failed";
    }
    else
    {
        EXPECT_EQ(R_OSAL_MmngrDebugMmngrPrint(hndl_mmngr, stdout), OSAL_RETURN_HANDLE_NOT_SUPPORTED) << "Test09_015_025 failed";
    }
    free(ptr_self_ng);
    hndl_mmngr->p_ptr_self = ptr_self_bak;
    EXPECT_EQ(R_OSAL_MmngrClose(hndl_mmngr), OSAL_RETURN_OK) << "Test09_015_025 failed";
    hndl_mmngr = OSAL_MEMORY_MANAGER_HANDLE_INVALID;
}
// [MmngrDebugMmngrPrint_TC_09_015_025]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrDebugMmngrPrint_TC_09_015_026 MemoryApiTest.MmngrDebugMmngrPrint_TC_09_015_026
 * @subsection MmngrDebugMmngrPrint_TC_09_015_026_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrDebugMmngrPrint_TC_09_015_026_tci Test Case ID
 * MmngrDebugMmngrPrint_S4_A_TC_09_015_026
 * @subsection MmngrDebugMmngrPrint_TC_09_015_026_rr Related Requirement(s)
 * \#276572
 * @subsection MmngrDebugMmngrPrint_TC_09_015_026_pp Prerequisite/Precondition
 * OSAL is initialized.
 * @subsection MmngrDebugMmngrPrint_TC_09_015_026_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrDebugMmngrPrint with abnormal condition in OSAL_MMNGR_ALLOC_MODE_STACK mode.
 * - Test09_015_026: "hndl_mmngr->p_ptr_self" is invalid (NULL)
 * @subsection MmngrDebugMmngrPrint_TC_09_015_026_tpts Test Procedure/Test Steps
 * -# Call R_OSAL_MmngrGetOsalMaxConfig to get the valid config then set config mode to OSAL_MMNGR_ALLOC_MODE_STACK
 * -# Call R_OSAL_MmngrOpen with valid parameter.
 * -# Call R_OSAL_MmngrDebugMmngrPrint with "hndl_mmngr->p_ptr_self" is invalid (NULL)
 * -# Call R_OSAL_MmngrClose to close the memory manager.
 * @subsection MmngrDebugMmngrPrint_TC_09_015_026_ereb Expected Result/Behavior
 * -# The return value of R_OSAL_MmngrGetOsalMaxConfig is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrOpen is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrDebugMmngrPrint is OSAL_RETURN_HANDLE.
 * -# The return value of R_OSAL_MmngrClose is OSAL_RETURN_OK.
 * @subsection MmngrDebugMmngrPrint_TC_09_015_026_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrDebugMmngrPrint_TC_09_015_026
 */
// [MmngrDebugMmngrPrint_TC_09_015_026]
TEST_F(MemoryApiTest, MmngrDebugMmngrPrint_TC_09_015_026)
{
    void* ptr_self_bak;

    // Test09_015_026
    // @brief: abnormal case: "hndl_mmngr->p_ptr_self" is invalid (NULL)
    EXPECT_EQ(R_OSAL_MmngrGetOsalMaxConfig(&config), OSAL_RETURN_OK);
    config.mode = OSAL_MMNGR_ALLOC_MODE_STACK;
    EXPECT_EQ(R_OSAL_MmngrOpen(&config, &hndl_mmngr), OSAL_RETURN_OK);
    ptr_self_bak = hndl_mmngr->p_ptr_self;
    hndl_mmngr->p_ptr_self = NULL;
    if(hndl_mmngr->p_print != NULL) // DEBUG mode
    {
        EXPECT_EQ(R_OSAL_MmngrDebugMmngrPrint(hndl_mmngr, stdout), OSAL_RETURN_HANDLE) << "Test09_015_026 failed";
    }
    else
    {
        EXPECT_EQ(R_OSAL_MmngrDebugMmngrPrint(hndl_mmngr, stdout), OSAL_RETURN_HANDLE_NOT_SUPPORTED) << "Test09_015_026 failed";
    }
    hndl_mmngr->p_ptr_self = ptr_self_bak;
    EXPECT_EQ(R_OSAL_MmngrClose(hndl_mmngr), OSAL_RETURN_OK) << "Test09_015_026 failed";
    hndl_mmngr = OSAL_MEMORY_MANAGER_HANDLE_INVALID;
}
// [MmngrDebugMmngrPrint_TC_09_015_026]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrDebugMmngrPrint_TC_09_015_027 MemoryApiTest.MmngrDebugMmngrPrint_TC_09_015_027
 * @subsection MmngrDebugMmngrPrint_TC_09_015_027_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrDebugMmngrPrint_TC_09_015_027_tci Test Case ID
 * MmngrDebugMmngrPrint_S4_A_TC_09_015_027
 * @subsection MmngrDebugMmngrPrint_TC_09_015_027_rr Related Requirement(s)
 * \#276572
 * @subsection MmngrDebugMmngrPrint_TC_09_015_027_pp Prerequisite/Precondition
 * OSAL is initialized.
 * @subsection MmngrDebugMmngrPrint_TC_09_015_027_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrDebugMmngrPrint with abnormal condition in OSAL_MMNGR_ALLOC_MODE_STACK_PROT mode.
 * - Test09_015_027: "hndl_mmngr->p_ptr_self" is invalid (NULL)
 * @subsection MmngrDebugMmngrPrint_TC_09_015_027_tpts Test Procedure/Test Steps
 * -# Call R_OSAL_MmngrGetOsalMaxConfig to get the valid config then set config mode to OSAL_MMNGR_ALLOC_MODE_STACK_PROT
 * -# Call R_OSAL_MmngrOpen with valid parameter.
 * -# Call R_OSAL_MmngrDebugMmngrPrint with "hndl_mmngr->p_ptr_self" is invalid (NULL)
 * -# Call R_OSAL_MmngrClose to close the memory manager.
 * @subsection MmngrDebugMmngrPrint_TC_09_015_027_ereb Expected Result/Behavior
 * -# The return value of R_OSAL_MmngrGetOsalMaxConfig is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrOpen is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrDebugMmngrPrint is OSAL_RETURN_HANDLE.
 * -# The return value of R_OSAL_MmngrClose is OSAL_RETURN_OK.
 * @subsection MmngrDebugMmngrPrint_TC_09_015_027_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrDebugMmngrPrint_TC_09_015_027
 */
// [MmngrDebugMmngrPrint_TC_09_015_027]
TEST_F(MemoryApiTest, MmngrDebugMmngrPrint_TC_09_015_027)
{
    void* ptr_self_bak;

    // Test09_015_027
    // @brief: abnormal case: "hndl_mmngr->p_ptr_self" is invalid (NULL)
    EXPECT_EQ(R_OSAL_MmngrGetOsalMaxConfig(&config), OSAL_RETURN_OK);
    config.mode = OSAL_MMNGR_ALLOC_MODE_STACK_PROT;
    EXPECT_EQ(R_OSAL_MmngrOpen(&config, &hndl_mmngr), OSAL_RETURN_OK);
    ptr_self_bak = hndl_mmngr->p_ptr_self;
    hndl_mmngr->p_ptr_self = NULL;
    if(hndl_mmngr->p_print != NULL) // DEBUG mode
    {
        EXPECT_EQ(R_OSAL_MmngrDebugMmngrPrint(hndl_mmngr, stdout), OSAL_RETURN_HANDLE) << "Test09_015_027 failed";
    }
    else
    {
        EXPECT_EQ(R_OSAL_MmngrDebugMmngrPrint(hndl_mmngr, stdout), OSAL_RETURN_HANDLE_NOT_SUPPORTED) << "Test09_015_027 failed";
    }
    hndl_mmngr->p_ptr_self = ptr_self_bak;
    EXPECT_EQ(R_OSAL_MmngrClose(hndl_mmngr), OSAL_RETURN_OK) << "Test09_015_027 failed";
    hndl_mmngr = OSAL_MEMORY_MANAGER_HANDLE_INVALID;
}
// [MmngrDebugMmngrPrint_TC_09_015_027]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrDebugMmngrPrint_TC_09_015_028 MemoryApiTest.MmngrDebugMmngrPrint_TC_09_015_028
 * @subsection MmngrDebugMmngrPrint_TC_09_015_028_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrDebugMmngrPrint_TC_09_015_028_tci Test Case ID
 * MmngrDebugMmngrPrint_S4_A_TC_09_015_028
 * @subsection MmngrDebugMmngrPrint_TC_09_015_028_rr Related Requirement(s)
 * \#276572
 * @subsection MmngrDebugMmngrPrint_TC_09_015_028_pp Prerequisite/Precondition
 * OSAL is initialized.
 * @subsection MmngrDebugMmngrPrint_TC_09_015_028_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrDebugMmngrPrint with abnormal condition in OSAL_MMNGR_ALLOC_MODE_FREE_LIST mode.
 * - Test09_015_028: "hndl_mmngr->p_ptr_self" is invalid (NULL)
 * @subsection MmngrDebugMmngrPrint_TC_09_015_028_tpts Test Procedure/Test Steps
 * -# Call R_OSAL_MmngrGetOsalMaxConfig to get the valid config then set config mode to OSAL_MMNGR_ALLOC_MODE_FREE_LIST
 * -# Call R_OSAL_MmngrOpen with valid parameter.
 * -# Call R_OSAL_MmngrDebugMmngrPrint with "hndl_mmngr->p_ptr_self" is invalid (NULL)
 * -# Call R_OSAL_MmngrClose to close the memory manager.
 * @subsection MmngrDebugMmngrPrint_TC_09_015_028_ereb Expected Result/Behavior
 * -# The return value of R_OSAL_MmngrGetOsalMaxConfig is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrOpen is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrDebugMmngrPrint is OSAL_RETURN_HANDLE.
 * -# The return value of R_OSAL_MmngrClose is OSAL_RETURN_OK.
 * @subsection MmngrDebugMmngrPrint_TC_09_015_028_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrDebugMmngrPrint_TC_09_015_028
 */
// [MmngrDebugMmngrPrint_TC_09_015_028]
TEST_F(MemoryApiTest, MmngrDebugMmngrPrint_TC_09_015_028)
{
    void* ptr_self_bak;

    // Test09_015_028
    // @brief: abnormal case: "hndl_mmngr->p_ptr_self" is invalid (NULL)
    EXPECT_EQ(R_OSAL_MmngrGetOsalMaxConfig(&config), OSAL_RETURN_OK);
    config.mode = OSAL_MMNGR_ALLOC_MODE_FREE_LIST;
    EXPECT_EQ(R_OSAL_MmngrOpen(&config, &hndl_mmngr), OSAL_RETURN_OK);
    ptr_self_bak = hndl_mmngr->p_ptr_self;
    hndl_mmngr->p_ptr_self = NULL;
    if(hndl_mmngr->p_print != NULL) // DEBUG mode
    {
        EXPECT_EQ(R_OSAL_MmngrDebugMmngrPrint(hndl_mmngr, stdout), OSAL_RETURN_HANDLE) << "Test09_015_028 failed";
    }
    else
    {
        EXPECT_EQ(R_OSAL_MmngrDebugMmngrPrint(hndl_mmngr, stdout), OSAL_RETURN_HANDLE_NOT_SUPPORTED) << "Test09_015_028 failed";
    }
    hndl_mmngr->p_ptr_self = ptr_self_bak;
    EXPECT_EQ(R_OSAL_MmngrClose(hndl_mmngr), OSAL_RETURN_OK) << "Test09_015_028 failed";
    hndl_mmngr = OSAL_MEMORY_MANAGER_HANDLE_INVALID;
}
// [MmngrDebugMmngrPrint_TC_09_015_028]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrDebugMmngrPrint_TC_09_015_029 MemoryApiTest.MmngrDebugMmngrPrint_TC_09_015_029
 * @subsection MmngrDebugMmngrPrint_TC_09_015_029_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrDebugMmngrPrint_TC_09_015_029_tci Test Case ID
 * MmngrDebugMmngrPrint_S4_A_TC_09_015_029
 * @subsection MmngrDebugMmngrPrint_TC_09_015_029_rr Related Requirement(s)
 * \#276572
 * @subsection MmngrDebugMmngrPrint_TC_09_015_029_pp Prerequisite/Precondition
 * OSAL is initialized.
 * @subsection MmngrDebugMmngrPrint_TC_09_015_029_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrDebugMmngrPrint with abnormal condition in OSAL_MMNGR_ALLOC_MODE_FREE_LIST_PROT mode.
 * - Test09_015_029: "hndl_mmngr->p_ptr_self" is invalid (NULL)
 * @subsection MmngrDebugMmngrPrint_TC_09_015_029_tpts Test Procedure/Test Steps
 * -# Call R_OSAL_MmngrGetOsalMaxConfig to get the valid config then set config mode to OSAL_MMNGR_ALLOC_MODE_FREE_LIST_PROT
 * -# Call R_OSAL_MmngrOpen with valid parameter.
 * -# Call R_OSAL_MmngrDebugMmngrPrint with "hndl_mmngr->p_ptr_self" is invalid (NULL)
 * -# Call R_OSAL_MmngrClose to close the memory manager.
 * @subsection MmngrDebugMmngrPrint_TC_09_015_029_ereb Expected Result/Behavior
 * -# The return value of R_OSAL_MmngrGetOsalMaxConfig is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrOpen is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrDebugMmngrPrint is OSAL_RETURN_HANDLE.
 * -# The return value of R_OSAL_MmngrClose is OSAL_RETURN_OK.
 * @subsection MmngrDebugMmngrPrint_TC_09_015_029_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrDebugMmngrPrint_TC_09_015_029
 */
// [MmngrDebugMmngrPrint_TC_09_015_029]
TEST_F(MemoryApiTest, MmngrDebugMmngrPrint_TC_09_015_029)
{
    void* ptr_self_bak;

    // Test09_015_029
    // @brief: abnormal case: "hndl_mmngr->p_ptr_self" is invalid (NULL)
    EXPECT_EQ(R_OSAL_MmngrGetOsalMaxConfig(&config), OSAL_RETURN_OK);
    config.mode = OSAL_MMNGR_ALLOC_MODE_FREE_LIST_PROT;
    EXPECT_EQ(R_OSAL_MmngrOpen(&config, &hndl_mmngr), OSAL_RETURN_OK);
    ptr_self_bak = hndl_mmngr->p_ptr_self;
    hndl_mmngr->p_ptr_self = NULL;
    if(hndl_mmngr->p_print != NULL) // DEBUG mode
    {
        EXPECT_EQ(R_OSAL_MmngrDebugMmngrPrint(hndl_mmngr, stdout), OSAL_RETURN_HANDLE) << "Test09_015_029 failed";
    }
    else
    {
        EXPECT_EQ(R_OSAL_MmngrDebugMmngrPrint(hndl_mmngr, stdout), OSAL_RETURN_HANDLE_NOT_SUPPORTED) << "Test09_015_029 failed";
    }
    hndl_mmngr->p_ptr_self = ptr_self_bak;
    EXPECT_EQ(R_OSAL_MmngrClose(hndl_mmngr), OSAL_RETURN_OK) << "Test09_015_029 failed";
    hndl_mmngr = OSAL_MEMORY_MANAGER_HANDLE_INVALID;
}
// [MmngrDebugMmngrPrint_TC_09_015_029]

 /**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrDebugBufferPrint_TC_09_016_001 MemoryApiTest.MmngrDebugBufferPrint_TC_09_016_001
 * @subsection MmngrDebugBufferPrint_TC_09_016_001_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrDebugBufferPrint_TC_09_016_001_tci Test Case ID
 * MmngrDebugBufferPrint_S3_N_TC_09_016_001
 * @subsection MmngrDebugBufferPrint_TC_09_016_001_rr Related Requirement(s)
 * \#276574
 * @subsection MmngrDebugBufferPrint_TC_09_016_001_pp Prerequisite/Precondition
 * OSAL is initialized and debug mode<br>
 * If not debug debug mode, The return value is OSAL_RETURN_UNSUPPORTED_OPERATION.
 * @subsection MmngrDebugBufferPrint_TC_09_016_001_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrDebugBufferPrint with normal condition.
 * - pre-process: open new memory manager
 * - Test09_016_001: with all valid parameter.
 * - post-process: close memory manager
 * @subsection MmngrDebugBufferPrint_TC_09_016_001_tpts Test Procedure/Test Steps
 * -# Call R_OSAL_MmngrOpen with bellow config:
 *  - config.memory_limit                = 4096
 *  - config.max_allowed_allocations     = 1
 *  - config.max_registered_monitors_cbs = 2
 *  - config.mode = OSAL_MMNGR_ALLOC_MODE_STACK
 * -# Call R_OSAL_MmngrAlloc to allocate a memory buffer.
 * -# Call R_OSAL_MmngrDebugBufferPrint with valid paramater.
 * -# Call R_OSAL_MmngrDealloc to deallocate the allocated memory buffer.
 * -# Call R_OSAL_MmngrClose to close memory handle.
 * @subsection MmngrDebugBufferPrint_TC_09_016_001_ereb Expected Result/Behavior
 * -# The return of R_OSAL_MmngrOpen is OSAL_RETURN_OK. <br>
 * The returned handle is not OSAL_MEMORY_MANAGER_HANDLE_INVALID. 
 * -# The return value of R_OSAL_MmngrAlloc is OSAL_RETURN_OK.<br>
 * The return buffer is not OSAL_MEMORY_BUFFER_HANDLE_INVALID.
 * -# The return value of the R_OSAL_MmngrDebugBufferPrint is OSAL_RETURN_OK in DEBUG mode or OSAL_RETURN_HANDLE_NOT_SUPPORTED in RELEASE mode.
 * -# The return value of R_OSAL_MmngrDealloc is OSAL_RETURN_OK. 
 * -# The return value of R_OSAL_MmngrClose is OSAL_RETURN_OK.
 * @subsection MmngrDebugBufferPrint_TC_09_016_001_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrDebugBufferPrint_TC_09_016_001
 */
// [MmngrDebugBufferPrint_TC_09_016_001]
TEST_F(MemoryApiTest, MmngrDebugBufferPrint_TC_09_016_001)
{
    // pre-process: open memory manager
    config.memory_limit                = 4096;
    config.max_allowed_allocations     = 1;
    config.max_registered_monitors_cbs = 2;
    config.mode = OSAL_MMNGR_ALLOC_MODE_STACK;

    EXPECT_EQ(R_OSAL_MmngrOpen(&config, &hndl_mmngr), OSAL_RETURN_OK) << "pre-process failed";
    EXPECT_NE(hndl_mmngr,OSAL_MEMORY_MANAGER_HANDLE_INVALID) << "pre-process failed";

    // Test09_016_001 and 09_016_008
    // @brief: normal case:  all valid argument
    size = 64;
    alignment = 64;
    EXPECT_EQ(R_OSAL_MmngrAlloc(hndl_mmngr, size, alignment, &buffer_obj), OSAL_RETURN_OK);
    EXPECT_NE(buffer_obj,OSAL_MEMORY_BUFFER_HANDLE_INVALID);
    if(hndl_mmngr->p_print != NULL) //DEBUG mode
    {
        EXPECT_EQ(R_OSAL_MmngrDebugBufferPrint(buffer_obj, stdout), OSAL_RETURN_OK) << "Test09_016_001 failed";
    }
    else //RELEASE mode
    {
        EXPECT_EQ(R_OSAL_MmngrDebugBufferPrint(buffer_obj, stdout), OSAL_RETURN_UNSUPPORTED_OPERATION) << "Test09_016_008 failed";
    }
    EXPECT_EQ(R_OSAL_MmngrDealloc(hndl_mmngr,buffer_obj), OSAL_RETURN_OK);
    buffer_obj = OSAL_MEMORY_BUFFER_HANDLE_INVALID;

    // post-process: close memory manager
    EXPECT_EQ(R_OSAL_MmngrClose(hndl_mmngr), OSAL_RETURN_OK) << "post-process failed";
    hndl_mmngr = OSAL_MEMORY_MANAGER_HANDLE_INVALID;
}
// [MmngrDebugBufferPrint_TC_09_016_001]

 /**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrDebugBufferPrint_TC_09_016_002 MemoryApiTest.MmngrDebugBufferPrint_TC_09_016_002
 * @subsection MmngrDebugBufferPrint_TC_09_016_002_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrDebugBufferPrint_TC_09_016_002_tci Test Case ID
 * MmngrDebugBufferPrint_S0_A_TC_09_016_002
 * @subsection MmngrDebugBufferPrint_TC_09_016_002_rr Related Requirement(s)
 * \#276574
 * @subsection MmngrDebugBufferPrint_TC_09_016_002_pp Prerequisite/Precondition
 * OSAL is initialized and debug mode<br>
 * If not debug debug mode, The return value is OSAL_RETURN_UNSUPPORTED_OPERATION.
 * @subsection MmngrDebugBufferPrint_TC_09_016_002_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrDebugBufferPrint with abnormal condition
 * - Test09_016_002: buffer is NULL.
 * @subsection MmngrDebugBufferPrint_TC_09_016_002_tpts Test Procedure/Test Steps
 * -# Call R_OSAL_MmngrDebugBufferPrint with NULL buffer.
 * @subsection MmngrDebugBufferPrint_TC_09_016_002_ereb Expected Result/Behavior
 * -# The return value of R_OSAL_MmngrDebugBufferPrint is OSAL_RETURN_HANDLE.
 * @subsection MmngrDebugBufferPrint_TC_09_016_002_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrDebugBufferPrint_TC_09_016_002
 */
// [MmngrDebugBufferPrint_TC_09_016_002]
TEST_F(MemoryApiTest, MmngrDebugBufferPrint_TC_09_016_002)
{
    // Test09_016_002
    // @brief: abnormal case:  buffer_obj = NULL
    // If the parameter is Abnormal, no case classification is performed.
    // Because OSAL_RETURN_UNSUPPORTED_OPERATION is determined when calling p_print
    EXPECT_EQ(R_OSAL_MmngrDebugBufferPrint(OSAL_MEMORY_BUFFER_HANDLE_INVALID, stdout), OSAL_RETURN_HANDLE) << "Test09_016_002 failed";
}
// [MmngrDebugBufferPrint_TC_09_016_002]

 /**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrDebugBufferPrint_TC_09_016_003 MemoryApiTest.MmngrDebugBufferPrint_TC_09_016_003
 * @subsection MmngrDebugBufferPrint_TC_09_016_003_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrDebugBufferPrint_TC_09_016_003_tci Test Case ID
 * MmngrDebugBufferPrint_S4_A_TC_09_016_003
 * @subsection MmngrDebugBufferPrint_TC_09_016_003_rr Related Requirement(s)
 * \#276574
 * @subsection MmngrDebugBufferPrint_TC_09_016_003_pp Prerequisite/Precondition
 * OSAL is initialized and debug mode<br>
 * If not debug debug mode, The return value is OSAL_RETURN_UNSUPPORTED_OPERATION.
 * @subsection MmngrDebugBufferPrint_TC_09_016_003_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrDebugBufferPrint with abnormal condition
 * - pre-process: open new memory manager.
 * - Test09_016_003: buffer is not support to print buffer information.
 * - post-process: close memory manager
 * @subsection MmngrDebugBufferPrint_TC_09_016_003_tpts Test Procedure/Test Steps
 * -# Call R_OSAL_MmngrOpen with bellow config:
 *  - config.memory_limit                = 4096
 *  - config.max_allowed_allocations     = 1
 *  - config.max_registered_monitors_cbs = 2
 *  - config.mode = OSAL_MMNGR_ALLOC_MODE_STACK
 * -# malloc "tmp_buffer_obj" by using malloc function.
 * -# Call R_OSAL_MmngrAlloc to allocate a memory buffer.
 * -# Store "buffer_obj->p_print" to "tmp_buffer_obj->p_print".<br>
 * Set "buffer_obj->p_print" to NULL. <br>
 * Call R_OSAL_MmngrDebugBufferPrint with the changed buffer "buffer_obj".<br>
 * Re-assign "tmp_buffer_obj->p_print" to "buffer_obj->p_print".
 * -# Call R_OSAL_MmngrDealloc to deallocate the allocated memory buffer.
 * -# Free buffer pointed by "tmp_buffer_obj".
 * -# Call R_OSAL_MmngrClose to close memory handle.
 * @subsection MmngrDebugBufferPrint_TC_09_016_003_ereb Expected Result/Behavior
 * -# The return of R_OSAL_MmngrOpen is OSAL_RETURN_OK. <br>
 * The returned handle is not OSAL_MEMORY_MANAGER_HANDLE_INVALID. 
 * -# Memory allocation succeeded (Pointer to buffer != Nullpointer)
 * -# The return value of R_OSAL_MmngrAlloc is OSAL_RETURN_OK. <br>
 * The return buffer is not OSAL_MEMORY_BUFFER_HANDLE_INVALID. 
 * -# The return value of R_OSAL_MmngrDebugBufferPrint is OSAL_RETURN_UNSUPPORTED_OPERATION.
 * -# The return value of R_OSAL_MmngrDealloc is OSAL_RETURN_OK. 
 * -# Allocated memory free succeeded.
 * -# The return value of R_OSAL_MmngrClose is OSAL_RETURN_OK.
 * @subsection MmngrDebugBufferPrint_TC_09_016_003_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrDebugBufferPrint_TC_09_016_003
 */
// [MmngrDebugBufferPrint_TC_09_016_003]
TEST_F(MemoryApiTest, MmngrDebugBufferPrint_TC_09_016_003)
{
    osal_memory_buffer_handle_t tmp_buffer_obj;

    // pre-process: open memory manager
    config.memory_limit                = 4096;
    config.max_allowed_allocations     = 1;
    config.max_registered_monitors_cbs = 2;
    config.mode = OSAL_MMNGR_ALLOC_MODE_STACK;
    size = 128;
    alignment = 64;

    EXPECT_EQ(R_OSAL_MmngrOpen(&config, &hndl_mmngr), OSAL_RETURN_OK) << "pre-process failed";
    EXPECT_NE(hndl_mmngr,OSAL_MEMORY_MANAGER_HANDLE_INVALID) << "pre-process failed";

    // Test09_016_003
    // @brief: abnormal case:  buffer_obj->print = NULL
    // If the parameter is Abnormal, no case classification is performed.
    // Because OSAL_RETURN_UNSUPPORTED_OPERATION is determined when calling p_print
    tmp_buffer_obj = (osal_memory_buffer_handle_t)malloc (sizeof(st_osal_memory_buffer_obj));
    EXPECT_EQ(R_OSAL_MmngrAlloc(hndl_mmngr, size, alignment, &buffer_obj), OSAL_RETURN_OK);
    EXPECT_NE(buffer_obj,OSAL_MEMORY_BUFFER_HANDLE_INVALID);
    tmp_buffer_obj->p_print = buffer_obj->p_print;
    buffer_obj->p_print = NULL;
    EXPECT_EQ(R_OSAL_MmngrDebugBufferPrint(buffer_obj, stdout), OSAL_RETURN_UNSUPPORTED_OPERATION) << "Test09_016_003 failed";
    buffer_obj->p_print = tmp_buffer_obj->p_print;
    EXPECT_EQ(R_OSAL_MmngrDealloc(hndl_mmngr,buffer_obj), OSAL_RETURN_OK);
    buffer_obj = OSAL_MEMORY_BUFFER_HANDLE_INVALID;
    free(tmp_buffer_obj);

    // post-process: close memory manager
    EXPECT_EQ(R_OSAL_MmngrClose(hndl_mmngr), OSAL_RETURN_OK) << "post-process failed";
    hndl_mmngr = OSAL_MEMORY_MANAGER_HANDLE_INVALID;
}
// [MmngrDebugBufferPrint_TC_09_016_003]

 /**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrDebugBufferPrint_TC_09_016_004 MemoryApiTest.MmngrDebugBufferPrint_TC_09_016_004
 * @subsection MmngrDebugBufferPrint_TC_09_016_004_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrDebugBufferPrint_TC_09_016_004_tci Test Case ID
 * MmngrDebugBufferPrint_S0_A_TC_09_016_004
 * @subsection MmngrDebugBufferPrint_TC_09_016_004_rr Related Requirement(s)
 * \#276574
 * @subsection MmngrDebugBufferPrint_TC_09_016_004_pp Prerequisite/Precondition
 * OSAL is initialized and debug mode<br>
 * If not debug debug mode, The return value is OSAL_RETURN_UNSUPPORTED_OPERATION.
 * @subsection MmngrDebugBufferPrint_TC_09_016_004_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrDebugBufferPrint with abnormal condition
 * - pre-process: open new memory manager.
 * - Test09_016_004: paramater p_output is NULL.
 * - post-process: close memory manager
 * @subsection MmngrDebugBufferPrint_TC_09_016_004_tpts Test Procedure/Test Steps
 * -# Call R_OSAL_MmngrOpen with bellow config:
 *  - config.memory_limit                = 4096
 *  - config.max_allowed_allocations     = 1
 *  - config.max_registered_monitors_cbs = 2
 *  - config.mode = OSAL_MMNGR_ALLOC_MODE_STACK
 * -# Call R_OSAL_MmngrAlloc to allocate a memory buffer.
 * -# Call R_OSAL_MmngrDebugBufferPrint with NULL buffer.
 * -# Call R_OSAL_MmngrDealloc to deallocate the allocated memory buffer.
 * -# Call R_OSAL_MmngrClose to close memory handle.
 * @subsection MmngrDebugBufferPrint_TC_09_016_004_ereb Expected Result/Behavior
 * -# The return of R_OSAL_MmngrOpen is OSAL_RETURN_OK. <br>
 * The returned handle is not OSAL_MEMORY_MANAGER_HANDLE_INVALID. 
 * -# The return value of R_OSAL_MmngrAlloc is OSAL_RETURN_OK.<br>
 * The return buffer is not OSAL_MEMORY_BUFFER_HANDLE_INVALID. 
 * -# The return value of R_OSAL_MmngrDebugBufferPrint is OSAL_RETURN_PAR.
 * -# The return value of R_OSAL_MmngrDealloc is OSAL_RETURN_OK. 
 * -# The return value of R_OSAL_MmngrClose is OSAL_RETURN_OK.
 * @subsection MmngrDebugBufferPrint_TC_09_016_004_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrDebugBufferPrint_TC_09_016_004
 */
// [MmngrDebugBufferPrint_TC_09_016_004]
TEST_F(MemoryApiTest, MmngrDebugBufferPrint_TC_09_016_004)
{
    FILE * output = NULL;

    // pre-process: open memory manager
    config.memory_limit                = 4096;
    config.max_allowed_allocations     = 1;
    config.max_registered_monitors_cbs = 2;
    config.mode = OSAL_MMNGR_ALLOC_MODE_STACK;
    size = 128;
    alignment = 64;

    EXPECT_EQ(R_OSAL_MmngrOpen(&config, &hndl_mmngr), OSAL_RETURN_OK) << "pre-process failed";
    EXPECT_NE(hndl_mmngr,OSAL_MEMORY_MANAGER_HANDLE_INVALID) << "pre-process failed";

    // Test09_016_004
    // @brief: abnormal case:  OUTPUT = NULL
    // If the parameter is Abnormal, no case classification is performed.
    // Because OSAL_RETURN_UNSUPPORTED_OPERATION is determined when calling p_print
    EXPECT_EQ(R_OSAL_MmngrAlloc(hndl_mmngr, size, alignment, &buffer_obj), OSAL_RETURN_OK);
    EXPECT_NE(buffer_obj,OSAL_MEMORY_BUFFER_HANDLE_INVALID);
    EXPECT_EQ(R_OSAL_MmngrDebugBufferPrint(buffer_obj, output), OSAL_RETURN_PAR) << "Test09_016_004 failed";
    EXPECT_EQ(R_OSAL_MmngrDealloc(hndl_mmngr,buffer_obj), OSAL_RETURN_OK);
    buffer_obj = OSAL_MEMORY_BUFFER_HANDLE_INVALID;

    // post-process: close memory manager
    EXPECT_EQ(R_OSAL_MmngrClose(hndl_mmngr), OSAL_RETURN_OK) << "post-process failed";
    hndl_mmngr = OSAL_MEMORY_MANAGER_HANDLE_INVALID;
}
// [MmngrDebugBufferPrint_TC_09_016_004]

 /**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrDebugBufferPrint_TC_09_016_006 MemoryApiTest.MmngrDebugBufferPrint_TC_09_016_006
 * @subsection MmngrDebugBufferPrint_TC_09_016_006_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrDebugBufferPrint_TC_09_016_006_tci Test Case ID
 * MmngrDebugBufferPrint_S3_N_TC_09_016_006
 * @subsection MmngrDebugBufferPrint_TC_09_016_006_rr Related Requirement(s)
 * \#276574
 * @subsection MmngrDebugBufferPrint_TC_09_016_006_pp Prerequisite/Precondition
 * OSAL is initialized and debug mode<br>
 * If not debug debug mode, The return value is OSAL_RETURN_UNSUPPORTED_OPERATION.
 * @subsection MmngrDebugBufferPrint_TC_09_016_006_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrDebugBufferPrint with normal condition.
 * - pre-process: open new memory manager
 * - Test09_016_006: confitm with OSAL_MMNGR_ALLOC_MODE_FREE_LIST mode
 * - post-process: close memory manager
 * @subsection MmngrDebugBufferPrint_TC_09_016_006_tpts Test Procedure/Test Steps
 * -# Call R_OSAL_MmngrOpen with bellow config:
 *  - config.memory_limit                = 4096
 *  - config.max_allowed_allocations     = 1
 *  - config.max_registered_monitors_cbs = 2
 *  - config.mode = OSAL_MMNGR_ALLOC_MODE_FREE_LIST
 * -# Call R_OSAL_MmngrAlloc to allocate a memory buffer.
 * -# Call R_OSAL_MmngrDebugBufferPrint with valid paramater.
 * -# Call R_OSAL_MmngrDealloc to deallocate the allocated memory buffer.
 * -# Call R_OSAL_MmngrClose to close memory handle.
 * @subsection MmngrDebugBufferPrint_TC_09_016_006_ereb Expected Result/Behavior
 * -# The return of R_OSAL_MmngrOpen is OSAL_RETURN_OK. <br>
 * The returned handle is not OSAL_MEMORY_MANAGER_HANDLE_INVALID. 
 * -# The return value of R_OSAL_MmngrAlloc is OSAL_RETURN_OK.<br>
 * The return buffer is not OSAL_MEMORY_BUFFER_HANDLE_INVALID.
 * -# The return value of the R_OSAL_MmngrDebugBufferPrint is OSAL_RETURN_OK in DEBUG mode or OSAL_RETURN_HANDLE_NOT_SUPPORTED in RELEASE mode.
 * -# The return value of R_OSAL_MmngrDealloc is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrClose is OSAL_RETURN_OK.
 * @subsection MmngrDebugBufferPrint_TC_09_016_006_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrDebugBufferPrint_TC_09_016_006
 */
// [MmngrDebugBufferPrint_TC_09_016_006]
TEST_F(MemoryApiTest, MmngrDebugBufferPrint_TC_09_016_006)
{
    // pre-process: open memory manager
    config.memory_limit                = 4096;
    config.max_allowed_allocations     = 1;
    config.max_registered_monitors_cbs = 2;
    config.mode = OSAL_MMNGR_ALLOC_MODE_FREE_LIST;
    size = 128;
    alignment = 64;

    EXPECT_EQ(R_OSAL_MmngrOpen(&config, &hndl_mmngr), OSAL_RETURN_OK) << "pre-process failed";
    EXPECT_NE(hndl_mmngr,OSAL_MEMORY_MANAGER_HANDLE_INVALID) << "pre-process failed";

    // Test09_016_006 and 09_016_010
    // @brief: normal case: config.mode = OSAL_MMNGR_ALLOC_MODE_FREE_LIST;
    EXPECT_EQ(R_OSAL_MmngrAlloc(hndl_mmngr, size, alignment, &buffer_obj), OSAL_RETURN_OK);
    EXPECT_NE(buffer_obj,OSAL_MEMORY_BUFFER_HANDLE_INVALID);
    if(hndl_mmngr->p_print != NULL) //DEBUG mode
    {
        EXPECT_EQ(R_OSAL_MmngrDebugBufferPrint(buffer_obj, stdout), OSAL_RETURN_OK) << "Test09_016_006 failed";
    }
    else //RELEASE mode
    {
        EXPECT_EQ(R_OSAL_MmngrDebugBufferPrint(buffer_obj, stdout), OSAL_RETURN_UNSUPPORTED_OPERATION) << "Test09_016_010 failed";
    }
    EXPECT_EQ(R_OSAL_MmngrDealloc(hndl_mmngr,buffer_obj), OSAL_RETURN_OK);
    buffer_obj = OSAL_MEMORY_BUFFER_HANDLE_INVALID;

    // post-process: close memory manager
    EXPECT_EQ(R_OSAL_MmngrClose(hndl_mmngr), OSAL_RETURN_OK) << "post-process failed";
    hndl_mmngr = OSAL_MEMORY_MANAGER_HANDLE_INVALID;
}
// [MmngrDebugBufferPrint_TC_09_016_006]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrDebugBufferPrint_TC_09_016_007 MemoryApiTest.MmngrDebugBufferPrint_TC_09_016_007
 * @subsection MmngrDebugBufferPrint_TC_09_016_007_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrDebugBufferPrint_TC_09_016_007_tci Test Case ID
 * MmngrDebugBufferPrint_S3_N_TC_09_016_007
 * @subsection MmngrDebugBufferPrint_TC_09_016_007_rr Related Requirement(s)
 * \#276574
 * @subsection MmngrDebugBufferPrint_TC_09_016_007_pp Prerequisite/Precondition
 * OSAL is initialized and debug mode<br>
 * If not debug debug mode, The return value is OSAL_RETURN_UNSUPPORTED_OPERATION.
 * @subsection MmngrDebugBufferPrint_TC_09_016_007_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrDebugBufferPrint with abnormal condition
 * - pre-process: open new memory manager.
 * - Test09_016_007: confirm with the debug mode is not enabled
 * - post-process: close memory manager
 * @subsection MmngrDebugBufferPrint_TC_09_016_007_tpts Test Procedure/Test Steps
 * -# Call R_OSAL_MmngrOpen with bellow config:
 *  - config.memory_limit                = 4096
 *  - config.max_allowed_allocations     = 1
 *  - config.max_registered_monitors_cbs = 2
 *  - config.mode = OSAL_MMNGR_ALLOC_MODE_STACK
 * -# Call R_OSAL_MmngrAlloc to allocate a memory buffer.
 * -# Call R_OSAL_MmngrDebugBufferPrint with NULL buffer.
 * -# Call R_OSAL_MmngrDealloc to deallocate the allocated memory buffer.
 * -# Call R_OSAL_MmngrClose to close memory handle.
 * @subsection MmngrDebugBufferPrint_TC_09_016_007_ereb Expected Result/Behavior
 * -# The return of R_OSAL_MmngrOpen is OSAL_RETURN_OK. <br>
 * The returned handle is not OSAL_MEMORY_MANAGER_HANDLE_INVALID. 
 * -# The return value of R_OSAL_MmngrAlloc is OSAL_RETURN_OK.<br>
 * The return buffer is not OSAL_MEMORY_BUFFER_HANDLE_INVALID.
 * -# The return value of R_OSAL_MmngrDebugBufferPrint is OSAL_RETURN_UNSUPPORTED_OPERATION.
 * -# The return value of R_OSAL_MmngrDealloc is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrClose is OSAL_RETURN_OK.
 * @subsection MmngrDebugBufferPrint_TC_09_016_007_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrDebugBufferPrint_TC_09_016_007
 */
// [MmngrDebugBufferPrint_TC_09_016_007]
TEST_F(MemoryApiTest, MmngrDebugBufferPrint_TC_09_016_007)
{
    // pre-process: open memory manager
    config.memory_limit                = 4096;
    config.max_allowed_allocations     = 1;
    config.max_registered_monitors_cbs = 2;
    config.mode = OSAL_MMNGR_ALLOC_MODE_STACK;
    size = 128;
    alignment = 64;

    EXPECT_EQ(R_OSAL_MmngrOpen(&config, &hndl_mmngr), OSAL_RETURN_OK) << "pre-process failed";
    EXPECT_NE(hndl_mmngr,OSAL_MEMORY_MANAGER_HANDLE_INVALID) << "pre-process failed";

    // Test09_016_007 and 09_016_011
    // @brief: abnormal case: Confirm with DEBUG mode is OFF
    EXPECT_EQ(R_OSAL_MmngrAlloc(hndl_mmngr, size, alignment, &buffer_obj), OSAL_RETURN_OK) << "Test09_016_007 failed";
    EXPECT_NE(buffer_obj,OSAL_MEMORY_BUFFER_HANDLE_INVALID) << "Test09_016_007 failed";
    if(hndl_mmngr->p_print != NULL) //enter this path because p_print!=NULL in OSAL Wrapper DEBUG mode
    {
        EXPECT_EQ(R_OSAL_MmngrDebugBufferPrint(buffer_obj, stdout), OSAL_RETURN_OK) << "Test09_016_007 failed";
    }
    else //enter this path because p_print=NULL in OSAL Wrapper RELEASE mode
    {
        EXPECT_EQ(R_OSAL_MmngrDebugBufferPrint(buffer_obj, stdout), OSAL_RETURN_UNSUPPORTED_OPERATION) << "Test09_016_011 failed";
    }
    EXPECT_EQ(R_OSAL_MmngrDealloc(hndl_mmngr, buffer_obj), OSAL_RETURN_OK) << "Test09_016_007 failed";

    // post-process: close memory manager
    EXPECT_EQ(R_OSAL_MmngrClose(hndl_mmngr), OSAL_RETURN_OK) << "post-process failed";
    hndl_mmngr = OSAL_MEMORY_MANAGER_HANDLE_INVALID;
}
// [MmngrDebugBufferPrint_TC_09_016_007]
#endif

#ifndef SKIP_MEMORY_INIT
/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrDebugBufferPrint_TC_09_016_012 MemoryApiTest.MmngrDebugBufferPrint_TC_09_016_012
 * @subsection MmngrDebugBufferPrint_TC_09_016_012_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrDebugBufferPrint_TC_09_016_012_tci Test Case ID
 * MmngrDebugBufferPrint_S4_A_TC_09_016_012
 * @subsection MmngrDebugBufferPrint_TC_09_016_012_rr Related Requirement(s)
 * \#276574
 * @subsection MmngrDebugBufferPrint_TC_09_016_012_pp Prerequisite/Precondition
 * OSAL is initialized.
 * @subsection MmngrDebugBufferPrint_TC_09_016_012_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrDebugBufferPrint with abnormal condition in OSAL_MMNGR_ALLOC_MODE_STACK mode.
 * - pre-process: open memory manager
 * - Test09_016_012: "buffer_obj->p_ptr_self" is invalid.
 * - post-process: close memory manager
 * @subsection MmngrDebugBufferPrint_TC_09_016_012_tpts Test Procedure/Test Steps
 * -# Call R_OSAL_MmngrGetOsalMaxConfig to get the valid config then set config mode to OSAL_MMNGR_ALLOC_MODE_STACK
 * -# Call R_OSAL_MmngrOpen with valid parameter and above config.
 * -# Call R_OSAL_MmngrAlloc with valid parameter
 * -# Call R_OSAL_MmngrDebugBufferPrint with an invalid buffer_obj->p_ptr_self:
 *      - buffer_obj with p_ptr_self value changed to p_ptr_self_ng
 *      - "p_ptr_self_ng" is allocated by malloc function.
 * -# Deallocate buffer_obj by using R_OSAL_MmngrDeallocate.
 *      - buffer_obj with valid p_ptr_self value
 * -# Call R_OSAL_MmngrClose to close the memory manager.
 * @subsection MmngrDebugBufferPrint_TC_09_016_012_ereb Expected Result/Behavior
 * -# The return value of R_OSAL_MmngrGetOsalMaxConfig is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrOpen is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrAlloc is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrDebugBufferPrint is OSAL_RETURN_HANDLE.
 * -# The return value of R_OSAL_MmngrDeallocate is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrClose is OSAL_RETURN_OK.
 * @subsection MmngrDebugBufferPrint_TC_09_016_012_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrDebugBufferPrint_TC_09_016_012
 */
// [MmngrDebugBufferPrint_TC_09_016_012]
TEST_F(MemoryApiTest, MmngrDebugBufferPrint_TC_09_016_012)
{
    void* ptr_self_bak;
    void* ptr_self_ng;
    size = 64;
    alignment = 64;

    // Test09_016_012
    // @brief: abnormal case: "buffer_obj->p_ptr_self" is invalid.
    EXPECT_EQ(R_OSAL_MmngrGetOsalMaxConfig(&config), OSAL_RETURN_OK);
    config.mode = OSAL_MMNGR_ALLOC_MODE_STACK;
    EXPECT_EQ(R_OSAL_MmngrOpen(&config, &hndl_mmngr), OSAL_RETURN_OK);
    EXPECT_EQ(R_OSAL_MmngrAlloc(hndl_mmngr, size, alignment, &buffer_obj), OSAL_RETURN_OK);
    ptr_self_bak = buffer_obj->p_ptr_self;
    ptr_self_ng = malloc(0x100);
    memset(ptr_self_ng, 0x0, 0x100);
    buffer_obj->p_ptr_self = ptr_self_ng;
    if(buffer_obj->p_print != NULL) // DEBUG mode
    {
        EXPECT_EQ(R_OSAL_MmngrDebugBufferPrint(buffer_obj, stdout), OSAL_RETURN_HANDLE) << "Test09_016_012 failed";
    }
    else
    {
        EXPECT_EQ(R_OSAL_MmngrDebugBufferPrint(buffer_obj, stdout), OSAL_RETURN_UNSUPPORTED_OPERATION) << "Test09_016_012 failed";
    }
    free(ptr_self_ng);
    buffer_obj->p_ptr_self = ptr_self_bak;
    EXPECT_EQ(R_OSAL_MmngrDealloc(hndl_mmngr, buffer_obj), OSAL_RETURN_OK) << "Test09_016_012 failed";
    EXPECT_EQ(R_OSAL_MmngrClose(hndl_mmngr), OSAL_RETURN_OK) << "Test09_016_012 failed";
    hndl_mmngr = OSAL_MEMORY_MANAGER_HANDLE_INVALID;
    buffer_obj = OSAL_MEMORY_BUFFER_HANDLE_INVALID;
}
// [MmngrDebugBufferPrint_TC_09_016_012]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrDebugBufferPrint_TC_09_016_013 MemoryApiTest.MmngrDebugBufferPrint_TC_09_016_013
 * @subsection MmngrDebugBufferPrint_TC_09_016_013_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrDebugBufferPrint_TC_09_016_013_tci Test Case ID
 * MmngrDebugBufferPrint_S4_A_TC_09_016_013
 * @subsection MmngrDebugBufferPrint_TC_09_016_013_rr Related Requirement(s)
 * \#276574
 * @subsection MmngrDebugBufferPrint_TC_09_016_013_pp Prerequisite/Precondition
 * OSAL is initialized.
 * @subsection MmngrDebugBufferPrint_TC_09_016_013_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrDebugBufferPrint with abnormal condition in OSAL_MMNGR_ALLOC_MODE_STACK_PROT mode.
 * - pre-process: open memory manager
 * - Test09_016_013: "buffer_obj->p_ptr_self" is invalid.
 * - post-process: close memory manager
 * @subsection MmngrDebugBufferPrint_TC_09_016_013_tpts Test Procedure/Test Steps
 * -# Call R_OSAL_MmngrGetOsalMaxConfig to get the valid config then set config mode to OSAL_MMNGR_ALLOC_MODE_STACK_PROT
 * -# Call R_OSAL_MmngrOpen with valid parameter and above config.
 * -# Call R_OSAL_MmngrAlloc with valid parameter
 * -# Call R_OSAL_MmngrDebugBufferPrint with an invalid buffer_obj->p_ptr_self:
 *      - buffer_obj with p_ptr_self value changed to p_ptr_self_ng
 *      - "p_ptr_self_ng" is allocated by malloc function.
 * -# Deallocate buffer_obj by using R_OSAL_MmngrDeallocate.
 *      - buffer_obj with valid p_ptr_self value
 * -# Call R_OSAL_MmngrClose to close the memory manager.
 * @subsection MmngrDebugBufferPrint_TC_09_016_013_ereb Expected Result/Behavior
 * -# The return value of R_OSAL_MmngrGetOsalMaxConfig is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrOpen is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrAlloc is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrDebugBufferPrint is OSAL_RETURN_HANDLE.
 * -# The return value of R_OSAL_MmngrDeallocate is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrClose is OSAL_RETURN_OK.
 * @subsection MmngrDebugBufferPrint_TC_09_016_013_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrDebugBufferPrint_TC_09_016_013
 */
// [MmngrDebugBufferPrint_TC_09_016_013]
TEST_F(MemoryApiTest, MmngrDebugBufferPrint_TC_09_016_013)
{
    void* ptr_self_bak;
    void* ptr_self_ng;
    size = 64;
    alignment = 64;

    // Test09_016_013
    // @brief: abnormal case: "buffer_obj->p_ptr_self" is invalid.
    EXPECT_EQ(R_OSAL_MmngrGetOsalMaxConfig(&config), OSAL_RETURN_OK);
    config.mode = OSAL_MMNGR_ALLOC_MODE_STACK_PROT;
    EXPECT_EQ(R_OSAL_MmngrOpen(&config, &hndl_mmngr), OSAL_RETURN_OK);
    EXPECT_EQ(R_OSAL_MmngrAlloc(hndl_mmngr, size, alignment, &buffer_obj), OSAL_RETURN_OK);
    ptr_self_bak = buffer_obj->p_ptr_self;
    ptr_self_ng = malloc(0x100);
    memset(ptr_self_ng, 0x0, 0x100);
    buffer_obj->p_ptr_self = ptr_self_ng;
    if(buffer_obj->p_print != NULL) // DEBUG mode
    {
        EXPECT_EQ(R_OSAL_MmngrDebugBufferPrint(buffer_obj, stdout), OSAL_RETURN_HANDLE) << "Test09_016_013 failed";
    }
    else
    {
        EXPECT_EQ(R_OSAL_MmngrDebugBufferPrint(buffer_obj, stdout), OSAL_RETURN_UNSUPPORTED_OPERATION) << "Test09_016_013 failed";
    }
    free(ptr_self_ng);
    buffer_obj->p_ptr_self = ptr_self_bak;
    EXPECT_EQ(R_OSAL_MmngrDealloc(hndl_mmngr, buffer_obj), OSAL_RETURN_OK) << "Test09_016_013 failed";
    EXPECT_EQ(R_OSAL_MmngrClose(hndl_mmngr), OSAL_RETURN_OK) << "Test09_016_013 failed";
    hndl_mmngr = OSAL_MEMORY_MANAGER_HANDLE_INVALID;
    buffer_obj = OSAL_MEMORY_BUFFER_HANDLE_INVALID;
}
// [MmngrDebugBufferPrint_TC_09_016_013]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrDebugBufferPrint_TC_09_016_014 MemoryApiTest.MmngrDebugBufferPrint_TC_09_016_014
 * @subsection MmngrDebugBufferPrint_TC_09_016_014_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrDebugBufferPrint_TC_09_016_014_tci Test Case ID
 * MmngrDebugBufferPrint_S4_A_TC_09_016_014
 * @subsection MmngrDebugBufferPrint_TC_09_016_014_rr Related Requirement(s)
 * \#276574
 * @subsection MmngrDebugBufferPrint_TC_09_016_014_pp Prerequisite/Precondition
 * OSAL is initialized.
 * @subsection MmngrDebugBufferPrint_TC_09_016_014_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrDebugBufferPrint with abnormal condition in OSAL_MMNGR_ALLOC_MODE_FREE_LIST mode.
 * - pre-process: open memory manager
 * - Test09_016_014: "buffer_obj->p_ptr_self" is invalid.
 * - post-process: close memory manager
 * @subsection MmngrDebugBufferPrint_TC_09_016_014_tpts Test Procedure/Test Steps
 * -# Call R_OSAL_MmngrGetOsalMaxConfig to get the valid config then set config mode to OSAL_MMNGR_ALLOC_MODE_FREE_LIST
 * -# Call R_OSAL_MmngrOpen with valid parameter and above config.
 * -# Call R_OSAL_MmngrAlloc with valid parameter
 * -# Call R_OSAL_MmngrDebugBufferPrint with an invalid buffer_obj->p_ptr_self:
 *      - buffer_obj with p_ptr_self value changed to p_ptr_self_ng
 *      - "p_ptr_self_ng" is allocated by malloc function.
 * -# Deallocate buffer_obj by using R_OSAL_MmngrDeallocate.
 *      - buffer_obj with valid p_ptr_self value
 * -# Call R_OSAL_MmngrClose to close the memory manager.
 * @subsection MmngrDebugBufferPrint_TC_09_016_014_ereb Expected Result/Behavior
 * -# The return value of R_OSAL_MmngrGetOsalMaxConfig is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrOpen is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrAlloc is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrDebugBufferPrint is OSAL_RETURN_HANDLE.
 * -# The return value of R_OSAL_MmngrDeallocate is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrClose is OSAL_RETURN_OK.
 * @subsection MmngrDebugBufferPrint_TC_09_016_014_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrDebugBufferPrint_TC_09_016_014
 */
// [MmngrDebugBufferPrint_TC_09_016_014]
TEST_F(MemoryApiTest, MmngrDebugBufferPrint_TC_09_016_014)
{
    void* ptr_self_bak;
    void* ptr_self_ng;
    size = 64;
    alignment = 64;

    // Test09_016_014
    // @brief: abnormal case: "buffer_obj->p_ptr_self" is invalid.
    EXPECT_EQ(R_OSAL_MmngrGetOsalMaxConfig(&config), OSAL_RETURN_OK);
    config.mode = OSAL_MMNGR_ALLOC_MODE_FREE_LIST;
    EXPECT_EQ(R_OSAL_MmngrOpen(&config, &hndl_mmngr), OSAL_RETURN_OK);
    EXPECT_EQ(R_OSAL_MmngrAlloc(hndl_mmngr, size, alignment, &buffer_obj), OSAL_RETURN_OK);
    ptr_self_bak = buffer_obj->p_ptr_self;
    ptr_self_ng = malloc(0x100);
    memset(ptr_self_ng, 0x0, 0x100);
    buffer_obj->p_ptr_self = ptr_self_ng;
    if(buffer_obj->p_print != NULL) // DEBUG mode
    {
        EXPECT_EQ(R_OSAL_MmngrDebugBufferPrint(buffer_obj, stdout), OSAL_RETURN_HANDLE) << "Test09_016_014 failed";
    }
    else
    {
        EXPECT_EQ(R_OSAL_MmngrDebugBufferPrint(buffer_obj, stdout), OSAL_RETURN_UNSUPPORTED_OPERATION) << "Test09_016_014 failed";
    }
    free(ptr_self_ng);
    buffer_obj->p_ptr_self = ptr_self_bak;
    EXPECT_EQ(R_OSAL_MmngrDealloc(hndl_mmngr, buffer_obj), OSAL_RETURN_OK) << "Test09_016_014 failed";
    EXPECT_EQ(R_OSAL_MmngrClose(hndl_mmngr), OSAL_RETURN_OK) << "Test09_016_014 failed";
    hndl_mmngr = OSAL_MEMORY_MANAGER_HANDLE_INVALID;
    buffer_obj = OSAL_MEMORY_BUFFER_HANDLE_INVALID;
}
// [MmngrDebugBufferPrint_TC_09_016_014]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrDebugBufferPrint_TC_09_016_015 MemoryApiTest.MmngrDebugBufferPrint_TC_09_016_015
 * @subsection MmngrDebugBufferPrint_TC_09_016_015_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrDebugBufferPrint_TC_09_016_015_tci Test Case ID
 * MmngrDebugBufferPrint_S4_A_TC_09_016_015
 * @subsection MmngrDebugBufferPrint_TC_09_016_015_rr Related Requirement(s)
 * \#276574
 * @subsection MmngrDebugBufferPrint_TC_09_016_015_pp Prerequisite/Precondition
 * OSAL is initialized.
 * @subsection MmngrDebugBufferPrint_TC_09_016_015_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrDebugBufferPrint with abnormal condition in OSAL_MMNGR_ALLOC_MODE_FREE_LIST_PROT mode.
 * - pre-process: open memory manager
 * - Test09_016_015: "buffer_obj->p_ptr_self" is invalid.
 * - post-process: close memory manager
 * @subsection MmngrDebugBufferPrint_TC_09_016_015_tpts Test Procedure/Test Steps
 * -# Call R_OSAL_MmngrGetOsalMaxConfig to get the valid config then set config mode to OSAL_MMNGR_ALLOC_MODE_FREE_LIST_PROT
 * -# Call R_OSAL_MmngrOpen with valid parameter and above config.
 * -# Call R_OSAL_MmngrAlloc with valid parameter
 * -# Call R_OSAL_MmngrDebugBufferPrint with an invalid buffer_obj->p_ptr_self:
 *      - buffer_obj with p_ptr_self value changed to p_ptr_self_ng
 *      - "p_ptr_self_ng" is allocated by malloc function.
 * -# Deallocate buffer_obj by using R_OSAL_MmngrDeallocate.
 *      - buffer_obj with valid p_ptr_self value
 * -# Call R_OSAL_MmngrClose to close the memory manager.
 * @subsection MmngrDebugBufferPrint_TC_09_016_015_ereb Expected Result/Behavior
 * -# The return value of R_OSAL_MmngrGetOsalMaxConfig is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrOpen is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrAlloc is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrDebugBufferPrint is OSAL_RETURN_HANDLE.
 * -# The return value of R_OSAL_MmngrDeallocate is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrClose is OSAL_RETURN_OK.
 * @subsection MmngrDebugBufferPrint_TC_09_016_015_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrDebugBufferPrint_TC_09_016_015
 */
// [MmngrDebugBufferPrint_TC_09_016_015]
TEST_F(MemoryApiTest, MmngrDebugBufferPrint_TC_09_016_015)
{
    void* ptr_self_bak;
    void* ptr_self_ng;
    size = 64;
    alignment = 64;

    // Test09_016_015
    // @brief: abnormal case: "buffer_obj->p_ptr_self" is invalid.
    EXPECT_EQ(R_OSAL_MmngrGetOsalMaxConfig(&config), OSAL_RETURN_OK);
    config.mode = OSAL_MMNGR_ALLOC_MODE_FREE_LIST_PROT;
    EXPECT_EQ(R_OSAL_MmngrOpen(&config, &hndl_mmngr), OSAL_RETURN_OK);
    EXPECT_EQ(R_OSAL_MmngrAlloc(hndl_mmngr, size, alignment, &buffer_obj), OSAL_RETURN_OK);
    ptr_self_bak = buffer_obj->p_ptr_self;
    ptr_self_ng = malloc(0x100);
    memset(ptr_self_ng, 0x0, 0x100);
    buffer_obj->p_ptr_self = ptr_self_ng;
    if(buffer_obj->p_print != NULL) // DEBUG mode
    {
        EXPECT_EQ(R_OSAL_MmngrDebugBufferPrint(buffer_obj, stdout), OSAL_RETURN_HANDLE) << "Test09_016_015 failed";
    }
    else
    {
        EXPECT_EQ(R_OSAL_MmngrDebugBufferPrint(buffer_obj, stdout), OSAL_RETURN_UNSUPPORTED_OPERATION) << "Test09_016_015 failed";
    }
    free(ptr_self_ng);
    buffer_obj->p_ptr_self = ptr_self_bak;
    EXPECT_EQ(R_OSAL_MmngrDealloc(hndl_mmngr, buffer_obj), OSAL_RETURN_OK) << "Test09_016_015 failed";
    EXPECT_EQ(R_OSAL_MmngrClose(hndl_mmngr), OSAL_RETURN_OK) << "Test09_016_015 failed";
    hndl_mmngr = OSAL_MEMORY_MANAGER_HANDLE_INVALID;
    buffer_obj = OSAL_MEMORY_BUFFER_HANDLE_INVALID;
}
// [MmngrDebugBufferPrint_TC_09_016_015]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrInitializeMemoryBufferObj_TC_09_017_001 MemoryApiTest.MmngrInitializeMemoryBufferObj_TC_09_017_001
 * @subsection MmngrInitializeMemoryBufferObj_TC_09_017_001_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrInitializeMemoryBufferObj_TC_09_017_001_tci Test Case ID
 * MmngrInitializeMemoryBufferObj_S1_N_TC_09_017_001
 * @subsection MmngrInitializeMemoryBufferObj_TC_09_017_001_rr Related Requirement(s)
 * \#276390, \#276399, \#276405, \#276406
 * @subsection MmngrInitializeMemoryBufferObj_TC_09_017_001_pp Prerequisite/Precondition
 * OSAL is initialized
 * @subsection MmngrInitializeMemoryBufferObj_TC_09_017_001_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrInitializeMemoryBufferObj with normal condition.
 * - Test09_017_001: with all valid parameters.
 * @subsection MmngrInitializeMemoryBufferObj_TC_09_017_001_tpts Test Procedure/Test Steps
 * -# Call R_OSAL_MmngrInitializeMemoryBufferObj with valid parameter.
 * @subsection MmngrInitializeMemoryBufferObj_TC_09_017_001_ereb Expected Result/Behavior
 * -# The return of R_OSAL_MmngrInitializeMemoryBufferObj is OSAL_RETURN_OK and the return object are all NULL_PTR.
 * @subsection MmngrInitializeMemoryBufferObj_TC_09_017_001_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrInitializeMemoryBufferObj_TC_09_017_001
 */
// [MmngrInitializeMemoryBufferObj_TC_09_017_001]
TEST_F(MemoryApiTest, MmngrInitializeMemoryBufferObj_TC_09_017_001)
{
    osal_memory_buffer_t obj;

    // Test09_017_001
    // @brief: normal case:  all valid argument
    EXPECT_EQ(R_OSAL_MmngrInitializeMemoryBufferObj(&obj), OSAL_RETURN_OK) << "Test09_017_001 failed";
    EXPECT_EQ(obj.p_getCpuPtr, NULL_PTR) << "Test09_017_001 failed";
    EXPECT_EQ(obj.p_getConstCpuPtr, NULL_PTR) << "Test09_017_001 failed";
    EXPECT_EQ(obj.p_flush, NULL_PTR) << "Test09_017_001 failed";
    EXPECT_EQ(obj.p_invalidate, NULL_PTR) << "Test09_017_001 failed";
    EXPECT_EQ(obj.p_getHwAddr, NULL_PTR) << "Test09_017_001 failed";
    EXPECT_EQ(obj.p_getSize, NULL_PTR) << "Test09_017_001 failed";
    EXPECT_EQ(obj.p_checkBuffer, NULL_PTR) << "Test09_017_001 failed";
    EXPECT_EQ(obj.p_print, NULL_PTR) << "Test09_017_001 failed";
    EXPECT_EQ(obj.p_ptr_self, NULL_PTR) << "Test09_017_001 failed";
    EXPECT_EQ(obj.mmngr_owner_hndl, NULL_PTR) << "Test09_017_001 failed";
}
// [MmngrInitializeMemoryBufferObj_TC_09_017_001]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrInitializeMemoryBufferObj_TC_09_017_002 MemoryApiTest.MmngrInitializeMemoryBufferObj_TC_09_017_002
 * @subsection MmngrInitializeMemoryBufferObj_TC_09_017_002_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrInitializeMemoryBufferObj_TC_09_017_002_tci Test Case ID
 * MmngrInitializeMemoryBufferObj_S0_A_TC_09_017_002
 * @subsection MmngrInitializeMemoryBufferObj_TC_09_017_002_rr Related Requirement(s)
 * \#276390, \#276399
 * @subsection MmngrInitializeMemoryBufferObj_TC_09_017_002_pp Prerequisite/Precondition
 * OSAL is initialized
 * @subsection MmngrInitializeMemoryBufferObj_TC_09_017_002_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrInitializeMemoryBufferObj with abnormal condition
 * - Test09_017_002: object is NULL.
 * @subsection MmngrInitializeMemoryBufferObj_TC_09_017_002_tpts Test Procedure/Test Steps
 * -# Call R_OSAL_MmngrInitializeMemoryBufferObj with NULL paramater.
 * @subsection MmngrInitializeMemoryBufferObj_TC_09_017_002_ereb Expected Result/Behavior
 * -# The return of R_OSAL_MmngrInitializeMemoryBufferObj is OSAL_RETURN_PAR.
 * @subsection MmngrInitializeMemoryBufferObj_TC_09_017_002_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrInitializeMemoryBufferObj_TC_09_017_002
 */
// [MmngrInitializeMemoryBufferObj_TC_09_017_002]
TEST_F(MemoryApiTest, MmngrInitializeMemoryBufferObj_TC_09_017_002)
{
    osal_memory_buffer_t *p_obj = NULL;

    // Test09_017_002
    // @brief: abnormal case:  obj = NULL
    EXPECT_EQ(R_OSAL_MmngrInitializeMemoryBufferObj(p_obj), OSAL_RETURN_PAR) << "Test09_017_002 failed";
}
// [MmngrInitializeMemoryBufferObj_TC_09_017_002]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrInitializeMemoryManagerObj_TC_09_018_001 MemoryApiTest.MmngrInitializeMemoryManagerObj_TC_09_018_001
 * @subsection MmngrInitializeMemoryManagerObj_TC_09_018_001_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrInitializeMemoryManagerObj_TC_09_018_001_tci Test Case ID
 * MmngrInitializeMemoryManagerObj_S1_N_TC_09_018_001
 * @subsection MmngrInitializeMemoryManagerObj_TC_09_018_001_rr Related Requirement(s)
 * \#276390, \#276405, \#276407
 * @subsection MmngrInitializeMemoryManagerObj_TC_09_018_001_pp Prerequisite/Precondition
 * OSAL is initialized
 * @subsection MmngrInitializeMemoryManagerObj_TC_09_018_001_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrInitializeMemoryManagerObj with normal condition.
 * - Test09_018_001: with all valid parameters.
 * @subsection MmngrInitializeMemoryManagerObj_TC_09_018_001_tpts Test Procedure/Test Steps
 * -# Call R_OSAL_MmngrInitializeMemoryManagerObj with valid parameter.
 * @subsection MmngrInitializeMemoryManagerObj_TC_09_018_001_ereb Expected Result/Behavior
 * -# The return of R_OSAL_MmngrInitializeMemoryManagerObj is OSAL_RETURN_OK and the return object are all NULL_PTR.
 * @subsection MmngrInitializeMemoryManagerObj_TC_09_018_001_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrInitializeMemoryManagerObj_TC_09_018_001
 */
// [MmngrInitializeMemoryManagerObj_TC_09_018_001]
TEST_F(MemoryApiTest, MmngrInitializeMemoryManagerObj_TC_09_018_001)
{
    osal_memory_manager_t obj;

    // Test09_018_001
    // @brief: normal case:  all valid argument
    EXPECT_EQ(R_OSAL_MmngrInitializeMemoryManagerObj(&obj), OSAL_RETURN_OK) << "Test09_018_001 failed";
    EXPECT_EQ(obj.p_allocate, NULL_PTR) << "Test09_018_001 failed";
    EXPECT_EQ(obj.p_deallocate, NULL_PTR) << "Test09_018_001 failed";
    EXPECT_EQ(obj.p_getConfig, NULL_PTR) << "Test09_018_001 failed";
    EXPECT_EQ(obj.p_registerMonitor, NULL_PTR) << "Test09_018_001 failed";
    EXPECT_EQ(obj.p_print, NULL_PTR) << "Test09_018_001 failed";
    EXPECT_EQ(obj.p_ptr_self, NULL_PTR) << "Test09_018_001 failed";
}
// [MmngrInitializeMemoryManagerObj_TC_09_018_001]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrInitializeMemoryManagerObj_TC_09_018_002 MemoryApiTest.MmngrInitializeMemoryManagerObj_TC_09_018_002
 * @subsection MmngrInitializeMemoryManagerObj_TC_09_018_002_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrInitializeMemoryManagerObj_TC_09_018_002_tci Test Case ID
 * MmngrInitializeMemoryManagerObj_S0_A_TC_09_018_002
 * @subsection MmngrInitializeMemoryManagerObj_TC_09_018_002_rr Related Requirement(s)
 * \#276390
 * @subsection MmngrInitializeMemoryManagerObj_TC_09_018_002_pp Prerequisite/Precondition
 * OSAL is initialized
 * @subsection MmngrInitializeMemoryManagerObj_TC_09_018_002_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrInitializeMemoryManagerObj with abnormal condition.
 * - Test09_018_002: object is NULL.
 * @subsection MmngrInitializeMemoryManagerObj_TC_09_018_002_tpts Test Procedure/Test Steps
 * -# Call R_OSAL_MmngrInitializeMemoryManagerObj with NULL paramater.
 * @subsection MmngrInitializeMemoryManagerObj_TC_09_018_002_ereb Expected Result/Behavior
 * -# The return of R_OSAL_MmngrInitializeMemoryManagerObj is OSAL_RETURN_PAR.
 * @subsection MmngrInitializeMemoryManagerObj_TC_09_018_002_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrInitializeMemoryManagerObj_TC_09_018_002
 */
// [MmngrInitializeMemoryManagerObj_TC_09_018_002]
TEST_F(MemoryApiTest, MmngrInitializeMemoryManagerObj_TC_09_018_002)
{
    osal_memory_manager_t * p_obj = NULL;

    // Test09_018_002
    // @brief: abnormal case:  obj = NULL
    EXPECT_EQ(R_OSAL_MmngrInitializeMemoryManagerObj(p_obj), OSAL_RETURN_PAR) << "Test09_018_002 failed";
}
// [MmngrInitializeMemoryManagerObj_TC_09_018_002]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrInitializeMmngrConfigSt_TC_09_019_001 MemoryApiTest.MmngrInitializeMmngrConfigSt_TC_09_019_001
 * @subsection MmngrInitializeMmngrConfigSt_TC_09_019_001_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrInitializeMmngrConfigSt_TC_09_019_001_tci Test Case ID
 * MmngrInitializeMmngrConfigSt_S1_N_TC_09_019_001
 * @subsection MmngrInitializeMmngrConfigSt_TC_09_019_001_rr Related Requirement(s)
 * \#276547
 * @subsection MmngrInitializeMmngrConfigSt_TC_09_019_001_pp Prerequisite/Precondition
 * OSAL is initialized
 * @subsection MmngrInitializeMmngrConfigSt_TC_09_019_001_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrInitializeMmngrConfigSt with normal condition.
 * - Test09_019_001: with all valid parameters.
 * @subsection MmngrInitializeMmngrConfigSt_TC_09_019_001_tpts Test Procedure/Test Steps
 * -# Call R_OSAL_MmngrInitializeMmngrConfigSt with valid parameter.
 * @subsection MmngrInitializeMmngrConfigSt_TC_09_019_001_ereb Expected Result/Behavior
 * -# The return of R_OSAL_MmngrInitializeMmngrConfigSt is OSAL_RETURN_OK.
 * @subsection MmngrInitializeMmngrConfigSt_TC_09_019_001_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrInitializeMmngrConfigSt_TC_09_019_001
 */
// [MmngrInitializeMmngrConfigSt_TC_09_019_001]
TEST_F(MemoryApiTest, MmngrInitializeMmngrConfigSt_TC_09_019_001)
{
    st_osal_mmngr_config_t init_config;

    // Test09_019_001
    // @brief: normal case:  all valid argument
    EXPECT_EQ(R_OSAL_MmngrInitializeMmngrConfigSt(&init_config), OSAL_RETURN_OK) << "Test09_019_001 failed";
}
// [MmngrInitializeMmngrConfigSt_TC_09_019_001]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrInitializeMmngrConfigSt_TC_09_019_002 MemoryApiTest.MmngrInitializeMmngrConfigSt_TC_09_019_002
 * @subsection MmngrInitializeMmngrConfigSt_TC_09_019_002_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrInitializeMmngrConfigSt_TC_09_019_002_tci Test Case ID
 * MmngrInitializeMmngrConfigSt_S0_A_TC_09_019_002
 * @subsection MmngrInitializeMmngrConfigSt_TC_09_019_002_rr Related Requirement(s)
 * \#276547
 * @subsection MmngrInitializeMmngrConfigSt_TC_09_019_002_pp Prerequisite/Precondition
 * OSAL is initialized
 * @subsection MmngrInitializeMmngrConfigSt_TC_09_019_002_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrInitializeMmngrConfigSt with abnormal condition
 * - Test09_019_002: config is NULL.
 * @subsection MmngrInitializeMmngrConfigSt_TC_09_019_002_tpts Test Procedure/Test Steps
 * -# Call R_OSAL_MmngrInitializeMmngrConfigSt with NULL paramater.
 * @subsection MmngrInitializeMmngrConfigSt_TC_09_019_002_ereb Expected Result/Behavior
 * -# The return of R_OSAL_MmngrInitializeMmngrConfigSt is OSAL_RETURN_PAR.
 * @subsection MmngrInitializeMmngrConfigSt_TC_09_019_002_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrInitializeMmngrConfigSt_TC_09_019_002
 */
// [MmngrInitializeMmngrConfigSt_TC_09_019_002]
TEST_F(MemoryApiTest, MmngrInitializeMmngrConfigSt_TC_09_019_002)
{
     st_osal_mmngr_config_t* p_config = NULL;

    // Test09_019_002
    // @brief: abnormal case:  config = NULL
    EXPECT_EQ(R_OSAL_MmngrInitializeMmngrConfigSt(p_config), OSAL_RETURN_PAR) << "Test09_019_002 failed";
}
// [MmngrInitializeMmngrConfigSt_TC_09_019_002]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrInitializeMmngrConfigSt_TC_09_019_003 MemoryApiTest.MmngrInitializeMmngrConfigSt_TC_09_019_003
 * @subsection MmngrInitializeMmngrConfigSt_TC_09_019_003_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrInitializeMmngrConfigSt_TC_09_019_003_tci Test Case ID
 * MmngrInitializeMmngrConfigSt_S2_A_TC_09_019_003
 * @subsection MmngrInitializeMmngrConfigSt_TC_09_019_003_rr Related Requirement(s)
 * \#276547
 * @subsection MmngrInitializeMmngrConfigSt_TC_09_019_003_pp Prerequisite/Precondition
 * OSAL is initialized
 * @subsection MmngrInitializeMmngrConfigSt_TC_09_019_003_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrInitializeMmngrConfigSt with abnormal condition
 * - Test09_019_003: pass the invald config got by R_OSAL_MmngrInitializeMmngrConfigSt to R_OSAL_MmngrOpen
 * @subsection MmngrInitializeMmngrConfigSt_TC_09_019_003_tpts Test Procedure/Test Steps
 * -# Call R_OSAL_MmngrInitializeMmngrConfigSt with address of "init_config"
 * -# Call R_OSAL_MmngrOpen with the initialized config above
 * @subsection MmngrInitializeMmngrConfigSt_TC_09_019_003_ereb Expected Result/Behavior
 * -# The return of R_OSAL_MmngrInitializeMmngrConfigSt is OSAL_RETURN_OK.
 * -# The return of R_OSAL_MmngrOpen is OSAL_RETURN_CONF.
 * @subsection MmngrInitializeMmngrConfigSt_TC_09_019_003_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrInitializeMmngrConfigSt_TC_09_019_003
 */
// [MmngrInitializeMmngrConfigSt_TC_09_019_003]
TEST_F(MemoryApiTest, MmngrInitializeMmngrConfigSt_TC_09_019_003)
{
     st_osal_mmngr_config_t init_config;

    // Test09_019_003
    // @brief: abnormal case:  pass the invald config got by R_OSAL_MmngrInitializeMmngrConfigSt to R_OSAL_MmngrOpen
    EXPECT_EQ(R_OSAL_MmngrInitializeMmngrConfigSt(&init_config), OSAL_RETURN_OK) << "Test09_019_003 failed";
    EXPECT_EQ(R_OSAL_MmngrOpen(&init_config, &hndl_mmngr), OSAL_RETURN_CONF) << "Test09_019_003 failed";
}
// [MmngrInitializeMmngrConfigSt_TC_09_019_003]

#ifndef SKIP_MEMORY_MULTI
/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrOpenFromRegionIdx_TC_09_021_001 MemoryApiTest.MmngrOpenFromRegionIdx_TC_09_021_001
 * @subsection MmngrOpenFromRegionIdx_TC_09_021_001_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrOpenFromRegionIdx_TC_09_021_001_tci Test Case ID
 * MmngrOpenFromRegionIdx_S1_N_TC_09_021_001
 * @subsection MmngrOpenFromRegionIdx_TC_09_021_001_rr Related Requirement(s)
 * \#356350
 * @subsection MmngrOpenFromRegionIdx_TC_09_021_001_pp Prerequisite/Precondition
 * OSAL is initialized.
 * @subsection MmngrOpenFromRegionIdx_TC_09_021_001_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrOpenFromRegionIdx with normal condition in OSAL_MMNGR_ALLOC_MODE_STACK mode for all region indexes.
 * - Test09_021_001: R_OSAL_MmngrOpenFromRegionIdx with all valid input parameter.
 * @subsection MmngrOpenFromRegionIdx_TC_09_021_001_tpts Test Procedure/Test Steps
 * -# For each region index:
 *  - Get the maximum memory configuration by using R_OSAL_MmngrGetOsalMaxConfigFromRegionIdx
 *  - Open Mmngr using R_OSAL_MmngrOpenFromRegionIdx with valid config.
 *  - Calling R_OSAL_MmngrClose to close the opened Mmngr for the next test cases.
 * @subsection MmngrOpenFromRegionIdx_TC_09_021_001_ereb Expected Result/Behavior
 * -# Expected result for all region indexes is as below:
 *  - The return of R_OSAL_MmngrGetOsalMaxConfigFromRegionIdx is OSAL_RETURN_OK.
 *  - The return of R_OSAL_MmngrOpenFromRegionIdx is OSAL_RETURN_OK.<br>
 * the return handle is not OSAL_MEMORY_MANAGER_HANDLE_INVALID.
 *  - The return value of R_OSAL_MmngrClose is OSAL_RETURN_OK.
 * @subsection MmngrOpenFromRegionIdx_TC_09_021_001_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrOpenFromRegionIdx_TC_09_021_001
 */
// [MmngrOpenFromRegionIdx_TC_09_021_001]
TEST_F(MemoryApiTest, MmngrOpenFromRegionIdx_TC_09_021_001)
{
    for (auto index = 0; index < TEST_NUM_OF_MEMORY_REGION; index++)
    {
        // Test09_021_001
        // @brief: normal case: all input/output param is valid
        EXPECT_EQ(R_OSAL_MmngrGetOsalMaxConfigFromRegionIdx(index, &config), OSAL_RETURN_OK);
        config.max_allowed_allocations     = 1;
        config.max_registered_monitors_cbs = 0;
        config.memory_limit = 10 * 1024 * 1024;
        config.mode = OSAL_MMNGR_ALLOC_MODE_STACK;
        EXPECT_EQ(R_OSAL_MmngrOpenFromRegionIdx(&config, index, &hndl_mmngr), OSAL_RETURN_OK) << "Test09_021_001 failed";
        EXPECT_NE(hndl_mmngr, OSAL_MEMORY_MANAGER_HANDLE_INVALID) << "Test09_021_001 failed";
        EXPECT_EQ(R_OSAL_MmngrClose(hndl_mmngr), OSAL_RETURN_OK);
        hndl_mmngr = OSAL_MEMORY_MANAGER_HANDLE_INVALID;
    }
}
// [MmngrOpenFromRegionIdx_TC_09_021_001]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrOpenFromRegionIdx_TC_09_021_002 MemoryApiTest.MmngrOpenFromRegionIdx_TC_09_021_002
 * @subsection MmngrOpenFromRegionIdx_TC_09_021_002_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrOpenFromRegionIdx_TC_09_021_002_tci Test Case ID
 * MmngrOpenFromRegionIdx_S1_N_TC_09_021_002
 * @subsection MmngrOpenFromRegionIdx_TC_09_021_002_rr Related Requirement(s)
 * \#356350
 * @subsection MmngrOpenFromRegionIdx_TC_09_021_002_pp Prerequisite/Precondition
 * OSAL is initialized.
 * @subsection MmngrOpenFromRegionIdx_TC_09_021_002_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrOpenFromRegionIdx with normal condition in OSAL_MMNGR_ALLOC_MODE_STACK_PROT mode for all region indexes.
 * - Test09_021_002: R_OSAL_MmngrOpenFromRegionIdx with all valid input parameter.
 * @subsection MmngrOpenFromRegionIdx_TC_09_021_002_tpts Test Procedure/Test Steps
 * -# For each region index:
 *  - Get the maximum memory configuration by using R_OSAL_MmngrGetOsalMaxConfigFromRegionIdx
 *  - Open Mmngr using R_OSAL_MmngrOpenFromRegionIdx with valid config.
 *  - Calling R_OSAL_MmngrClose to close the opened Mmngr for the next test cases.
 * @subsection MmngrOpenFromRegionIdx_TC_09_021_002_ereb Expected Result/Behavior
 * -# Expected result for all region indexes is as below:
 *  - The return of R_OSAL_MmngrGetOsalMaxConfigFromRegionIdx is OSAL_RETURN_OK.
 *  - The return of R_OSAL_MmngrOpenFromRegionIdx is OSAL_RETURN_OK.<br>
 * the return handle is not OSAL_MEMORY_MANAGER_HANDLE_INVALID.
 *  - The return value of R_OSAL_MmngrClose is OSAL_RETURN_OK.
 * @subsection MmngrOpenFromRegionIdx_TC_09_021_002_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrOpenFromRegionIdx_TC_09_021_002
 */
// [MmngrOpenFromRegionIdx_TC_09_021_002]
TEST_F(MemoryApiTest, MmngrOpenFromRegionIdx_TC_09_021_002)
{
    for (auto index = 0; index < TEST_NUM_OF_MEMORY_REGION; index++)
    {
        // Test09_021_002
        // @brief: normal case: all input/output param is valid
        EXPECT_EQ(R_OSAL_MmngrGetOsalMaxConfigFromRegionIdx(index, &config), OSAL_RETURN_OK);
        config.max_allowed_allocations     = 1;
        config.max_registered_monitors_cbs = 0;
        config.memory_limit = 10 * 1024 * 1024;
        config.mode = OSAL_MMNGR_ALLOC_MODE_STACK_PROT;
        EXPECT_EQ(R_OSAL_MmngrOpenFromRegionIdx(&config, index, &hndl_mmngr), OSAL_RETURN_OK) << "Test09_021_002 failed";
        EXPECT_NE(hndl_mmngr, OSAL_MEMORY_MANAGER_HANDLE_INVALID) << "Test09_021_002 failed";
        EXPECT_EQ(R_OSAL_MmngrClose(hndl_mmngr), OSAL_RETURN_OK);
        hndl_mmngr = OSAL_MEMORY_MANAGER_HANDLE_INVALID;
    }
}
// [MmngrOpenFromRegionIdx_TC_09_021_002]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrOpenFromRegionIdx_TC_09_021_003 MemoryApiTest.MmngrOpenFromRegionIdx_TC_09_021_003
 * @subsection MmngrOpenFromRegionIdx_TC_09_021_003_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrOpenFromRegionIdx_TC_09_021_003_tci Test Case ID
 * MmngrOpenFromRegionIdx_S1_N_TC_09_021_003
 * @subsection MmngrOpenFromRegionIdx_TC_09_021_003_rr Related Requirement(s)
 * \#356350
 * @subsection MmngrOpenFromRegionIdx_TC_09_021_003_pp Prerequisite/Precondition
 * OSAL is initialized.
 * @subsection MmngrOpenFromRegionIdx_TC_09_021_003_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrOpenFromRegionIdx with normal condition in OSAL_MMNGR_ALLOC_MODE_FREE_LIST mode for all region indexes
 * - Test09_021_003: R_OSAL_MmngrOpenFromRegionIdx with all valid input parameter.
 * @subsection MmngrOpenFromRegionIdx_TC_09_021_003_tpts Test Procedure/Test Steps
 * -# For each region index:
 *  - Get the maximum memory configuration by using R_OSAL_MmngrGetOsalMaxConfigFromRegionIdx
 *  - Open Mmngr using R_OSAL_MmngrOpenFromRegionIdx with valid config.
 *  - Calling R_OSAL_MmngrClose to close the opened Mmngr for the next test cases.
 * @subsection MmngrOpenFromRegionIdx_TC_09_021_003_ereb Expected Result/Behavior
 * -# Expected result for all region indexes is as below:
 *  - The return of R_OSAL_MmngrGetOsalMaxConfigFromRegionIdx is OSAL_RETURN_OK.
 *  - The return of R_OSAL_MmngrOpenFromRegionIdx is OSAL_RETURN_OK.<br>
 * the return handle is not OSAL_MEMORY_MANAGER_HANDLE_INVALID.
 *  - The return value of R_OSAL_MmngrClose is OSAL_RETURN_OK.
 * @subsection MmngrOpenFromRegionIdx_TC_09_021_003_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrOpenFromRegionIdx_TC_09_021_003
 */
// [MmngrOpenFromRegionIdx_TC_09_021_003]
TEST_F(MemoryApiTest, MmngrOpenFromRegionIdx_TC_09_021_003)
{
    for (auto index = 0; index < TEST_NUM_OF_MEMORY_REGION; index++)
    {
        // Test09_021_003
        // @brief: normal case: all input/output param is valid
        EXPECT_EQ(R_OSAL_MmngrGetOsalMaxConfigFromRegionIdx(index, &config), OSAL_RETURN_OK);
        config.max_allowed_allocations     = 1;
        config.max_registered_monitors_cbs = 0;
        config.memory_limit = 10 * 1024 * 1024;
        config.mode = OSAL_MMNGR_ALLOC_MODE_FREE_LIST;
        EXPECT_EQ(R_OSAL_MmngrOpenFromRegionIdx(&config, index, &hndl_mmngr), OSAL_RETURN_OK) << "Test09_021_003 failed";
        EXPECT_NE(hndl_mmngr, OSAL_MEMORY_MANAGER_HANDLE_INVALID) << "Test09_021_003 failed";
        EXPECT_EQ(R_OSAL_MmngrClose(hndl_mmngr), OSAL_RETURN_OK);
        hndl_mmngr = OSAL_MEMORY_MANAGER_HANDLE_INVALID;
    }
}
// [MmngrOpenFromRegionIdx_TC_09_021_003]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrOpenFromRegionIdx_TC_09_021_004 MemoryApiTest.MmngrOpenFromRegionIdx_TC_09_021_004
 * @subsection MmngrOpenFromRegionIdx_TC_09_021_004_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrOpenFromRegionIdx_TC_09_021_004_tci Test Case ID
 * MmngrOpenFromRegionIdx_S1_N_TC_09_021_004
 * @subsection MmngrOpen_TC_09_021_004_rr Related Requirement(s)
 * \#356350
 * @subsection MmngrOpenFromRegionIdx_TC_09_021_004_pp Prerequisite/Precondition
 * OSAL is initialized.
 * @subsection MmngrOpenFromRegionIdx_TC_09_021_004_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrOpenFromRegionIdx with normal condition in OSAL_MMNGR_ALLOC_MODE_FREE_LIST_PROT mode for all region indexes.
 * - Test09_021_004: R_OSAL_MmngrOpenFromRegionIdx with all valid input parameter.
 * @subsection MmngrOpenFromRegionIdx_TC_09_021_004_tpts Test Procedure/Test Steps
 * -# For each region index:
 *  - Get the maximum memory configuration by using R_OSAL_MmngrGetOsalMaxConfigFromRegionIdx
 *  - Open Mmngr using R_OSAL_MmngrOpenFromRegionIdx with valid config.
 *  - Calling R_OSAL_MmngrClose to close the opened Mmngr for the next test cases.
 * @subsection MmngrOpenFromRegionIdx_TC_09_021_004_ereb Expected Result/Behavior
 * -# Expected result for all region indexes is as below:
 *  - The return of R_OSAL_MmngrGetOsalMaxConfigFromRegionIdx is OSAL_RETURN_OK.
 *  - The return of R_OSAL_MmngrOpenFromRegionIdx is OSAL_RETURN_OK.<br>
 * the return handle is not OSAL_MEMORY_MANAGER_HANDLE_INVALID.
 *  - The return value of R_OSAL_MmngrClose is OSAL_RETURN_OK.
 * @subsection MmngrOpenFromRegionIdx_TC_09_021_004_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrOpenFromRegionIdx_TC_09_021_004
 */
// [MmngrOpenFromRegionIdx_TC_09_021_004]
TEST_F(MemoryApiTest, MmngrOpenFromRegionIdx_TC_09_021_004)
{
    for (auto index = 0; index < TEST_NUM_OF_MEMORY_REGION; index++)
    {
        // Test09_021_004
        // @brief: normal case: all input/output param is valid
        EXPECT_EQ(R_OSAL_MmngrGetOsalMaxConfigFromRegionIdx(index, &config), OSAL_RETURN_OK);
        config.max_allowed_allocations     = 1;
        config.max_registered_monitors_cbs = 0;
        config.memory_limit = 10 * 1024 * 1024;
        config.mode = OSAL_MMNGR_ALLOC_MODE_FREE_LIST_PROT;
        EXPECT_EQ(R_OSAL_MmngrOpenFromRegionIdx(&config, index, &hndl_mmngr), OSAL_RETURN_OK) << "Test09_021_004 failed";
        EXPECT_NE(hndl_mmngr, OSAL_MEMORY_MANAGER_HANDLE_INVALID) << "Test09_021_004 failed";
        EXPECT_EQ(R_OSAL_MmngrClose(hndl_mmngr), OSAL_RETURN_OK);
        hndl_mmngr = OSAL_MEMORY_MANAGER_HANDLE_INVALID;
    }
}
// [MmngrOpenFromRegionIdx_TC_09_021_004]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrOpenFromRegionIdx_TC_09_021_005 MemoryApiTest.MmngrOpenFromRegionIdx_TC_09_021_005
 * @subsection MmngrOpenFromRegionIdx_TC_09_021_005_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrOpenFromRegionIdx_TC_09_021_005_tci Test Case ID
 * MmngrOpenFromRegionIdx_S0_BA_TC_09_021_005
 * @subsection MmngrOpenFromRegionIdx_TC_09_021_005_rr Related Requirement(s)
 * \#356350
 * @subsection MmngrOpenFromRegionIdx_TC_09_021_005_pp Prerequisite/Precondition
 * OSAL is initialized.
 * @subsection MmngrOpenFromRegionIdx_TC_09_021_005_tcs Test Case Summary
 * - Test09_021_005: "config.mode" is OSAL_MMNGR_ALLOC_MODE_UNSPECIFIED for all region indexes.
 * @subsection MmngrOpenFromRegionIdx_TC_09_021_005_tpts Test Procedure/Test Steps
 * -# For each region index:
 *  - Calling function R_OSAL_MmngrOpenFromRegionIdx with OSAL_MMNGR_ALLOC_MODE_UNSPECIFIED mode.
 * @subsection MmngrOpenFromRegionIdx_TC_09_021_005_ereb Expected Result/Behavior
 * -# Expected result for all region indexes is as below:
 *  - The return value of R_OSAL_MmngrOpenFromRegionIdx is OSAL_RETURN_CONF_UNSUPPORTED.<br>
 * The return handle is OSAL_MEMORY_MANAGER_HANDLE_INVALID.
 * @subsection MmngrOpenFromRegionIdx_TC_09_021_005_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrOpenFromRegionIdx_TC_09_021_005
 */
// [MmngrOpenFromRegionIdx_TC_09_021_005]
TEST_F(MemoryApiTest, MmngrOpenFromRegionIdx_TC_09_021_005)
{
    for (auto index = 0; index < TEST_NUM_OF_MEMORY_REGION; index++)
    {
        // Test09_021_005
        // @brief: abnormal case: config.mode = OSAL_MMNGR_ALLOC_MODE_UNSPECIFIED
        EXPECT_EQ(R_OSAL_MmngrGetOsalMaxConfigFromRegionIdx(index, &config), OSAL_RETURN_OK);
        config.mode = OSAL_MMNGR_ALLOC_MODE_UNSPECIFIED;
        EXPECT_EQ(R_OSAL_MmngrOpenFromRegionIdx(&config, index, &hndl_mmngr), OSAL_RETURN_CONF_UNSUPPORTED) << "Test09_021_005 failed";
        EXPECT_EQ(hndl_mmngr, OSAL_MEMORY_MANAGER_HANDLE_INVALID) << "Test09_021_005 failed";
    }
}
// [MmngrOpenFromRegionIdx_TC_09_021_005]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrOpenFromRegionIdx_TC_09_021_006 MemoryApiTest.MmngrOpenFromRegionIdx_TC_09_021_006
 * @subsection MmngrOpenFromRegionIdx_TC_09_021_006_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrOpenFromRegionIdx_TC_09_021_006_tci Test Case ID
 * MmngrOpenFromRegionIdx_S0_BA_TC_09_021_006
 * @subsection MmngrOpenFromRegionIdx_TC_09_021_006_rr Related Requirement(s)
 * \#356350
 * @subsection MmngrOpenFromRegionIdx_TC_09_021_006_pp Prerequisite/Precondition
 * OSAL is initialized.
 * @subsection MmngrOpenFromRegionIdx_TC_09_021_006_tcs Test Case Summary
 * - Test09_021_006: "config.mode" is OSAL_MMNGR_ALLOC_MODE_UNSPECIFIED_PROT for all region indexes.
 * @subsection MmngrOpenFromRegionIdx_TC_09_021_006_tpts Test Procedure/Test Steps
 * -# For each region index:
 *  - Calling function R_OSAL_MmngrOpenFromRegionIdx with OSAL_MMNGR_ALLOC_MODE_UNSPECIFIED_PROT mode.
 * @subsection MmngrOpenFromRegionIdx_TC_09_021_006_ereb Expected Result/Behavior
 * -# Expected result for all region indexes is as below:
 *  - The return value of R_OSAL_MmngrOpenFromRegionIdx is OSAL_RETURN_CONF_UNSUPPORTED.<br>
 * The return handle is OSAL_MEMORY_MANAGER_HANDLE_INVALID.
 * @subsection MmngrOpenFromRegionIdx_TC_09_021_006_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrOpenFromRegionIdx_TC_09_021_006
 */
// [MmngrOpenFromRegionIdx_TC_09_021_006]
TEST_F(MemoryApiTest, MmngrOpenFromRegionIdx_TC_09_021_006)
{
    for (auto index = 0; index < TEST_NUM_OF_MEMORY_REGION; index++)
    {
        // Test09_021_006
        // @brief: abnormal case: config.mode = OSAL_MMNGR_ALLOC_MODE_UNSPECIFIED_PROT
        EXPECT_EQ(R_OSAL_MmngrGetOsalMaxConfigFromRegionIdx(index, &config), OSAL_RETURN_OK);
        config.mode = OSAL_MMNGR_ALLOC_MODE_UNSPECIFIED_PROT;
        EXPECT_EQ(R_OSAL_MmngrOpenFromRegionIdx(&config, index, &hndl_mmngr), OSAL_RETURN_CONF_UNSUPPORTED) << "Test09_021_006 failed";
        EXPECT_EQ(hndl_mmngr, OSAL_MEMORY_MANAGER_HANDLE_INVALID) << "Test09_021_006 failed";
    }
}
// [MmngrOpenFromRegionIdx_TC_09_021_006]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrOpenFromRegionIdx_TC_09_021_007 MemoryApiTest.MmngrOpenFromRegionIdx_TC_09_021_007
 * @subsection MmngrOpenFromRegionIdx_TC_09_021_007_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrOpenFromRegionIdx_TC_09_021_007_tci Test Case ID
 * MmngrOpenFromRegionIdx_S0_BA_TC_09_021_007
 * @subsection MmngrOpenFromRegionIdx_TC_09_021_007_rr Related Requirement(s)
 * \#356350
 * @subsection MmngrOpenFromRegionIdx_TC_09_021_007_pp Prerequisite/Precondition
 * OSAL is initialized.
 * @subsection MmngrOpenFromRegionIdx_TC_09_021_007_tcs Test Case Summary
 * - Test09_021_007: "config.mode" is OSAL_MMNGR_ALLOC_MODE_INVALID for all region indexes.
 * @subsection MmngrOpenFromRegionIdx_TC_09_021_007_tpts Test Procedure/Test Steps
 * -# For each region index:
 *  - Calling function R_OSAL_MmngrOpenFromRegionIdx with OSAL_MMNGR_ALLOC_MODE_INVALID mode.
 * @subsection MmngrOpenFromRegionIdx_TC_09_021_007_ereb Expected Result/Behavior
 * -# Expected result for all region indexes is as below:
 *  - The return value of R_OSAL_MmngrOpenFromRegionIdx is OSAL_RETURN_CONF.<br>
 * The return handle is OSAL_MEMORY_MANAGER_HANDLE_INVALID.
 * @subsection MmngrOpenFromRegionIdx_TC_09_021_007_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrOpenFromRegionIdx_TC_09_021_007
 */
// [MmngrOpenFromRegionIdx_TC_09_021_007]
TEST_F(MemoryApiTest, MmngrOpenFromRegionIdx_TC_09_021_007)
{
    for (auto index = 0; index < TEST_NUM_OF_MEMORY_REGION; index++)
    {
        // Test09_021_007
        // @brief: abnormal case: config.mode = OSAL_MMNGR_ALLOC_MODE_INVALID
        EXPECT_EQ(R_OSAL_MmngrGetOsalMaxConfigFromRegionIdx(index, &config), OSAL_RETURN_OK);
        config.mode = OSAL_MMNGR_ALLOC_MODE_INVALID;
        EXPECT_EQ(R_OSAL_MmngrOpenFromRegionIdx(&config, index, &hndl_mmngr), OSAL_RETURN_CONF) << "Test09_021_007 failed";
        EXPECT_EQ(hndl_mmngr, OSAL_MEMORY_MANAGER_HANDLE_INVALID) << "Test09_021_007 failed";
    }
}
// [MmngrOpenFromRegionIdx_TC_09_021_007]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrOpenFromRegionIdx_TC_09_021_008 MemoryApiTest.MmngrOpenFromRegionIdx_TC_09_021_008
 * @subsection MmngrOpenFromRegionIdx_TC_09_021_008_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrOpenFromRegionIdx_TC_09_021_008_tci Test Case ID
 * MmngrOpenFromRegionIdx_S0_BA_TC_09_021_008
 * @subsection MmngrOpenFromRegionIdx_TC_09_021_008_rr Related Requirement(s)
 * \#356350
 * @subsection MmngrOpenFromRegionIdx_TC_09_021_008_pp Prerequisite/Precondition
 * OSAL is initialized.
 * @subsection MmngrOpenFromRegionIdx_TC_09_021_008_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrOpenFromRegionIdx with abnormal condition in OSAL_MMNGR_ALLOC_MODE_STACK mode for all region indexes.
 * - Test09_021_008: "config.max_allowed_allocations" is OSAL_MEMORY_MANAGER_CFG_UNLIMITED plus 1.
 * @subsection MmngrOpenFromRegionIdx_TC_09_021_008_tpts Test Procedure/Test Steps
 * -# For each region index:
 *  - Calling function R_OSAL_MmngrOpenFromRegionIdx with config.max_allowed_allocations is the maximum limitation value plus 1.
 * @subsection MmngrOpenFromRegionIdx_TC_09_021_008_ereb Expected Result/Behavior
 * -# Expected result for all region indexes is as below:
 *  - The return value of R_OSAL_MmngrOpenFromRegionIdx is OSAL_RETURN_CONF.<br>
 * The return handle is OSAL_MEMORY_MANAGER_HANDLE_INVALID.
 * @subsection MmngrOpenFromRegionIdx_TC_09_021_008_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrOpenFromRegionIdx_TC_09_021_008
 */
// [MmngrOpenFromRegionIdx_TC_09_021_008]
TEST_F(MemoryApiTest, MmngrOpenFromRegionIdx_TC_09_021_008)
{
    for (auto index = 0; index < TEST_NUM_OF_MEMORY_REGION; index++)
    {
        // Test09_021_008
        // @brief: abnormal case: config.max_allowed_allocations = maximum value + 1;
        EXPECT_EQ(R_OSAL_MmngrGetOsalMaxConfigFromRegionIdx(index, &config), OSAL_RETURN_OK);
        config.mode = OSAL_MMNGR_ALLOC_MODE_STACK;
        config.max_allowed_allocations += 1;
        EXPECT_EQ(R_OSAL_MmngrOpenFromRegionIdx(&config, index, &hndl_mmngr), OSAL_RETURN_CONF) << "Test09_021_008 failed";
        EXPECT_EQ(hndl_mmngr, OSAL_MEMORY_MANAGER_HANDLE_INVALID) << "Test09_021_008 failed";
    }
}
// [MmngrOpenFromRegionIdx_TC_09_021_008]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrOpenFromRegionIdx_TC_09_021_009 MemoryApiTest.MmngrOpenFromRegionIdx_TC_09_021_009
 * @subsection MmngrOpenFromRegionIdx_TC_09_021_009_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrOpenFromRegionIdx_TC_09_021_009_tci Test Case ID
 * MmngrOpenFromRegionIdx_S0_BA_TC_09_021_009
 * @subsection MmngrOpenFromRegionIdx_TC_09_021_009_rr Related Requirement(s)
 * \#356350
 * @subsection MmngrOpenFromRegionIdx_TC_09_021_009_pp Prerequisite/Precondition
 * OSAL is initialized.
 * @subsection MmngrOpenFromRegionIdx_TC_09_021_009_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrOpenFromRegionIdx with abnormal condition in OSAL_MMNGR_ALLOC_MODE_STACK mode for all region indexes.
 * - Test09_021_009: "config.max_allowed_allocations" is 0 for all region indexes.
 * @subsection MmngrOpenFromRegionIdx_TC_09_021_009_tpts Test Procedure/Test Steps
 * -# For each region index:
 *  - Calling function R_OSAL_MmngrOpenFromRegionIdx with config.max_allowed_allocations is 0.
 * @subsection MmngrOpenFromRegionIdx_TC_09_021_009_ereb Expected Result/Behavior
 * -# Expected result for all region indexes is as below:
 *  - The return value of R_OSAL_MmngrOpenFromRegionIdx is OSAL_RETURN_CONF.<br>
 * The return handle is OSAL_MEMORY_MANAGER_HANDLE_INVALID.
 * @subsection MmngrOpenFromRegionIdx_TC_09_021_009_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrOpenFromRegionIdx_TC_09_021_009
 */
// [MmngrOpenFromRegionIdx_TC_09_021_009]
TEST_F(MemoryApiTest, MmngrOpenFromRegionIdx_TC_09_021_009)
{
    for (auto index = 0; index < TEST_NUM_OF_MEMORY_REGION; index++)
    {
        // Test09_021_009
        // @brief: abnormal case: config.max_allowed_allocations = 0;
        EXPECT_EQ(R_OSAL_MmngrGetOsalMaxConfigFromRegionIdx(index, &config), OSAL_RETURN_OK);
        config.mode = OSAL_MMNGR_ALLOC_MODE_STACK;
        config.max_allowed_allocations = 0;
        EXPECT_EQ(R_OSAL_MmngrOpenFromRegionIdx(&config, index, &hndl_mmngr), OSAL_RETURN_CONF) << "Test09_021_009 failed";
        EXPECT_EQ(hndl_mmngr, OSAL_MEMORY_MANAGER_HANDLE_INVALID) << "Test09_021_009 failed";
    }
}
// [MmngrOpenFromRegionIdx_TC_09_021_009]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrOpenFromRegionIdx_TC_09_021_010 MemoryApiTest.MmngrOpenFromRegionIdx_TC_09_021_010
 * @subsection MmngrOpenFromRegionIdx_TC_09_021_010_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrOpenFromRegionIdx_TC_09_021_010_tci Test Case ID
 * MmngrOpenFromRegionIdx_S0_BA_TC_09_021_010
 * @subsection MmngrOpenFromRegionIdx_TC_09_021_010_rr Related Requirement(s)
 * \#356350
 * @subsection MmngrOpenFromRegionIdx_TC_09_021_010_pp Prerequisite/Precondition
 * OSAL is initialized.
 * @subsection MmngrOpenFromRegionIdx_TC_09_021_010_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrOpenFromRegionIdx with abnormal condition in OSAL_MMNGR_ALLOC_MODE_STACK mode for all region indexes.
 * - Test09_021_010: "config.max_registered_monitors_cbs" is OSAL_MEMORY_MANAGER_CFG_UNLIMITED plus 1 for all region indexes.
 * @subsection MmngrOpenFromRegionIdx_TC_09_021_010_tpts Test Procedure/Test Steps
 * -# For each region index:
 *  - Calling function R_OSAL_MmngrOpenFromRegionIdx with config.max_registered_monitors_cbs is the maximum limitation value plus 1.
 * @subsection MmngrOpenFromRegionIdx_TC_09_021_010_ereb Expected Result/Behavior
 * -# Expected result for all region indexes is as below:
 *  - The return value of R_OSAL_MmngrOpenFromRegionIdx is OSAL_RETURN_CONF.<br>
 * The return handle is OSAL_MEMORY_MANAGER_HANDLE_INVALID.
 * @subsection MmngrOpenFromRegionIdx_TC_09_021_010_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrOpenFromRegionIdx_TC_09_021_010
 */
// [MmngrOpenFromRegionIdx_TC_09_021_010]
TEST_F(MemoryApiTest, MmngrOpenFromRegionIdx_TC_09_021_010)
{
    for (auto index = 0; index < TEST_NUM_OF_MEMORY_REGION; index++)
    {
        // Test09_021_010
        // @brief: abnormal case: config.max_registered_monitors_cbs = maximum value + 1;
        EXPECT_EQ(R_OSAL_MmngrGetOsalMaxConfigFromRegionIdx(index, &config), OSAL_RETURN_OK);
        config.max_registered_monitors_cbs += 1;
        config.mode = OSAL_MMNGR_ALLOC_MODE_STACK;
        EXPECT_EQ(R_OSAL_MmngrOpenFromRegionIdx(&config, index, &hndl_mmngr), OSAL_RETURN_CONF) << "Test09_021_010 failed";
        EXPECT_EQ(hndl_mmngr, OSAL_MEMORY_MANAGER_HANDLE_INVALID) << "Test09_021_010 failed";
    }
}
// [MmngrOpenFromRegionIdx_TC_09_021_010]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrOpenFromRegionIdx_TC_09_021_011 MemoryApiTest.MmngrOpenFromRegionIdx_TC_09_021_011
 * @subsection MmngrOpenFromRegionIdx_TC_09_021_011_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrOpenFromRegionIdx_TC_09_021_011_tci Test Case ID
 * MmngrOpenFromRegionIdx_S0_BA_TC_09_021_011
 * @subsection MmngrOpenFromRegionIdx_TC_09_021_011_rr Related Requirement(s)
 * \#356350
 * @subsection MmngrOpenFromRegionIdx_TC_09_021_011_pp Prerequisite/Precondition
 * OSAL is initialized.
 * @subsection MmngrOpenFromRegionIdx_TC_09_021_011_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrOpenFromRegionIdx with abnormal condition in OSAL_MMNGR_ALLOC_MODE_STACK mode for all region indexes.
 * - Test09_021_011: "config.memory_limit" is 3KB for all region indexes.
 * @subsection MmngrOpenFromRegionIdx_TC_09_021_011_tpts Test Procedure/Test Steps
 * -# For each region index:
 *  - Calling function R_OSAL_MmngrOpenFromRegionIdx with config.memory_limit is 3KB.
 * @subsection MmngrOpenFromRegionIdx_TC_09_021_011_ereb Expected Result/Behavior
 * -# Expected result for all region indexes is as below:
 *  - The return value of R_OSAL_MmngrOpenFromRegionIdx is OSAL_RETURN_CONF.<br>
 * The return handle is OSAL_MEMORY_MANAGER_HANDLE_INVALID.
 * @subsection MmngrOpenFromRegionIdx_TC_09_021_011_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrOpenFromRegionIdx_TC_09_021_011
 */
// [MmngrOpenFromRegionIdx_TC_09_021_011]
TEST_F(MemoryApiTest, MmngrOpenFromRegionIdx_TC_09_021_011)
{
    for (auto index = 0; index < TEST_NUM_OF_MEMORY_REGION; index++)
    {
        // Test09_021_011
        // @brief: abnormal case: config.memory_limit is 3KB;
        EXPECT_EQ(R_OSAL_MmngrGetOsalMaxConfigFromRegionIdx(index, &config), OSAL_RETURN_OK);
        config.mode = OSAL_MMNGR_ALLOC_MODE_STACK;
        config.memory_limit = 3*1024;
        EXPECT_EQ(R_OSAL_MmngrOpenFromRegionIdx(&config, index, &hndl_mmngr), OSAL_RETURN_CONF) << "Test09_021_011 failed";
        EXPECT_EQ(hndl_mmngr, OSAL_MEMORY_MANAGER_HANDLE_INVALID) << "Test09_021_011 failed";
    }
}
// [MmngrOpenFromRegionIdx_TC_09_021_011]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrOpenFromRegionIdx_TC_09_021_012 MemoryApiTest.MmngrOpenFromRegionIdx_TC_09_021_012
 * @subsection MmngrOpenFromRegionIdx_TC_09_021_012_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrOpenFromRegionIdx_TC_09_021_012_tci Test Case ID
 * MmngrOpenFromRegionIdx_S0_A_TC_09_021_012
 * @subsection MmngrOpenFromRegionIdx_TC_09_021_012_rr Related Requirement(s)
 * \#356350
 * @subsection MmngrOpenFromRegionIdx_TC_09_021_012_pp Prerequisite/Precondition
 * OSAL is initialized.
 * @subsection MmngrOpenFromRegionIdx_TC_09_021_012_tcs Test Case Summary
 * - Test09_021_012: Open Memory manager with the "config" address is NULL for all region indexes.
 * @subsection MmngrOpenFromRegionIdx_TC_09_021_012_tpts Test Procedure/Test Steps
 * -# For each region index:
 *  - Calling function R_OSAL_MmngrOpenFromRegionIdx with the argument as below:
 *      -# NULL
 *      -# 0
 *      -# Address of "hndl_mmngr"
 * @subsection MmngrOpenFromRegionIdx_TC_09_021_012_ereb Expected Result/Behavior
 * -# Expected result for all region indexes is as below:
 *  - The return value of R_OSAL_MmngrOpenFromRegionIdx is OSAL_RETURN_PAR.<br>
 * The return handle is OSAL_MEMORY_MANAGER_HANDLE_INVALID.
 * @subsection MmngrOpenFromRegionIdx_TC_09_021_012_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrOpenFromRegionIdx_TC_09_021_012
 */
// [MmngrOpenFromRegionIdx_TC_09_021_012]
TEST_F(MemoryApiTest, MmngrOpenFromRegionIdx_TC_09_021_012)
{
    st_osal_mmngr_config_t* p_config = NULL;
    for (auto index = 0; index < TEST_NUM_OF_MEMORY_REGION; index++)
    {
        // Test09_021_012
        // @brief: abnormal case: config = NULL;
        EXPECT_EQ(R_OSAL_MmngrOpenFromRegionIdx(p_config, index, &hndl_mmngr), OSAL_RETURN_PAR) << "Test09_021_012 failed";
        EXPECT_EQ(hndl_mmngr, OSAL_MEMORY_MANAGER_HANDLE_INVALID) << "Test09_021_012 failed";
    }
}
// [MmngrOpenFromRegionIdx_TC_09_021_012]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrOpenFromRegionIdx_TC_09_021_013 MemoryApiTest.MmngrOpenFromRegionIdx_TC_09_021_013
 * @subsection MmngrOpenFromRegionIdx_TC_09_021_013_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrOpenFromRegionIdx_TC_09_021_013_tci Test Case ID
 * MmngrOpenFromRegionIdx_S0_A_TC_09_021_013
 * @subsection MmngrOpenFromRegionIdx_TC_09_021_013_rr Related Requirement(s)
 * \#356350
 * @subsection MmngrOpenFromRegionIdx_TC_09_021_013_pp Prerequisite/Precondition
 * OSAL is initialized.
 * @subsection MmngrOpenFromRegionIdx_TC_09_021_013_tcs Test Case Summary
 * - Test09_021_013: "config.mode" is out of range for all region indexes.
 * @subsection MmngrOpenFromRegionIdx_TC_09_021_013_tpts Test Procedure/Test Steps
 * -# For each region index:
 *  - Calling function R_OSAL_MmngrOpenFromRegionIdx with config.mode is out-of-range (0xFF).
 * @subsection MmngrOpenFromRegionIdx_TC_09_021_013_ereb Expected Result/Behavior
 * -# Expected result for all region indexes is as below:
 *  - The return value of R_OSAL_MmngrOpenFromRegionIdx is OSAL_RETURN_CONF.<br>
 * The return handle is OSAL_MEMORY_MANAGER_HANDLE_INVALID.
 * @subsection MmngrOpenFromRegionIdx_TC_09_021_013_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrOpenFromRegionIdx_TC_09_021_013
 */
// [MmngrOpenFromRegionIdx_TC_09_021_013]
TEST_F(MemoryApiTest, MmngrOpenFromRegionIdx_TC_09_021_013)
{
    for (auto index = 0; index < TEST_NUM_OF_MEMORY_REGION; index++)
    {
        // Test09_021_013
        // @brief: abnormal case: config.mode is out-of-range.
        EXPECT_EQ(R_OSAL_MmngrGetOsalMaxConfigFromRegionIdx(index, &config), OSAL_RETURN_OK);
        config.mode = (e_osal_mmngr_allocator_mode_t)0xFF;
        EXPECT_EQ(R_OSAL_MmngrOpenFromRegionIdx(&config, index, &hndl_mmngr), OSAL_RETURN_CONF) << "Test09_021_013 failed";
        EXPECT_EQ(hndl_mmngr, OSAL_MEMORY_MANAGER_HANDLE_INVALID) << "Test09_021_013 failed";
    }
}
// [MmngrOpenFromRegionIdx_TC_09_021_013]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrOpenFromRegionIdx_TC_09_021_014 MemoryApiTest.MmngrOpenFromRegionIdx_TC_09_021_014
 * @subsection MmngrOpenFromRegionIdx_TC_09_021_014_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrOpenFromRegionIdx_TC_09_021_014_tci Test Case ID
 * MmngrOpenFromRegionIdx_S2_A_TC_09_021_014
 * @subsection MmngrOpenFromRegionIdx_TC_09_021_014_rr Related Requirement(s)
 * \#356350
 * @subsection MmngrOpenFromRegionIdx_TC_09_021_014_pp Prerequisite/Precondition
 * OSAL is initialized.
 * @subsection MmngrOpenFromRegionIdx_TC_09_021_014_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrOpenFromRegionIdx with abnormal condition in OSAL_MMNGR_ALLOC_MODE_STACK mode for all region indexes.
 * - Test09_021_014: Open an opened Memory handle with the same memory region index.
 * @subsection MmngrOpenFromRegionIdx_TC_09_021_014_tpts Test Procedure/Test Steps
 * -# For each region index:
 *  - Calling function R_OSAL_MmngrOpenFromRegionIdx with max configuration.
 *  - Calling function R_OSAL_MmngrOpenFromRegionIdx again with the same configuration as above.
 *  - Calling R_OSAL_MmngrClose to close the opened Mmngr for the next test cases.
 * @subsection MmngrOpenFromRegionIdx_TC_09_021_014_ereb Expected Result/Behavior
 * -# Expected result for all region indexes is as below:
 *  - The return value of the first R_OSAL_MmngrOpenFromRegionIdx is OSAL_RETURN_OK.<br>
 * The return handle is not OSAL_MEMORY_MANAGER_HANDLE_INVALID.
 *  - The return value of the second R_OSAL_MmngrOpenFromRegionIdx is OSAL_RETURN_STATE.
 *  - The return value of R_OSAL_MmngrClose is OSAL_RETURN_OK.
 * @subsection MmngrOpenFromRegionIdx_TC_09_021_014_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrOpenFromRegionIdx_TC_09_021_014
 */
// [MmngrOpenFromRegionIdx_TC_09_021_014]
TEST_F(MemoryApiTest, MmngrOpenFromRegionIdx_TC_09_021_014)
{
    for (auto index = 0; index < TEST_NUM_OF_MEMORY_REGION; index++)
    {
        // Test09_021_014
        // @brief: abnormal case: state error
        EXPECT_EQ(R_OSAL_MmngrGetOsalMaxConfigFromRegionIdx(index, &config), OSAL_RETURN_OK);
        config.mode = OSAL_MMNGR_ALLOC_MODE_STACK;
        EXPECT_EQ(R_OSAL_MmngrOpenFromRegionIdx(&config, index, &hndl_mmngr), OSAL_RETURN_OK) << "Test09_021_014 failed";
        EXPECT_NE(hndl_mmngr, OSAL_MEMORY_MANAGER_HANDLE_INVALID);
        EXPECT_EQ(R_OSAL_MmngrOpenFromRegionIdx(&config, index, &hndl_mmngr), OSAL_RETURN_STATE) << "Test09_021_014 failed";
        EXPECT_EQ(R_OSAL_MmngrClose(hndl_mmngr), OSAL_RETURN_OK);
        hndl_mmngr = OSAL_MEMORY_MANAGER_HANDLE_INVALID;
    }
}
// [MmngrOpenFromRegionIdx_TC_09_021_014]

/**
 * @page MM_API Memory API Test
 * @section OsalApiStateTest_MmngrOpenFromRegionIdx_TC_09_021_015 OsalApiStateTest.MmngrOpenFromRegionIdx_TC_09_021_015
 * @subsection MmngrOpenFromRegionIdx_TC_09_021_015_tsi Test Suite ID
 * OsalApiStateTest
 * @subsection MmngrOpenFromRegionIdx_TC_09_021_015_tci Test Case ID
 * MmngrOpenFromRegionIdx_S2_A_TC_09_021_015
 * @subsection MmngrOpenFromRegionIdx_TC_09_021_015_rr Related Requirement(s)
 * \#356350
 * @subsection MmngrOpenFromRegionIdx_TC_09_021_015_pp Prerequisite/Precondition
 * - R_OSAL_Deinitialize has already been called
 * @subsection MmngrOpenFromRegionIdx_TC_09_021_015_tcs Test Case Summary
 * This test shall verify the functionality of the Memory APIs in invalid state transition.
 * - Test09_021_015: Confirm state transition check for R_OSAL_MmngrOpenFromRegionIdx in OSAL_MMNGR_ALLOC_MODE_STACK mode for all region indexes.
 * @subsection MmngrOpenFromRegionIdx_TC_09_021_015_tpts Test Procedure/Test Steps
 * -# For each region index:
 *  - Get the max memory config by using R_OSAL_MmngrGetOsalMaxConfigFromRegionIdx
 *  - Confirm state transition check for R_OSAL_MmngrOpenFromRegionIdx
 * @subsection MmngrOpenFromRegionIdx_TC_09_021_015_ereb Expected Result/Behavior
 * -# Expected result for all region indexes is as below:
 *  - R_OSAL_MmngrGetOsalMaxConfigFromRegionIdx return OSAL_RETURN_OK
 *  - R_OSAL_MmngrOpenFromRegionIdx return OSAL_RETURN_STATE
 * @subsection MmngrOpenFromRegionIdx_TC_09_021_015_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrOpenFromRegionIdx_TC_09_021_015
 */
// [MmngrOpenFromRegionIdx_TC_09_021_015]
TEST_F(OsalApiStateTest, MmngrOpenFromRegionIdx_TC_09_021_015)
{
    st_osal_mmngr_config_t config;
    osal_memory_manager_handle_t hndl_mmngr = OSAL_MEMORY_MANAGER_HANDLE_INVALID;

    for (auto index = 0; index < TEST_NUM_OF_MEMORY_REGION; index++)
    {
        // Test09_021_015
        // @brief: abnormal case: Call R_OSAL_MmngrOpenFromRegionIdx after Deinitialize
        EXPECT_EQ(R_OSAL_MmngrGetOsalMaxConfigFromRegionIdx(index, &config), OSAL_RETURN_OK) << "Test09_021_015 failed";
        config.mode = OSAL_MMNGR_ALLOC_MODE_STACK;
        EXPECT_EQ(R_OSAL_MmngrOpenFromRegionIdx(&config, index, &hndl_mmngr), OSAL_RETURN_STATE) << "Test09_021_015 failed";
    }
}
// [MmngrOpenFromRegionIdx_TC_09_021_015]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrOpenFromRegionIdx_TC_09_021_016 MemoryApiTest.MmngrOpenFromRegionIdx_TC_09_021_016
 * @subsection MmngrOpenFromRegionIdx_TC_09_021_016_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrOpenFromRegionIdx_TC_09_021_016_tci Test Case ID
 * MmngrOpenFromRegionIdx_S0_BA_TC_09_021_016
 * @subsection MmngrOpenFromRegionIdx_TC_09_021_016_rr Related Requirement(s)
 * \#356350
 * @subsection MmngrOpenFromRegionIdx_TC_09_021_016_pp Prerequisite/Precondition
 * OSAL is initialized.
 * @subsection MmngrOpenFromRegionIdx_TC_09_021_016_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrOpenFromRegionIdx with abnormal condition in OSAL_MMNGR_ALLOC_MODE_STACK mode for all region indexes.
 * - Test09_021_016: memory_limit in config is bigger than max memory limit.
 * @subsection MmngrOpenFromRegionIdx_TC_09_021_016_tpts Test Procedure/Test Steps
 * -# For each region index:
 *  - Calling function R_OSAL_MmngrGetOsalMaxConfigFromRegionIdx to get max config.
 *  - Addition memory_limit in the max config with 1KB (1*1024).
 *  - Calling function R_OSAL_MmngrOpenFromRegionIdx with above max config.
 * @subsection MmngrOpenFromRegionIdx_TC_09_021_016_ereb Expected Result/Behavior
 * -# Expected result for all region indexes is as below:
 *  - The return value of R_OSAL_MmngrGetOsalMaxConfigFromRegionIdx is OSAL_RETURN_OK.
 *  - The return value of R_OSAL_MmngrOpenFromRegionIdx is OSAL_RETURN_CONF.
 * @subsection MmngrOpenFromRegionIdx_TC_09_021_016_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrOpenFromRegionIdx_TC_09_021_016
 */
// [MmngrOpenFromRegionIdx_TC_09_021_016]
TEST_F(MemoryApiTest, MmngrOpenFromRegionIdx_TC_09_021_016)
{
    for (auto index = 0; index < TEST_NUM_OF_MEMORY_REGION; index++)
    {
        // Test09_021_016
        // @brief: abnormal case: memory_limit = Max memory_limit + 1KB
        EXPECT_EQ(R_OSAL_MmngrGetOsalMaxConfigFromRegionIdx(index, &config), OSAL_RETURN_OK);
        config.mode = OSAL_MMNGR_ALLOC_MODE_STACK;
        config.memory_limit += 1*1024;
        EXPECT_EQ(R_OSAL_MmngrOpenFromRegionIdx(&config, index, &hndl_mmngr), OSAL_RETURN_CONF) << "Test09_021_016 failed";
    }
}
// [MmngrOpenFromRegionIdx_TC_09_021_016]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrOpenFromRegionIdx_TC_09_021_017 MemoryApiTest.MmngrOpenFromRegionIdx_TC_09_021_017
 * @subsection MmngrOpenFromRegionIdx_TC_09_021_017_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrOpenFromRegionIdx_TC_09_021_017_tci Test Case ID
 * MmngrOpenFromRegionIdx_S0_BA_TC_09_021_017
 * @subsection MmngrOpenFromRegionIdx_TC_09_021_017_rr Related Requirement(s)
 * \#356350
 * @subsection MmngrOpenFromRegionIdx_TC_09_021_017_pp Prerequisite/Precondition
 * OSAL is initialized.
 * @subsection MmngrOpenFromRegionIdx_TC_09_021_017_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrOpenFromRegionIdx with abnormal condition in OSAL_MMNGR_ALLOC_MODE_STACK mode for all region indexes.
 * - Test09_021_017: Open Memory manager with the memory handle is NULL
 * @subsection MmngrOpenFromRegionIdx_TC_09_021_017_tpts Test Procedure/Test Steps
 * -# For each region index:
 *  - Calling function R_OSAL_MmngrOpenFromRegionIdx with the argument as below:
 *      -# Address of the max configuration "config"
 *      -# 0
 *      -# NULL
 * @subsection MmngrOpenFromRegionIdx_TC_09_021_017_ereb Expected Result/Behavior
 * -# Expected result for all region indexes is as below:
 *  - The return value of R_OSAL_MmngrOpenFromRegionIdx is OSAL_RETURN_PAR.<br>
 * The return handle is OSAL_MEMORY_MANAGER_HANDLE_INVALID.
 * @subsection MmngrOpenFromRegionIdx_TC_09_021_017_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrOpenFromRegionIdx_TC_09_021_017
 */
// [MmngrOpenFromRegionIdx_TC_09_021_017]
TEST_F(MemoryApiTest, MmngrOpenFromRegionIdx_TC_09_021_017)
{
    osal_memory_manager_handle_t* p_handle = NULL;

    for (auto index = 0; index < TEST_NUM_OF_MEMORY_REGION; index++)
    {
        // Test09_021_017
        // @brief: abnormal case: handle = NULL
        EXPECT_EQ(R_OSAL_MmngrGetOsalMaxConfigFromRegionIdx(index, &config), OSAL_RETURN_OK) << "Test09_021_017 failed";
        config.mode = OSAL_MMNGR_ALLOC_MODE_STACK;
        EXPECT_EQ(R_OSAL_MmngrOpenFromRegionIdx(&config, index, p_handle), OSAL_RETURN_PAR) << "Test09_021_017 failed";
    }
}
// [MmngrOpenFromRegionIdx_TC_09_021_017]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrOpenFromRegionIdx_TC_09_021_018 MemoryApiTest.MmngrOpenFromRegionIdx_TC_09_021_018
 * @subsection MmngrOpenFromRegionIdx_TC_09_021_018_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrOpenFromRegionIdx_TC_09_021_018_tci Test Case ID
 * MmngrOpenFromRegionIdx_S1_BN_TC_09_021_018
 * @subsection MmngrOpenFromRegionIdx_TC_09_021_018_rr Related Requirement(s)
 * \#356350
 * @subsection MmngrOpenFromRegionIdx_TC_09_021_018_pp Prerequisite/Precondition
 * OSAL is initialized.
 * @subsection MmngrOpenFromRegionIdx_TC_09_021_018_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrOpenFromRegionIdx with normal condition in OSAL_MMNGR_ALLOC_MODE_STACK mode for all region indexes.
 * - Test09_021_018: R_OSAL_MmngrOpenFromRegionIdx with allocation mode is STACK. Other config is obtained from R_OSAL_MmngrGetOsalMaxConfigFromRegionIdx
 * @subsection MmngrOpenFromRegionIdx_TC_09_021_018_tpts Test Procedure/Test Steps
 * -# For each region index:
 *  - Get the maximum memory configuration by using R_OSAL_MmngrGetOsalMaxConfigFromRegionIdx.
 *  - Calling function R_OSAL_MmngrOpenFromRegionIdx with the maximum config above
 *  - Calling R_OSAL_MmngrClose to close the opened Mmngr for the next test cases.
 * @subsection MmngrOpenFromRegionIdx_TC_09_021_018_ereb Expected Result/Behavior
 * -# Expected result for all region indexes is as below:
 *  - The return value of R_OSAL_MmngrGetOsalMaxConfigFromRegionIdx is OSAL_RETURN_OK.
 *  - The return value of R_OSAL_MmngrOpenFromRegionIdx is OSAL_RETURN_OK.<br>
 * The return handle is not OSAL_MEMORY_MANAGER_HANDLE_INVALID.
 *  - The return value of R_OSAL_MmngrClose is OSAL_RETURN_OK.
 * @subsection MmngrOpenFromRegionIdx_TC_09_021_018_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrOpenFromRegionIdx_TC_09_021_018
 */
// [MmngrOpenFromRegionIdx_TC_09_021_018]
TEST_F(MemoryApiTest, MmngrOpenFromRegionIdx_TC_09_021_018)
{
    for (auto index = 0; index < TEST_NUM_OF_MEMORY_REGION; index++)
    {
        // Test09_021_018
        // @brief: normal case: allocation mode is OSAL_MMNGR_ALLOC_MODE_STACK
        EXPECT_EQ(R_OSAL_MmngrGetOsalMaxConfigFromRegionIdx(index, &config), OSAL_RETURN_OK) << "Test09_021_018 failed";
        config.mode = OSAL_MMNGR_ALLOC_MODE_STACK;
        EXPECT_EQ(R_OSAL_MmngrOpenFromRegionIdx(&config, index, &hndl_mmngr), OSAL_RETURN_OK) << "Test09_021_018 failed";
        EXPECT_NE(hndl_mmngr, OSAL_MEMORY_MANAGER_HANDLE_INVALID) << "Test09_021_018 failed";
        EXPECT_EQ(R_OSAL_MmngrClose(hndl_mmngr), OSAL_RETURN_OK) << "Test09_021_018 failed";
        hndl_mmngr = OSAL_MEMORY_MANAGER_HANDLE_INVALID;
    }
}
// [MmngrOpenFromRegionIdx_TC_09_021_018]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrOpenFromRegionIdx_TC_09_021_019 MemoryApiTest.MmngrOpenFromRegionIdx_TC_09_021_019
 * @subsection MmngrOpenFromRegionIdx_TC_09_021_019_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrOpenFromRegionIdx_TC_09_021_019_tci Test Case ID
 * MmngrOpenFromRegionIdx_S1_BN_TC_09_021_019
 * @subsection MmngrOpenFromRegionIdx_TC_09_021_019_rr Related Requirement(s)
 * \#356350
 * @subsection MmngrOpenFromRegionIdx_TC_09_021_019_pp Prerequisite/Precondition
 * OSAL is initialized.
 * @subsection MmngrOpenFromRegionIdx_TC_09_021_019_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrOpenFromRegionIdx with normal condition in OSAL_MMNGR_ALLOC_MODE_STACK_PROT mode for all region indexes.
 * - Test09_021_019: R_OSAL_MmngrOpenFromRegionIdx with allocation mode is STACK_PROT. Other config is obtained from R_OSAL_MmngrGetOsalMaxConfigFromRegionIdx
 * @subsection MmngrOpenFromRegionIdx_TC_09_021_019_tpts Test Procedure/Test Steps
 * -# For each region index:
 *  - Get the maximum memory configuration by using R_OSAL_MmngrGetOsalMaxConfigFromRegionIdx.
 *  - Calling function R_OSAL_MmngrOpenFromRegionIdx with the maximum config above
 *  - Calling R_OSAL_MmngrClose to close the opened Mmngr for the next test cases.
 * @subsection MmngrOpenFromRegionIdx_TC_09_021_019_ereb Expected Result/Behavior
 * -# Expected result for all region indexes is as below:
 *  - The return of R_OSAL_MmngrGetOsalMaxConfigFromRegionIdx is OSAL_RETURN_OK.
 *  - The return of R_OSAL_MmngrOpenFromRegionIdx is OSAL_RETURN_OK.<br>
 * the return handle is not OSAL_MEMORY_MANAGER_HANDLE_INVALID.
 *  - The return value of R_OSAL_MmngrClose is OSAL_RETURN_OK.
 * @subsection MmngrOpenFromRegionIdx_TC_09_021_019_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrOpenFromRegionIdx_TC_09_021_019
 */
// [MmngrOpenFromRegionIdx_TC_09_021_019]
TEST_F(MemoryApiTest, MmngrOpenFromRegionIdx_TC_09_021_019)
{
    for (auto index = 0; index < TEST_NUM_OF_MEMORY_REGION; index++)
    {
        // Test09_021_019
        // @brief: normal case: allocation mode is OSAL_MMNGR_ALLOC_MODE_STACK_PROT
        EXPECT_EQ(R_OSAL_MmngrGetOsalMaxConfigFromRegionIdx(index, &config), OSAL_RETURN_OK) << "Test09_021_019 failed";
        config.mode = OSAL_MMNGR_ALLOC_MODE_STACK_PROT;
        EXPECT_EQ(R_OSAL_MmngrOpenFromRegionIdx(&config, index, &hndl_mmngr), OSAL_RETURN_OK) << "Test09_021_019 failed";
        EXPECT_NE(hndl_mmngr, OSAL_MEMORY_MANAGER_HANDLE_INVALID) << "Test09_021_019 failed";
        EXPECT_EQ(R_OSAL_MmngrClose(hndl_mmngr), OSAL_RETURN_OK) << "Test09_021_019 failed";
        hndl_mmngr = OSAL_MEMORY_MANAGER_HANDLE_INVALID;
    }
}
// [MmngrOpenFromRegionIdx_TC_09_021_019]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrOpenFromRegionIdx_TC_09_021_020 MemoryApiTest.MmngrOpenFromRegionIdx_TC_09_021_020
 * @subsection MmngrOpenFromRegionIdx_TC_09_021_020_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrOpenFromRegionIdx_TC_09_021_020_tci Test Case ID
 * MmngrOpenFromRegionIdx_S0_BA_TC_09_021_020
 * @subsection MmngrOpenFromRegionIdx_TC_09_021_020_rr Related Requirement(s)
 * \#356350
 * @subsection MmngrOpenFromRegionIdx_TC_09_021_020_pp Prerequisite/Precondition
 * OSAL is initialized.
 * @subsection MmngrOpenFromRegionIdx_TC_09_021_020_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrOpenFromRegionIdx with abnormal condition in OSAL_MMNGR_ALLOC_MODE_STACK_PROT mode for all region indexes.
 * - Test09_021_020: "config.max_allowed_allocations" is OSAL_MEMORY_MANAGER_CFG_UNLIMITED plus 1.
 * @subsection MmngrOpenFromRegionIdx_TC_09_021_020_tpts Test Procedure/Test Steps
 * -# For each region index:
 *  - Calling function R_OSAL_MmngrOpenFromRegionIdx with config.max_allowed_allocations is the maximum limitation value plus 1.
 * @subsection MmngrOpenFromRegionIdx_TC_09_021_020_ereb Expected Result/Behavior
 * -# Expected result for all region indexes is as below:
 *  - The return value of R_OSAL_MmngrOpenFromRegionIdx is OSAL_RETURN_CONF.<br>
 * The return handle is OSAL_MEMORY_MANAGER_HANDLE_INVALID.
 * @subsection MmngrOpenFromRegionIdx_TC_09_021_020_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrOpenFromRegionIdx_TC_09_021_020
 */
// [MmngrOpenFromRegionIdx_TC_09_021_020]
TEST_F(MemoryApiTest, MmngrOpenFromRegionIdx_TC_09_021_020)
{
    for (auto index = 0; index < TEST_NUM_OF_MEMORY_REGION; index++)
    {
        // Test09_021_020
        // @brief: abnormal case: config.max_allowed_allocations = maximum value + 1;
        EXPECT_EQ(R_OSAL_MmngrGetOsalMaxConfigFromRegionIdx(index, &config), OSAL_RETURN_OK);
        config.mode = OSAL_MMNGR_ALLOC_MODE_STACK_PROT;
        config.max_allowed_allocations += 1;
        EXPECT_EQ(R_OSAL_MmngrOpenFromRegionIdx(&config, index, &hndl_mmngr), OSAL_RETURN_CONF) << "Test09_021_020 failed";
        EXPECT_EQ(hndl_mmngr, OSAL_MEMORY_MANAGER_HANDLE_INVALID) << "Test09_021_020 failed";
    }
}
// [MmngrOpenFromRegionIdx_TC_09_021_020]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrOpenFromRegionIdx_TC_09_021_021 MemoryApiTest.MmngrOpenFromRegionIdx_TC_09_021_021
 * @subsection MmngrOpenFromRegionIdx_TC_09_021_021_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrOpenFromRegionIdx_TC_09_021_021_tci Test Case ID
 * MmngrOpenFromRegionIdx_S0_BA_TC_09_021_021
 * @subsection MmngrOpenFromRegionIdx_TC_09_021_021_rr Related Requirement(s)
 * \#356350
 * @subsection MmngrOpenFromRegionIdx_TC_09_021_021_pp Prerequisite/Precondition
 * OSAL is initialized.
 * @subsection MmngrOpenFromRegionIdx_TC_09_021_021_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrOpenFromRegionIdx with abnormal condition in OSAL_MMNGR_ALLOC_MODE_STACK_PROT mode for all region indexes.
 * - Test09_021_021: "config.max_allowed_allocations" is 0.
 * @subsection MmngrOpenFromRegionIdx_TC_09_021_021_tpts Test Procedure/Test Steps
 * -# For each region index:
 *  - Calling function R_OSAL_MmngrOpenFromRegionIdx with config.max_allowed_allocations is 0.
 * @subsection MmngrOpenFromRegionIdx_TC_09_021_021_ereb Expected Result/Behavior
 * -# Expected result for all region indexes is as below:
 *  - The return value of R_OSAL_MmngrOpenFromRegionIdx is OSAL_RETURN_CONF.<br>
 * The return handle is OSAL_MEMORY_MANAGER_HANDLE_INVALID.
 * @subsection MmngrOpenFromRegionIdx_TC_09_021_021_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrOpenFromRegionIdx_TC_09_021_021
 */
// [MmngrOpenFromRegionIdx_TC_09_021_021]
TEST_F(MemoryApiTest, MmngrOpenFromRegionIdx_TC_09_021_021)
{
    for (auto index = 0; index < TEST_NUM_OF_MEMORY_REGION; index++)
    {
        // Test09_021_021
        // @brief: abnormal case: config.max_allowed_allocations = 0;
        EXPECT_EQ(R_OSAL_MmngrGetOsalMaxConfigFromRegionIdx(index, &config), OSAL_RETURN_OK);
        config.mode = OSAL_MMNGR_ALLOC_MODE_STACK_PROT;
        config.max_allowed_allocations = 0;
        EXPECT_EQ(R_OSAL_MmngrOpenFromRegionIdx(&config, index, &hndl_mmngr), OSAL_RETURN_CONF) << "Test09_021_021 failed";
        EXPECT_EQ(hndl_mmngr, OSAL_MEMORY_MANAGER_HANDLE_INVALID) << "Test09_021_021 failed";
    }
}
// [MmngrOpenFromRegionIdx_TC_09_021_021]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrOpenFromRegionIdx_TC_09_021_022 MemoryApiTest.MmngrOpenFromRegionIdx_TC_09_021_022
 * @subsection MmngrOpenFromRegionIdx_TC_09_021_022_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrOpenFromRegionIdx_TC_09_021_022_tci Test Case ID
 * MmngrOpenFromRegionIdx_S0_BA_TC_09_021_022
 * @subsection MmngrOpenFromRegionIdx_TC_09_021_022_rr Related Requirement(s)
 * \#356350
 * @subsection MmngrOpenFromRegionIdx_TC_09_021_022_pp Prerequisite/Precondition
 * OSAL is initialized.
 * @subsection MmngrOpenFromRegionIdx_TC_09_021_022_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrOpenFromRegionIdx with abnormal condition in OSAL_MMNGR_ALLOC_MODE_STACK_PROT mode for all region indexes.
 * - Test09_021_022: "config.max_registered_monitors_cbs" is OSAL_MEMORY_MANAGER_CFG_UNLIMITED plus 1.
 * @subsection MmngrOpenFromRegionIdx_TC_09_021_022_tpts Test Procedure/Test Steps
 * -# For each region index:
 *  - Calling function R_OSAL_MmngrOpenFromRegionIdx with config.max_registered_monitors_cbs is the maximum limitation value plus 1.
 * @subsection MmngrOpenFromRegionIdx_TC_09_021_022_ereb Expected Result/Behavior
 * -# Expected result for all region indexes is as below:
 *  - The return value of R_OSAL_MmngrOpenFromRegionIdx is OSAL_RETURN_CONF.<br>
 * The return handle is OSAL_MEMORY_MANAGER_HANDLE_INVALID.
 * @subsection MmngrOpenFromRegionIdx_TC_09_021_022_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrOpenFromRegionIdx_TC_09_021_022
 */
// [MmngrOpenFromRegionIdx_TC_09_021_022]
TEST_F(MemoryApiTest, MmngrOpenFromRegionIdx_TC_09_021_022)
{
    for (auto index = 0; index < TEST_NUM_OF_MEMORY_REGION; index++)
    {
        // Test09_021_022
        // @brief: abnormal case: config.max_registered_monitors_cbs = maximum value + 1;
        EXPECT_EQ(R_OSAL_MmngrGetOsalMaxConfigFromRegionIdx(index, &config), OSAL_RETURN_OK);
        config.mode = OSAL_MMNGR_ALLOC_MODE_STACK_PROT;
        config.max_registered_monitors_cbs += 1;
        EXPECT_EQ(R_OSAL_MmngrOpenFromRegionIdx(&config, index, &hndl_mmngr), OSAL_RETURN_CONF) << "Test09_021_022 failed";
        EXPECT_EQ(hndl_mmngr, OSAL_MEMORY_MANAGER_HANDLE_INVALID) << "Test09_021_022 failed";
    }
}
// [MmngrOpenFromRegionIdx_TC_09_021_022]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrOpenFromRegionIdx_TC_09_021_023 MemoryApiTest.MmngrOpenFromRegionIdx_TC_09_021_023
 * @subsection MmngrOpenFromRegionIdx_TC_09_021_023_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrOpenFromRegionIdx_TC_09_021_023_tci Test Case ID
 * MmngrOpenFromRegionIdx_S0_BA_TC_09_021_023
 * @subsection MmngrOpenFromRegionIdx_TC_09_021_023_rr Related Requirement(s)
 * \#356350
 * @subsection MmngrOpenFromRegionIdx_TC_09_021_023_pp Prerequisite/Precondition
 * OSAL is initialized.
 * @subsection MmngrOpenFromRegionIdx_TC_09_021_023_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrOpenFromRegionIdx with abnormal condition in OSAL_MMNGR_ALLOC_MODE_STACK_PROT mode for all region indexes.
 * - Test09_021_023: "config.memory_limit" is 3KB.
 * @subsection MmngrOpenFromRegionIdx_TC_09_021_023_tpts Test Procedure/Test Steps
 * -# For each region index:
 *  - Calling function R_OSAL_MmngrOpenFromRegionIdx with config.memory_limit is 3KB.
 * @subsection MmngrOpenFromRegionIdx_TC_09_021_023_ereb Expected Result/Behavior
 * -# Expected result for all region indexes is as below:
 *  - The return value of R_OSAL_MmngrOpenFromRegionIdx is OSAL_RETURN_CONF.<br>
 * The return handle is OSAL_MEMORY_MANAGER_HANDLE_INVALID.
 * @subsection MmngrOpenFromRegionIdx_TC_09_021_023_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrOpenFromRegionIdx_TC_09_021_023
 */
// [MmngrOpenFromRegionIdx_TC_09_021_023]
TEST_F(MemoryApiTest, MmngrOpenFromRegionIdx_TC_09_021_023)
{
    for (auto index = 0; index < TEST_NUM_OF_MEMORY_REGION; index++)
    {
        // Test09_021_023
        // @brief: abnormal case: config.memory_limit is 3KB;
        EXPECT_EQ(R_OSAL_MmngrGetOsalMaxConfigFromRegionIdx(index, &config), OSAL_RETURN_OK);
        config.mode = OSAL_MMNGR_ALLOC_MODE_STACK_PROT;
        config.memory_limit = 3*1024;
        EXPECT_EQ(R_OSAL_MmngrOpenFromRegionIdx(&config, index, &hndl_mmngr), OSAL_RETURN_CONF) << "Test09_021_023 failed";
        EXPECT_EQ(hndl_mmngr, OSAL_MEMORY_MANAGER_HANDLE_INVALID) << "Test09_021_023 failed";
    }
}
// [MmngrOpenFromRegionIdx_TC_09_021_023]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrOpenFromRegionIdx_TC_09_021_024 MemoryApiTest.MmngrOpenFromRegionIdx_TC_09_021_024
 * @subsection MmngrOpenFromRegionIdx_TC_09_021_024_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrOpenFromRegionIdx_TC_09_021_024_tci Test Case ID
 * MmngrOpenFromRegionIdx_S1_A_TC_09_021_024
 * @subsection MmngrOpenFromRegionIdx_TC_09_021_024_rr Related Requirement(s)
 * \#356350
 * @subsection MmngrOpenFromRegionIdx_TC_09_021_024_pp Prerequisite/Precondition
 * OSAL is initialized.
 * @subsection MmngrOpenFromRegionIdx_TC_09_021_024_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrOpenFromRegionIdx with abnormal condition in OSAL_MMNGR_ALLOC_MODE_STACK_PROT mode for all region indexes.
 * - Test09_021_024: Open an opened Memory handle
 * @subsection MmngrOpenFromRegionIdx_TC_09_021_024_tpts Test Procedure/Test Steps
 * -# For each region index:
 *  - Get the Memory max configuration by using R_OSAL_MmngrGetOsalMaxConfigFromRegionIdx
 *  - Calling function R_OSAL_MmngrOpenFromRegionIdx with valid parameter.
 *  - Calling function R_OSAL_MmngrOpenFromRegionIdx again with the same configuration as previous step.
 *  - Calling R_OSAL_MmngrClose to close the opened Mmngr for the next test cases.
 * @subsection MmngrOpenFromRegionIdx_TC_09_021_024_ereb Expected Result/Behavior
 * -# Expected result for all region indexes is as below:
 *  - R_OSAL_MmngrGetOsalMaxConfigFromRegionIdx return OSAL_RETURN_OK
 *  - The return value of the first R_OSAL_MmngrOpenFromRegionIdx is OSAL_RETURN_OK.<br>
 * The return handle is not OSAL_MEMORY_MANAGER_HANDLE_INVALID. <br>
 *  - The return value of the second R_OSAL_MmngrOpenFromRegionIdx is OSAL_RETURN_STATE.
 *  - The return value of R_OSAL_MmngrClose is OSAL_RETURN_OK.
 * @subsection MmngrOpenFromRegionIdx_TC_09_021_024_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrOpenFromRegionIdx_TC_09_021_024
 */
// [MmngrOpenFromRegionIdx_TC_09_021_024]
TEST_F(MemoryApiTest, MmngrOpenFromRegionIdx_TC_09_021_024)
{
    for (auto index = 0; index < TEST_NUM_OF_MEMORY_REGION; index++)
    {
        // Test09_021_024
        // @brief: abnormal case: state error
        EXPECT_EQ(R_OSAL_MmngrGetOsalMaxConfigFromRegionIdx(index, &config), OSAL_RETURN_OK);
        config.mode = OSAL_MMNGR_ALLOC_MODE_STACK_PROT;
        EXPECT_EQ(R_OSAL_MmngrOpenFromRegionIdx(&config, index, &hndl_mmngr), OSAL_RETURN_OK);
        EXPECT_NE(hndl_mmngr, OSAL_MEMORY_MANAGER_HANDLE_INVALID);
        EXPECT_EQ(R_OSAL_MmngrOpenFromRegionIdx(&config, index, &hndl_mmngr), OSAL_RETURN_STATE) << "Test09_021_024 failed";
        EXPECT_EQ(R_OSAL_MmngrClose(hndl_mmngr), OSAL_RETURN_OK);
        hndl_mmngr = OSAL_MEMORY_MANAGER_HANDLE_INVALID;
    }
}
// [MmngrOpenFromRegionIdx_TC_09_021_024]

/**
 * @page MM_API Memory API Test
 * @section OsalApiStateTest_MmngrOpenFromRegionIdx_TC_09_021_025 OsalApiStateTest.MmngrOpenFromRegionIdx_TC_09_021_025
 * @subsection MmngrOpenFromRegionIdx_TC_09_021_025_tsi Test Suite ID
 * OsalApiStateTest
 * @subsection MmngrOpenFromRegionIdx_TC_09_021_025_tci Test Case ID
 * MmngrOpenFromRegionIdx_S2_A_TC_09_021_025
 * @subsection MmngrOpenFromRegionIdx_TC_09_021_025_rr Related Requirement(s)
 * \#356350
 * @subsection MmngrOpenFromRegionIdx_TC_09_021_025_pp Prerequisite/Precondition
 * - R_OSAL_Deinitialize has already been called
 * @subsection MmngrOpenFromRegionIdx_TC_09_021_025_tcs Test Case Summary
 * This test shall verify the functionality of the Memory APIs in invalid state transition for all region indexes.
 * - Test09_021_025: Confirm state transition check for R_OSAL_MmngrOpenFromRegionIdx in OSAL_MMNGR_ALLOC_MODE_STACK_PROT mode
 * @subsection MmngrOpenFromRegionIdx_TC_09_021_025_tpts Test Procedure/Test Steps
 * -# For each region index:
 *  - Get the max memory config by using R_OSAL_MmngrGetOsalMaxConfigFromRegionIdx
 *  - Confirm state transition check for R_OSAL_MmngrOpenFromRegionIdx
 * @subsection MmngrOpenFromRegionIdx_TC_09_021_025_ereb Expected Result/Behavior
 * -# Expected result for all region indexes is as below:
 *  - R_OSAL_MmngrGetOsalMaxConfigFromRegionIdx return OSAL_RETURN_OK
 *  - R_OSAL_MmngrOpenFromRegionIdx return OSAL_RETURN_STATE
 * @subsection MmngrOpenFromRegionIdx_TC_09_021_025_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrOpenFromRegionIdx_TC_09_021_025
 */
// [MmngrOpenFromRegionIdx_TC_09_021_025]
TEST_F(OsalApiStateTest, MmngrOpenFromRegionIdx_TC_09_021_025)
{
    st_osal_mmngr_config_t config;
    osal_memory_manager_handle_t hndl_mmngr = OSAL_MEMORY_MANAGER_HANDLE_INVALID;

    for (auto index = 0; index < TEST_NUM_OF_MEMORY_REGION; index++)
    {
        // Test09_021_025
        // @brief: abnormal case: Call R_OSAL_MmngrOpenFromRegionIdx after Deinitialize
        EXPECT_EQ(R_OSAL_MmngrGetOsalMaxConfigFromRegionIdx(index, &config), OSAL_RETURN_OK) << "Test09_021_025 failed";
        config.mode = OSAL_MMNGR_ALLOC_MODE_STACK_PROT;
        EXPECT_EQ(R_OSAL_MmngrOpenFromRegionIdx(&config, index, &hndl_mmngr), OSAL_RETURN_STATE) << "Test09_021_025 failed";
    }
}
// [MmngrOpenFromRegionIdx_TC_09_021_025]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrOpenFromRegionIdx_TC_09_021_026 MemoryApiTest.MmngrOpenFromRegionIdx_TC_09_021_026
 * @subsection MmngrOpenFromRegionIdx_TC_09_021_026_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrOpenFromRegionIdx_TC_09_021_026_tci Test Case ID
 * MmngrOpenFromRegionIdx_S0_BA_TC_09_021_026
 * @subsection MmngrOpenFromRegionIdx_TC_09_021_026_rr Related Requirement(s)
 * \#356350
 * @subsection MmngrOpenFromRegionIdx_TC_09_021_026_pp Prerequisite/Precondition
 * OSAL is initialized.
 * @subsection MmngrOpenFromRegionIdx_TC_09_021_026_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrOpenFromRegionIdx with abnormal condition in OSAL_MMNGR_ALLOC_MODE_STACK_PROT mode for all region indexes.
 * - Test09_021_026: memory_limit in config is bigger than max memory limit.
 * @subsection MmngrOpenFromRegionIdx_TC_09_021_026_tpts Test Procedure/Test Steps
 * -# For each region index:
 *  - Calling function R_OSAL_MmngrGetOsalMaxConfigFromRegionIdx to get max config.
 *  - Addition memory_limit in the max config with 1KB (1*1024).
 *  - Calling function R_OSAL_MmngrOpenFromRegionIdx with above max config.
 * @subsection MmngrOpenFromRegionIdx_TC_09_021_026_ereb Expected Result/Behavior
 * -# Expected result for all region indexes is as below:
 *  - The return value of R_OSAL_MmngrGetOsalMaxConfigFromRegionIdx is OSAL_RETURN_OK.
 *  - The return value of R_OSAL_MmngrOpenFromRegionIdx is OSAL_RETURN_CONF.
 * @subsection MmngrOpenFromRegionIdx_TC_09_021_026_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrOpenFromRegionIdx_TC_09_021_026
 */
// [MmngrOpenFromRegionIdx_TC_09_021_026]
TEST_F(MemoryApiTest, MmngrOpenFromRegionIdx_TC_09_021_026)
{
    for (auto index = 0; index < TEST_NUM_OF_MEMORY_REGION; index++)
    {
        // Test09_021_026
        // @brief: abnormal case: memory_limit = Max memory_limit + 1KB
        EXPECT_EQ(R_OSAL_MmngrGetOsalMaxConfigFromRegionIdx(index, &config), OSAL_RETURN_OK);
        config.mode = OSAL_MMNGR_ALLOC_MODE_STACK_PROT;
        config.memory_limit += 1*1024;
        EXPECT_EQ(R_OSAL_MmngrOpenFromRegionIdx(&config, index, &hndl_mmngr), OSAL_RETURN_CONF) << "Test09_021_026 failed";
    }
}
// [MmngrOpenFromRegionIdx_TC_09_021_026]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrOpenFromRegionIdx_TC_09_021_027 MemoryApiTest.MmngrOpenFromRegionIdx_TC_09_021_027
 * @subsection MmngrOpenFromRegionIdx_TC_09_021_027_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrOpenFromRegionIdx_TC_09_021_027_tci Test Case ID
 * MmngrOpenFromRegionIdx_S1_BA_TC_09_021_027
 * @subsection MmngrOpenFromRegionIdx_TC_09_021_027_rr Related Requirement(s)
 * \#356350
 * @subsection MmngrOpenFromRegionIdx_TC_09_021_027_pp Prerequisite/Precondition
 * OSAL is initialized.
 * @subsection MmngrOpenFromRegionIdx_TC_09_021_027_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrOpenFromRegionIdx with normal condition in OSAL_MMNGR_ALLOC_MODE_FREE_LIST mode for all region indexes.
 * - Test09_021_027: R_OSAL_MmngrOpenFromRegionIdx with allocation mode is FREE_LIST. Other config is obtained from R_OSAL_MmngrGetOsalMaxConfigFromRegionIdx
 * @subsection MmngrOpenFromRegionIdx_TC_09_021_027_tpts Test Procedure/Test Steps
 * -# For each region index:
 *  - Get the maximum memory configuration by using R_OSAL_MmngrGetOsalMaxConfigFromRegionIdx.
 *  - Calling function R_OSAL_MmngrOpenFromRegionIdx with the maximum config above
 *  - Calling R_OSAL_MmngrClose to close the opened Mmngr for the next test cases.
 * @subsection MmngrOpenFromRegionIdx_TC_09_021_027_ereb Expected Result/Behavior
 * -# Expected result for all region indexes is as below:
 *  - The return value of R_OSAL_MmngrGetOsalMaxConfigFromRegionIdx is OSAL_RETURN_OK.
 *  - The return value of R_OSAL_MmngrOpenFromRegionIdx is OSAL_RETURN_OK.<br>
 * The return handle is not OSAL_MEMORY_MANAGER_HANDLE_INVALID.
 *  - The return value of R_OSAL_MmngrClose is OSAL_RETURN_OK.
 * @subsection MmngrOpenFromRegionIdx_TC_09_021_027_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrOpenFromRegionIdx_TC_09_021_027
 */
// [MmngrOpenFromRegionIdx_TC_09_021_027]
TEST_F(MemoryApiTest, MmngrOpenFromRegionIdx_TC_09_021_027)
{
    for (auto index = 0; index < TEST_NUM_OF_MEMORY_REGION; index++)
    {
        // Test09_021_027
        // @brief: normal case: allocation mode is OSAL_MMNGR_ALLOC_MODE_FREE_LIST
        EXPECT_EQ(R_OSAL_MmngrGetOsalMaxConfigFromRegionIdx(index, &config), OSAL_RETURN_OK) << "Test09_021_027 failed";
        config.mode = OSAL_MMNGR_ALLOC_MODE_FREE_LIST;
        EXPECT_EQ(R_OSAL_MmngrOpenFromRegionIdx(&config, index, &hndl_mmngr), OSAL_RETURN_OK) << "Test09_021_027 failed";
        EXPECT_NE(hndl_mmngr, OSAL_MEMORY_MANAGER_HANDLE_INVALID) << "Test09_021_027 failed";
        EXPECT_EQ(R_OSAL_MmngrClose(hndl_mmngr), OSAL_RETURN_OK) << "Test09_021_027 failed";
        hndl_mmngr = OSAL_MEMORY_MANAGER_HANDLE_INVALID;
    }
}
// [MmngrOpenFromRegionIdx_TC_09_021_027]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrOpenFromRegionIdx_TC_09_021_028 MemoryApiTest.MmngrOpenFromRegionIdx_TC_09_021_028
 * @subsection MmngrOpenFromRegionIdx_TC_09_021_028_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrOpenFromRegionIdx_TC_09_021_028_tci Test Case ID
 * MmngrOpenFromRegionIdx_S0_BA_TC_09_021_028
 * @subsection MmngrOpenFromRegionIdx_TC_09_021_028_rr Related Requirement(s)
 * \#356350
 * @subsection MmngrOpenFromRegionIdx_TC_09_021_028_pp Prerequisite/Precondition
 * OSAL is initialized.
 * @subsection MmngrOpenFromRegionIdx_TC_09_021_028_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrOpenFromRegionIdx with abnormal condition in OSAL_MMNGR_ALLOC_MODE_FREE_LIST mode for all region indexes.
 * - Test09_021_028: "config.max_allowed_allocations" is OSAL_MEMORY_MANAGER_CFG_UNLIMITED plus 1.
 * @subsection MmngrOpenFromRegionIdx_TC_09_021_028_tpts Test Procedure/Test Steps
 * -# For each region index:
 *  - Calling function R_OSAL_MmngrOpenFromRegionIdx with config.max_allowed_allocations is the maximum limitation value plus 1.
 * @subsection MmngrOpenFromRegionIdx_TC_09_021_028_ereb Expected Result/Behavior
 * -# Expected result for all region indexes is as below:
 *  - The return value of R_OSAL_MmngrOpenFromRegionIdx is OSAL_RETURN_CONF.<br>
 * The return handle is OSAL_MEMORY_MANAGER_HANDLE_INVALID.
 * @subsection MmngrOpenFromRegionIdx_TC_09_021_028_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrOpenFromRegionIdx_TC_09_021_028
 */
// [MmngrOpenFromRegionIdx_TC_09_021_028]
TEST_F(MemoryApiTest, MmngrOpenFromRegionIdx_TC_09_021_028)
{
    for (auto index = 0; index < TEST_NUM_OF_MEMORY_REGION; index++)
    {
        // Test09_021_028
        // @brief: abnormal case: config.max_allowed_allocations = maximum value + 1;
        EXPECT_EQ(R_OSAL_MmngrGetOsalMaxConfigFromRegionIdx(index, &config), OSAL_RETURN_OK);
        config.mode = OSAL_MMNGR_ALLOC_MODE_FREE_LIST;
        config.max_allowed_allocations += 1;
        EXPECT_EQ(R_OSAL_MmngrOpenFromRegionIdx(&config, index, &hndl_mmngr), OSAL_RETURN_CONF) << "Test09_021_028 failed";
        EXPECT_EQ(hndl_mmngr, OSAL_MEMORY_MANAGER_HANDLE_INVALID) << "Test09_021_028 failed";
    }
}
// [MmngrOpenFromRegionIdx_TC_09_021_028]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrOpenFromRegionIdx_TC_09_021_029 MemoryApiTest.MmngrOpenFromRegionIdx_TC_09_021_029
 * @subsection MmngrOpenFromRegionIdx_TC_09_021_029_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrOpenFromRegionIdx_TC_09_021_029_tci Test Case ID
 * MmngrOpenFromRegionIdx_S0_BA_TC_09_021_029
 * @subsection MmngrOpenFromRegionIdx_TC_09_021_029_rr Related Requirement(s)
 * \#356350
 * @subsection MmngrOpenFromRegionIdx_TC_09_021_029_pp Prerequisite/Precondition
 * OSAL is initialized.
 * @subsection MmngrOpenFromRegionIdx_TC_09_021_029_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrOpenFromRegionIdx with abnormal condition in OSAL_MMNGR_ALLOC_MODE_FREE_LIST mode for all region indexes.
 * - Test09_021_029: "config.max_allowed_allocations" is 0.
 * @subsection MmngrOpenFromRegionIdx_TC_09_021_029_tpts Test Procedure/Test Steps
 * -# For each region index:
 *  - Calling function R_OSAL_MmngrOpenFromRegionIdx with config.max_allowed_allocations is 0.
 * @subsection MmngrOpenFromRegionIdx_TC_09_021_0298_ereb Expected Result/Behavior
 * -# Expected result for all region indexes is as below:
 *  - The return value of R_OSAL_MmngrOpenFromRegionIdx is OSAL_RETURN_CONF.<br>
 * The return handle is OSAL_MEMORY_MANAGER_HANDLE_INVALID.
 * @subsection MmngrOpenFromRegionIdx_TC_09_021_029_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrOpenFromRegionIdx_TC_09_021_029
 */
// [MmngrOpenFromRegionIdx_TC_09_021_029]
TEST_F(MemoryApiTest, MmngrOpenFromRegionIdx_TC_09_021_029)
{
    for (auto index = 0; index < TEST_NUM_OF_MEMORY_REGION; index++)
    {
        // Test09_021_029
        // @brief: abnormal case: config.max_allowed_allocations = 0;
        EXPECT_EQ(R_OSAL_MmngrGetOsalMaxConfigFromRegionIdx(index, &config), OSAL_RETURN_OK);
        config.mode = OSAL_MMNGR_ALLOC_MODE_FREE_LIST;
        config.max_allowed_allocations = 0;
        EXPECT_EQ(R_OSAL_MmngrOpenFromRegionIdx(&config, index, &hndl_mmngr), OSAL_RETURN_CONF) << "Test09_021_029 failed";
        EXPECT_EQ(hndl_mmngr, OSAL_MEMORY_MANAGER_HANDLE_INVALID) << "Test09_021_029 failed";
    }
}
// [MmngrOpenFromRegionIdx_TC_09_021_029]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrOpenFromRegionIdx_TC_09_021_030 MemoryApiTest.MmngrOpenFromRegionIdx_TC_09_021_030
 * @subsection MmngrOpenFromRegionIdx_TC_09_021_030_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrOpenFromRegionIdx_TC_09_021_030_tci Test Case ID
 * MmngrOpenFromRegionIdx_S0_BA_TC_09_021_030
 * @subsection MmngrOpenFromRegionIdx_TC_09_021_030_rr Related Requirement(s)
 * \#356350
 * @subsection MmngrOpenFromRegionIdx_TC_09_021_030_pp Prerequisite/Precondition
 * OSAL is initialized.
 * @subsection MmngrOpenFromRegionIdx_TC_09_021_030_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrOpenFromRegionIdx with abnormal condition in OSAL_MMNGR_ALLOC_MODE_FREE_LIST mode for all region indexes.
 * - Test09_021_030: "config.max_registered_monitors_cbs" is OSAL_MEMORY_MANAGER_CFG_UNLIMITED plus 1.
 * @subsection MmngrOpenFromRegionIdx_TC_09_021_030_tpts Test Procedure/Test Steps
 * -# For each region index:
 *  - Calling function R_OSAL_MmngrOpenFromRegionIdx with config.max_registered_monitors_cbs is the maximum limitation value plus 1.
 * @subsection MmngrOpenFromRegionIdx_TC_09_021_030_ereb Expected Result/Behavior
 * -# Expected result for all region indexes is as below:
 *  - The return value of R_OSAL_MmngrOpenFromRegionIdx is OSAL_RETURN_CONF.<br>
 * The return handle is OSAL_MEMORY_MANAGER_HANDLE_INVALID.
 * @subsection MmngrOpenFromRegionIdx_TC_09_021_030_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrOpenFromRegionIdx_TC_09_021_030
 */
// [MmngrOpenFromRegionIdx_TC_09_021_030]
TEST_F(MemoryApiTest, MmngrOpenFromRegionIdx_TC_09_021_030)
{
    for (auto index = 0; index < TEST_NUM_OF_MEMORY_REGION; index++)
    {
        // Test09_021_030
        // @brief: abnormal case: config.max_registered_monitors_cbs = maximum value + 1;
        EXPECT_EQ(R_OSAL_MmngrGetOsalMaxConfigFromRegionIdx(index, &config), OSAL_RETURN_OK);
        config.mode = OSAL_MMNGR_ALLOC_MODE_FREE_LIST;
        config.max_registered_monitors_cbs += 1;
        EXPECT_EQ(R_OSAL_MmngrOpenFromRegionIdx(&config, index, &hndl_mmngr), OSAL_RETURN_CONF) << "Test09_021_030 failed";
        EXPECT_EQ(hndl_mmngr, OSAL_MEMORY_MANAGER_HANDLE_INVALID) << "Test09_021_030 failed";
    }
}
// [MmngrOpenFromRegionIdx_TC_09_021_030]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrOpenFromRegionIdx_TC_09_021_031 MemoryApiTest.MmngrOpenFromRegionIdx_TC_09_021_031
 * @subsection MmngrOpenFromRegionIdx_TC_09_021_031_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrOpenFromRegionIdx_TC_09_021_031_tci Test Case ID
 * MmngrOpenFromRegionIdx_S0_BA_TC_09_021_031
 * @subsection MmngrOpenFromRegionIdx_TC_09_021_031_rr Related Requirement(s)
 * \#356350
 * @subsection MmngrOpenFromRegionIdx_TC_09_021_031_pp Prerequisite/Precondition
 * OSAL is initialized.
 * @subsection MmngrOpenFromRegionIdx_TC_09_021_031_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrOpenFromRegionIdx with abnormal condition in OSAL_MMNGR_ALLOC_MODE_FREE_LIST mode for all region indexes.
 * - Test09_021_031: "config.memory_limit" is 3KB.
 * @subsection MmngrOpenFromRegionIdx_TC_09_021_031_tpts Test Procedure/Test Steps
 * -# For each region index:
 *  - Calling function R_OSAL_MmngrOpenFromRegionIdx with config.memory_limit is 3KB.
 * @subsection MmngrOpenFromRegionIdx_TC_09_021_031_ereb Expected Result/Behavior
 * -# Expected result for all region indexes is as below:
 *  - The return value of R_OSAL_MmngrOpenFromRegionIdx is OSAL_RETURN_CONF.<br>
 * The return handle is OSAL_MEMORY_MANAGER_HANDLE_INVALID.
 * @subsection MmngrOpenFromRegionIdx_TC_09_021_031_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrOpenFromRegionIdx_TC_09_021_031
 */
// [MmngrOpenFromRegionIdx_TC_09_021_031]
TEST_F(MemoryApiTest, MmngrOpenFromRegionIdx_TC_09_021_031)
{
    for (auto index = 0; index < TEST_NUM_OF_MEMORY_REGION; index++)
    {
        // Test09_021_031
        // @brief: abnormal case: config.memory_limit is 3KB;
        EXPECT_EQ(R_OSAL_MmngrGetOsalMaxConfigFromRegionIdx(index, &config), OSAL_RETURN_OK);
        config.mode = OSAL_MMNGR_ALLOC_MODE_FREE_LIST;
        config.memory_limit = 3*1024;
        EXPECT_EQ(R_OSAL_MmngrOpenFromRegionIdx(&config, index, &hndl_mmngr), OSAL_RETURN_CONF) << "Test09_021_031 failed";
        EXPECT_EQ(hndl_mmngr, OSAL_MEMORY_MANAGER_HANDLE_INVALID) << "Test09_021_031 failed";
    }
}
// [MmngrOpenFromRegionIdx_TC_09_021_031]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrOpenFromRegionIdx_TC_09_021_032 MemoryApiTest.MmngrOpenFromRegionIdx_TC_09_021_032
 * @subsection MmngrOpenFromRegionIdx_TC_09_021_032_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrOpenFromRegionIdx_TC_09_021_032_tci Test Case ID
 * MmngrOpenFromRegionIdx_S1_A_TC_09_021_032
 * @subsection MmngrOpenFromRegionIdx_TC_09_021_032_rr Related Requirement(s)
 * \#356350
 * @subsection MmngrOpenFromRegionIdx_TC_09_021_032_pp Prerequisite/Precondition
 * OSAL is initialized.
 * @subsection MmngrOpenFromRegionIdx_TC_09_021_032_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrOpenFromRegionIdx with abnormal condition in OSAL_MMNGR_ALLOC_MODE_FREE_LIST mode for all region indexes.
 * - Test09_021_032: Open an opened Memory handle
 * @subsection MmngrOpenFromRegionIdx_TC_09_021_032_tpts Test Procedure/Test Steps
 * -# For each region indexes:
 *  - Get the Memory max configuration by using R_OSAL_MmngrGetOsalMaxConfigFromRegionIdx
 *  - Calling function R_OSAL_MmngrOpenFromRegionIdx with valid parameter.
 *  - Calling function R_OSAL_MmngrOpenFromRegionIdx again with the same configuration as above.
 *  - Calling R_OSAL_MmngrClose to close the opened Mmngr for the next test cases.
 * @subsection MmngrOpenFromRegionIdx_TC_09_021_032_ereb Expected Result/Behavior
 * -# Expected result for all region indexes is as below:
 *  - R_OSAL_MmngrGetOsalMaxConfigFromRegionIdx return OSAL_RETURN_OK
 *  - The return value of the first R_OSAL_MmngrOpenFromRegionIdx is OSAL_RETURN_OK.<br>
 * The return handle is not OSAL_MEMORY_MANAGER_HANDLE_INVALID. <br>
 *  - The return value of the second R_OSAL_MmngrOpenFromRegionIdx is OSAL_RETURN_STATE.
 *  - The return value of R_OSAL_MmngrClose is OSAL_RETURN_OK.
 * @subsection MmngrOpenFromRegionIdx_TC_09_021_032_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrOpenFromRegionIdx_TC_09_021_032
 */
// [MmngrOpenFromRegionIdx_TC_09_021_032]
TEST_F(MemoryApiTest, MmngrOpenFromRegionIdx_TC_09_021_032)
{
    for (auto index = 0; index < TEST_NUM_OF_MEMORY_REGION; index++)
    {
        // Test09_021_032
        // @brief: abnormal case: state error
        EXPECT_EQ(R_OSAL_MmngrGetOsalMaxConfigFromRegionIdx(index, &config), OSAL_RETURN_OK);
        config.mode = OSAL_MMNGR_ALLOC_MODE_FREE_LIST;
        EXPECT_EQ(R_OSAL_MmngrOpenFromRegionIdx(&config, index, &hndl_mmngr), OSAL_RETURN_OK) << "Test09_021_032 failed";
        EXPECT_NE(hndl_mmngr, OSAL_MEMORY_MANAGER_HANDLE_INVALID);
        EXPECT_EQ(R_OSAL_MmngrOpenFromRegionIdx(&config, index, &hndl_mmngr), OSAL_RETURN_STATE) << "Test09_021_032 failed";
        EXPECT_EQ(R_OSAL_MmngrClose(hndl_mmngr), OSAL_RETURN_OK);
        hndl_mmngr = OSAL_MEMORY_MANAGER_HANDLE_INVALID;
    }
}
// [MmngrOpenFromRegionIdx_TC_09_021_032]

/**
 * @page MM_API Memory API Test
 * @section OsalApiStateTest_MmngrOpenFromRegionIdx_TC_09_021_033 OsalApiStateTest.MmngrOpenFromRegionIdx_TC_09_021_033
 * @subsection MmngrOpenFromRegionIdx_TC_09_021_033_tsi Test Suite ID
 * OsalApiStateTest
 * @subsection MmngrOpenFromRegionIdx_TC_09_021_033_tci Test Case ID
 * MmngrOpenFromRegionIdx_S2_A_TC_09_021_033
 * @subsection MmngrOpenFromRegionIdx_TC_09_021_033_rr Related Requirement(s)
 * \#356350
 * @subsection MmngrOpenFromRegionIdx_TC_09_021_033_pp Prerequisite/Precondition
 * - R_OSAL_Deinitialize has already been called
 * @subsection MmngrOpenFromRegionIdx_TC_09_021_033_tcs Test Case Summary
 * This test shall verify the functionality of the Memory APIs in invalid state transition for all region indexes.
 * - Test09_021_033: Confirm state transition check for R_OSAL_MmngrOpenFromRegionIdx in OSAL_MMNGR_ALLOC_MODE_FREE_LIST mode
 * @subsection MmngrOpenFromRegionIdx_TC_09_021_033_tpts Test Procedure/Test Steps
 * -# For each region index:
 *  - Get the max memory config by using R_OSAL_MmngrGetOsalMaxConfigFromRegionIdx
 *  - Confirm state transition check for R_OSAL_MmngrOpenFromRegionIdx
 * @subsection MmngrOpenFromRegionIdx_TC_09_021_033_ereb Expected Result/Behavior
 * -# Expected result for all region indexes is as below:
 *  - R_OSAL_MmngrGetOsalMaxConfigFromRegionIdx return OSAL_RETURN_OK
 *  - R_OSAL_MmngrOpenFromRegionIdx return OSAL_RETURN_STATE
 * @subsection MmngrOpenFromRegionIdx_TC_09_021_033_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrOpenFromRegionIdx_TC_09_021_033
 */
// [MmngrOpenFromRegionIdx_TC_09_021_033]
TEST_F(OsalApiStateTest, MmngrOpenFromRegionIdx_TC_09_021_033)
{
    st_osal_mmngr_config_t config;
    osal_memory_manager_handle_t hndl_mmngr = OSAL_MEMORY_MANAGER_HANDLE_INVALID;

    for (auto index = 0; index < TEST_NUM_OF_MEMORY_REGION; index++)
    {
        // Test09_021_033
        // @brief: abnormal case: Call R_OSAL_MmngrOpenFromRegionIdx after Deinitialize
        EXPECT_EQ(R_OSAL_MmngrGetOsalMaxConfigFromRegionIdx(index, &config), OSAL_RETURN_OK) << "Test09_021_033 failed";
        config.mode = OSAL_MMNGR_ALLOC_MODE_FREE_LIST;
        EXPECT_EQ(R_OSAL_MmngrOpenFromRegionIdx(&config, index, &hndl_mmngr), OSAL_RETURN_STATE) << "Test09_021_033 failed";
    }
}
// [MmngrOpenFromRegionIdx_TC_09_021_033]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrOpenFromRegionIdx_TC_09_021_034 MemoryApiTest.MmngrOpenFromRegionIdx_TC_09_021_034
 * @subsection MmngrOpenFromRegionIdx_TC_09_021_034_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrOpenFromRegionIdx_TC_09_021_034_tci Test Case ID
 * MmngrOpenFromRegionIdx_S0_BA_TC_09_021_034
 * @subsection MmngrOpenFromRegionIdx_TC_09_021_034_rr Related Requirement(s)
 * \#356350
 * @subsection MmngrOpenFromRegionIdx_TC_09_021_034_pp Prerequisite/Precondition
 * OSAL is initialized.
 * @subsection MmngrOpenFromRegionIdx_TC_09_021_034_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrOpenFromRegionIdx with abnormal condition in OSAL_MMNGR_ALLOC_MODE_FREE_LIST mode for all region indexes.
 * - Test09_021_034: memory_limit in config is bigger than max memory limit.
 * @subsection MmngrOpenFromRegionIdx_TC_09_021_034_tpts Test Procedure/Test Steps
 * -# For each region index:
 *  - Calling function R_OSAL_MmngrGetOsalMaxConfigFromRegionIdx to get max config.
 *  - Addition memory_limit in the max config with 1KB (1*1024).
 *  - Calling function R_OSAL_MmngrOpenFromRegionIdx with above max config.
 * @subsection MmngrOpenFromRegionIdx_TC_09_021_034_ereb Expected Result/Behavior
 * -# Expected result for all region indexes is as below:
 *  - The return value of R_OSAL_MmngrGetOsalMaxConfigFromRegionIdx is OSAL_RETURN_OK.
 *  - The return value of R_OSAL_MmngrOpenFromRegionIdx is OSAL_RETURN_CONF.
 * @subsection MmngrOpenFromRegionIdx_TC_09_021_034_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrOpenFromRegionIdx_TC_09_021_034
 */
// [MmngrOpenFromRegionIdx_TC_09_021_034]
TEST_F(MemoryApiTest, MmngrOpenFromRegionIdx_TC_09_021_034)
{
    for (auto index = 0; index < TEST_NUM_OF_MEMORY_REGION; index++)
    {
        // Test09_021_034
        // @brief: abnormal case: memory_limit = Max memory_limit + 1KB
        EXPECT_EQ(R_OSAL_MmngrGetOsalMaxConfigFromRegionIdx(index, &config), OSAL_RETURN_OK);
        config.mode = OSAL_MMNGR_ALLOC_MODE_FREE_LIST;
        config.memory_limit += 1*1024;
        EXPECT_EQ(R_OSAL_MmngrOpenFromRegionIdx(&config, index, &hndl_mmngr), OSAL_RETURN_CONF) << "Test09_021_034 failed";
    }
}
// [MmngrOpenFromRegionIdx_TC_09_021_034]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrOpenFromRegionIdx_TC_09_021_035 MemoryApiTest.MmngrOpenFromRegionIdx_TC_09_021_035
 * @subsection MmngrOpenFromRegionIdx_TC_09_021_035_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrOpenFromRegionIdx_TC_09_021_035_tci Test Case ID
 * MmngrOpenFromRegionIdx_S1_BA_TC_09_021_035
 * @subsection MmngrOpenFromRegionIdx_TC_09_021_035_rr Related Requirement(s)
 * \#356350
 * @subsection MmngrOpenFromRegionIdx_TC_09_021_035_pp Prerequisite/Precondition
 * OSAL is initialized.
 * @subsection MmngrOpenFromRegionIdx_TC_09_021_035_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrOpenFromRegionIdx with normal condition in OSAL_MMNGR_ALLOC_MODE_FREE_LIST_PROT mode for all region indexes.
 * - Test09_021_035: R_OSAL_MmngrOpenFromRegionIdx with allocation mode is FREE_LIST_PROT. Other config is obtained from R_OSAL_MmngrGetOsalMaxConfigFromRegionIdx
 * @subsection MmngrOpenFromRegionIdx_TC_09_021_035_tpts Test Procedure/Test Steps
 * -# For each region index:
 *  - Get the maximum memory configuration by using R_OSAL_MmngrGetOsalMaxConfigFromRegionIdx.
 *  - Calling function R_OSAL_MmngrOpenFromRegionIdx with the maximum config above
 *  - Calling R_OSAL_MmngrClose to close the opened Mmngr for the next test cases.
 * @subsection MmngrOpenFromRegionIdx_TC_09_021_035_ereb Expected Result/Behavior
 * -# Expected result for all region indexes is as below:
 *  - The return value of R_OSAL_MmngrGetOsalMaxConfigFromRegionIdx is OSAL_RETURN_OK.
 *  - The return value of R_OSAL_MmngrOpenFromRegionIdx is OSAL_RETURN_OK.<br>
 * The return handle is not OSAL_MEMORY_MANAGER_HANDLE_INVALID.
 *  - The return value of R_OSAL_MmngrClose is OSAL_RETURN_OK.
 * @subsection MmngrOpenFromRegionIdx_TC_09_021_035_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrOpenFromRegionIdx_TC_09_021_035
 */
// [MmngrOpenFromRegionIdx_TC_09_021_035]
TEST_F(MemoryApiTest, MmngrOpenFromRegionIdx_TC_09_021_035)
{
    for (auto index = 0; index < TEST_NUM_OF_MEMORY_REGION; index++)
    {
        // Test09_021_035
        // @brief: normal case: allocation mode is OSAL_MMNGR_ALLOC_MODE_FREE_LIST_PROT
        EXPECT_EQ(R_OSAL_MmngrGetOsalMaxConfigFromRegionIdx(index, &config), OSAL_RETURN_OK) << "Test09_021_035 failed";
        config.mode = OSAL_MMNGR_ALLOC_MODE_FREE_LIST_PROT;
        EXPECT_EQ(R_OSAL_MmngrOpenFromRegionIdx(&config, index, &hndl_mmngr), OSAL_RETURN_OK) << "Test09_021_035 failed";
        EXPECT_NE(hndl_mmngr, OSAL_MEMORY_MANAGER_HANDLE_INVALID) << "Test09_021_035 failed";
        EXPECT_EQ(R_OSAL_MmngrClose(hndl_mmngr), OSAL_RETURN_OK) << "Test09_021_035 failed";
        hndl_mmngr = OSAL_MEMORY_MANAGER_HANDLE_INVALID;
    }
}
// [MmngrOpenFromRegionIdx_TC_09_021_035]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrOpenFromRegionIdx_TC_09_021_036 MemoryApiTest.MmngrOpenFromRegionIdx_TC_09_021_036
 * @subsection MmngrOpenFromRegionIdx_TC_09_021_036_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrOpenFromRegionIdx_TC_09_021_036_tci Test Case ID
 * MmngrOpenFromRegionIdx_S0_BA_TC_09_021_036
 * @subsection MmngrOpenFromRegionIdx_TC_09_021_036_rr Related Requirement(s)
 * \#356350
 * @subsection MmngrOpenFromRegionIdx_TC_09_021_036_pp Prerequisite/Precondition
 * OSAL is initialized.
 * @subsection MmngrOpenFromRegionIdx_TC_09_021_036_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrOpenFromRegionIdx with abnormal condition in OSAL_MMNGR_ALLOC_MODE_FREE_LIST_PROT mode for all region indexes.
 * - Test09_021_036: "config.max_allowed_allocations" is OSAL_MEMORY_MANAGER_CFG_UNLIMITED plus 1.
 * @subsection MmngrOpenFromRegionIdx_TC_09_021_036_tpts Test Procedure/Test Steps
 * -# For each region index:
 *  - Calling function R_OSAL_MmngrOpenFromRegionIdx with config.max_allowed_allocations is the maximum limitation value plus 1.
 * @subsection MmngrOpenFromRegionIdx_TC_09_021_036_ereb Expected Result/Behavior
 * -# Expected result for all region indexes is as below:
 *  - The return value of R_OSAL_MmngrOpenFromRegionIdx is OSAL_RETURN_CONF.<br>
 * The return handle is OSAL_MEMORY_MANAGER_HANDLE_INVALID.
 * @subsection MmngrOpenFromRegionIdx_TC_09_021_036_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrOpenFromRegionIdx_TC_09_021_036
 */
// [MmngrOpenFromRegionIdx_TC_09_021_036]
TEST_F(MemoryApiTest, MmngrOpenFromRegionIdx_TC_09_021_036)
{
    for (auto index = 0; index < TEST_NUM_OF_MEMORY_REGION; index++)
    {
        // Test09_021_036
        // @brief: abnormal case: config.max_allowed_allocations = maximum value + 1;
        EXPECT_EQ(R_OSAL_MmngrGetOsalMaxConfigFromRegionIdx(index, &config), OSAL_RETURN_OK);
        config.mode = OSAL_MMNGR_ALLOC_MODE_FREE_LIST_PROT;
        config.max_allowed_allocations += 1;
        EXPECT_EQ(R_OSAL_MmngrOpenFromRegionIdx(&config, index, &hndl_mmngr), OSAL_RETURN_CONF) << "Test09_021_036 failed";
        EXPECT_EQ(hndl_mmngr, OSAL_MEMORY_MANAGER_HANDLE_INVALID) << "Test09_021_036 failed";
    }
}
// [MmngrOpenFromRegionIdx_TC_09_021_036]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrOpenFromRegionIdx_TC_09_021_037 MemoryApiTest.MmngrOpenFromRegionIdx_TC_09_021_037
 * @subsection MmngrOpenFromRegionIdx_TC_09_021_037_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrOpenFromRegionIdx_TC_09_021_037_tci Test Case ID
 * MmngrOpenFromRegionIdx_S0_BA_TC_09_021_037
 * @subsection MmngrOpenFromRegionIdx_TC_09_021_037_rr Related Requirement(s)
 * \#356350
 * @subsection MmngrOpenFromRegionIdx_TC_09_021_037_pp Prerequisite/Precondition
 * OSAL is initialized.
 * @subsection MmngrOpenFromRegionIdx_TC_09_021_037_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrOpenFromRegionIdx with abnormal condition in OSAL_MMNGR_ALLOC_MODE_FREE_LIST_PROT mode for all region indexes.
 * - Test09_021_037: "config.max_allowed_allocations" is 0.
 * @subsection MmngrOpenFromRegionIdx_TC_09_021_037_tpts Test Procedure/Test Steps
 * -# For each region index:
 *  - Calling function R_OSAL_MmngrOpenFromRegionIdx with config.max_allowed_allocations is 0.
 * @subsection MmngrOpenFromRegionIdx_TC_09_021_037_ereb Expected Result/Behavior
 * -# Expected result for all region indexes is as below:
 *  - The return value of R_OSAL_MmngrOpenFromRegionIdx is OSAL_RETURN_CONF.<br>
 * The return handle is OSAL_MEMORY_MANAGER_HANDLE_INVALID.
 * @subsection MmngrOpenFromRegionIdx_TC_09_021_037_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrOpenFromRegionIdx_TC_09_021_037
 */
// [MmngrOpenFromRegionIdx_TC_09_021_037]
TEST_F(MemoryApiTest, MmngrOpenFromRegionIdx_TC_09_021_037)
{
    for (auto index = 0; index < TEST_NUM_OF_MEMORY_REGION; index++)
    {
        // Test09_021_037
        // @brief: abnormal case: config.max_allowed_allocations = 0;
        EXPECT_EQ(R_OSAL_MmngrGetOsalMaxConfigFromRegionIdx(index, &config), OSAL_RETURN_OK);
        config.mode = OSAL_MMNGR_ALLOC_MODE_FREE_LIST_PROT;
        config.max_allowed_allocations = 0;
        EXPECT_EQ(R_OSAL_MmngrOpenFromRegionIdx(&config, index, &hndl_mmngr), OSAL_RETURN_CONF) << "Test09_021_037 failed";
        EXPECT_EQ(hndl_mmngr, OSAL_MEMORY_MANAGER_HANDLE_INVALID) << "Test09_021_037 failed";
    }
}
// [MmngrOpenFromRegionIdx_TC_09_021_037]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrOpenFromRegionIdx_TC_09_021_038 MemoryApiTest.MmngrOpenFromRegionIdx_TC_09_021_038
 * @subsection MmngrOpenFromRegionIdx_TC_09_021_038_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrOpenFromRegionIdx_TC_09_021_038_tci Test Case ID
 * MmngrOpenFromRegionIdx_S0_BA_TC_09_021_038
 * @subsection MmngrOpenFromRegionIdx_TC_09_021_038_rr Related Requirement(s)
 * \#356350
 * @subsection MmngrOpenFromRegionIdx_TC_09_021_038_pp Prerequisite/Precondition
 * OSAL is initialized.
 * @subsection MmngrOpenFromRegionIdx_TC_09_021_038_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrOpenFromRegionIdx with abnormal condition in OSAL_MMNGR_ALLOC_MODE_FREE_LIST_PROT mode for all region indexes.
 * - Test09_021_038: "config.max_registered_monitors_cbs" is OSAL_MEMORY_MANAGER_CFG_UNLIMITED plus 1.
 * @subsection MmngrOpenFromRegionIdx_TC_09_021_038_tpts Test Procedure/Test Steps
 * -# For each region index:
 *  - Calling function R_OSAL_MmngrOpenFromRegionIdx with config.max_registered_monitors_cbs is the maximum limitation value plus 1.
 * @subsection MmngrOpenFromRegionIdx_TC_09_021_038_ereb Expected Result/Behavior
 * -# Expected result for all region indexes is as below:
 *  - The return value of R_OSAL_MmngrOpenFromRegionIdx is OSAL_RETURN_CONF.<br>
 * The return handle is OSAL_MEMORY_MANAGER_HANDLE_INVALID.
 * @subsection MmngrOpenFromRegionIdx_TC_09_021_038_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrOpenFromRegionIdx_TC_09_021_038
 */
// [MmngrOpenFromRegionIdx_TC_09_021_038]
TEST_F(MemoryApiTest, MmngrOpenFromRegionIdx_TC_09_021_038)
{
    for (auto index = 0; index < TEST_NUM_OF_MEMORY_REGION; index++)
    {
        // Test09_021_038
        // @brief: abnormal case: config.max_registered_monitors_cbs = maximum value + 1;
        EXPECT_EQ(R_OSAL_MmngrGetOsalMaxConfigFromRegionIdx(index, &config), OSAL_RETURN_OK);
        config.mode = OSAL_MMNGR_ALLOC_MODE_FREE_LIST_PROT;
        config.max_registered_monitors_cbs += 1;
        EXPECT_EQ(R_OSAL_MmngrOpenFromRegionIdx(&config, index, &hndl_mmngr), OSAL_RETURN_CONF) << "Test09_021_038 failed";
        EXPECT_EQ(hndl_mmngr, OSAL_MEMORY_MANAGER_HANDLE_INVALID) << "Test09_021_038 failed";
    }
}
// [MmngrOpenFromRegionIdx_TC_09_021_038]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrOpenFromRegionIdx_TC_09_021_039 MemoryApiTest.MmngrOpenFromRegionIdx_TC_09_021_039
 * @subsection MmngrOpenFromRegionIdx_TC_09_021_039_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrOpenFromRegionIdx_TC_09_021_039_tci Test Case ID
 * MmngrOpenFromRegionIdx_S0_BA_TC_09_021_039
 * @subsection MmngrOpenFromRegionIdx_TC_09_021_039_rr Related Requirement(s)
 * \#356350
 * @subsection MmngrOpenFromRegionIdx_TC_09_021_039_pp Prerequisite/Precondition
 * OSAL is initialized.
 * @subsection MmngrOpenFromRegionIdx_TC_09_021_039_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrOpenFromRegionIdx with abnormal condition in OSAL_MMNGR_ALLOC_MODE_FREE_LIST_PROT mode for all region indexes.
 * - Test09_021_039: "config.memory_limit" is 3KB.
 * @subsection MmngrOpenFromRegionIdx_TC_09_021_039_tpts Test Procedure/Test Steps
 * -# For each region index:
 *  - Calling function R_OSAL_MmngrOpenFromRegionIdx with config.memory_limit is 3KB.
 * @subsection MmngrOpenFromRegionIdx_TC_09_021_039_ereb Expected Result/Behavior
 * -# Expected result for all region indexes is as below:
 *  - The return value of R_OSAL_MmngrOpenFromRegionIdx is OSAL_RETURN_CONF.<br>
 * The return handle is OSAL_MEMORY_MANAGER_HANDLE_INVALID.
 * @subsection MmngrOpenFromRegionIdx_TC_09_021_039_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrOpenFromRegionIdx_TC_09_021_039
 */
// [MmngrOpenFromRegionIdx_TC_09_021_039]
TEST_F(MemoryApiTest, MmngrOpenFromRegionIdx_TC_09_021_039)
{
    for (auto index = 0; index < TEST_NUM_OF_MEMORY_REGION; index++)
    {
        // Test09_021_039
        // @brief: abnormal case: config.memory_limit is 3KB;
        EXPECT_EQ(R_OSAL_MmngrGetOsalMaxConfigFromRegionIdx(index, &config), OSAL_RETURN_OK);
        config.mode = OSAL_MMNGR_ALLOC_MODE_FREE_LIST_PROT;
        config.memory_limit = 3*1024;
        EXPECT_EQ(R_OSAL_MmngrOpenFromRegionIdx(&config, index, &hndl_mmngr), OSAL_RETURN_CONF) << "Test09_021_039 failed";
        EXPECT_EQ(hndl_mmngr, OSAL_MEMORY_MANAGER_HANDLE_INVALID) << "Test09_021_039 failed";
    }
}
// [MmngrOpenFromRegionIdx_TC_09_021_039]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrOpenFromRegionIdx_TC_09_021_040 MemoryApiTest.MmngrOpenFromRegionIdx_TC_09_021_040
 * @subsection MmngrOpenFromRegionIdx_TC_09_021_040_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrOpenFromRegionIdx_TC_09_021_040_tci Test Case ID
 * MmngrOpenFromRegionIdx_S1_A_TC_09_021_040
 * @subsection MmngrOpenFromRegionIdx_TC_09_021_040_rr Related Requirement(s)
 * \#356350
 * @subsection MmngrOpenFromRegionIdx_TC_09_021_040_pp Prerequisite/Precondition
 * OSAL is initialized.
 * @subsection MmngrOpenFromRegionIdx_TC_09_021_040_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrOpenFromRegionIdx with abnormal condition in OSAL_MMNGR_ALLOC_MODE_FREE_LIST_PROT mode for all region indexes.
 * - Test09_021_040: Open an opened Memory handle
 * @subsection MmngrOpenFromRegionIdx_TC_09_021_040_tpts Test Procedure/Test Steps
 * -# For each region index:
 *  - Get the Memory max configuration by using R_OSAL_MmngrGetOsalMaxConfigFromRegionIdx
 *  - Calling function R_OSAL_MmngrOpenFromRegionIdx with max configuration.
 *  - Calling function R_OSAL_MmngrOpenFromRegionIdx again with the same configuration as above.
 *  - Calling R_OSAL_MmngrClose to close the opened Mmngr for the next test cases.
 * @subsection MmngrOpenFromRegionIdx_TC_09_021_040_ereb Expected Result/Behavior
 * -# Expected result for all region indexes is as below:
 *  - R_OSAL_MmngrGetOsalMaxConfigFromRegionIdx return OSAL_RETURN_OK
 *  - The return value of the first R_OSAL_MmngrOpenFromRegionIdx is OSAL_RETURN_OK.<br>
 * The return handle is not OSAL_MEMORY_MANAGER_HANDLE_INVALID. <br>
 *  - The return value of the second R_OSAL_MmngrOpenFromRegionIdx is OSAL_RETURN_STATE.
 *  - The return value of R_OSAL_MmngrClose is OSAL_RETURN_OK.
 * @subsection MmngrOpenFromRegionIdx_TC_09_021_040_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrOpenFromRegionIdx_TC_09_021_040
 */
// [MmngrOpenFromRegionIdx_TC_09_021_040]
TEST_F(MemoryApiTest, MmngrOpenFromRegionIdx_TC_09_021_040)
{
    for (auto index = 0; index < TEST_NUM_OF_MEMORY_REGION; index++)
    {
        // Test09_021_040
        // @brief: abnormal case: state error
        EXPECT_EQ(R_OSAL_MmngrGetOsalMaxConfigFromRegionIdx(index, &config), OSAL_RETURN_OK);
        config.mode = OSAL_MMNGR_ALLOC_MODE_FREE_LIST_PROT;
        EXPECT_EQ(R_OSAL_MmngrOpenFromRegionIdx(&config, index, &hndl_mmngr), OSAL_RETURN_OK);
        EXPECT_NE(hndl_mmngr, OSAL_MEMORY_MANAGER_HANDLE_INVALID);
        EXPECT_EQ(R_OSAL_MmngrOpenFromRegionIdx(&config, index, &hndl_mmngr), OSAL_RETURN_STATE) << "Test09_021_040 failed";
        EXPECT_EQ(R_OSAL_MmngrClose(hndl_mmngr), OSAL_RETURN_OK);
        hndl_mmngr = OSAL_MEMORY_MANAGER_HANDLE_INVALID;
    }
}
// [MmngrOpenFromRegionIdx_TC_09_021_040]

/**
 * @page MM_API Memory API Test
 * @section OsalApiStateTest_MmngrOpenFromRegionIdx_TC_09_021_041 OsalApiStateTest.MmngrOpenFromRegionIdx_TC_09_021_041
 * @subsection MmngrOpenFromRegionIdx_TC_09_021_041_tsi Test Suite ID
 * OsalApiStateTest
 * @subsection MmngrOpenFromRegionIdx_TC_09_021_041_tci Test Case ID
 * MmngrOpenFromRegionIdx_S2_A_TC_09_021_041
 * @subsection MmngrOpenFromRegionIdx_TC_09_021_041_rr Related Requirement(s)
 * \#356350
 * @subsection MmngrOpenFromRegionIdx_TC_09_021_041_pp Prerequisite/Precondition
 * - R_OSAL_Deinitialize has already been called
 * @subsection MmngrOpenFromRegionIdx_TC_09_021_041_tcs Test Case Summary
 * This test shall verify the functionality of the Memory APIs in invalid state transition for all region indexes.
 * - Test09_021_041: Confirm state transition check for R_OSAL_MmngrOpenFromRegionIdx in OSAL_MMNGR_ALLOC_MODE_FREE_LIST_PROT mode
 * @subsection MmngrOpenFromRegionIdx_TC_09_021_041_tpts Test Procedure/Test Steps
 * -# For each region index:
 *  - Get the max memory config by using R_OSAL_MmngrGetOsalMaxConfigFromRegionIdx
 *  - Confirm state transition check for R_OSAL_MmngrOpenFromRegionIdx
 * @subsection MmngrOpenFromRegionIdx_TC_09_021_041_ereb Expected Result/Behavior
 * -# Expected result for all region indexes is as below:
 *  - R_OSAL_MmngrGetOsalMaxConfigFromRegionIdx return OSAL_RETURN_OK
 *  - R_OSAL_MmngrOpenFromRegionIdx return OSAL_RETURN_STATE
 * @subsection MmngrOpenFromRegionIdx_TC_09_021_041_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrOpenFromRegionIdx_TC_09_021_041
 */
// [MmngrOpenFromRegionIdx_TC_09_021_041]
TEST_F(OsalApiStateTest, MmngrOpenFromRegionIdx_TC_09_021_041)
{
    st_osal_mmngr_config_t config;
    osal_memory_manager_handle_t hndl_mmngr = OSAL_MEMORY_MANAGER_HANDLE_INVALID;

    for (auto index = 0; index < TEST_NUM_OF_MEMORY_REGION; index++)
    {
        // Test09_021_041
        // @brief: abnormal case: Call R_OSAL_MmngrOpenFromRegionIdx after Deinitialize
        EXPECT_EQ(R_OSAL_MmngrGetOsalMaxConfigFromRegionIdx(index, &config), OSAL_RETURN_OK) << "Test09_021_041 failed";
        config.mode = OSAL_MMNGR_ALLOC_MODE_FREE_LIST_PROT;
        EXPECT_EQ(R_OSAL_MmngrOpenFromRegionIdx(&config, index, &hndl_mmngr), OSAL_RETURN_STATE) << "Test09_021_041 failed";
    }
}
// [MmngrOpenFromRegionIdx_TC_09_021_041]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrOpenFromRegionIdx_TC_09_021_042 MemoryApiTest.MmngrOpenFromRegionIdx_TC_09_021_042
 * @subsection MmngrOpenFromRegionIdx_TC_09_021_042_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrOpenFromRegionIdx_TC_09_021_042_tci Test Case ID
 * MmngrOpenFromRegionIdx_S0_BA_TC_09_021_042
 * @subsection MmngrOpenFromRegionIdx_TC_09_021_042_rr Related Requirement(s)
 * \#356350
 * @subsection MmngrOpenFromRegionIdx_TC_09_021_042_pp Prerequisite/Precondition
 * OSAL is initialized.
 * @subsection MmngrOpenFromRegionIdx_TC_09_021_042_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrOpenFromRegionIdx with abnormal condition in OSAL_MMNGR_ALLOC_MODE_FREE_LIST_PROT mode for all region indexes.
 * - Test09_021_042: memory_limit in config is bigger than max memory limit.
 * @subsection MmngrOpenFromRegionIdx_TC_09_021_042_tpts Test Procedure/Test Steps
 * -# For each region index:
 *  - Calling function R_OSAL_MmngrGetOsalMaxConfigFromRegionIdx to get max config.
 *  - Addition memory_limit in the max config with 1KB (1*1024).
 *  - Calling function R_OSAL_MmngrOpenFromRegionIdx with above max config.
 * @subsection MmngrOpenFromRegionIdx_TC_09_021_042_ereb Expected Result/Behavior
 * -# Expected result for all region indexes is as below:
 *  - The return value of R_OSAL_MmngrGetOsalMaxConfigFromRegionIdx is OSAL_RETURN_OK.
 *  - The return value of R_OSAL_MmngrOpenFromRegionIdx is OSAL_RETURN_CONF.
 * @subsection MmngrOpenFromRegionIdx_TC_09_021_042_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrOpenFromRegionIdx_TC_09_021_042
 */
// [MmngrOpenFromRegionIdx_TC_09_021_042]
TEST_F(MemoryApiTest, MmngrOpenFromRegionIdx_TC_09_021_042)
{
    for (auto index = 0; index < TEST_NUM_OF_MEMORY_REGION; index++)
    {
        // Test09_021_042
        // @brief: abnormal case: memory_limit = Max memory_limit + 1KB
        EXPECT_EQ(R_OSAL_MmngrGetOsalMaxConfigFromRegionIdx(index, &config), OSAL_RETURN_OK);
        config.mode = OSAL_MMNGR_ALLOC_MODE_FREE_LIST_PROT;
        config.memory_limit += 1*1024;
        EXPECT_EQ(R_OSAL_MmngrOpenFromRegionIdx(&config, index, &hndl_mmngr), OSAL_RETURN_CONF) << "Test09_021_042 failed";
    }
}
// [MmngrOpenFromRegionIdx_TC_09_021_042]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrOpenFromRegionIdx_TC_09_021_043 MemoryApiTest.MmngrOpenFromRegionIdx_TC_09_021_043
 * @subsection MmngrOpenFromRegionIdx_TC_09_021_043_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrOpenFromRegionIdx_TC_09_021_043_tci Test Case ID
 * MmngrOpenFromRegionIdx_S0_BA_TC_09_021_043
 * @subsection MmngrOpenFromRegionIdx_TC_09_021_043_rr Related Requirement(s)
 * \#356350
 * @subsection MmngrOpenFromRegionIdx_TC_09_021_043_pp Prerequisite/Precondition
 * OSAL is initialized.
 * @subsection MmngrOpenFromRegionIdx_TC_09_021_043_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrOpenFromRegionIdx with abnormal condition.
 * - Test09_021_043: Open Memory manager with the region index is out of range.
 * @subsection MmngrOpenFromRegionIdx_TC_09_021_043_tpts Test Procedure/Test Steps
 * -# Calling function R_OSAL_MmngrOpenFromRegionIdx with the argument as below:
 *      - Address of the max configuration "config"
 *      - TEST_NUM_OF_MEMORY_REGION
 *      - Address of "hndl_mmngr"
 * @subsection MmngrOpenFromRegionIdx_TC_09_021_043_ereb Expected Result/Behavior
 * -# The return value of R_OSAL_MmngrOpenFromRegionIdx is TEST_REGION_IDX_OUT_RANGE_EXPECT.
 * @subsection MmngrOpenFromRegionIdx_TC_09_021_043_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrOpenFromRegionIdx_TC_09_021_043
 */
// [MmngrOpenFromRegionIdx_TC_09_021_043]
TEST_F(MemoryApiTest, MmngrOpenFromRegionIdx_TC_09_021_043)
{
    osal_memory_region_idx_t region_idx = TEST_NUM_OF_MEMORY_REGION;

    // Test09_021_043
    // @brief: abnormal case: region_idx is out of range
    EXPECT_EQ(R_OSAL_MmngrGetOsalMaxConfigFromRegionIdx(TEST_MEMORY_REGION_DEFAULT , &config), OSAL_RETURN_OK);
    EXPECT_EQ(R_OSAL_MmngrOpenFromRegionIdx(&config, region_idx, &hndl_mmngr), TEST_REGION_IDX_OUT_RANGE_EXPECT) << "Test09_021_043 failed";
    if (OSAL_RETURN_OK == TEST_REGION_IDX_OUT_RANGE_EXPECT)
    {
        EXPECT_EQ(R_OSAL_MmngrClose(hndl_mmngr), OSAL_RETURN_OK) << "Test09_021_043 failed";
    }
}
// [MmngrOpenFromRegionIdx_TC_09_021_043]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrOpenFromRegionIdx_TC_09_021_044 MemoryApiTest.MmngrOpenFromRegionIdx_TC_09_021_044
 * @subsection MmngrOpenFromRegionIdx_TC_09_021_044_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrOpenFromRegionIdx_TC_09_021_044_tci Test Case ID
 * MmngrOpenFromRegionIdx_S1_N_TC_09_021_044
 * @subsection MmngrOpenFromRegionIdx_TC_09_021_044_rr Related Requirement(s)
 * \#356350
 * @subsection MmngrOpenFromRegionIdx_TC_09_021_044_pp Prerequisite/Precondition
 * OSAL is initialized.
 * @subsection MmngrOpenFromRegionIdx_TC_09_021_044_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrOpenFromRegionIdx with normal condition for all region indexes.
 * - Test09_021_044: R_OSAL_MmngrOpenFromRegionIdx with all valid input parameter for all region index at the same time.
 * @subsection MmngrOpenFromRegionIdx_TC_09_021_044_tpts Test Procedure/Test Steps
 * -# For each region index:
 *  - Get the maximum memory configuration by using R_OSAL_MmngrGetOsalMaxConfigFromRegionIdx
 *  - Open Mmngr using R_OSAL_MmngrOpenFromRegionIdx with valid config.
 * -# After opening the memory mamanger successfully, calling R_OSAL_MmngrClose to close all opened memory managers.
 * @subsection MmngrOpenFromRegionIdx_TC_09_021_044_ereb Expected Result/Behavior
 * -# Expected result for all region indexes is as below:
 *  - The return of R_OSAL_MmngrGetOsalMaxConfigFromRegionIdx is OSAL_RETURN_OK.
 *  - The return of R_OSAL_MmngrOpenFromRegionIdx is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrClose is OSAL_RETURN_OK.
 * @subsection MmngrOpenFromRegionIdx_TC_09_021_044_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrOpenFromRegionIdx_TC_09_021_044
 */
// [MmngrOpenFromRegionIdx_TC_09_021_044]
TEST_F(MemoryApiTest, MmngrOpenFromRegionIdx_TC_09_021_044)
{
    osal_memory_manager_handle_t hndl_mmngr_array[TEST_NUM_OF_MEMORY_REGION];
    st_osal_mmngr_config_t config_array[TEST_NUM_OF_MEMORY_REGION];

    for (auto index = 0; index < TEST_NUM_OF_MEMORY_REGION; index++)
    {
        // Test09_021_044
        // @brief: normal case: Calling R_OSAL_MmngrOpenFromRegionIdx for all region index at the same time.
        EXPECT_EQ(R_OSAL_MmngrGetOsalMaxConfigFromRegionIdx(index , &config_array[index]), OSAL_RETURN_OK);
        EXPECT_EQ(R_OSAL_MmngrOpenFromRegionIdx(&config_array[index], index, &hndl_mmngr_array[index]), OSAL_RETURN_OK) << "Test09_021_044 failed";
    }

    for (auto index = 0; index < TEST_NUM_OF_MEMORY_REGION; index++)
    {
        EXPECT_EQ(R_OSAL_MmngrClose(hndl_mmngr_array[index]), OSAL_RETURN_OK);
    }
}
// [MmngrOpenFromRegionIdx_TC_09_021_044]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrOpenFromRegionIdx_TC_09_021_045 MemoryApiTest.MmngrOpenFromRegionIdx_TC_09_021_045
 * @subsection MmngrOpenFromRegionIdx_TC_09_021_045_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrOpenFromRegionIdx_TC_09_021_045_tci Test Case ID
 * MmngrOpenFromRegionIdx_S1_N_TC_09_021_045
 * @subsection MmngrOpenFromRegionIdx_TC_09_021_045_rr Related Requirement(s)
 * \#356350
 * @subsection MmngrOpenFromRegionIdx_TC_09_021_045_pp Prerequisite/Precondition
 * OSAL is initialized.
 * @subsection MmngrOpenFromRegionIdx_TC_09_021_045_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrOpenFromRegionIdx with abnormal condition in OSAL_MMNGR_ALLOC_MODE_STACK_PROT mode for all region indexes.
 * - Test09_021_045: Open new memory regions when a memory manager is still opening. This memory manager is opened by using R_OSAL_MmngrOpen
 * @subsection MmngrOpenFromRegionIdx_TC_09_021_045_tpts Test Procedure/Test Steps
 * -# Get the Memory max configuration by using R_OSAL_MmngrGetOsalMaxConfig
 * -# Calling function R_OSAL_MmngrOpen with valid parameter to open a memory manager.
 * -# Continue to open all memory regions with steps as below:
 *  - Get the Memory max configuration by using R_OSAL_MmngrGetOsalMaxConfigFromRegionIdx
 *  - Calling function R_OSAL_MmngrOpenFromRegionIdx with valid parameter.
 *  - Calling R_OSAL_MmngrClose to close the opened memory region.
 * -# Calling to R_OSAL_MmngrClose to close the memory manager opened by using R_OSAL_MmngrOpen
 * @subsection MmngrOpenFromRegionIdx_TC_09_021_045_ereb Expected Result/Behavior
 * -# R_OSAL_MmngrGetOsalMaxConfig return OSAL_RETURN_OK
 * -# R_OSAL_MmngrOpen return OSAL_RETURN_OK
 * -# Expected result for all region indexes is as below:
 *  - R_OSAL_MmngrGetOsalMaxConfigFromRegionIdx return OSAL_RETURN_OK
 *  - In case region index is TEST_MEMORY_REGION_DEFAULT, R_OSAL_MmngrOpenFromRegionIdx return OSAL_RETURN_STATE.<br>
 * Otherwise, R_OSAL_MmngrOpenFromRegionIdx return OSAL_RETURN_OK.
 *  - The return value of R_OSAL_MmngrClose is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrClose is OSAL_RETURN_OK.
 * @subsection MmngrOpenFromRegionIdx_TC_09_021_045_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrOpenFromRegionIdx_TC_09_021_045
 */
// [MmngrOpenFromRegionIdx_TC_09_021_045]
TEST_F(MemoryApiTest, MmngrOpenFromRegionIdx_TC_09_021_045)
{
    osal_memory_manager_handle_t hndl_mmngr_array[TEST_NUM_OF_MEMORY_REGION];
    st_osal_mmngr_config_t config_array[TEST_NUM_OF_MEMORY_REGION];
    e_osal_return osal_ret = OSAL_RETURN_OK;

    // Test09_021_045
    // @brief: normal case: Open new memory regions when a memory manager is still opening. This memory manager is opened by using R_OSAL_MmngrOpen
    EXPECT_EQ(R_OSAL_MmngrGetOsalMaxConfig(&config), OSAL_RETURN_OK) << "Test09_021_045 failed";
    EXPECT_EQ(R_OSAL_MmngrOpen(&config, &hndl_mmngr), OSAL_RETURN_OK) << "Test09_021_045 failed";
    EXPECT_NE(hndl_mmngr, OSAL_MEMORY_MANAGER_HANDLE_INVALID) << "Test09_021_045 failed";

    for (auto index = 0; index < TEST_NUM_OF_MEMORY_REGION; index++)
    {
        EXPECT_EQ(R_OSAL_MmngrGetOsalMaxConfigFromRegionIdx(index , &config_array[index]), OSAL_RETURN_OK);
        osal_ret = R_OSAL_MmngrOpenFromRegionIdx(&config_array[index], index, &hndl_mmngr_array[index]);
        if (TEST_MEMORY_REGION_DEFAULT == index) // open memory handle region_id 0: Expected return code is OSAL_RETURN_STATE
        {
            EXPECT_EQ(osal_ret, OSAL_RETURN_STATE) << "Test09_021_045 failed";
        }
        else // open memory handle region_id isn't 0: Expected return code is OSAL_RETURN_OK
        {
            EXPECT_EQ(osal_ret, OSAL_RETURN_OK) << "Test09_021_045 failed";
            EXPECT_EQ(R_OSAL_MmngrClose(hndl_mmngr_array[index]), OSAL_RETURN_OK) << "Test09_021_045 failed";
        }
    }
    EXPECT_EQ(R_OSAL_MmngrClose(hndl_mmngr), OSAL_RETURN_OK) << "Test09_021_045 failed";
}
// [MmngrOpenFromRegionIdx_TC_09_021_045]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrOpenFromRegionIdx_TC_09_021_046 MemoryApiTest.MmngrOpenFromRegionIdx_TC_09_021_046
 * @subsection MmngrOpenFromRegionIdx_TC_09_021_046_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrOpenFromRegionIdx_TC_09_021_046_tci Test Case ID
 * MmngrOpenFromRegionIdx_S3_N_TC_09_021_046
 * @subsection MmngrOpenFromRegionIdx_TC_09_021_046_rr Related Requirement(s)
 * \#356350
 * @subsection MmngrOpenFromRegionIdx_TC_09_021_046_pp Prerequisite/Precondition
 * R_OSAL_Initialize is already called
 * @subsection MmngrOpenFromRegionIdx_TC_09_021_046_tcs Test Case Summary
 * This test shall verify the operation of the memory handles opened by R_OSAL_MmngrOpenFromRegionIdx for all region indexes.
 * - Test09_021_046: Open memory handle by using R_OSAL_MmngrOpenFromRegionIdx and confirm the operation of the memory handle.
 * @subsection MmngrOpenFromRegionIdx_TC_09_021_046_tpts Test Procedure/Test Steps
 * -# For each region index:
 *  - Init the memory configuration object by using R_OSAL_MmngrInitializeMmngrConfigSt
 *  - Get the maximum memory configuration by using R_OSAL_MmngrGetOsalMaxConfigFromRegionIdx
 *  - Open new memory manager by using R_OSAL_MmngrOpenFromRegionIdx
 *  - Register callback function for event OSAL_MMNGR_EVENT_ALLOCATE by using R_OSAL_MmngrRegisterMonitor
 *  - Register callback function for event OSAL_MMNGR_EVENT_DEALLOCATE by using R_OSAL_MmngrRegisterMonitor
 *  - Register callback function for event OSAL_MMNGR_EVENT_OVERFLOW_DETECTED by using R_OSAL_MmngrRegisterMonitor
 *  - Register callback function for event OSAL_MMNGR_EVENT_UNDERFLOW_DETECTED by using R_OSAL_MmngrRegisterMonitor
 *  - Allocate memory buffer which size is 64 and alignment is 64 by using R_OSAL_MmngrAlloc
 *  - Get the pointer of allocated buffer by using R_OSAL_MmngrGetCpuPtr
 *  - Modify the data of allocated buffer by known value using memset
 *  - Call R_OSAL_MmngrFlush with offset is 0 and size is 64
 *  - Get hardware address by using R_OSAL_MmngrGetHwAddr
 *  - Call R_OSAL_MmngrInvalidate with offset is 0 and size is 64
 * -# After finishing buffer allocation and use, continue to confirm whether all memory regions are separated region or not.
 * -# Deallocate allocated buffer and close all memory regions with the step as below:
 *  - Deallocate allocated buffer by using R_OSAL_MmngrDealloc
 *  - Close opened memory manager by using R_OSAL_MmngrClose
 * @subsection MmngrOpenFromRegionIdx_TC_09_021_046_ereb Expected Result/Behavior
 * -# Expected result for all region indexes is as below:
 *  - R_OSAL_MmngrInitializeMmngrConfigSt return OSAL_RETURN_OK
 *  - R_OSAL_MmngrGetOsalMaxConfigFromRegionIdx return OSAL_RETURN_OK
 *  - R_OSAL_MmngrOpenFromRegionIdx return OSAL_RETURN_OK.<br>
 * Value of "hndl_mmngr" is not OSAL_MEMORY_MANAGER_HANDLE_INVALID
 *  - R_OSAL_MmngrRegisterMonitor return OSAL_RETURN_OK
 *  - R_OSAL_MmngrRegisterMonitor return OSAL_RETURN_OK
 *  - R_OSAL_MmngrRegisterMonitor return OSAL_RETURN_OK
 *  - R_OSAL_MmngrRegisterMonitor return OSAL_RETURN_OK
 *  - R_OSAL_MmngrAlloc return OSAL_RETURN_OK.<br>
 * Value of "buffer_obj" is not OSAL_MEMORY_BUFFER_HANDLE_INVALID
 *  - R_OSAL_MmngrGetCpuPtr return OSAL_RETURN_OK.<br>
 * Value of "cpu_ptr" is not NULL_PTR
 *  - memset run sucessfully
 *  - R_OSAL_MmngrFlush return OSAL_RETURN_OK
 *  - R_OSAL_MmngrGetHwAddr return OSAL_RETURN_OK
 *  - R_OSAL_MmngrInvalidate return OSAL_RETURN_OK
 * -# All memory regions are the separated region
 * -# Deallocation and closing all memory regions successfully:
 *  - R_OSAL_MmngrDealloc return OSAL_RETURN_OK
 *  - R_OSAL_MmngrClose return OSAL_RETURN_OK
 * @subsection MmngrOpenFromRegionIdx_TC_09_021_046_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrOpenFromRegionIdx_TC_09_021_046
 */
// [MmngrOpenFromRegionIdx_TC_09_021_046]
TEST_F(MemoryApiTest, MmngrOpenFromRegionIdx_TC_09_021_046)
{
    st_osal_mmngr_config_t config_region[TEST_NUM_OF_MEMORY_REGION];
    osal_memory_manager_handle_t hndl_mmngr_region[TEST_NUM_OF_MEMORY_REGION];
    osal_memory_buffer_handle_t  buffer_obj_region[TEST_NUM_OF_MEMORY_REGION];
    size_t size = 64;
    size_t alignment = 64;
    void* cpu_ptr[TEST_NUM_OF_MEMORY_REGION];
    uint32_t value[TEST_NUM_OF_MEMORY_REGION];
    uintptr_t hw_addr;
    size_t offset = 0;
    uint8_t known_data_region[TEST_NUM_OF_MEMORY_REGION];
    iota(begin(known_data_region), end(known_data_region), (uint8_t)0xAA); //Initialize array with range 0xAA to (0xAA+TEST_NUM_OF_MEMORY_REGION)

    MockMonitorHelper  allocationEventMonitor;
    auto NormalmonitorCb = cb_wrapper<decltype(
        &MonitorHelper::NormalmonitorCb)>::make_cb<&MonitorHelper::NormalmonitorCb>();
    // Test09_021_046
    // @brief: normal case: allocate buffer of handle, get CpuPtr, Flush, GetHwAdress, Invalidate for all region index.
    EXPECT_CALL(allocationEventMonitor, NormalmonitorCb(OSAL_MMNGR_EVENT_ALLOCATE, _, _)).Times(TEST_NUM_OF_MEMORY_REGION);
    EXPECT_CALL(allocationEventMonitor, NormalmonitorCb(OSAL_MMNGR_EVENT_DEALLOCATE, _, _)).Times(TEST_NUM_OF_MEMORY_REGION);
    EXPECT_CALL(allocationEventMonitor, NormalmonitorCb(OSAL_MMNGR_EVENT_OVERFLOW_DETECTED, _, _)).Times(0);
    EXPECT_CALL(allocationEventMonitor, NormalmonitorCb(OSAL_MMNGR_EVENT_UNDERFLOW_DETECTED, _, _)).Times(0);
    for (auto index = 0; index < TEST_NUM_OF_MEMORY_REGION; index++)
    {
        //Get max config, open, alloc, getcpuPtr for region 0
        EXPECT_EQ(R_OSAL_MmngrInitializeMmngrConfigSt(&config_region[index]), OSAL_RETURN_OK) << "Test09_021_046 failed";
        EXPECT_EQ(R_OSAL_MmngrGetOsalMaxConfigFromRegionIdx(index, &config_region[index]), OSAL_RETURN_OK) << "Test09_021_046 failed";
        EXPECT_EQ(R_OSAL_MmngrOpenFromRegionIdx(&config_region[index], index, &hndl_mmngr_region[index]), OSAL_RETURN_OK) << "Test09_021_046 failed";
        EXPECT_NE(hndl_mmngr_region[index], OSAL_MEMORY_MANAGER_HANDLE_INVALID) << "Test09_021_046 failed";

        EXPECT_EQ(R_OSAL_MmngrRegisterMonitor(hndl_mmngr_region[index], OSAL_MMNGR_EVENT_ALLOCATE, NormalmonitorCb, &allocationEventMonitor), OSAL_RETURN_OK) << "Test09_021_046 failed";
        EXPECT_EQ(R_OSAL_MmngrRegisterMonitor(hndl_mmngr_region[index], OSAL_MMNGR_EVENT_DEALLOCATE, NormalmonitorCb, &allocationEventMonitor), OSAL_RETURN_OK) << "Test09_021_046 failed";
        EXPECT_EQ(R_OSAL_MmngrRegisterMonitor(hndl_mmngr_region[index], OSAL_MMNGR_EVENT_OVERFLOW_DETECTED, NormalmonitorCb, &allocationEventMonitor), OSAL_RETURN_OK) << "Test09_021_046 failed";
        EXPECT_EQ(R_OSAL_MmngrRegisterMonitor(hndl_mmngr_region[index], OSAL_MMNGR_EVENT_UNDERFLOW_DETECTED, NormalmonitorCb, &allocationEventMonitor), OSAL_RETURN_OK) << "Test09_021_046 failed";

        EXPECT_EQ(R_OSAL_MmngrAlloc(hndl_mmngr_region[index], size, alignment, &buffer_obj_region[index]), OSAL_RETURN_OK) << "Test09_021_046 failed";
        EXPECT_NE(buffer_obj_region[index], OSAL_MEMORY_BUFFER_HANDLE_INVALID) << "Test09_021_046 failed";
        EXPECT_EQ(R_OSAL_MmngrGetCpuPtr(buffer_obj_region[index], &cpu_ptr[index]), OSAL_RETURN_OK) << "Test09_021_046 failed";
        EXPECT_NE(cpu_ptr[index],NULL_PTR) << "Test09_021_046 failed";
        (void)memset(cpu_ptr[index], known_data_region[index], sizeof(uint32_t));
        value[index] = *((uint32_t*)(cpu_ptr[index]));

        EXPECT_EQ(R_OSAL_MmngrFlush(buffer_obj_region[index], offset , size), OSAL_RETURN_OK) << "Test09_004_009 failed";
        EXPECT_EQ(R_OSAL_MmngrGetHwAddr(buffer_obj_region[index], OSAL_AXI_BUS_ID_IPA_MAIN_MEMORY, &hw_addr), OSAL_RETURN_OK) << "Test09_004_009 failed";
        EXPECT_EQ(R_OSAL_MmngrInvalidate(buffer_obj_region[index], offset, size), OSAL_RETURN_OK) << "Test09_004_009 failed";
    }

    // check value cpu_ptr
    for (auto index = 0; index < TEST_NUM_OF_MEMORY_REGION; index++)
    {
        // To confirm all memory regions is separated region. the value of each memory region is not the same because we write different data.
        EXPECT_EQ(count(begin(value), end(value), value[index]), 1) << "Test09_021_046 failed";
        // re-check with write value
        EXPECT_TRUE(value[index] == (((uint32_t)known_data_region[index] << 24) |
                                        ((uint32_t)known_data_region[index] << 16) |
                                            ((uint32_t)known_data_region[index] << 8) |
                                                ((uint32_t)known_data_region[index])))  << "Test09_021_046 failed";
    }
    
    for (auto index = 0; index < TEST_NUM_OF_MEMORY_REGION; index++)
    {
        // Deallocate buffer and close device
        EXPECT_EQ(R_OSAL_MmngrDealloc(hndl_mmngr_region[index], buffer_obj_region[index]), OSAL_RETURN_OK) << "Test09_021_046 failed";
        EXPECT_EQ(R_OSAL_MmngrClose(hndl_mmngr_region[index]), OSAL_RETURN_OK) << "Test09_021_046 failed";
    }
}
// [MmngrOpenFromRegionIdx_TC_09_021_046]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrOpenFromRegionIdx_TC_09_021_047 MemoryApiTest.MmngrOpenFromRegionIdx_TC_09_021_047
 * @subsection MmngrOpenFromRegionIdx_TC_09_021_047_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrOpenFromRegionIdx_TC_09_021_047_tci Test Case ID
 * MmngrOpenFromRegionIdx_S3_N_TC_09_021_047
 * @subsection MmngrOpenFromRegionIdx_TC_09_021_047_rr Related Requirement(s)
 * \#356350
 * @subsection MmngrOpenFromRegionIdx_TC_09_021_047_pp Prerequisite/Precondition
 * R_OSAL_Initialize is already called
 * @subsection MmngrOpenFromRegionIdx_TC_09_021_047_tcs Test Case Summary
 * This test shall verify the allocation multiple buffers of the memory handle opened by R_OSAL_MmngrOpenFromRegionIdx for all region indexes.
 * - Test09_021_047: Allocate multiple buffers for memory handle opened by R_OSAL_MmngrOpenFromRegionIdx.
 * @subsection MmngrOpenFromRegionIdx_TC_09_021_047_tpts Test Procedure/Test Steps
 * -# For each region index:
 *  - Init the memory configuration object by using R_OSAL_MmngrInitializeMmngrConfigSt
 *  - Get the maximum memory configuration by using R_OSAL_MmngrGetOsalMaxConfigFromRegionIdx
 *  - Open new memory manager by using R_OSAL_MmngrOpenFromRegionIdx
 *  - Allocate multiple memory buffers which size is 64 and alignment is 64 by using R_OSAL_MmngrAlloc
 *  - Deallocate allocated buffers by using R_OSAL_MmngrDealloc
 *  - Close opened memory manager by using R_OSAL_MmngrClose
 * @subsection MmngrOpenFromRegionIdx_TC_09_021_047_ereb Expected Result/Behavior
 * -# Expected result for all region indexes is as below:
 *  - R_OSAL_MmngrInitializeMmngrConfigSt return OSAL_RETURN_OK
 *  - R_OSAL_MmngrGetOsalMaxConfigFromRegionIdx return OSAL_RETURN_OK
 *  - R_OSAL_MmngrOpenFromRegionIdx return OSAL_RETURN_OK.<br>
 * Value of "hndl_mmngr" is not OSAL_MEMORY_MANAGER_HANDLE_INVALID
 *  - R_OSAL_MmngrAlloc return OSAL_RETURN_OK.<br>
 * Value of elements of "buffer_arr_region" is not OSAL_MEMORY_BUFFER_HANDLE_INVALID
 *  - R_OSAL_MmngrDealloc return OSAL_RETURN_OK
 *  - R_OSAL_MmngrClose return OSAL_RETURN_OK
 * @subsection MmngrOpenFromRegionIdx_TC_09_021_047_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrOpenFromRegionIdx_TC_09_021_047
 */
// [MmngrOpenFromRegionIdx_TC_09_021_047]
TEST_F(MemoryApiTest, MmngrOpenFromRegionIdx_TC_09_021_047)
{
    st_osal_mmngr_config_t config_region[TEST_NUM_OF_MEMORY_REGION];
    osal_memory_manager_handle_t hndl_mmngr_region[TEST_NUM_OF_MEMORY_REGION];
    osal_memory_buffer_handle_t  buffer_arr_region[3];
    size_t size = 64;
    size_t alignment = 64;

    // Test09_021_047
    // @brief: normal case: allocate multiple buffer of handle for all region index.
    for (auto index = 0; index < TEST_NUM_OF_MEMORY_REGION; index++)
    {
        EXPECT_EQ(R_OSAL_MmngrInitializeMmngrConfigSt(&config_region[index]), OSAL_RETURN_OK) << "Test09_021_047 failed";
        EXPECT_EQ(R_OSAL_MmngrGetOsalMaxConfigFromRegionIdx(index, &config_region[index]), OSAL_RETURN_OK) << "Test09_021_047 failed";
        EXPECT_EQ(R_OSAL_MmngrOpenFromRegionIdx(&config_region[index], index, &hndl_mmngr_region[index]), OSAL_RETURN_OK) << "Test09_021_047 failed";
        EXPECT_NE(hndl_mmngr_region[index], OSAL_MEMORY_MANAGER_HANDLE_INVALID) << "Test09_021_047 failed";

        // Allocate multiple buffer
        EXPECT_EQ(R_OSAL_MmngrAlloc(hndl_mmngr_region[index], size, alignment, &buffer_arr_region[0]), OSAL_RETURN_OK) << "Test09_021_047 failed";
        EXPECT_EQ(R_OSAL_MmngrAlloc(hndl_mmngr_region[index], size, alignment, &buffer_arr_region[1]), OSAL_RETURN_OK) << "Test09_021_047 failed";
        EXPECT_EQ(R_OSAL_MmngrAlloc(hndl_mmngr_region[index], size, alignment, &buffer_arr_region[2]), OSAL_RETURN_OK) << "Test09_021_047 failed";
        EXPECT_NE(buffer_arr_region[0], OSAL_MEMORY_BUFFER_HANDLE_INVALID) << "Test09_021_047 failed";
        EXPECT_NE(buffer_arr_region[1], OSAL_MEMORY_BUFFER_HANDLE_INVALID) << "Test09_021_047 failed";
        EXPECT_NE(buffer_arr_region[2], OSAL_MEMORY_BUFFER_HANDLE_INVALID) << "Test09_021_047 failed";

        // Deallocate all buffer allocated buffer and close device handle
        EXPECT_EQ(R_OSAL_MmngrDealloc(hndl_mmngr_region[index], buffer_arr_region[2]), OSAL_RETURN_OK) << "Test09_021_047 failed";
        EXPECT_EQ(R_OSAL_MmngrDealloc(hndl_mmngr_region[index], buffer_arr_region[1]), OSAL_RETURN_OK) << "Test09_021_047 failed";
        EXPECT_EQ(R_OSAL_MmngrDealloc(hndl_mmngr_region[index], buffer_arr_region[0]), OSAL_RETURN_OK) << "Test09_021_047 failed";
        buffer_arr_region[0] = OSAL_MEMORY_BUFFER_HANDLE_INVALID;
        buffer_arr_region[1] = OSAL_MEMORY_BUFFER_HANDLE_INVALID;
        buffer_arr_region[2] = OSAL_MEMORY_BUFFER_HANDLE_INVALID;
        EXPECT_EQ(R_OSAL_MmngrClose(hndl_mmngr_region[index]), OSAL_RETURN_OK) << "Test09_021_047 failed";
    }
}
// [MmngrOpenFromRegionIdx_TC_09_021_047]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrOpenFromRegionIdx_TC_09_021_048 MemoryApiTest.MmngrOpenFromRegionIdx_TC_09_021_048
 * @subsection MmngrOpenFromRegionIdx_TC_09_021_048_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrOpenFromRegionIdx_TC_09_021_048_tci Test Case ID
 * MmngrOpenFromRegionIdx_S3_N_TC_09_021_048
 * @subsection MmngrOpenFromRegionIdx_TC_09_021_048_rr Related Requirement(s)
 * \#356350
 * @subsection MmngrOpenFromRegionIdx_TC_09_021_048_pp Prerequisite/Precondition
 * - OSAL is initialized.
 * @subsection MmngrOpenFromRegionIdx_TC_09_021_048_tcs Test Case Summary
 * This test shall verify the operation of multi-memory region APIs in multi-threads:
 * - Test09_021_048: Allocate multi-buffers in multi-threads using only one memory region. Repeat that sequence for remaining memory regions.
 * @subsection MmngrOpenFromRegionIdx_TC_09_021_048_tpts Test Procedure/Test Steps
 * -# For each region index:
 *  - Get the maximum memory configuration by using R_OSAL_MmngrGetOsalMaxConfigFromRegionIdx
 *  - Set config.mode to OSAL_MMNGR_ALLOC_MODE_FREE_LIST
 *  - Open new memory manager by using R_OSAL_MmngrOpenFromRegionIdx
 *  - Create first thread using R_OSAL_ThreadCreate with the argument as below:
 *      -# p_config: must be configured with following specified values
 *          - priority is OSAL_THREAD_PRIORITY_TYPE3
 *          - task_name is "Allocate multiple buffers"
 *          - func is "memory_test_allocate_multiple_buffer_child_thread" function with functionality:
 *              -# Allocate multiple memory buffers which size is TEST_MULTI_THREADS_BUFFER_SIZE and alignment is TEST_MULTI_THREADS_BUFFER_ALIGN by using R_OSAL_MmngrAlloc
 *          - userarg includes memory handle, thread ID and test name.
 *          - thread ID is TEST_THREAD_ID2
 *          - stack_size is THREAD_STACK_SIZE
 *  - Create second thread using R_OSAL_ThreadCreate with the argument as below:
 *      -# p_config: use the same configuration as first child thread except thread ID is TEST_THREAD_ID3
 *          - func is "memory_test_allocate_multiple_buffer_child_thread" function with functionality:
 *              -# Allocate multiple memory buffers which size is TEST_MULTI_THREADS_BUFFER_SIZE and alignment is TEST_MULTI_THREADS_BUFFER_ALIGN by using R_OSAL_MmngrAlloc
 *  - Join first thread by using R_OSAL_ThreadJoin.
 *  - Join second thread by using R_OSAL_ThreadJoin.
 *  - Deallocate the allocated buffers by using R_OSAL_MmngrDealloc
 *  - Close the opened memory manager by using R_OSAL_MmngrClose
 * @subsection MmngrOpenFromRegionIdx_TC_09_021_048_ereb Expected Result/Behavior
 * -# R_OSAL_MmngrGetOsalMaxConfigFromRegionIdx return OSAL_RETURN_OK.
 * -# R_OSAL_MmngrOpenFromRegionIdx return OSAL_RETURN_OK.<br>
 * Value of "hndl_mmngr" is not OSAL_MEMORY_MANAGER_HANDLE_INVALID.
 * -# R_OSAL_ThreadCreate return OSAL_RETURN_OK with first thread.<br>
 * "thread_handle1" is not NULL_PTR.<br>
 * In memory_test_allocate_multiple_buffer_child_thread function:
 *  - R_OSAL_MmngrAlloc return OSAL_RETURN_OK.
 * -# R_OSAL_ThreadCreate return OSAL_RETURN_OK with second thread.<br>
 * "thread_handle2" is not NULL_PTR.<br>
 * In memory_test_allocate_multiple_buffer_child_thread function:
 *  - R_OSAL_MmngrAlloc return OSAL_RETURN_OK.
 * -# R_OSAL_ThreadJoin return OSAL_RETURN_OK with first thread.<br>
 * Value of "result" is equal to OSAL_RETURN_OK.
 * -# R_OSAL_ThreadJoin return OSAL_RETURN_OK with second thread.<br>
 * Value of "result" is equal to OSAL_RETURN_OK.
 * -# R_OSAL_MmngrDealloc return OSAL_RETURN_OK.
 * -# R_OSAL_MmngrClose return OSAL_RETURN_OK.
 * @subsection MmngrOpenFromRegionIdx_TC_09_021_048_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrOpenFromRegionIdx_TC_09_021_048
 * @snippet test_memory_api_basic.cpp memory_test_allocate_multiple_buffer_child_thread
 */
// [MmngrOpenFromRegionIdx_TC_09_021_048]
TEST_F(MemoryApiTest, MmngrOpenFromRegionIdx_TC_09_021_048)
{
    st_osal_thread_config_t         config_thread;
    int64_t                         result          = 0;
    osal_thread_handle_t            thread_handle1  = OSAL_THREAD_HANDLE_INVALID;
    osal_thread_handle_t            thread_handle2  = OSAL_THREAD_HANDLE_INVALID;
    const char*                     test_name = "Test09_021_048";

    // Test09_021_048
    // @brief: normal case: allocate multiple buffer of memory handle for all region index in multiple thread.
    // The first child thread will allocate buffer from 0 to TEST_NUM_OF_MULTI_BUFFERS/2, the second child thread will allocate buffer from TEST_NUM_OF_MULTI_BUFFERS/2 to TEST_NUM_OF_MULTI_BUFFERS.
    for (auto index = 0; index < TEST_NUM_OF_MEMORY_REGION; index++)
    {
        // Get max config and open memory manager.
        EXPECT_EQ(R_OSAL_MmngrGetOsalMaxConfigFromRegionIdx(index, &config), OSAL_RETURN_OK) << "Test09_021_048 failed";
        config.mode = OSAL_MMNGR_ALLOC_MODE_FREE_LIST;
        EXPECT_EQ(R_OSAL_MmngrOpenFromRegionIdx(&config, index, &hndl_mmngr), OSAL_RETURN_OK) << "Test09_021_048 failed";
        EXPECT_NE(hndl_mmngr, OSAL_MEMORY_MANAGER_HANDLE_INVALID) << "Test09_021_048 failed";

        // Create thread_handle1 to allocate multiple buffer from 0 to TEST_NUM_OF_MULTI_BUFFERS/2.
        memory_test_allocate_multiple_buffer_arg user_arg1(&hndl_mmngr, TEST_THREAD_ID2, test_name);
        config_thread.userarg       = &user_arg1;
        config_thread.priority      = OSAL_THREAD_PRIORITY_TYPE3;
        config_thread.task_name     = (char *)"Allocate multiple buffers";
        config_thread.func          = memory_test_allocate_multiple_buffer_child_thread;
        config_thread.stack_size    = THREAD_STACK_SIZE;
        EXPECT_EQ(R_OSAL_ThreadCreate(&config_thread, TEST_THREAD_ID2, &thread_handle1), OSAL_RETURN_OK) << "Test09_021_048 failed";
        EXPECT_NE(thread_handle1, NULL_PTR);

        // Create thread_handle2 to allocate multiple buffer from TEST_NUM_OF_MULTI_BUFFERS/2 to TEST_NUM_OF_MULTI_BUFFERS.
        memory_test_allocate_multiple_buffer_arg user_arg2(&hndl_mmngr, TEST_THREAD_ID3, test_name);
        config_thread.userarg       = &user_arg2;
        EXPECT_EQ(R_OSAL_ThreadCreate(&config_thread, TEST_THREAD_ID3, &thread_handle2), OSAL_RETURN_OK) << "Test09_021_048 failed";
        EXPECT_NE(thread_handle2, NULL_PTR);

        EXPECT_EQ(R_OSAL_ThreadJoin(thread_handle1, &result),OSAL_RETURN_OK) << "Test09_021_048 failed";
        EXPECT_EQ(result, (int64_t)OSAL_RETURN_OK);
        EXPECT_EQ(R_OSAL_ThreadJoin(thread_handle2, &result),OSAL_RETURN_OK) << "Test09_021_048 failed";
        EXPECT_EQ(result, (int64_t)OSAL_RETURN_OK);

        // Deallocate all buffers allocated and close memory handle.
        for(size_t i = 0; i < TEST_NUM_OF_MULTI_BUFFERS; i++)
        {
            EXPECT_EQ(R_OSAL_MmngrDealloc(hndl_mmngr, buffer_arr[i]), OSAL_RETURN_OK) << "Test09_021_048 failed";
        }

        EXPECT_EQ(R_OSAL_MmngrClose(hndl_mmngr), OSAL_RETURN_OK) << "Test09_021_048 failed";
        hndl_mmngr = OSAL_MEMORY_MANAGER_HANDLE_INVALID;
    }
}
// [MmngrOpenFromRegionIdx_TC_09_021_048]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrOpenFromRegionIdx_TC_09_021_049 MemoryApiTest.MmngrOpenFromRegionIdx_TC_09_021_049
 * @subsection MmngrOpenFromRegionIdx_TC_09_021_049_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrOpenFromRegionIdx_TC_09_021_049_tci Test Case ID
 * MmngrOpenFromRegionIdx_S3_N_TC_09_021_049
 * @subsection MmngrOpenFromRegionIdx_TC_09_021_049_rr Related Requirement(s)
 * \#356350
 * @subsection MmngrOpenFromRegionIdx_TC_09_021_049_pp Prerequisite/Precondition
 * - OSAL is initialized.
 * - The synchronization queue was created
 * @subsection MmngrOpenFromRegionIdx_TC_09_021_049_tcs Test Case Summary
 * This test shall verify the operation of multi-memory region APIs in multi-threads:
 * - Test09_021_049: Confirm Memory operation in multi-threads using only one memory region. Repeat that sequence for remaining memory regions.
 * @subsection MmngrOpenFromRegionIdx_TC_09_021_049_tpts Test Procedure/Test Steps
 * -# For each region index:
 *  - Get the maximum memory configuration by using R_OSAL_MmngrGetOsalMaxConfigFromRegionIdx
 *  - Open new memory manager by using R_OSAL_MmngrOpenFromRegionIdx
 *  - Create first thread using R_OSAL_ThreadCreate with the argument as below:
 *      -# p_config: must be configured with following specified values
 *          - priority is OSAL_THREAD_PRIORITY_TYPE3
 *          - task_name is "Test operation of buffer for each region index"
 *          - func is "test_memory_operation_thread" function with functionality:
 *              -# Register callback function for event OSAL_MMNGR_EVENT_ALLOCATE by using R_OSAL_MmngrRegisterMonitor
 *              -# Register callback function for event OSAL_MMNGR_EVENT_DEALLOCATE by using R_OSAL_MmngrRegisterMonitor
 *              -# Register callback function for event OSAL_MMNGR_EVENT_OVERFLOW_DETECTED by using R_OSAL_MmngrRegisterMonitor
 *              -# Register callback function for event OSAL_MMNGR_EVENT_UNDERFLOW_DETECTED by using R_OSAL_MmngrRegisterMonitor
 *              -# Get config of synchronization queue by using R_OSAL_MqGetConfig
 *              -# Allocate memory buffer which size is 64 and alignment is 64 by using R_OSAL_MmngrAlloc
 *              -# Send a message to synchronization queue by using R_OSAL_MqSendForTimePeriod
 *          - userarg includes memory handle, buffer handle, thread ID, NormalmonitorCb, allocationEvenMonitor and test name.
 *          - thread ID is TEST_THREAD_ID2
 *          - stack_size is THREAD_STACK_SIZE
 *  - Get config of synchronization queue by using R_OSAL_MqGetConfig
 *  - Receive message from synchronization queue by using R_OSAL_MqReceiveForTimePeriod
 *  - Create second thread using R_OSAL_ThreadCreate with the argument as below:
 *      -# p_config: use the same configuration as first child thread except thread ID is TEST_THREAD_ID3
 *          - func is "test_memory_operation_thread" function with functionality:
 *              -# Get the pointer of allocated buffer by using R_OSAL_MmngrGetCpuPtr
 *              -# Modify the data of allocated buffer by known value using memset
 *              -# Call R_OSAL_MmngrFlush with offset is 0 and size is 64
 *              -# Get hardware address by using R_OSAL_MmngrGetHwAddr
 *              -# Call R_OSAL_MmngrInvalidate with offset is 0 and size is 64
 *              -# Deallocate allocated buffer by using R_OSAL_MmngrDealloc
 *  - Join first thread by using R_OSAL_ThreadJoin.
 *  - Join second thread by using R_OSAL_ThreadJoin.
 *  - Close the opened memory manager by using R_OSAL_MmngrClose
 * -# Reset synchronization queue by using R_OSAL_MqReset
 * @subsection MmngrOpenFromRegionIdx_TC_09_021_049_ereb Expected Result/Behavior
 * -# R_OSAL_MmngrGetOsalMaxConfigFromRegionIdx return OSAL_RETURN_OK.
 * -# R_OSAL_MmngrOpenFromRegionIdx return OSAL_RETURN_OK.<br>
 * Value of "hndl_mmngr" is not OSAL_MEMORY_MANAGER_HANDLE_INVALID.
 * -# R_OSAL_ThreadCreate return OSAL_RETURN_OK with first thread.<br>
 * "thread_handle1" is not NULL_PTR.<br>
 * In test_memory_operation_thread function:
 *  - R_OSAL_MmngrRegisterMonitor return OSAL_RETURN_OK
 *  - R_OSAL_MmngrRegisterMonitor return OSAL_RETURN_OK
 *  - R_OSAL_MmngrRegisterMonitor return OSAL_RETURN_OK
 *  - R_OSAL_MmngrRegisterMonitor return OSAL_RETURN_OK
 *  - R_OSAL_MqGetConfig return OSAL_RETURN_OK
 *  - R_OSAL_MmngrAlloc return OSAL_RETURN_OK.<br>
 * Value of "buffer_obj_region" is not OSAL_MEMORY_BUFFER_HANDLE_INVALID
 *  - R_OSAL_MqSendForTimePeriod return OSAL_RETURN_OK
 * -# R_OSAL_MqGetConfig return OSAL_RETURN_OK
 * -# R_OSAL_MqReceiveForTimePeriod return OSAL_RETURN_OK
 * -# R_OSAL_ThreadCreate return OSAL_RETURN_OK with second thread.<br>
 * "thread_handle2" is not NULL_PTR.<br>
 * In test_memory_operation_thread function:
 *  - R_OSAL_MmngrGetCpuPtr return OSAL_RETURN_OK.<br>
 * Value of "cpu_ptr" is not NULL_PTR
 *  - memset run sucessfully
 *  - R_OSAL_MmngrFlush return OSAL_RETURN_OK
 *  - R_OSAL_MmngrGetHwAddr return OSAL_RETURN_OK
 *  - R_OSAL_MmngrInvalidate return OSAL_RETURN_OK
 *  - R_OSAL_MmngrDealloc return OSAL_RETURN_OK
 * -# R_OSAL_ThreadJoin return OSAL_RETURN_OK with first thread.<br>
 * Value of "result" is equal to OSAL_RETURN_OK.
 * -# R_OSAL_ThreadJoin return OSAL_RETURN_OK with second thread.<br>
 * Value of "result" is equal to OSAL_RETURN_OK.
 * -# R_OSAL_MmngrClose return OSAL_RETURN_OK.
 * -# R_OSAL_MqReset return OSAL_RETURN_OK.
 * @subsection MmngrOpenFromRegionIdx_TC_09_021_049_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrOpenFromRegionIdx_TC_09_021_049
 * @snippet test_memory_api_basic.cpp test_memory_operation_thread
 */
// [MmngrOpenFromRegionIdx_TC_09_021_049]
TEST_F(MemoryApiTest, MmngrOpenFromRegionIdx_TC_09_021_049)
{
    st_osal_thread_config_t         config_thread;
    int64_t                         result          = 0;
    osal_thread_handle_t            thread_handle1  = OSAL_THREAD_HANDLE_INVALID;
    osal_thread_handle_t            thread_handle2  = OSAL_THREAD_HANDLE_INVALID;
    // Message to sync thread
    int                             receive_msg     = 0;
    st_osal_mq_config_t             local_mq_config;
    const char*                     test_name = "Test09_021_049";

    MockMonitorHelper  allocationEventMonitor;
    auto NormalmonitorCb = cb_wrapper<decltype(
        &MonitorHelper::NormalmonitorCb)>::make_cb<&MonitorHelper::NormalmonitorCb>();

    // Test09_021_049
    // @brief: normal case: test operation of memory manager for all region index in multiple thread.
    // The first child thread will allocate buffer for memory manager.
    // The second child thread will test operation of buffer.

    EXPECT_CALL(allocationEventMonitor, NormalmonitorCb(OSAL_MMNGR_EVENT_ALLOCATE, _, _)).Times(TEST_NUM_OF_MEMORY_REGION);
    EXPECT_CALL(allocationEventMonitor, NormalmonitorCb(OSAL_MMNGR_EVENT_DEALLOCATE, _, _)).Times(TEST_NUM_OF_MEMORY_REGION);
    EXPECT_CALL(allocationEventMonitor, NormalmonitorCb(OSAL_MMNGR_EVENT_OVERFLOW_DETECTED, _, _)).Times(0);
    EXPECT_CALL(allocationEventMonitor, NormalmonitorCb(OSAL_MMNGR_EVENT_UNDERFLOW_DETECTED, _, _)).Times(0);

    for (auto index = 0; index < TEST_NUM_OF_MEMORY_REGION; index++)
    {
        // Get max config and open memory manager.
        EXPECT_EQ(R_OSAL_MmngrGetOsalMaxConfigFromRegionIdx(index, &config), OSAL_RETURN_OK);
        EXPECT_EQ(R_OSAL_MmngrOpenFromRegionIdx(&config, index, &hndl_mmngr), OSAL_RETURN_OK);
        EXPECT_NE(hndl_mmngr, OSAL_MEMORY_MANAGER_HANDLE_INVALID);

        // Thread 1: Allocate buffer for memory manager.
        memory_test_operation_region_arg user_arg1(&hndl_mmngr, &buffer_obj, TEST_THREAD_ID2, NormalmonitorCb, &allocationEventMonitor, test_name);
        user_arg1.mq               = sync_mq;
        config_thread.userarg       = &user_arg1;
        config_thread.priority      = OSAL_THREAD_PRIORITY_TYPE3;
        config_thread.task_name     = (char *)"Test operation of buffer for each region index";
        config_thread.func          = test_memory_operation_thread;
        config_thread.stack_size    = THREAD_STACK_SIZE;
        EXPECT_EQ(R_OSAL_ThreadCreate(&config_thread, TEST_THREAD_ID2, &thread_handle1), OSAL_RETURN_OK);
        EXPECT_NE(thread_handle1, NULL_PTR);
        EXPECT_EQ(R_OSAL_MqGetConfig(sync_mq, &local_mq_config), OSAL_RETURN_OK) << "Test09_001_056 failed";
        EXPECT_EQ(R_OSAL_MqReceiveForTimePeriod(sync_mq, SYNC_MQ_TIME, &receive_msg, local_mq_config.msg_size), OSAL_RETURN_OK) << "Test09_021_049 failed";
        EXPECT_EQ(receive_msg, TEST_SYNC_MQ_MSG) << "Test09_021_049 failed";

        // Thread 2: Get cpu_ptr, flush, get hw address, invalidate.
        memory_test_operation_region_arg user_arg2(&hndl_mmngr, &buffer_obj, TEST_THREAD_ID3, NormalmonitorCb, &allocationEventMonitor, test_name);
        config_thread.userarg       = &user_arg2;
        EXPECT_EQ(R_OSAL_ThreadCreate(&config_thread, TEST_THREAD_ID3, &thread_handle2), OSAL_RETURN_OK);
        EXPECT_NE(thread_handle2, NULL_PTR);

        EXPECT_EQ(R_OSAL_ThreadJoin(thread_handle1, &result),OSAL_RETURN_OK) << "Test09_021_049 failed";
        EXPECT_EQ(result, (int64_t)OSAL_RETURN_OK);
        EXPECT_EQ(R_OSAL_ThreadJoin(thread_handle2, &result),OSAL_RETURN_OK) << "Test09_021_049 failed";
        EXPECT_EQ(result, (int64_t)OSAL_RETURN_OK);

        // Close memory manager.
        EXPECT_EQ(R_OSAL_MmngrClose(hndl_mmngr), OSAL_RETURN_OK) << "Test09_021_049 failed";
        hndl_mmngr = OSAL_MEMORY_MANAGER_HANDLE_INVALID;
    }
    // reset mq
    EXPECT_EQ(R_OSAL_MqReset(sync_mq), OSAL_RETURN_OK) << "Test09_021_049 failed";
}
// [MmngrOpenFromRegionIdx_TC_09_021_049]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrOpenFromRegionIdx_TC_09_021_050 MemoryApiTest.MmngrOpenFromRegionIdx_TC_09_021_050
 * @subsection MmngrOpenFromRegionIdx_TC_09_021_050_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrOpenFromRegionIdx_TC_09_021_050_tci Test Case ID
 * MmngrOpenFromRegionIdx_S3_N_TC_09_021_050
 * @subsection MmngrOpenFromRegionIdx_TC_09_021_050_rr Related Requirement(s)
 * \#356350
 * @subsection MmngrOpenFromRegionIdx_TC_09_021_050_pp Prerequisite/Precondition
 * - OSAL is initialized.
 * @subsection MmngrOpenFromRegionIdx_TC_09_021_050_tcs Test Case Summary
 * This test shall verify the operation of multi-memory region APIs in multi-threads:
 * - Test09_021_050: Allocate multi-buffers in multi-threads using all memory regions at the same time.
 * @subsection MmngrOpenFromRegionIdx_TC_09_021_050_tpts Test Procedure/Test Steps
 * -# For each region index:
 *  - Get the maximum memory configuration by using R_OSAL_MmngrGetOsalMaxConfigFromRegionIdx
 *  - Set config.mode to OSAL_MMNGR_ALLOC_MODE_FREE_LIST
 *  - Open new memory manager by using R_OSAL_MmngrOpenFromRegionIdx
 *  - Create first thread using R_OSAL_ThreadCreate with the argument as below:
 *      -# p_config: must be configured with following specified values
 *          - priority is OSAL_THREAD_PRIORITY_TYPE3
 *          - task_name is "Allocate multiple buffer in multi-memory region at same time"
 *          - func is "memory_test_allocate_multiple_buffer_with_multiple_region_child_thread" function with functionality:
 *              -# Allocate multiple memory buffers which size is TEST_MULTI_THREADS_BUFFER_SIZE and alignment is TEST_MULTI_THREADS_BUFFER_ALIGN by using R_OSAL_MmngrAlloc
 *          - userarg includes memory handle, thread ID and test name.
 *          - thread ID is TEST_THREAD_ID2
 *          - stack_size is THREAD_STACK_SIZE
 *  - Create second thread using R_OSAL_ThreadCreate with the argument as below:
 *      -# p_config: use the same configuration as first child thread except thread ID is TEST_THREAD_ID3
 *          - func is "memory_test_allocate_multiple_buffer_with_multiple_region_child_thread" function with functionality:
 *              -# Allocate multiple memory buffers which size is TEST_MULTI_THREADS_BUFFER_SIZE and alignment is TEST_MULTI_THREADS_BUFFER_ALIGN by using R_OSAL_MmngrAlloc
 *  - Join first thread by using R_OSAL_ThreadJoin.
 *  - Join second thread by using R_OSAL_ThreadJoin.
 * -# Deallocate the allocated buffers by using R_OSAL_MmngrDealloc
 * -# Close the opened memory managers by using R_OSAL_MmngrClose
 * @subsection MmngrOpenFromRegionIdx_TC_09_021_050_ereb Expected Result/Behavior
 * -# R_OSAL_MmngrGetOsalMaxConfigFromRegionIdx return OSAL_RETURN_OK.
 * -# R_OSAL_MmngrOpenFromRegionIdx return OSAL_RETURN_OK.<br>
 * Value of "hndl_mmngr" is not OSAL_MEMORY_MANAGER_HANDLE_INVALID.
 * -# R_OSAL_ThreadCreate return OSAL_RETURN_OK with first thread.<br>
 * "thread_handle1" is not NULL_PTR.<br>
 * In memory_test_allocate_multiple_buffer_with_multiple_region_child_thread function:
 *  - R_OSAL_MmngrAlloc return OSAL_RETURN_OK.
 * -# R_OSAL_ThreadCreate return OSAL_RETURN_OK with second thread.<br>
 * "thread_handle2" is not NULL_PTR.<br>
 * In memory_test_allocate_multiple_buffer_with_multiple_region_child_thread function:
 *  - R_OSAL_MmngrAlloc return OSAL_RETURN_OK.
 * -# R_OSAL_ThreadJoin return OSAL_RETURN_OK with first thread.<br>
 * Value of "result" is equal to OSAL_RETURN_OK.
 * -# R_OSAL_ThreadJoin return OSAL_RETURN_OK with second thread.<br>
 * Value of "result" is equal to OSAL_RETURN_OK.
 * -# R_OSAL_MmngrDealloc return OSAL_RETURN_OK.
 * -# R_OSAL_MmngrClose return OSAL_RETURN_OK.
 * @subsection MmngrOpenFromRegionIdx_TC_09_021_050_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrOpenFromRegionIdx_TC_09_021_050
 * @snippet test_memory_api_basic.cpp memory_test_allocate_multiple_buffer_with_multiple_region_child_thread
 */
// [MmngrOpenFromRegionIdx_TC_09_021_050]
TEST_F(MemoryApiTest, MmngrOpenFromRegionIdx_TC_09_021_050)
{
    st_osal_thread_config_t         config_thread;
    int64_t                         result          = 0;
    osal_memory_manager_handle_t    mmngr_hndl[TEST_NUM_OF_MEMORY_REGION];
    osal_thread_handle_t            thread_handle1  = OSAL_THREAD_HANDLE_INVALID;
    osal_thread_handle_t            thread_handle2  = OSAL_THREAD_HANDLE_INVALID;

    // Test09_021_050
    // @brief: normal case: allocate multiple buffer of handle for multi-memory region index in multiple thread.
    // The first child thread will allocate buffer from 0 to TEST_NUM_OF_MULTI_BUFFERS/2, the second child thread will allocate buffer from TEST_NUM_OF_MULTI_BUFFERS/2 to TEST_NUM_OF_MULTI_BUFFERS.
    for (auto index = 0; index < TEST_NUM_OF_MEMORY_REGION; index++)
    {
        // Get max config and open memory manager.
        EXPECT_EQ(R_OSAL_MmngrGetOsalMaxConfigFromRegionIdx(index, &config), OSAL_RETURN_OK) << "Test09_021_050 failed";
        config.mode = OSAL_MMNGR_ALLOC_MODE_FREE_LIST;
        EXPECT_EQ(R_OSAL_MmngrOpenFromRegionIdx(&config, index, &mmngr_hndl[index]), OSAL_RETURN_OK) << "Test09_021_050 failed";
        EXPECT_NE(mmngr_hndl[index], OSAL_MEMORY_MANAGER_HANDLE_INVALID) << "Test09_021_050 failed";

        // Create thread_handle1 to allocate multiple buffer from 0 to TEST_NUM_OF_MULTI_BUFFERS/2.
        memory_test_allocate_multiple_buffer_with_multiple_region_arg user_arg1(&mmngr_hndl[index], TEST_THREAD_ID2, index);
        config_thread.userarg       = &user_arg1;
        config_thread.priority      = OSAL_THREAD_PRIORITY_TYPE3;
        config_thread.task_name     = (char *)"Allocate multiple buffer in multi-memory region at same time";
        config_thread.func          = memory_test_allocate_multiple_buffer_with_multiple_region_child_thread;
        config_thread.stack_size    = THREAD_STACK_SIZE;
        EXPECT_EQ(R_OSAL_ThreadCreate(&config_thread, TEST_THREAD_ID2, &thread_handle1), OSAL_RETURN_OK) << "Test09_021_050 failed";
        EXPECT_NE(thread_handle1, NULL_PTR);

        // Create thread_handle2 to allocate multiple buffer from TEST_NUM_OF_MULTI_BUFFERS/2 to TEST_NUM_OF_MULTI_BUFFERS.
        memory_test_allocate_multiple_buffer_with_multiple_region_arg user_arg2(&mmngr_hndl[index], TEST_THREAD_ID3, index);
        config_thread.userarg       = &user_arg2;
        EXPECT_EQ(R_OSAL_ThreadCreate(&config_thread, TEST_THREAD_ID3, &thread_handle2), OSAL_RETURN_OK) << "Test09_021_050 failed";
        EXPECT_NE(thread_handle2, NULL_PTR);

        EXPECT_EQ(R_OSAL_ThreadJoin(thread_handle1, &result),OSAL_RETURN_OK) << "Test09_021_050 failed";
        EXPECT_EQ(result, (int64_t)OSAL_RETURN_OK);
        EXPECT_EQ(R_OSAL_ThreadJoin(thread_handle2, &result),OSAL_RETURN_OK) << "Test09_021_050 failed";
        EXPECT_EQ(result, (int64_t)OSAL_RETURN_OK);
    }
    // Deallocate all buffers allocated and close memory handle.
    for (size_t j = 0; j < TEST_NUM_OF_MEMORY_REGION; j++)
    {
        for(size_t i = 0; i < TEST_NUM_OF_MULTI_BUFFERS; i++)
        {
            EXPECT_EQ(R_OSAL_MmngrDealloc(mmngr_hndl[j], buffer_arr_multi_region[j][i]), OSAL_RETURN_OK) << "Test09_021_050 failed";
        }
        EXPECT_EQ(R_OSAL_MmngrClose(mmngr_hndl[j]), OSAL_RETURN_OK) << "Test09_021_050 failed";
        mmngr_hndl[j] = OSAL_MEMORY_MANAGER_HANDLE_INVALID;
    }
}
// [MmngrOpenFromRegionIdx_TC_09_021_050]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrOpenFromRegionIdx_TC_09_021_051 MemoryApiTest.MmngrOpenFromRegionIdx_TC_09_021_051
 * @subsection MmngrOpenFromRegionIdx_TC_09_021_051_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrOpenFromRegionIdx_TC_09_021_051_tci Test Case ID
 * MmngrOpenFromRegionIdx_S3_N_TC_09_021_051
 * @subsection MmngrOpenFromRegionIdx_TC_09_021_051_rr Related Requirement(s)
 * \#356350
 * @subsection MmngrOpenFromRegionIdx_TC_09_021_051_pp Prerequisite/Precondition
 * - OSAL is initialized.
 * - The synchronization queue was created
 * @subsection MmngrOpenFromRegionIdx_TC_09_021_051_tcs Test Case Summary
 * This test shall verify the operation of multi-memory region APIs in multi-threads:
 * - Test09_021_051: Confirm Memory operation in multi-threads using all memory regions at the same time.
 * @subsection MmngrOpenFromRegionIdx_TC_09_021_051_tpts Test Procedure/Test Steps
 * -# For each region index:
 *  - Get the maximum memory configuration by using R_OSAL_MmngrGetOsalMaxConfigFromRegionIdx
 *  - Open new memory manager by using R_OSAL_MmngrOpenFromRegionIdx
 *  - Create first thread using R_OSAL_ThreadCreate with the argument as below:
 *      -# p_config: must be configured with following specified values
 *          - priority is OSAL_THREAD_PRIORITY_TYPE3
 *          - task_name is "Test operation of buffer for all region index"
 *          - func is "test_memory_operation_thread" function with functionality:
 *              -# Register callback function for event OSAL_MMNGR_EVENT_ALLOCATE by using R_OSAL_MmngrRegisterMonitor
 *              -# Register callback function for event OSAL_MMNGR_EVENT_DEALLOCATE by using R_OSAL_MmngrRegisterMonitor
 *              -# Register callback function for event OSAL_MMNGR_EVENT_OVERFLOW_DETECTED by using R_OSAL_MmngrRegisterMonitor
 *              -# Register callback function for event OSAL_MMNGR_EVENT_UNDERFLOW_DETECTED by using R_OSAL_MmngrRegisterMonitor
 *              -# Get config of synchronization queue by using R_OSAL_MqGetConfig
 *              -# Allocate memory buffer which size is 64 and alignment is 64 by using R_OSAL_MmngrAlloc
 *              -# Send a message to synchronization queue by using R_OSAL_MqSendForTimePeriod
 *          - userarg includes memory handle, buffer handle, thread ID, NormalmonitorCb, allocationEvenMonitor and test name.
 *          - thread ID is TEST_THREAD_ID2
 *          - stack_size is THREAD_STACK_SIZE
 *  - Get config of synchronization queue by using R_OSAL_MqGetConfig
 *  - Receive message from synchronization queue by using R_OSAL_MqReceiveForTimePeriod
 *  - Create second thread using R_OSAL_ThreadCreate with the argument as below:
 *      -# p_config: use the same configuration as first child thread except thread ID is TEST_THREAD_ID3
 *          - func is "test_memory_operation_thread" function with functionality:
 *              -# Get the pointer of allocated buffer by using R_OSAL_MmngrGetCpuPtr
 *              -# Modify the data of allocated buffer by known value using memset
 *              -# Call R_OSAL_MmngrFlush with offset is 0 and size is 64
 *              -# Get hardware address by using R_OSAL_MmngrGetHwAddr
 *              -# Call R_OSAL_MmngrInvalidate with offset is 0 and size is 64
 *              -# Deallocate allocated buffer by using R_OSAL_MmngrDealloc
 *  - Join first thread by using R_OSAL_ThreadJoin.
 *  - Join second thread by using R_OSAL_ThreadJoin.
 * -# Close the opened memory managers by using R_OSAL_MmngrClose
 * -# Reset synchronization queue by using R_OSAL_MqReset
 * @subsection MmngrOpenFromRegionIdx_TC_09_021_051_ereb Expected Result/Behavior
 * -# R_OSAL_MmngrGetOsalMaxConfigFromRegionIdx return OSAL_RETURN_OK.
 * -# R_OSAL_MmngrOpenFromRegionIdx return OSAL_RETURN_OK.<br>
 * Value of "hndl_mmngr" is not OSAL_MEMORY_MANAGER_HANDLE_INVALID.
 * -# R_OSAL_ThreadCreate return OSAL_RETURN_OK with first thread.<br>
 * "thread_handle1" is not NULL_PTR.<br>
 * In test_memory_operation_thread function:
 *  - R_OSAL_MmngrRegisterMonitor return OSAL_RETURN_OK
 *  - R_OSAL_MmngrRegisterMonitor return OSAL_RETURN_OK
 *  - R_OSAL_MmngrRegisterMonitor return OSAL_RETURN_OK
 *  - R_OSAL_MmngrRegisterMonitor return OSAL_RETURN_OK
 *  - R_OSAL_MqGetConfig return OSAL_RETURN_OK
 *  - R_OSAL_MmngrAlloc return OSAL_RETURN_OK.<br>
 * Value of "buffer_obj_region" is not OSAL_MEMORY_BUFFER_HANDLE_INVALID
 *  - R_OSAL_MqSendForTimePeriod return OSAL_RETURN_OK
 * -# R_OSAL_MqGetConfig return OSAL_RETURN_OK
 * -# R_OSAL_MqReceiveForTimePeriod return OSAL_RETURN_OK
 * -# R_OSAL_ThreadCreate return OSAL_RETURN_OK with second thread.<br>
 * "thread_handle2" is not NULL_PTR.<br>
 * In test_memory_operation_thread function:
 *  - R_OSAL_MmngrGetCpuPtr return OSAL_RETURN_OK.<br>
 * Value of "cpu_ptr" is not NULL_PTR
 *  - memset run sucessfully
 *  - R_OSAL_MmngrFlush return OSAL_RETURN_OK
 *  - R_OSAL_MmngrGetHwAddr return OSAL_RETURN_OK
 *  - R_OSAL_MmngrInvalidate return OSAL_RETURN_OK
 *  - R_OSAL_MmngrDealloc return OSAL_RETURN_OK
 * -# R_OSAL_ThreadJoin return OSAL_RETURN_OK with first thread.<br>
 * Value of "result" is equal to OSAL_RETURN_OK.
 * -# R_OSAL_ThreadJoin return OSAL_RETURN_OK with second thread.<br>
 * Value of "result" is equal to OSAL_RETURN_OK.
 * -# R_OSAL_MmngrClose return OSAL_RETURN_OK.
 * -# R_OSAL_MqReset return OSAL_RETURN_OK.
 * @subsection MmngrOpenFromRegionIdx_TC_09_021_051_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrOpenFromRegionIdx_TC_09_021_051
 * @snippet test_memory_api_basic.cpp test_memory_operation_thread
 */
// [MmngrOpenFromRegionIdx_TC_09_021_051]
TEST_F(MemoryApiTest, MmngrOpenFromRegionIdx_TC_09_021_051)
{
    st_osal_thread_config_t         config_thread;
    int64_t                         result          = 0;
    osal_memory_manager_handle_t    mmngr_hndl[TEST_NUM_OF_MEMORY_REGION];
    osal_memory_buffer_handle_t     buffer_obj[TEST_NUM_OF_MEMORY_REGION];
    osal_thread_handle_t            thread_handle1  = OSAL_THREAD_HANDLE_INVALID;
    osal_thread_handle_t            thread_handle2  = OSAL_THREAD_HANDLE_INVALID;
    // Message to sync thread
    int                             receive_msg     = 0;
    st_osal_mq_config_t             local_mq_config;
    const char*                     test_name = "Test09_021_051";

    MockMonitorHelper  allocationEventMonitor;
    auto NormalmonitorCb = cb_wrapper<decltype(
        &MonitorHelper::NormalmonitorCb)>::make_cb<&MonitorHelper::NormalmonitorCb>();

    // Test09_021_051
    // @brief: normal case: test operation of multi-memory region index in multiple thread.
    // Create 2 child thread to test operation of memory manager for all region index at the same time.
    EXPECT_CALL(allocationEventMonitor, NormalmonitorCb(OSAL_MMNGR_EVENT_ALLOCATE, _, _)).Times(TEST_NUM_OF_MEMORY_REGION);
    EXPECT_CALL(allocationEventMonitor, NormalmonitorCb(OSAL_MMNGR_EVENT_DEALLOCATE, _, _)).Times(TEST_NUM_OF_MEMORY_REGION);
    EXPECT_CALL(allocationEventMonitor, NormalmonitorCb(OSAL_MMNGR_EVENT_OVERFLOW_DETECTED, _, _)).Times(0);
    EXPECT_CALL(allocationEventMonitor, NormalmonitorCb(OSAL_MMNGR_EVENT_UNDERFLOW_DETECTED, _, _)).Times(0);

    for (auto index = 0; index < TEST_NUM_OF_MEMORY_REGION; index++)
    {
        // Open memory manager for region index.
        EXPECT_EQ(R_OSAL_MmngrGetOsalMaxConfigFromRegionIdx(index, &config), OSAL_RETURN_OK);
        EXPECT_EQ(R_OSAL_MmngrOpenFromRegionIdx(&config, index, &mmngr_hndl[index]), OSAL_RETURN_OK);
        EXPECT_NE(mmngr_hndl[index], OSAL_MEMORY_MANAGER_HANDLE_INVALID);

        // Thread 1: Allocate buffer for region index
        memory_test_operation_region_arg user_arg1(&mmngr_hndl[index], &buffer_obj[index], TEST_THREAD_ID2, NormalmonitorCb, &allocationEventMonitor, test_name);
        user_arg1.mq               = sync_mq;
        config_thread.userarg       = &user_arg1;
        config_thread.priority      = OSAL_THREAD_PRIORITY_TYPE3;
        config_thread.task_name     = (char *)"Test operation of buffer for all region index";
        config_thread.func          = test_memory_operation_thread;
        config_thread.stack_size    = THREAD_STACK_SIZE;
        EXPECT_EQ(R_OSAL_ThreadCreate(&config_thread, TEST_THREAD_ID2, &thread_handle1), OSAL_RETURN_OK);
        EXPECT_NE(thread_handle1, NULL_PTR);
        EXPECT_EQ(R_OSAL_MqGetConfig(sync_mq, &local_mq_config), OSAL_RETURN_OK) << "Test09_001_056 failed";
        EXPECT_EQ(R_OSAL_MqReceiveForTimePeriod(sync_mq, SYNC_MQ_TIME, &receive_msg, local_mq_config.msg_size), OSAL_RETURN_OK) << "Test09_021_051 failed";
        EXPECT_EQ(receive_msg, TEST_SYNC_MQ_MSG) << "Test09_021_051 failed";

        // Thread 2: Get cpu_ptr, flush, get hw address, invalidate.
        memory_test_operation_region_arg user_arg2(&mmngr_hndl[index], &buffer_obj[index], TEST_THREAD_ID3, NormalmonitorCb, &allocationEventMonitor, test_name);
        config_thread.userarg       = &user_arg2;
        EXPECT_EQ(R_OSAL_ThreadCreate(&config_thread, TEST_THREAD_ID3, &thread_handle2), OSAL_RETURN_OK);
        EXPECT_NE(thread_handle2, NULL_PTR);

        EXPECT_EQ(R_OSAL_ThreadJoin(thread_handle1, &result),OSAL_RETURN_OK);
        EXPECT_EQ(result, (int64_t)OSAL_RETURN_OK);
        EXPECT_EQ(R_OSAL_ThreadJoin(thread_handle2, &result),OSAL_RETURN_OK);
        EXPECT_EQ(result, (int64_t)OSAL_RETURN_OK);
    }

    // Deallocate the allocated buffers, close the memory managers
    for (auto index = 0; index < TEST_NUM_OF_MEMORY_REGION; index++)
    {
        EXPECT_EQ(R_OSAL_MmngrClose(mmngr_hndl[index]), OSAL_RETURN_OK);
        mmngr_hndl[index] = OSAL_MEMORY_MANAGER_HANDLE_INVALID;
    }

    // reset mq
    EXPECT_EQ(R_OSAL_MqReset(sync_mq), OSAL_RETURN_OK) << "Test09_021_051 failed";
}
// [MmngrOpenFromRegionIdx_TC_09_021_051]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrOpenFromRegionIdx_TC_09_021_052 MemoryApiTest.MmngrOpenFromRegionIdx_TC_09_021_052
 * @subsection MmngrOpenFromRegionIdx_TC_09_021_052_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrOpenFromRegionIdx_TC_09_021_052_tci Test Case ID
 * MmngrOpenFromRegionIdx_S1_A_TC_09_021_052
 * @subsection MmngrOpenFromRegionIdx_TC_09_021_052_rr Related Requirement(s)
 * \#356350
 * @subsection MmngrOpenFromRegionIdx_TC_09_021_052_pp Prerequisite/Precondition
 * OSAL is initialized.
 * @subsection MmngrOpenFromRegionIdx_TC_09_021_052_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrOpenFromRegionIdx with abnormal condition.
 * - Test09_021_052: Open Memory manager with the config returned from R_OSAL_MmgrInitializeMmngrConfigSt.
 * @subsection MmngrOpenFromRegionIdx_TC_09_021_052_tpts Test Procedure/Test Steps
 * -# Calling function R_OSAL_MmgrInitializeMmngrConfigSt to get the config
 * -# Calling function R_OSAL_MmngrOpenFromRegionIdx for all index with above config
 * @subsection MmngrOpenFromRegionIdx_TC_09_021_052_ereb Expected Result/Behavior
 * -# The return value of R_OSAL_MmgrInitializeMmngrConfigSt is OSAL_RETURN_OK.
 * -# The return value of R_OSAL_MmngrOpenFromRegionIdx is OSAL_RETURN_CONF.
 * @subsection MmngrOpenFromRegionIdx_TC_09_021_052_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrOpenFromRegionIdx_TC_09_021_052
 */
// [MmngrOpenFromRegionIdx_TC_09_021_052]
TEST_F(MemoryApiTest, MmngrOpenFromRegionIdx_TC_09_021_052)
{
    for (auto index = 0; index < TEST_NUM_OF_MEMORY_REGION; index++)
    {
        // Test09_021_052
        // @brief: abnormal case: calling API with a config initialized with R_OSAL_MmgrInitializeMmngrConfigSt()
        EXPECT_EQ(R_OSAL_MmngrInitializeMmngrConfigSt(&config), OSAL_RETURN_OK);
        EXPECT_EQ(R_OSAL_MmngrOpenFromRegionIdx(&config, index, &hndl_mmngr), OSAL_RETURN_CONF) << "Test09_021_052 failed";
        EXPECT_EQ(hndl_mmngr, OSAL_MEMORY_MANAGER_HANDLE_INVALID);
    }
}
// [MmngrOpenFromRegionIdx_TC_09_021_052]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrOpenFromRegionIdx_TC_09_021_053 MemoryApiTest.MmngrOpenFromRegionIdx_TC_09_021_053
 * @subsection MmngrOpenFromRegionIdx_TC_09_021_053_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrOpenFromRegionIdx_TC_09_021_053_tci Test Case ID
 * MmngrOpenFromRegionIdx_S0_BN_TC_09_021_053
 * @subsection MmngrOpenFromRegionIdx_TC_09_021_053_rr Related Requirement(s)
 * \#356350
 * @subsection MmngrOpenFromRegionIdx_TC_09_021_053_pp Prerequisite/Precondition
 * OSAL is initialized.
 * @subsection MmngrOpenFromRegionIdx_TC_09_021_053_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrOpenFromRegionIdx with normal condition in OSAL_MMNGR_ALLOC_MODE_STACK mode for all region indexes.
 * - Test09_021_053: memory_limit in config is 4KB
 * @subsection MmngrOpenFromRegionIdx_TC_09_021_053_tpts Test Procedure/Test Steps
 * -# For each region index:
 *  - Calling function R_OSAL_MmngrGetOsalMaxConfigFromRegionIdx to get max config.
 *  - mode setting is OSAL_MMNGR_ALLOC_MODE_STACK
 *  - memory_limit setting in config is 4KB
 *  - Calling function R_OSAL_MmngrOpenFromRegionIdx with above config.
 *  - Close opened memory manager by using R_OSAL_MmngrClose
 * @subsection MmngrOpenFromRegionIdx_TC_09_021_053_ereb Expected Result/Behavior
 * -# Expected result for all region indexes is as below:
 *  - The return value of R_OSAL_MmngrGetOsalMaxConfigFromRegionIdx is OSAL_RETURN_OK.
 *  - The return value of R_OSAL_MmngrOpenFromRegionIdx is OSAL_RETURN_OK.
 *  - R_OSAL_MmngrClose return OSAL_RETURN_OK
 * @subsection MmngrOpenFromRegionIdx_TC_09_021_053_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrOpenFromRegionIdx_TC_09_021_053
 */
// [MmngrOpenFromRegionIdx_TC_09_021_053]
TEST_F(MemoryApiTest, MmngrOpenFromRegionIdx_TC_09_021_053)
{
    for (auto index = 0; index < TEST_NUM_OF_MEMORY_REGION; index++)
    {
        // Test09_021_053
        // @brief: boundary normal case: config.memory_limit is 4KB
        EXPECT_EQ(R_OSAL_MmngrGetOsalMaxConfigFromRegionIdx(index, &config), OSAL_RETURN_OK);
        config.mode = OSAL_MMNGR_ALLOC_MODE_STACK;
        config.memory_limit = 4 * 1024;
        EXPECT_EQ(R_OSAL_MmngrOpenFromRegionIdx(&config, index, &hndl_mmngr), OSAL_RETURN_OK) << "Test09_021_053 failed";
        EXPECT_EQ(R_OSAL_MmngrClose(hndl_mmngr), OSAL_RETURN_OK) << "Test09_021_053 failed";
    }
}
// [MmngrOpenFromRegionIdx_TC_09_021_053]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrOpenFromRegionIdx_TC_09_021_054 MemoryApiTest.MmngrOpenFromRegionIdx_TC_09_021_054
 * @subsection MmngrOpenFromRegionIdx_TC_09_021_054_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrOpenFromRegionIdx_TC_09_021_054_tci Test Case ID
 * MmngrOpenFromRegionIdx_S0_BN_TC_09_021_054
 * @subsection MmngrOpenFromRegionIdx_TC_09_021_054_rr Related Requirement(s)
 * \#356350
 * @subsection MmngrOpenFromRegionIdx_TC_09_021_054_pp Prerequisite/Precondition
 * OSAL is initialized.
 * @subsection MmngrOpenFromRegionIdx_TC_09_021_054_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrOpenFromRegionIdx with normal condition in OSAL_MMNGR_ALLOC_MODE_STACK_PROT mode for all region indexes.
 * - Test09_021_054: memory_limit in config is 4KB
 * @subsection MmngrOpenFromRegionIdx_TC_09_021_054_tpts Test Procedure/Test Steps
 * -# For each region index:
 *  - Calling function R_OSAL_MmngrGetOsalMaxConfigFromRegionIdx to get max config.
 *  - mode setting is OSAL_MMNGR_ALLOC_MODE_STACK_PROT
 *  - memory_limit setting in config is 4KB
 *  - Calling function R_OSAL_MmngrOpenFromRegionIdx with above config.
 *  - Close opened memory manager by using R_OSAL_MmngrClose
 * @subsection MmngrOpenFromRegionIdx_TC_09_021_054_ereb Expected Result/Behavior
 * -# Expected result for all region indexes is as below:
 *  - The return value of R_OSAL_MmngrGetOsalMaxConfigFromRegionIdx is OSAL_RETURN_OK.
 *  - The return value of R_OSAL_MmngrOpenFromRegionIdx is OSAL_RETURN_OK.
 *  - R_OSAL_MmngrClose return OSAL_RETURN_OK
 * @subsection MmngrOpenFromRegionIdx_TC_09_021_054_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrOpenFromRegionIdx_TC_09_021_054
 */
// [MmngrOpenFromRegionIdx_TC_09_021_054]
TEST_F(MemoryApiTest, MmngrOpenFromRegionIdx_TC_09_021_054)
{
    for (auto index = 0; index < TEST_NUM_OF_MEMORY_REGION; index++)
    {
        // Test09_021_054
        // @brief: boundary normal case: config.memory_limit is 4KB
        EXPECT_EQ(R_OSAL_MmngrGetOsalMaxConfigFromRegionIdx(index, &config), OSAL_RETURN_OK);
        config.mode = OSAL_MMNGR_ALLOC_MODE_STACK_PROT;
        config.memory_limit = 4 * 1024;
        EXPECT_EQ(R_OSAL_MmngrOpenFromRegionIdx(&config, index, &hndl_mmngr), OSAL_RETURN_OK) << "Test09_021_054 failed";
        EXPECT_EQ(R_OSAL_MmngrClose(hndl_mmngr), OSAL_RETURN_OK) << "Test09_021_054 failed";
    }
}
// [MmngrOpenFromRegionIdx_TC_09_021_054]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrOpenFromRegionIdx_TC_09_021_055 MemoryApiTest.MmngrOpenFromRegionIdx_TC_09_021_055
 * @subsection MmngrOpenFromRegionIdx_TC_09_021_055_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrOpenFromRegionIdx_TC_09_021_055_tci Test Case ID
 * MmngrOpenFromRegionIdx_S0_BN_TC_09_021_055
 * @subsection MmngrOpenFromRegionIdx_TC_09_021_055_rr Related Requirement(s)
 * \#356350
 * @subsection MmngrOpenFromRegionIdx_TC_09_021_055_pp Prerequisite/Precondition
 * OSAL is initialized.
 * @subsection MmngrOpenFromRegionIdx_TC_09_021_055_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrOpenFromRegionIdx with normal condition in OSAL_MMNGR_ALLOC_MODE_FREE_LIST mode for all region indexes.
 * - Test09_021_055: memory_limit in config is 4KB
 * @subsection MmngrOpenFromRegionIdx_TC_09_021_055_tpts Test Procedure/Test Steps
 * -# For each region index:
 *  - Calling function R_OSAL_MmngrGetOsalMaxConfigFromRegionIdx to get max config.
 *  - mode setting is OSAL_MMNGR_ALLOC_MODE_FREE_LIST
 *  - memory_limit setting in config is 4KB
 *  - Calling function R_OSAL_MmngrOpenFromRegionIdx with above config.
 *  - Close opened memory manager by using R_OSAL_MmngrClose
 * @subsection MmngrOpenFromRegionIdx_TC_09_021_055_ereb Expected Result/Behavior
 * -# Expected result for all region indexes is as below:
 *  - The return value of R_OSAL_MmngrGetOsalMaxConfigFromRegionIdx is OSAL_RETURN_OK.
 *  - The return value of R_OSAL_MmngrOpenFromRegionIdx is OSAL_RETURN_OK.
 *  - R_OSAL_MmngrClose return OSAL_RETURN_OK
 * @subsection MmngrOpenFromRegionIdx_TC_09_021_055_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrOpenFromRegionIdx_TC_09_021_055
 */
// [MmngrOpenFromRegionIdx_TC_09_021_055]
TEST_F(MemoryApiTest, MmngrOpenFromRegionIdx_TC_09_021_055)
{
    for (auto index = 0; index < TEST_NUM_OF_MEMORY_REGION; index++)
    {
        // Test09_021_055
        // @brief: boundary normal case: config.memory_limit is 4KB
        EXPECT_EQ(R_OSAL_MmngrGetOsalMaxConfigFromRegionIdx(index, &config), OSAL_RETURN_OK);
        config.mode = OSAL_MMNGR_ALLOC_MODE_FREE_LIST;
        config.memory_limit = 4 * 1024;
        EXPECT_EQ(R_OSAL_MmngrOpenFromRegionIdx(&config, index, &hndl_mmngr), OSAL_RETURN_OK) << "Test09_021_055 failed";
        EXPECT_EQ(R_OSAL_MmngrClose(hndl_mmngr), OSAL_RETURN_OK) << "Test09_021_055 failed";
    }
}
// [MmngrOpenFromRegionIdx_TC_09_021_055]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrOpenFromRegionIdx_TC_09_021_056 MemoryApiTest.MmngrOpenFromRegionIdx_TC_09_021_056
 * @subsection MmngrOpenFromRegionIdx_TC_09_021_056_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrOpenFromRegionIdx_TC_09_021_056_tci Test Case ID
 * MmngrOpenFromRegionIdx_S0_BN_TC_09_021_056
 * @subsection MmngrOpenFromRegionIdx_TC_09_021_056_rr Related Requirement(s)
 * \#356350
 * @subsection MmngrOpenFromRegionIdx_TC_09_021_056_pp Prerequisite/Precondition
 * OSAL is initialized.
 * @subsection MmngrOpenFromRegionIdx_TC_09_021_056_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrOpenFromRegionIdx with normal condition in OSAL_MMNGR_ALLOC_MODE_FREE_LIST_PROT mode for all region indexes.
 * - Test09_021_056: memory_limit in config is 4KB
 * @subsection MmngrOpenFromRegionIdx_TC_09_021_056_tpts Test Procedure/Test Steps
 * -# For each region index:
 *  - Calling function R_OSAL_MmngrGetOsalMaxConfigFromRegionIdx to get max config.
 *  - mode setting is OSAL_MMNGR_ALLOC_MODE_FREE_LIST_PROT
 *  - memory_limit setting in config is 4KB
 *  - Calling function R_OSAL_MmngrOpenFromRegionIdx with above config.
 *  - Close opened memory manager by using R_OSAL_MmngrClose
 * @subsection MmngrOpenFromRegionIdx_TC_09_021_056_ereb Expected Result/Behavior
 * -# Expected result for all region indexes is as below:
 *  - The return value of R_OSAL_MmngrGetOsalMaxConfigFromRegionIdx is OSAL_RETURN_OK.
 *  - The return value of R_OSAL_MmngrOpenFromRegionIdx is OSAL_RETURN_OK.
 *  - R_OSAL_MmngrClose return OSAL_RETURN_OK
 * @subsection MmngrOpenFromRegionIdx_TC_09_021_056_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrOpenFromRegionIdx_TC_09_021_056
 */
// [MmngrOpenFromRegionIdx_TC_09_021_056]
TEST_F(MemoryApiTest, MmngrOpenFromRegionIdx_TC_09_021_056)
{
    for (auto index = 0; index < TEST_NUM_OF_MEMORY_REGION; index++)
    {
        // Test09_021_056
        // @brief: boundary normal case: config.memory_limit is 4KB
        EXPECT_EQ(R_OSAL_MmngrGetOsalMaxConfigFromRegionIdx(index, &config), OSAL_RETURN_OK);
        config.mode = OSAL_MMNGR_ALLOC_MODE_FREE_LIST_PROT;
        config.memory_limit = 4 * 1024;
        EXPECT_EQ(R_OSAL_MmngrOpenFromRegionIdx(&config, index, &hndl_mmngr), OSAL_RETURN_OK) << "Test09_021_056 failed";
        EXPECT_EQ(R_OSAL_MmngrClose(hndl_mmngr), OSAL_RETURN_OK) << "Test09_021_056 failed";
    }
}
// [MmngrOpenFromRegionIdx_TC_09_021_056]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrOpenFromRegionIdx_TC_09_021_057 MemoryApiTest.MmngrOpenFromRegionIdx_TC_09_021_057
 * @subsection MmngrOpenFromRegionIdx_TC_09_021_057_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrOpenFromRegionIdx_TC_09_021_057_tci Test Case ID
 * MmngrOpenFromRegionIdx_S0_BA_TC_09_021_057
 * @subsection MmngrOpenFromRegionIdx_TC_09_021_057_rr Related Requirement(s)
 * \#356350
 * @subsection MmngrOpenFromRegionIdx_TC_09_021_057_pp Prerequisite/Precondition
 * OSAL is initialized.
 * @subsection MmngrOpenFromRegionIdx_TC_09_021_057_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrOpenFromRegionIdx with abnormal condition for all region indexes.
 * - Test09_021_057: mode setting is OSAL_MMNGR_ALLOC_MODE_INVALID - 1
 * @subsection MmngrOpenFromRegionIdx_TC_09_021_057_tpts Test Procedure/Test Steps
 * -# For each region index:
 *  - Calling function R_OSAL_MmngrGetOsalMaxConfigFromRegionIdx to get max config.
 *  - mode setting is OSAL_MMNGR_ALLOC_MODE_INVALID - 1
 *  - Calling function R_OSAL_MmngrOpenFromRegionIdx with above config.
 * @subsection MmngrOpenFromRegionIdx_TC_09_021_057_ereb Expected Result/Behavior
 * -# Expected result for all region indexes is as below:
 *  - The return value of R_OSAL_MmngrGetOsalMaxConfigFromRegionIdx is OSAL_RETURN_OK.
 *  - The return value of R_OSAL_MmngrOpenFromRegionIdx is OSAL_RETURN_CONF.
 * @subsection MmngrOpenFromRegionIdx_TC_09_021_057_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrOpenFromRegionIdx_TC_09_021_057
 */
// [MmngrOpenFromRegionIdx_TC_09_021_057]
TEST_F(MemoryApiTest, MmngrOpenFromRegionIdx_TC_09_021_057)
{
    for (auto index = 0; index < TEST_NUM_OF_MEMORY_REGION; index++)
    {
        // Test09_021_057
        // @brief: boundary abnormal case: mode is OSAL_MMNGR_ALLOC_MODE_INVALID - 1
        EXPECT_EQ(R_OSAL_MmngrGetOsalMaxConfigFromRegionIdx(index, &config), OSAL_RETURN_OK);
        config.mode = (e_osal_mmngr_allocator_mode_t)(OSAL_MMNGR_ALLOC_MODE_INVALID - 1);
        EXPECT_EQ(R_OSAL_MmngrOpenFromRegionIdx(&config, index, &hndl_mmngr), OSAL_RETURN_CONF) << "Test09_021_057 failed";
    }
}
// [MmngrOpenFromRegionIdx_TC_09_021_057]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrOpenFromRegionIdx_TC_09_021_058 MemoryApiTest.MmngrOpenFromRegionIdx_TC_09_021_058
 * @subsection MmngrOpenFromRegionIdx_TC_09_021_058_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrOpenFromRegionIdx_TC_09_021_058_tci Test Case ID
 * MmngrOpenFromRegionIdx_S3_N_TC_09_021_058
 * @subsection MmngrOpenFromRegionIdx_TC_09_021_058_rr Related Requirement(s)
 * \#356350
 * @subsection MmngrOpenFromRegionIdx_TC_09_021_058_pp Prerequisite/Precondition
 * OSAL is initialized.
 * @subsection MmngrOpenFromRegionIdx_TC_09_021_058_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrOpenFromRegionIdx with normal condition in OSAL_MMNGR_ALLOC_MODE_FREE_LIST mode for all region indexes.
 * - Test09_021_058: Open multi-memory region in random order and confirm the start HW address each region
 * @subsection MmngrOpenFromRegionIdx_TC_09_021_058_tpts Test Procedure/Test Steps
 * -# Generate random memory region index
 * -# For each memory region
 *  - Get the maximum configuration with a random index
 *  - Open memory region with a random index
 *  - Allocate buffer which size and align are 4096
 *  - Get the HW address of allocated buffer
 * -# Show the HW address of allocated buffers
 * -# Deallocate buffers and close all memory regions
 * @subsection MmngrOpenFromRegionIdx_TC_09_021_058_ereb Expected Result/Behavior
 * -# Random memory region index generate successfully, each time test is executed, a different random region index will be generated.
 * -# Expected result for all region indexes is as below:
 *  - The return value of R_OSAL_MmngrGetOsalMaxConfigFromRegionIdx is OSAL_RETURN_OK.
 *  - The return value of R_OSAL_MmngrOpenFromRegionIdx is OSAL_RETURN_OK.
 *  - The return value of R_OSAL_MmngrAlloc is OSAL_RETURN_OK.
 *  - The return value of R_OSAL_MmngrGetHwAddr is OSAL_RETURN_OK.
 * -# HW address of allocated buffer could shown. There is no conflict in HW address.
 * -# R_OSAL_MmngrDealloc returns OSAL_RETURN_OK
 * -# R_OSAL_MmngrClose returns OSAL_RETURN_OK
 * @subsection MmngrOpenFromRegionIdx_TC_09_021_058_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrOpenFromRegionIdx_TC_09_021_058
 */
// [MmngrOpenFromRegionIdx_TC_09_021_058]
TEST_F(MemoryApiTest, MmngrOpenFromRegionIdx_TC_09_021_058)
{
    vector<osal_memory_region_idx_t> random_index;
    osal_memory_manager_handle_t mmngr_hndl[TEST_NUM_OF_MEMORY_REGION];
    osal_memory_buffer_handle_t buffer_obj[TEST_NUM_OF_MEMORY_REGION];
    uintptr_t hw_addr[TEST_NUM_OF_MEMORY_REGION];
    size_t size = 4096;
    size_t alignment = 4096;

    srand(time(NULL));

    for (auto index = 0; index < TEST_NUM_OF_MEMORY_REGION; index++)
    {
        osal_memory_region_idx_t tmp = (osal_memory_region_idx_t)(rand() % TEST_NUM_OF_MEMORY_REGION);
        if(0 != index) // no need to check for the first element
        {
            for(auto j = 0; j < index; j++)
            {
                while(random_index.end() != find(random_index.begin(), random_index.end(), tmp))
                {
                    tmp = rand() % TEST_NUM_OF_MEMORY_REGION;
                }
            }
        }

        random_index.push_back(tmp);

        printf("Random region index: %ld\n", random_index.at(index));
    }

    for (auto index = 0; index < TEST_NUM_OF_MEMORY_REGION; index++)
    {
        // Test09_021_057
        EXPECT_EQ(R_OSAL_MmngrGetOsalMaxConfigFromRegionIdx(random_index.at(index), &config), OSAL_RETURN_OK);
        config.memory_limit = 10 * 1024 * 1024; // 10MB
        EXPECT_EQ(R_OSAL_MmngrOpenFromRegionIdx(&config, random_index.at(index), &mmngr_hndl[index]), OSAL_RETURN_OK) << "Test09_021_058 failed";
        EXPECT_EQ(R_OSAL_MmngrAlloc(mmngr_hndl[index], size, alignment, &buffer_obj[index]), OSAL_RETURN_OK) << "Test09_021_058 failed";
        EXPECT_NE(buffer_obj[index], OSAL_MEMORY_BUFFER_HANDLE_INVALID) << "Test09_021_058 failed";
        EXPECT_EQ(R_OSAL_MmngrGetHwAddr(buffer_obj[index], 2, &hw_addr[index]), OSAL_RETURN_OK) << "Test09_021_058 failed";
    }

    printf("Show HW address in each regions \n");
    for (auto index = 0; index < TEST_NUM_OF_MEMORY_REGION; index++)
    {
        printf("Region %ld: 0x%x\n", random_index.at(index), hw_addr[index]);
    }

    for (auto index = 0; index < TEST_NUM_OF_MEMORY_REGION; index++)
    {
        // Deallocate buffer and close device
        EXPECT_EQ(R_OSAL_MmngrDealloc(mmngr_hndl[index], buffer_obj[index]), OSAL_RETURN_OK) << "Test09_021_058 failed";
        EXPECT_EQ(R_OSAL_MmngrClose(mmngr_hndl[index]), OSAL_RETURN_OK) << "Test09_021_058 failed";
    }
}
// [MmngrOpenFromRegionIdx_TC_09_021_058]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrGetOsalMaxConfigFromRegionIdx_TC_09_022_001 MemoryApiTest.MmngrGetOsalMaxConfigFromRegionIdx_TC_09_022_001
 * @subsection MmngrGetOsalMaxConfigFromRegionIdx_TC_09_022_001_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrGetOsalMaxConfigFromRegionIdx_TC_09_022_001_tci Test Case ID
 * MmngrGetOsalMaxConfigFromRegionIdx_S0_N_TC_09_022_001
 * @subsection MmngrGetOsalMaxConfigFromRegionIdx_TC_09_022_001_rr Related Requirement(s)
 * \#356350
 * @subsection MmngrGetOsalMaxConfigFromRegionIdx_TC_09_022_001_pp Prerequisite/Precondition
 * OSAL is initialized.
 * @subsection MmngrGetOsalMaxConfigFromRegionIdx_TC_09_022_001_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrGetOsalMaxConfigFromRegionIdx with normal condition for all region indexes.
 * - Test09_022_001: with all valid parameters.
 * @subsection MmngrGetOsalMaxConfigFromRegionIdx_TC_09_022_001_tpts Test Procedure/Test Steps
 * -# For each region index:
 *  - Call R_OSAL_MmngrGetOsalMaxConfigFromRegionIdx with all valid parameters.
 * @subsection MmngrGetOsalMaxConfigFromRegionIdx_TC_09_022_001_ereb Expected Result/Behavior
 * -# Expected result for all region indexes is as below:
 *  - The return of R_OSAL_MmngrGetOsalMaxConfigFromRegionIdx is OSAL_RETURN_OK and the return config is as bellow:
 *      - config.max_allowed_allocations is less than or equal to OSAL_MEMORY_MANAGER_CFG_UNLIMITED.
 *      - config.max_allowed_allocations is bigger than or equal to 1.
 *      - config.max_registered_monitors_cbs is less than or equal to OSAL_MEMORY_MANAGER_CFG_UNLIMITED.
 *      - config.max_registered_monitors_cbs is bigger than or equal to 0.
 *      - config.memory_limit is less than or equal to OSAL_MEMORY_MANAGER_CFG_UNLIMITED.
 *      - config.memory_limit is bigger than or equal to 4KB.
 *      - config.mode is not OSAL_MMNGR_ALLOC_MODE_INVALID
 * @subsection MmngrGetOsalMaxConfigFromRegionIdx_TC_09_022_001_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrGetOsalMaxConfigFromRegionIdx_TC_09_022_001
 */
// [MmngrGetOsalMaxConfigFromRegionIdx_TC_09_022_001]
TEST_F(MemoryApiTest, MmngrGetOsalMaxConfigFromRegionIdx_TC_09_022_001)
{
    for (auto index = 0; index < TEST_NUM_OF_MEMORY_REGION; index++)
    {
        // Test09_022_001
        // @brief: normal case: config is not NULL
        EXPECT_EQ(R_OSAL_MmngrGetOsalMaxConfigFromRegionIdx(index, &config), OSAL_RETURN_OK) << "Test09_022_001 failed";
        EXPECT_LE(config.max_allowed_allocations,OSAL_MEMORY_MANAGER_CFG_UNLIMITED) << "Test09_022_001 failed";
        EXPECT_GE(config.max_allowed_allocations,1) << "Test09_022_001 failed";
        EXPECT_LE(config.max_registered_monitors_cbs, OSAL_MEMORY_MANAGER_CFG_UNLIMITED) << "Test09_022_001 failed";
        EXPECT_GE(config.max_registered_monitors_cbs, 0) << "Test09_022_001 failed";
        EXPECT_LE(config.memory_limit, OSAL_MEMORY_MANAGER_CFG_UNLIMITED) << "Test09_022_001 failed";
        EXPECT_GE(config.memory_limit, (4 * 1024)) << "Test09_022_001 failed";
        EXPECT_NE(config.mode,OSAL_MMNGR_ALLOC_MODE_INVALID) << "Test09_022_001 failed";
    }
}
// [MmngrGetOsalMaxConfigFromRegionIdx_TC_09_022_001]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrGetOsalMaxConfigFromRegionIdx_TC_09_022_002 MemoryApiTest.MmngrGetOsalMaxConfigFromRegionIdx_TC_09_022_002
 * @subsection MmngrGetOsalMaxConfigFromRegionIdx_TC_09_022_002_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrGetOsalMaxConfigFromRegionIdx_TC_09_022_002_tci Test Case ID
 * MmngrGetOsalMaxConfigFromRegionIdx_S0_A_TC_09_022_002
 * @subsection MmngrGetOsalMaxConfigFromRegionIdx_TC_09_022_002_rr Related Requirement(s)
 * \#356350
 * @subsection MmngrGetOsalMaxConfigFromRegionIdx_TC_09_022_002_pp Prerequisite/Precondition
 * OSAL is initialized.
 * @subsection MmngrGetOsalMaxConfigFromRegionIdx_TC_09_022_002_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrGetOsalMaxConfigFromRegionIdx with abnormal condition for all region indexes.
 * - Test09_022_002: config is NULL
 * @subsection MmngrGetOsalMaxConfigFromRegionIdx_TC_09_022_002_tpts Test Procedure/Test Steps
 * -# For each region index:
 *  - Call R_OSAL_MmngrGetOsalMaxConfigFromRegionIdx with p_config is NULL.
 * @subsection MmngrGetOsalMaxConfigFromRegionIdx_TC_09_022_002_ereb Expected Result/Behavior
 * -# Expected result for all region indexes is as below:
 *  - The return value of R_OSAL_MmngrGetOsalMaxConfigFromRegionIdx is OSAL_RETURN_PAR.
 * @subsection MmngrGetOsalMaxConfigFromRegionIdx_TC_09_022_002_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrGetOsalMaxConfigFromRegionIdx_TC_09_022_002
 */
// [MmngrGetOsalMaxConfigFromRegionIdx_TC_09_022_002]
TEST_F(MemoryApiTest, MmngrGetOsalMaxConfigFromRegionIdx_TC_09_022_002)
{
    st_osal_mmngr_config_t* p_config = NULL;

    for (auto index = 0; index < TEST_NUM_OF_MEMORY_REGION; index++)
    {
        // Test09_022_002
        // @brief: abnormal case: config is NULL
        EXPECT_EQ(R_OSAL_MmngrGetOsalMaxConfigFromRegionIdx(index, p_config), OSAL_RETURN_PAR) << "Test09_022_002 failed";
    }
}
// [MmngrGetOsalMaxConfigFromRegionIdx_TC_09_022_002]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrGetOsalMaxConfigFromRegionIdx_TC_09_022_003 MemoryApiTest.MmngrGetOsalMaxConfigFromRegionIdx_TC_09_022_003
 * @subsection MmngrGetOsalMaxConfigFromRegionIdx_TC_09_022_003_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrGetOsalMaxConfigFromRegionIdx_TC_09_022_003_tci Test Case ID
 * MmngrGetOsalMaxConfigFromRegionIdx_S1_N_TC_09_022_003
 * @subsection MmngrGetOsalMaxConfigFromRegionIdx_TC_09_022_003_rr Related Requirement(s)
 * \#356350
 * @subsection MmngrGetOsalMaxConfigFromRegionIdx_TC_09_022_003_pp Prerequisite/Precondition
 * OSAL is initialized.
 * @subsection MmngrGetOsalMaxConfigFromRegionIdx_TC_09_022_003_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrGetOsalMaxConfigFromRegionIdx with normal condition for all region indexes.
 * - Test09_022_003: confirm the max config returned from R_OSAL_MmngrGetOsalMaxConfigFromRegionIdx can be used in R_OSAL_MmngrOpenFromRegionIdx.
 * @subsection MmngrGetOsalMaxConfigFromRegionIdx_TC_09_022_003_tpts Test Procedure/Test Steps
 * -# For each region index:
 *  - Call R_OSAL_MmngrGetOsalMaxConfigFromRegionIdx with all valid parameters.
 *  - Call R_OSAL_MmngrOpenFromRegionIdx with the returned config from R_OSAL_MmngrGetOsalMaxConfigFromRegionIdx.
 *  - Call R_OSAL_MmngrClose to close the handle.
 * @subsection MmngrGetOsalMaxConfigFromRegionIdx_TC_09_022_003_ereb Expected Result/Behavior
 * -# Expected result for all region indexes is as below:
 *  - The return value of R_OSAL_MmngrGetOsalMaxConfigFromRegionIdx is OSAL_RETURN_OK.
 *  - The return value of R_OSAL_MmngrOpenFromRegionIdx is OSAL_RETURN_OK. <br>
 * The return handle is not OSAL_MEMORY_MANAGER_HANDLE_INVALID.
 *  - The return value of R_OSAL_MmngrClose is OSAL_RETURN_OK.
 * @subsection MmngrGetOsalMaxConfigFromRegionIdx_TC_09_022_003_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrGetOsalMaxConfigFromRegionIdx_TC_09_022_003
 */
// [MmngrGetOsalMaxConfigFromRegionIdx_TC_09_022_003]
TEST_F(MemoryApiTest, MmngrGetOsalMaxConfigFromRegionIdx_TC_09_022_003)
{
    for (auto index = 0; index < TEST_NUM_OF_MEMORY_REGION; index++)
    {
        // Test09_022_003
        // @brief: normal case: Confirm the returned max config can be used in R_OSAL_MmngrOpenFromRegionIdx function
        EXPECT_EQ(R_OSAL_MmngrGetOsalMaxConfigFromRegionIdx(index, &config), OSAL_RETURN_OK) << "Test09_022_003 failed";
        EXPECT_EQ(R_OSAL_MmngrOpenFromRegionIdx(&config, index, &hndl_mmngr), OSAL_RETURN_OK) << "Test09_022_003 failed";
        EXPECT_NE(hndl_mmngr, OSAL_MEMORY_MANAGER_HANDLE_INVALID) << "Test09_022_003 failed";
        EXPECT_EQ(R_OSAL_MmngrClose(hndl_mmngr), OSAL_RETURN_OK) << "Test09_022_003 failed";
    }
}
// [MmngrGetOsalMaxConfigFromRegionIdx_TC_09_022_003]

/**
 * @page MM_API Memory API Test
 * @section MemoryApiTest_MmngrGetOsalMaxConfigFromRegionIdx_TC_09_022_004 MemoryApiTest.MmngrGetOsalMaxConfigFromRegionIdx_TC_09_022_004
 * @subsection MmngrGetOsalMaxConfigFromRegionIdx_TC_09_022_004_tsi Test Suite ID
 * MemoryApiTest
 * @subsection MmngrGetOsalMaxConfigFromRegionIdx_TC_09_022_004_tci Test Case ID
 * MmngrGetOsalMaxConfigFromRegionIdx_S0_BA_TC_09_022_004
 * @subsection MmngrGetOsalMaxConfigFromRegionIdx_TC_09_022_004_rr Related Requirement(s)
 * \#356350
 * @subsection MmngrGetOsalMaxConfigFromRegionIdx_TC_09_022_004_pp Prerequisite/Precondition
 * OSAL is initialized.
 * @subsection MmngrGetOsalMaxConfigFromRegionIdx_TC_09_022_004_tcs Test Case Summary
 * This test shall verify the functionality of the R_OSAL_MmngrGetOsalMaxConfigFromRegionIdx with abnormal condition.
 * - Test09_022_004: region index is out of range
 * @subsection MmngrGetOsalMaxConfigFromRegionIdx_TC_09_022_004_tpts Test Procedure/Test Steps
 * -# Call R_OSAL_MmngrGetOsalMaxConfigFromRegionIdx with region index is TEST_NUM_OF_MEMORY_REGION.
 * @subsection MmngrGetOsalMaxConfigFromRegionIdx_TC_09_022_004_ereb Expected Result/Behavior
 * -# The return value of R_OSAL_MmngrGetOsalMaxConfigFromRegionIdx is TEST_REGION_IDX_OUT_RANGE_EXPECT.
 * @subsection MmngrGetOsalMaxConfigFromRegionIdx_TC_09_022_004_testcase Test Case Example
 * @snippet test_memory_api_basic.cpp MmngrGetOsalMaxConfigFromRegionIdx_TC_09_022_004
 */
// [MmngrGetOsalMaxConfigFromRegionIdx_TC_09_022_004]
TEST_F(MemoryApiTest, MmngrGetOsalMaxConfigFromRegionIdx_TC_09_022_004)
{
    osal_memory_region_idx_t region_idx = TEST_NUM_OF_MEMORY_REGION;

    // Test09_022_004
    // @brief: abnormal case: region_idx is out of range
    EXPECT_EQ(R_OSAL_MmngrGetOsalMaxConfigFromRegionIdx(region_idx, &config), TEST_REGION_IDX_OUT_RANGE_EXPECT) << "Test09_022_004 failed";
}
// [MmngrGetOsalMaxConfigFromRegionIdx_TC_09_022_004]
#endif
#endif
