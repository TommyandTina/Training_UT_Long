; This is the comment
[PATH]
; TODO: Current support is just 1 excel file.
; Parent directory/ Base folder
; Ex: ${Workspace}/ut_framework
InputPath               = "C:\\Users\\longduong\\Desktop\\ss2_imp_xos3\\trunk\\xOS3.0_IMPPAPDSP_common\\06_Unit_Test\\01_Test_Specification\\08_RDL\\Interface\\Interface_Test_Spec.xlsx"
OutputPath            = "C:\\Users\\longduong\\Desktop\\interface"
[TARGET_OF_TESTING]
; Finding sheet contain test data (depend on prj)
TargetModule          = 'Interface'
FindByPrefix          = False
Prefix                = []
SheetNameContainData  = [	
					'GetDeviceVendorID',
					'GetDeviceID',
					'GetNumberOfMultipliers',
					'GetDataTCMMemorySize',
					'GetWeightsMemorySize',
					'GetCountersValue',
					'ResetCounter',
					'GetStringErrorByID',
					'quantize',
					'toCDNNDataFormat',
					'setSupportedDataType',
					'GetDeviceName',
					'toString_coretype',
					'toString_addresstype',
					'toString_direction',
					'toString_targetruntime',
					'toString_hardwareversion',
					'GetDeviceQuantizationMode',
					'canAccessMemory',
					'getTaskMemType',
					'CreateOperation',
					'GetDeviceRunningMode',
					'waitForCoreAvailability',
					'wakeupCore',
					'waitCore',
					'waitOperationCompletion',
					'imd_memalign',
					'imd_free',
					'deserializeCoreInfo',
					'deserializeCLPatchingOffsetInfo',
					'deserializeWaitInfo',
					'toString_coretype_2',
					'toString_addresstype_2',
					'toString_direction_2',
					'deserializeCLPatchingCoreInfo',
					'deserializeRuntimeInfo',
					'deserializeNetworkData_AB',
					'deserializeNetworkData',
					'releaseDeserializedNetworkData',
					'Constructor_cnnip_device',
					'ReleaseOperation',
					'IsHWTask',
					'Sync',
					'getCLStartAddress',
					'CL_Patching',
					'deserialize_1',
					'deserialize_2',
					'char_assignFromBuffer',
					'CLPatchingCoreInfo_assignFromBu',
					'CLPatchingOffsetInfo_assignFrom',
					'CoreInfo_assignFromBuffer',
					'RuntimeInfo_assignFromBuffer',
					'WaitInfo_assignFromBuffer',
				
						]

; Define type is function pointer
[DATA_TYPE]
ListPointerType 		= [
							'CoreInfo',
							'CLPatchingOffsetInfo',
							'CLPatchingCoreInfo',
							'RuntimeInfo',
							'WaitInfo',
							'RCarCNNIP_NetworkData_AB',
							'SerializedData',
							; 'uint32_t',

						]

[SPECIAL_STRING]
NOT_NULL_VALUE 		= 'not null'
NULL_VALUE 			= 'null'
NOT_STUB_VALUE 		= 'not stub'
NOT_CHANGE_VALUE    = 'not change'

###################################################################################################
################################## Test code configuration ########################################
###################################################################################################
[OUTPUT_GENERATION_CONTROL]
;Flag EnableImportData is enable, it will import data from INIT_ADDR_DATA, user need to create key INIT_ADDR_DATA for inialized data.
;Flag EnableTestCode is enable when the user want to generate Test code
;Flag EnableTestData is enable when the user want to generate Test data
EnableImportData = True
EnableTestCode = True
EnableTestData = True
EnableFileGenerate = True

; Key INIT_ADDR_DATA to identify input data from file config if module is used by Semi auto tool.
INIT_ADDR_DATA = {
	"GetNumberOfMultipliers check point 1"        			: [	"get_number_of_multipliers_check_point_1"	        	, ["stJsonParams"] ],    
	"init json params"        			                    : [	"init_global_json_param"	        	, ["stJsonParams"] ],  
	"init operation type shape"        			            : [	"init_operation_type_shape"	        	, ["mlOperationsParameters"] ],  
	"init operation type number"        			        : [	"init_operation_type_number"	        	, ["mlOperationsParameters"] ],
	"init operation type pooling"        			        : [	"init_operation_type_pooling"	        	, ["mlOperationsParameters"] ],
	"init operation type local channel"        			    : [	"init_operation_type_local_channel"	        	, ["mlOperationsParameters"] ],
	"init operation type cross channel"        			    : [	"init_operation_type_cross_channel"	        	, ["mlOperationsParameters"] ],
	"init operation type fully connected"        			: [	"init_operation_type_fully_connected"	        	, ["mlOperationsParameters"] ],
	"init operation type transform"        			        : [	"init_operation_type_transform"	        	, ["mlOperationsParameters"] ],
	"init operation type upscale"        			        : [	"init_operation_type_upscale"	        	, ["mlOperationsParameters"] ],
	"init operation type conv"        			            : [	"init_operation_type_conv"	        	, ["mlOperationsParameters"] ],
	"init operation type eltwise"        			        : [	"init_operation_type_eltwise"	        	, ["mlOperationsParameters"] ],
	"init operation type concat"        			        : [	"init_operation_type_concat"	        	, ["mlOperationsParameters"] ],
	"init operation type slice"        			            : [	"init_operation_type_slice"	        	, ["mlOperationsParameters"] ],
	"init networkData_AB 0"        							: [	"init_networkDaTa_AB_0"	        	, ["networkData_AB"] ],
	"init networkData_AB 1"        							: [	"init_networkDaTa_AB_1"	        	, ["networkData_AB"] ],
	"init networkData_AB 2"        							: [	"init_networkDaTa_AB_2"	        	, ["networkData_AB"] ],
	"init networkData_AB 3"        							: [	"init_networkDaTa_AB_3"	        	, ["networkData_AB"] ],
	"init cnnip device"        								: [	"init_cnnip_device"	        	, ["device"] ],

	"init deserializeNetworkData 0"        					: [	"init_deserializeNetworkData_0"	        	, ["networkData"] ],
	"init deserializeNetworkData 1"        					: [	"init_deserializeNetworkData_1"	        	, ["networkData"] ],
	"init deserializeNetworkData 2"        					: [	"init_deserializeNetworkData_2"	        	, ["networkData"] ],
	"init deserializeNetworkData 3"        					: [	"init_deserializeNetworkData_3"	        	, ["networkData"] ],
	"init deserializeNetworkData 4"        					: [	"init_deserializeNetworkData_4"	        	, ["networkData"] ],
	"init deserializeNetworkData 5"        					: [	"init_deserializeNetworkData_5"	        	, ["networkData"] ],

	"init mpvNetworkData_AB CL 1"                			: [ "init_mpvNetworkData_AB_CL_1"               , ["mpvNetworkData_AB"] ],
    "init mpvNetworkData_AB CL 2"                			: [ "init_mpvNetworkData_AB_CL_2"               , ["mpvNetworkData_AB"] ],
    "init mpvNetworkData_AB CL 3"                 			: [ "init_mpvNetworkData_AB_CL_3"               , ["mpvNetworkData_AB"] ],
    "init mpvNetworkData_AB CL 4"                 			: [ "init_mpvNetworkData_AB_CL_4"               , ["mpvNetworkData_AB"], ["0", "stub_addrType_semiCLPatching4"], ["0", "stub_transferDir_semiCLPatching4"] ],
	"init mpvFeatureMapDataHeadPtr CL 1"          			: [   "init_mpvFeatureMapDataHeadPtr_CL_1"        , ["mpvFeatureMapDataHeadPtr"] ],

	"init data for buffer"        							: [	"init_data_for_assign_from_buffer_0"	        	, ["mpvRemainHeadPtr"] ],
	"init data for buffer 1"        						: [	"init_data_for_assign_from_buffer_1"	        	, ["mpvRemainHeadPtr"] ],

	"init mpvNetworkData_ABDataHeadPtr"        				: [	"init_mpvNetworkData_ABDataHeadPtr"	        	, ["mpvNetworkData_ABDataHeadPtr"] ],
	"init mpvFeatureMapDataHeadPtr"        			  	    : [	"init_mpvFeatureMapDataHeadPtr"	        	, ["mpvFeatureMapDataHeadPtr"] ],
	"init mpvRemainHeadPtr"        			          	    : [	"init_mpvRemainHeadPtr"	        	, ["mpvRemainHeadPtr"] ],






	}

[VALIDATOR]
;Key TABLE_VALIDATOR to identify marco Validator following type expected value in PCL.
;For a example, RCvDrvErrorCode is a type in PCL Driver, and convert to marco TEST_VALIDATOR_RETCODE
;With this marco TEST_VALIDATOR_RETCODE, it needs to implement function to check marco in Framework Tool.
TABLE_VALIDATOR_BY_TYPE = {
	; "st_papdrv_version_t"			: "TEST_VALIDATOR_ADDR",
	; "e_papdrv_return_t" 		    : "TEST_VALIDATOR_PAPDRV_RETCODE",
	; "e_papdrv_state_type_t" 	    : "TEST_VALIDATOR_PAPDRV_STATE",
	; "papdrv_ctrl_handle_t"			: "TEST_VALIDATOR_ADDR",
	; "osal_thread_handle_t"			: "TEST_VALIDATOR_ADDR",
	; "osal_mq_handle_t"				: "TEST_VALIDATOR_ADDR",
	; "osal_milli_sec_t"				: "TEST_VALIDATOR_I32VALUE",
	; "osal_mutex_handle_t"			: "TEST_VALIDATOR_ADDR",
	; "osal_msg_handle_t"				: "TEST_VALIDATOR_ADDR",
	; "osal_thread_handle_t"			: "TEST_VALIDATOR_ADDR",
	; "bool"							: "TEST_VALIDATOR_BOOLVALUE",
	; "int32_t"						: "TEST_VALIDATOR_I32VALUE",
	; "int64_t"						: "TEST_VALIDATOR_I64VALUE",
	; "uint32_t"						: "TEST_VALIDATOR_U32VALUE",
	; "uint64_t"						: "TEST_VALIDATOR_U64VALUE",
	; "size_t"						: "TEST_VALIDATOR_I32VALUE",
	; "char" : "TEST_VALIDATOR_STRING",
    }
TABLE_VALIDATOR_BY_NAME = {
	; "state"          : "TEST_VALIDATOR_PAPDRV_STATE",
    }

[COMPARE]
LogPath = ''
Revision = ''
;Please fill your test report sheet
TestReportSheet = "Test_Report"