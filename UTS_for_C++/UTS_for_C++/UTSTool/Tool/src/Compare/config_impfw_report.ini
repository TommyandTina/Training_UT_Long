; This is the comment
[PATH]
; TODO: Current support is just 1 excel file.
InputPath				= "C:\\Users\\tructrungnguyen\\Desktop\\IMPFW_V3X_X20QL_D_Unit_Test_Specification_and_Report_1.xlsx"

; Parent directory/ Base folder
; Ex: ${Workspace}/ut_framework
OutputPath            = "D:\\Prj\\05_IMR\\a050b_master\\ut_framework"
[TARGET_OF_TESTING]
; Finding sheet contain test data (depend on prj)
TargetModule          = "impfw"
FindByPrefix          = True
Prefix                = ['R_IMPFW','impfw', "ut_"]
SheetNameContainData  = [\
						;'impfw_mainctl_chk_attr_irq',\       
						;'impfw_mainctl_chk_attr_pairirq',\
						;'impfw_mainctl_chk_init_safety',\
						;'impfw_mainctl_chk_rtt_info',\
						;'impfw_mainctl_chk_attr_reqtype',\
						;'impfw_hwdep_chk_imr_core_num',\
						;'impfw_hwdep_chk_instance',\
						;'impfw_mainctl_chk_attr_pairrtt',\
						;'R_IMPFW_InitSafety',\ 
						;'R_IMPFW_AttrSetRtt',\ 
						;'R_IMPFW_GetIoDeviceInfo',\ 
						;'R_IMPFW_IoDeviceRead32',\ 
						;'R_IMPFW_IoDeviceWrite32',\ 
						;'R_IMPFW_IoDeviceRequired',\ 
						;'impfw_api_chk_interrupt_allmask',\ 
						;'impfw_api_chk_init_safetydata',\ 
						;'impfw_mainctl_attr_setrtt',\ 
						;'impfw_mainctl_chk_exec_attrinfo',\  
						;'impfw_mainctl_task_execute_cl',\ 
						;'impfw_mainctl_task_execute_req',\ 
						;'impfw_mainctl_task_enqueue_req',\ 
						;'impfw_mainctl_task_callback',\ 
						;'impfw_mainctl_task_resume',\ 
						;'impfw_mainctl_task_init_safety',\ 
						;'impfw_mainctl_task_cb_common',\ 
						;'impfw_mainctl_task_cb_int',\ 
						;'impfw_mainctl_task_get_pair_req',\ 
						;'impfw_mainctl_task_ctrl_ready',\ 
						]

; Define type is function pointer
[DATA_TYPE]
ListPointerType 		= [
							'impdrv_ctrl_handle_t','p_impfw_drvwrap_cb_t', \
							'impfw_attr_handle_t', \
							'osal_mq_handle_t','osal_device_handle_t', \
							'osal_mutex_handle_t', 'osal_thread_handle_t', \
							'p_impfw_thread_func_t','p_impfw_cbfunc_fatal_t', \
							'p_impfw_mainctl_cb_t','impfw_ctrl_handle_t', 'p_impfw_cbfunc_t', \
						]

[SPECIAL_STRING]
NOT_NULL_VALUE 		= "not null"
NULL_VALUE 			= "null"
NOT_STUB_VALUE 		= "not stub"
NOT_CHANGE_VALUE    = "not change"

###################################################################################################
################################## Test code configuration ########################################
###################################################################################################
[OUTPUT_GENERATION_CONTROL]
;Flag EnableImportData is enable, it will import data from INIT_ADDR_DATA, user need to create key INIT_ADDR_DATA for inialized data.
;Flag EnableTestCode is enable when the user want to generate Test code
;Flag EnableTestData is enable when the user want to generate Test data
EnableImportData = True
EnableTestCode = True
EnableTestData = True

; Key INIT_ADDR_DATA to identify input data from file config if module is used by Semi auto tool.
INIT_ADDR_DATA = {
	"init attribute"        : [	"init_R_IMPFW_Attribute"	        , ["attrhandle"], [ "0", "g_attr_core_info"] ],
	"nullsafety attribute"  : [	"nullsafety_R_IMPFW_Attribute"	        , ["attrhandle"], [ "0", "g_attr_core_info"] ],  
	"init cbargs"        : [	"init_impfw_mainctl_drv_callback"	        , ["p_cbargs"] ],	
	"seq attrstate"         : [	"seq_R_IMPFW_Attribute"	        , 	["attrhandle"], [ "0", "g_attr_core_info"]	],
	"core state wait"       : [	"wait_R_IMPFW_Attribute"	        , 	["attrhandle"], [ "0", "g_attr_core_info"]	],
	"core state execute"    : [	"execute_R_IMPFW_Attribute"	        , 	["attrhandle"], [ "0", "g_attr_core_info"]	],
	"core state int"        : [	"int_R_IMPFW_Attribute"	        , 	["attrhandle"], [ "0", "g_attr_core_info"]	],
	"attr state uninit"     : [	"attr_uninit_R_IMPFW_Attribute"	        , 	["attrhandle"], [ "0", "g_attr_core_info"]	],
	"attr state using"      : [	"attr_using_R_IMPFW_Attribute"	        , 	["attrhandle"], [ "0", "g_attr_core_info"]	],
	"init pair req"    		: [ "init_impfw_quectl_get_pair_request"   ,   ["p_quectl_work"] ],
	"init next req"    		: [ "init_impfw_quectl_get_next_request"   ,   ["p_quectl_work"],[ "0", "g_next_priority"], [ "0", "g_head_priority"], [ "0", "g_que_cnt"], [ "0", "g_p_target_req"] ],
	"init enqueue"    		: [ "init_impfw_quectl_enqueue"   ,   ["p_quectl_work"],[ "0", "g_p_free"], [ "0", "g_p_head"], [ "0", "g_p_tail"], [ "0", "g_que_cnt"] ],
	"init task main work execute req" 	: [ "init_task_execute_req" 	, ["p_main_work"]],
	"init task main work enqueue req" 	: [ "init_task_main_work_enqueue_req" 	, ["p_main_work"]],
	"init task exec param enqueue req" 	: [ "init_task_exec_param_enqueue_req" 	, ["p_exec_param"]],
	"null attrhandle" 	: [ "null_attrhandle" 	, ["p_exec_param"]],
	"null p callback func" 	: [ "null_p_callback_func" 	, ["p_exec_param"]],
	"invalid core type" 	: [ "invalid_core_type" 	, ["p_exec_param"]],
	"invalid core num" 	: [ "invalid_core_num" 	, ["p_exec_param"]],
	"null free request element"  : [ "null_free_request_element" 	, ["p_main_work"]],
	"init task callback"  : [ "init_task_callback" 	, ["p_main_work"]],
	"init cl next req for mainwork" 	: [ "init_next_request_mainctl_work_cl" 	, ["p_main_work"]],
	"uninit next req for mainwork" 		: [ "uninit_next_request_mainctl_work" 		, ["p_main_work"]],
	"init safety mainwork" 	: [ "init_safety_mainctl_work" 	, ["p_main_work"]],
	
    }

[VALIDATOR]
;Key TABLE_VALIDATOR to identify marco Validator following type expected value in PCL.
;For a example, RCvDrvErrorCode is a type in PCL Driver, and convert to marco TEST_VALIDATOR_RETCODE
;With this marco TEST_VALIDATOR_RETCODE, it needs to implement function to check marco in Framework Tool.
TABLE_VALIDATOR_BY_TYPE = {
	"RCvDrvErrorCode"       : "TEST_VALIDATOR_RETCODE",
	"RCV_DEV_STATE"         : "TEST_VALIDATOR_STATE",
	"RCVDRV_CB_RET"         : "TEST_VALIDATOR_RETCODE",
	"e_impfw_api_retcode_t" : "TEST_VALIDATOR_IMPFW_RETCODE",
	"e_impfw_core_state_t" : "TEST_VALIDATOR_STATE",
	"e_impfw_attr_state_type_t" : "TEST_VALIDATOR_ATTR_STATE",
    }

TABLE_VALIDATOR_BY_NAME = {
    }

[COMPARE]
TestReportSheet = "Test_Report"
LogPath = "C:\\Users\\tructrungnguyen\\Desktop\\01_Framework\\log_linux_v3h2.txt"
Revision = "b6a22b_v3h2_linux"