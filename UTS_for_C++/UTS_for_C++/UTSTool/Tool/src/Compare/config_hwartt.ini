; This is the comment
[PATH]
; TODO: Current support is just 1 excel file.
InputPath             = "C:\\Users\\tructrungnguyen\\Desktop\\HWARTT_V3X_X20QL_D_Unit_Test_Specification.xlsx"

; Parent directory/ Base folder
; Ex: ${Workspace}/ut_framework
OutputPath            = "C:\\Users\\tructrungnguyen\\Desktop\\Test"
[TARGET_OF_TESTING]
; Finding sheet contain test data (depend on prj)
;TargetModule          = "hwartt"
TargetModule          = "imprtt"
FindByPrefix          = True
Prefix                = ['R_HWARTT','hwartt']
SheetNameContainData  = [
							;'R_HWARTT_Init',\
							;'R_HWARTT_Execute',\
							;'R_HWARTT_Start',\
							;'R_HWARTT_Stop',\
							;'R_HWARTT_Quit',\
							;'R_HWARTT_GetState',\
							;'R_HWARTT_GetPmPolicy',\
							;'R_HWARTT_SetPmPolicy',\
							;'R_HWARTT_GetVersion',\
						    ;'R_HWARTT_SelfCheck',\
							;'hwartt_api_proc_get_policy',\
							;'hwartt_api_proc_set_policy',\
							;'hwartt_api_common_chk_fatal_cb',\
							;'hwartt_api_get_pm_policy_check',\
							;'hwartt_api_set_pm_policy_check',\
							;'hwartt_api_ctrl_handle_check',\
							;'hwartt_api_self_check_check',\
							;'hwartt_api_execute_check_arg',\
							;'hwartt_api_init_check_argument',\ 
							;'hwartt_api_proc_close',\
							;'hwartt_api_common_int_handle',\
							;'hwartt_api_proc_open',\
							;'hwartt_api_proc_rtt_stop',\
							;'hwartt_api_proc_rtt_start',\
							;'hwartt_api_proc_init_handle',\
							;'hwartt_api_common_self_chk_hnd',\
							;'hwartt_hwdep_strcomp',\
							;'hwartt_hwdep_get_device_info',\
							;'hwartt_osdep_get_policy',\
							;'hwartt_osdep_io_device_close',\
							;'hwartt_osdep_set_policy',\
							;'hwartt_osdep_set_required',\
							;'hwartt_osdep_set_reset',\
							;'hwartt_osdep_mem_barrier',\
							;'hwartt_osdep_io_device_open',\
							;'hwartt_fbist_set_handle',\
							;'hwartt_fbist_init',\
							;'hwartt_fbist_set_device_data',\
							;'hwartt_fbist_execute',\
							;'hwartt_fbist_deinit',\
							;'hwartt_fbist_cb_status',\
							;'hwartt_fbist_get_test_type',\
							;'hwartt_fbist_self_check_exe',\
							;'hwartt_fbist_gethandler',\
							;'hwartt_fbist_self_ck_mfi_read',\
							;'hwartt_fbist_self_ck_mfi_write',\
							;'hwartt_fbist_common_cb_func',\
							;'hwartt_fbist_inthandler_res0',\
							;'hwartt_fbist_inthandler_res1',\
							;'hwartt_fbist_inthandler_res2',\
							;'hwartt_fbist_inthandler_res3',\
							;'hwartt_fbist_inthandler_res4',\
							;'hwartt_fbist_inthandler_res5',\
							;'hwartt_fbist_inthandler_res6',\
							;'hwartt_fbist_inthandler_res7',\
							;'hwartt_fbist_inthandler_res8',\
							;'hwartt_fbist_inthandler_res9',\
							;'hwartt_fbist_inthandler_res10',\
							;'hwartt_fbist_inthandler_res11',\
							;'hwartt_fbist_inthandler_res12',\
							;'hwartt_fbist_inthandler_res13',\
							;'hwartt_fbist_inthandler_res14',\
							;'hwartt_fbist_inthandler_res15',\
							;'hwartt_fbist_inthandler_res16',\
							;'hwartt_fbist_inthandler_res17',\
							;'hwartt_fbist_inthandler_res18',\
							;'hwartt_fbist_inthandler_res19',\
							;'hwartt_fbist_inthandler_res20',\
							;'hwartt_fbist_inthandler_res21',\
							;'hwartt_fbist_inthandler_res22',\
							;'hwartt_fbist_inthandler_res23',\
							;'R_HWARTT_Init',\
							;'R_HWARTT_Stop',\
							;'R_HWARTT_Execute',\
							;'R_HWARTT_SetPmPolicy',\
							;'hwartt_api_proc_init_handle',\
							;'hwartt_api_proc_open',\
							;'hwartt_api_proc_close',\
							;'hwartt_api_proc_set_policy',\
							;'hwartt_api_common_chk_fatal_cb',\
							;'hwartt_hwdep_get_device_info',\
							;'hwartt_osdep_get_policy',\
							;'hwartt_osdep_io_device_open',\
							;'hwartt_osdep_io_device_close',\
							;'hwartt_fbist_set_device_data',\
							;'hwartt_api_proc_rtt_start',\
							;'hwartt_api_proc_rtt_stop',\
							;'hwartt_api_common_int_handle',\
						]

; Define type is function pointer
[DATA_TYPE]
ListPointerType 		= [
							'impdrv_ctrl_handle_t','p_impfw_drvwrap_cb_t', \
							'impfw_attr_handle_t', \
							'osal_mq_handle_t','osal_device_handle_t', \
							'osal_mutex_handle_t', 'osal_thread_handle_t', \
							'p_impfw_thread_func_t','p_impfw_cbfunc_fatal_t', \
							'p_impfw_mainctl_cb_t','impfw_ctrl_handle_t', 'p_impfw_cbfunc_t', \
							'hwartt_ctrl_handle_t','drvFbist_UserMfisWrite_t'\
							'osal_device_handle_t','drvFbist_UserMfisRead_t'\
							'drvFbist_CbFunc_t', \

						]

[SPECIAL_STRING]
NOT_NULL_VALUE 		= "not null"
NULL_VALUE 			= "null"
NOT_STUB_VALUE 		= "not stub"
NOT_CHANGE_VALUE    = "not change"

###################################################################################################
################################## Test code configuration ########################################
###################################################################################################
[OUTPUT_GENERATION_CONTROL]
;Flag EnableImportData is enable, it will import data from INIT_ADDR_DATA, user need to create key INIT_ADDR_DATA for inialized data.
;Flag EnableTestCode is enable when the user want to generate Test code
;Flag EnableTestData is enable when the user want to generate Test data
EnableImportData = True
EnableTestCode = True
EnableTestData = True
EnableFileGenerate = True

; Key INIT_ADDR_DATA to identify input data from file config if module is used by Semi auto tool.
INIT_ADDR_DATA = {
 'init_data'					: [ 'init_data_hwartt_ctrl_handle_t'			, ['handle']],
 'nextexe'					    : [ 'nextexe_hwartt_ctrl_handle_t'			    , ['handle']],
 'exetestnum'				    : [ 'exetestnum_hwartt_ctrl_handle_t'			, ['handle']],
 'fbistdatanum'				    : [ 'fbistdatanum_hwartt_ctrl_handle_t'			, ['handle']],
 'p_init_dat'					: ['p_init_dat_hwartt_ctrl_handle_t'			, ['p_handle']],
 'init_state'					: ['init_state_hwartt_ctrl_handle_t'			, ['handle']],
 'uninit_state'					: ['uninit_state_hwartt_ctrl_handle_t'			, ['handle']],
 'ready_state'					: ['ready_state_hwartt_ctrl_handle_t'			, ['handle']],
 'ready_init'					: ['ready_init_hwartt_ctrl_handle_t'			, ['handle']],
 'uninit_data'					: [ 'uninit_data_hwartt_ctrl_handle_t'			, ['handle']],
 'active_data'					: [ 'active_data_hwartt_ctrl_handle_t'			, ['handle']],
 'inactive_data'				: [ 'inactive_data_hwartt_ctrl_handle_t'		, ['handle']],
 'INIT_data'				    : [ 'INIT_data_hwartt_ctrl_handle_t'		    , ['handle']],
 'init_quit_data'				: [ 'init_quit_data_hwartt_ctrl_handle_t'		, ['handle']],
 'active'				        : [ 'active_hwartt_ctrl_handle_t'			    , ['handle']],
 'callbackfunc'				    : [ 'callbackfunc_hwartt_ctrl_handle_t'			, ['handle']],
 'fbistzero'				    : [ 'fbistzero_hwartt_ctrl_handle_t'		    , ['handle']],
 'devicenumzero'			    : [ 'devicenumzero_hwartt_ctrl_handle_t'		, ['handle']],
 'devicenumsix'				    : [ 'devicenumsix_hwartt_ctrl_handle_t'		, ['handle']],
 'pdeviceid'				    : [ 'pdeviceid_hwartt_ctrl_handle_t'			, ['handle']],
 'uninit'				    	: [ 'uninit_hwartt_ctrl_handle_t'				, ['handle']],
 'pdeviceidtwo'				    : [ 'pdeviceidtwo_hwartt_ctrl_handle_t'			, ['handle']],
 'ptestdata'				    : [ 'ptestdata_e_hwartt_test_t'					, ['p_test_data']],
 'fatal_cb'				    	: [ 'fatal_cb_hwartt_ctrl_handle_t'			, ['handle']],
 'fatal_cb1'				    : [ 'fatal_cb1_hwartt_ctrl_handle_t'			, ['handle']],
 'commoninit'					: [ 'commoninit_hwartt_ctrl_handle_t'			, ['handle']],
 'common'						: [ 'common_hwartt_ctrl_handle_t'				, ['handle']],
 'comm'							: [ 'comm_hwartt_ctrl_handle_t'				, ['handle']],
 'commoninithandle'				: [ 'commoninithandle_hwartt_ctrl_handle_t'			, ['handle']],
 'fbist_init'					: [ 'fbist_init_st_hwartt_fbist_device_t'       , ['p_fbist_device']],
 'pass_self_chk'				: ['pass_self_chk_semi_auto_func'		,  ['s_hwartthandle_selfchk']],
 'fail_self_chk'				: ['fail_self_chk_semi_auto_func'		,  ['s_hwartthandle_selfchk']],
 'self_chk'						: ['self_check_semi_auto_func'		,  ['s_hwartthandle']],
 'self_chk_fail'				: ['self_check_fail_semi_auto_func',  ['s_hwartthandle']],
 'self_chk_ready' 				: ['self_chk_ready_semi_auto_func',   ['s_hwartthandle_selfchk']],
 'callback_null'				: ['callback_null_handle_hwartt_ctrl_handle_t', ['handle']],
    }

[VALIDATOR]
;Key TABLE_VALIDATOR to identify marco Validator following type expected value in PCL.
;For a example, RCvDrvErrorCode is a type in PCL Driver, and convert to marco TEST_VALIDATOR_RETCODE
;With this marco TEST_VALIDATOR_RETCODE, it needs to implement function to check marco in Framework Tool.
TABLE_VALIDATOR_BY_TYPE = {
	"e_hwartt_return_t" : "TEST_VALIDATOR_HWARTT_RETCODE",
	"e_hwartt_state_t" : "TEST_VALIDATOR_HWARTT_STATE",
	"e_hwartt_test_t" : "TEST_VALIDATOR_HWARTT_TEST_TYPE",
	"bool" : "TEST_VALIDATOR_BOOLVALUE"
    }

TABLE_VALIDATOR_BY_NAME = {

    }

[COMPARE]
TestReportSheet = "Test_Report"
LogPath = "C:\\Users\\tructrungnguyen\\Desktop\\report hwartt\\hwartt_unit_test_on_target_v3m2-qnx-qcc-hil-release-v3m2.txt"
Revision = "v3m2q"