; This is the comment
[PATH]
; TODO: Current support is just 1 excel file.
;InputPath				= "C:\\Users\\tructrungnguyen\\Desktop\\update_cover.xlsx"
; Parent directory/ Base folder
; Ex: ${Workspace}/ut_framework
InputPath				= "C:\\Users\\tructrungnguyen\\Desktop\\IMPFW_V3X_X20QL_D_Unit_Test_Specification.xlsx"
;OutputPath            = "C:\\Users\\tructrungnguyen\\Downloads"
OutputPath            = "D:\\Rcar_Env\\rcar-env\\renesas\\middleware\\frameworks\\impfw\\test\\unit_test\\application\\ut_framework"
;OutputPath            = "C:\\Users\\tructrungnguyen\\Desktop\\Test"
[TARGET_OF_TESTING]
; Finding sheet contain test data (depend on prj)
TargetModule          = 'impfw'
FindByPrefix          = True
Prefix                = ['R_IMPFW', 'impfw', "ut_"]
;Prefix                = ['impfw_mainctl', "ut_mainctl"]
SheetNameContainData  = [	
							;'impfw_mainctl_task_set_rtt_flg',\
							;'impfw_api_chk_init_safetydata',\
							;'R_IMPFW_InitSafety',\
							;'impfw_mainctl_init_safety',\
							;'impfw_mainctl_chk_init_safety',\
							;'impfw_mainctl_task_stop_rtt',\
							;'impfw_hwdep_chk_support_selfchk',\
							;'impfw_mainctl_quit',\
							;
							;'impfw_mainctl_in_quit',\
							;'impfw_mainctl_task_start_rtt',\
							
							
						]

; Define type is function pointer
[DATA_TYPE]
ListPointerType 		= [
							'impdrv_ctrl_handle_t','p_impfw_drvwrap_cb_t', \
							'impfw_attr_handle_t', \
							'osal_mq_handle_t','osal_device_handle_t', \
							'osal_mutex_handle_t', 'osal_thread_handle_t', \
							'p_impfw_thread_func_t','p_impfw_cbfunc_fatal_t', \
							'p_impfw_mainctl_cb_t','impfw_ctrl_handle_t', 'p_impfw_cbfunc_t', \
							'p_impfw_selfchk_cb_t', \
							'p_impfw_rttwrap_cb_t', \
							'p_hwartt_cbfunc_fatal_t', \
							'p_hwartt_cbfunc_t', \
							'osal_memory_buffer_handle_t',\
							
						]

[SPECIAL_STRING]
NOT_NULL_VALUE 		= 'not null'
NULL_VALUE 			= 'null'
NOT_STUB_VALUE 		= 'not stub'
NOT_CHANGE_VALUE    = 'not change'

###################################################################################################
################################## Test code configuration ########################################
###################################################################################################
[OUTPUT_GENERATION_CONTROL]
;Flag EnableImportData is enable, it will import data from INIT_ADDR_DATA, user need to create key INIT_ADDR_DATA for inialized data.
;Flag EnableTestCode is enable when the user want to generate Test code
;Flag EnableTestData is enable when the user want to generate Test data
EnableImportData = True
EnableTestCode = True
EnableTestData = True
EnableFileGenerate = True

; Key INIT_ADDR_DATA to identify input data from file config if module is used by Semi auto tool.
INIT_ADDR_DATA = {
	"init attribute"        			: [	"init_R_IMPFW_Attribute"	        	, ["attrhandle"], [ "0", "g_attr_core_info"]    ],    
	"seq attrstate"         			: [	"seq_R_IMPFW_Attribute"	        		, ["attrhandle"], [ "0", "g_attr_core_info"]	],
	"core state wait"       			: [	"wait_R_IMPFW_Attribute"	        	, ["attrhandle"], [ "0", "g_attr_core_info"]	],
	"core state execute"    			: [	"execute_R_IMPFW_Attribute"	        	, ["attrhandle"], [ "0", "g_attr_core_info"]	],
	"core state int"        			: [	"int_R_IMPFW_Attribute"	        		, ["attrhandle"], [ "0", "g_attr_core_info"]	],
	"attr state uninit"     			: [	"attr_uninit_R_IMPFW_Attribute"	        , ["attrhandle"], [ "0", "g_attr_core_info"]	],
	"attr state using"      			: [	"attr_using_R_IMPFW_Attribute"	        , ["attrhandle"], [ "0", "g_attr_core_info"]	],
	"init attribute null mainctl work"  : [	"attr_null_p_mainctl_work"	        	, ["attrhandle"], [ "0", "g_attr_core_info"]	],
	"init attribute attr num zero"  	: [	"attr_num_R_IMPFW_Attribute"	        , ["attrhandle"], [ "0", "g_attr_core_info"]	],
	"config p attr info"  				: [	"config_p_attr_info_R_IMPFW_Attribute"	, ["attrhandle"], [ "0", "g_attr_core_info"]	],
	"config p attr info dsp"  			: [	"config_p_attr_info_dsp_R_IMPFW_Attribute"	, ["p_attrhandle"], ["0", "g_use_state"], [ "0", "g_attr_core_info"], ["0", "g_attr_num"]	],

	"init pair req"    					: [ "init_impfw_quectl_get_pair_request"  	, ["p_quectl_work"] ],
	"init next req"    					: [ "init_impfw_quectl_get_next_request"   	, ["p_quectl_work"],[ "0", "g_next_priority"], [ "0", "g_head_priority"], [ "0", "g_que_cnt"], [ "0", "g_p_target_req"] ],
	"init enqueue"    					: [ "init_impfw_quectl_enqueue"   			, ["p_quectl_work"],[ "0", "g_p_free"], [ "0", "g_p_head"], [ "0", "g_p_tail"], [ "0", "g_que_cnt"] ],
	"enqueue null p_free"    			: [ "init_enqueue_null_p_free"   			, ["p_quectl_work"],[ "0", "g_p_free"], [ "0", "g_p_head"], [ "0", "g_p_tail"], [ "0", "g_que_cnt"] ],
	"enqueue null p_free->next"    		: [ "init_enqueue_null_p_free_next"   		, ["p_quectl_work"],[ "0", "g_p_free"], [ "0", "g_p_head"], [ "0", "g_p_tail"], [ "0", "g_que_cnt"] ],
	
	"init cl next req for mainwork" 	: [ "init_next_request_mainctl_work_cl" 	, ["p_main_work", "p_cbargs"]],
	"init rtt next req for mainwork" 	: [ "init_next_request_mainctl_work_rtt" 	, ["p_main_work"]],
	"init err next req for mainwork" 	: [ "init_next_request_mainctl_work_err" 	, ["p_main_work"]],
	"uninit next req for mainwork" 		: [ "uninit_next_request_mainctl_work" 		, ["p_main_work"]],
	"init workspace for mainwork" 		: [ "init_workspace_mainctl_work_cl" 		, ["p_main_work"]],
	"null safety work for mainwork"		: [ "init_null_safety_mainctl_work"			, ["p_main_work"]],
	"null hwartt handle for mainwork"	: [ "init_null_hwartt_handle_mainctl_work"	, ["p_main_work"]],
	"init start_bit for mainwork" 		: [ "init_start_bit_mainctl_work_cl" 		, ["p_main_work"]],
	"null callback for mainwork"		: [ "null_callback_mainctl_work_cl"			, ["p_main_work"]],
	"null quectl for mainwork"			: [ "null_quectl_mainctl_work_cl"			, ["p_main_work"]],
	"execute next req for mainwork"		: [ "exec_next_request_mainctl_work_cl"		, ["p_main_work"]],
	"execute next req rtt for mainwork"	: [ "exec_next_request_mainctl_work_rtt"	, ["p_main_work"]],
	"init rtt start_core_bits" 			: [ "init_rtt_mainctl_start_core_bits"		, ["p_main_work"]],
	"init_cl_non_pair"					: [ "init_cl_non_pair"						, ["p_main_work"]],
	"init_rtt_non_pair"					: [ "init_rtt_non_pair"						, ["p_main_work"]],
	"init attr size"					: [ "init_attr_size_mainctl_work"			, ["p_main_work"]],
	"null next request"					: [ "init_null_next_request"				, ["p_main_work"]],
	"init start cl"						: [ "init_start_cl_sub"						, ["p_main_work"]],
	"init safety mainwork"				: [ "init_safety_mainctl_work"				, ["p_main_work"]],
	"init task execute req"				: [ "init_task_execute_req"					, ["p_main_work"]],
	"init p safety mainwork"			: [ "init_p_safety_mainctl_work"			, ["p_main_work"]],
	"drvwrap null safetywork"			: [ "null_drvwrap_safety_mainctl_work"		, ["p_main_work"]],
	"init task callback"				: [ "init_task_callback"					, ["p_main_work"]],
	"init p safety mainwork"			: [ "init_p_safety_mainctl_work"			, ["p_main_work"]],
	"true safety_other_invalid"			: [	"init_safety_other_invalid_true"		, ["p_main_work"]],
	"wait next req for mainwork"		: [ "wait_next_request_mainctl_work_cl"		, ["p_main_work"]],
	"int next req for mainwork"			: [ "int_next_request_mainctl_work_cl"		, ["p_main_work"]],
	"false rtt_start_flag"				: [ "init_false_rtt_start_flag"				, ["p_main_work"]],

	"init p drvwrap work"				: [ "init_p_drvwrap_work"					, ["p_drvwrap_work"]],
	"null p drvwrap work"				: [ "null_p_drvwrap_work"					, ["p_drvwrap_work"]],
	"null drvwrap callback"				: [ "null_drvwrap_mainctl_callback"			, ["p_drvwrap_work"]],
	"chk_data_num equal 0"				: [ "drvwrap_chk_data_num_zero"				, ["p_drvwrap_work"]],
	"chk_data_num negative"				: [ "drvwrap_chk_data_num_negative"			, ["p_drvwrap_work"]],
	"chk_data valid false"				: [ "drvwrap_array_chk_false"				, ["p_drvwrap_work"]],

	"init exec req"						: [ "init_exec_request"						, ["p_exec_req"]],
	"invalid exec num req"				: [ "invalid_exec_num_request"				, ["p_exec_req"]],
	"invalid curr req idx"				: [ "invalid_curr_request_idx"				, ["p_exec_req"]],
	"invalid req list"					: [ "invalid_request_list"					, ["p_exec_req"]],
	"invalid core type req"				: [ "invalid_core_type_request"				, ["p_exec_req"]],
	"init exec req curr idx"			: [ "init_exec_request_current_idx"			, ["p_exec_req"]],

	"init req info"						: [ "init_request_info"						, ["p_req_info"]],
	"null attrinfo for req info"		: [ "null_attrinfo_request_info"			, ["p_req_info"]],
	"null safety for req info"			: [ "null_safety_request_info"				, ["p_req_info"]],
	"init req info ocv"						: [ "init_request_info_ocv_core"						, ["p_req_info"]],
	"init exec req ocv"						: [ "init_exec_request_ocv_core"						, ["p_exec_req"]],
	"init task main work enqueue req" : [ "init_task_main_work_enqueue_req"		, ["p_main_work"]],
	"init attribute dsp"        			: [	"init_R_IMPFW_Attribute_Dsp"	        	, ["p_attrhandle"], ["0", "g_use_state"], [ "0", "g_attr_core_info"], ["0", "g_attr_num"]],   
	"dsp core state wait"        			: [	"wait_R_IMPFW_Attribute_Dsp"	        	, ["p_attrhandle"], ["0", "g_use_state"], [ "0", "g_attr_core_info"], ["0", "g_attr_num"]],
	"dsp core state execute"        		: [	"execute_R_IMPFW_Attribute_Dsp"	        	, ["p_attrhandle"], ["0", "g_use_state"], [ "0", "g_attr_core_info"], ["0", "g_attr_num"]],
	"dsp core state int"        			: [	"int_R_IMPFW_Attribute_Dsp"	        		, ["p_attrhandle"], ["0", "g_use_state"], [ "0", "g_attr_core_info"], ["0", "g_attr_num"]],
	"mutex handle"        			: [	"mutex_handle_dsp"	        		, ["p_attrhandle"], ["0", "g_use_state"], [ "0", "g_attr_core_info"], ["0", "g_attr_num"],["0", "mutex_type"]],
	"mutex timeout"        			: [	"mutex_timeout_dsp"	        		, ["p_attrhandle"], ["0", "g_use_state"], [ "0", "g_attr_core_info"], ["0", "g_attr_num"],["0", "mutex_type"]],
	"dsp work null"        			: [	"dsp_work_null"	        			, ["p_attrhandle"], ["0", "g_use_state"], [ "0", "g_attr_core_info"], ["0", "g_attr_num"]],
	"p safety not null dsp"        			: [	"p_safety_not_null_dsp"	        			, ["p_attrhandle"], ["0", "g_use_state"], [ "0", "g_attr_core_info"], ["0", "g_attr_num"]],	
	"p main work null"        			: [	"p_main_work_null"	        			, ["p_attrhandle"], ["0", "g_use_state"], [ "0", "g_attr_core_info"], ["0", "g_attr_num"]],
	"dsp core state uninit"        			: [	"uninit_core_state_dsp"	        			, ["p_attrhandle"], ["0", "g_use_state"], [ "0", "g_attr_core_info"], ["0", "g_attr_num"]],
	"attr info null"        			: [	"attr_info_null"	        			, ["p_attrhandle"], ["0", "g_use_state"], [ "0", "g_attr_core_info"], ["0", "g_attr_num"]],
	
	"init p safety"						: [ "init_p_safety"						, ["g_p_safety"]],
	"init rtt exemode false p safety"	: [ "init_p_safety_rrt_exemode_false"						, ["g_p_safety"]],
	"init p safety addr_phys not alignment"	: [ "init_p_safety_addr_phys_not_alignment"						, ["g_p_safety"]],
	}

[VALIDATOR]
;Key TABLE_VALIDATOR to identify marco Validator following type expected value in PCL.
;For a example, RCvDrvErrorCode is a type in PCL Driver, and convert to marco TEST_VALIDATOR_RETCODE
;With this marco TEST_VALIDATOR_RETCODE, it needs to implement function to check marco in Framework Tool.
TABLE_VALIDATOR_BY_TYPE = {
	"e_impfw_api_retcode_t" 		: "TEST_VALIDATOR_IMPFW_RETCODE",
	"e_impfw_core_state_t" 			: "TEST_VALIDATOR_STATE",
	"e_impfw_attr_state_type_t" 	: "TEST_VALIDATOR_ATTR_STATE",
	"e_impfw_req_private_type_t"	: "TEST_VALIDATOR_REQ_STATE",
	"e_impfw_drvwrap_mem_state_t"	: "TEST_VALIDATOR_DRV_MEM_STATE",
	"bool"							: "TEST_VALIDATOR_BOOLVALUE",
	"int32_t"						: "TEST_VALIDATOR_I32VALUE",
	"int64_t"						: "TEST_VALIDATOR_I64VALUE",
	"uint32_t"						: "TEST_VALIDATOR_U32VALUE",
	"uint64_t"						: "TEST_VALIDATOR_U64VALUE",
	"e_impfw_req_type_t"			: "TEST_VALIDATOR_REQUEST_TYPE",
	"e_impfw_core_type_t"			: "TEST_VALIDATOR_CORE_TYPE",
	"e_impfw_req_priority_t"		: "TEST_VALIDATOR_REQUEST_PRIORITY",
	"st_impfw_request_t"			: "TEST_VALIDATOR_ADDR",
	"p_impfw_cbfunc_t"				: "TEST_VALIDATOR_ADDR",
	"st_impfw_attrinfo_t"			: "TEST_VALIDATOR_ADDR",
	"osal_thread_handle_t"			: "TEST_VALIDATOR_ADDR",
	"osal_mq_handle_t"				: "TEST_VALIDATOR_ADDR",
	"osal_milli_sec_t"				: "TEST_VALIDATOR_I32VALUE",
	"size_t"						: "TEST_VALIDATOR_I32VALUE",
	"e_impfw_callback_reason_t"		: "TEST_VALIDATOR_CB_REASON",
	"p_impfw_selfchk_cb_t"			: "TEST_VALIDATOR_ADDR",
	"e_impdrv_reg_req_state_t"		: "TEST_VALIDATOR_REQ_REQ_STATE",
	"e_impdrv_irq_group_t"			: "TEST_VALIDATOR_DRV_IRQ_GROUP",
	"e_impdrv_instance_t"			: "TEST_VALIDATOR_DRV_INSTANCE",
	"impdrv_ctrl_handle_t"			: "TEST_VALIDATOR_ADDR",
	"p_impfw_drvwrap_cb_t"			: "TEST_VALIDATOR_ADDR",
	"impfw_ctrl_handle_t"			: "TEST_VALIDATOR_ADDR",
	"st_impfw_attrinfo_t"			: "TEST_VALIDATOR_ADDR",
	"st_impfw_version_t"			: "TEST_VALIDATOR_ADDR",
	"e_impfw_iodev_req_state_t"		: "TEST_VALIDATOR_IODEV_REQ_STATE",
	"p_impfw_cbfunc_fatal_t"		: "TEST_VALIDATOR_ADDR",
	"osal_mutex_handle_t"			: "TEST_VALIDATOR_ADDR",
	"osal_msg_handle_t"				: "TEST_VALIDATOR_ADDR",
	"osal_thread_handle_t"			: "TEST_VALIDATOR_ADDR",
    }
TABLE_VALIDATOR_BY_NAME = {
	"state"          : "TEST_VALIDATOR_STATE",
    }

[COMPARE]
LogPath = 'C:\\Users\\tructrungnguyen\\Desktop\\Report_impfw\\impfw_unit_test_on_target_v3h2-qnx-qcc-hil-release-v3h2.txt'
Revision = 'v3h2_qnx'
;Please fill your test report sheet
TestReportSheet = "Test_Report"