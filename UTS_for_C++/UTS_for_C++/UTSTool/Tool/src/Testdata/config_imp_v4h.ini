; This is the comment
[PATH]
; TODO: Current support is just 1 excel file.
InputPath             = "D:\\Projects\\VDSP\\IMPD_X30_Unit_Test_Specification.xlsx"

; Parent directory/ Base folder
; Ex: ${Workspace}/ut_framework
OutputPath            = "D:\\Projects\\VDSP\\rcar-env\\renesas\\driver\\soc\\platform\\imp\\test\\unit_test\\application\\ut_framework"

[TARGET_OF_TESTING]
; Finding sheet contain test data (depend on prj)
TargetModule          = "imp"
FindByPrefix          = False
Prefix                = ['R_IMPDRV','impdrv']
SheetNameContainData  = [	
							; 'R_IMPDRV_Init_v3h2', \
							; 'R_IMPDRV_Quit_v3h2', \
							; 'R_IMPDRV_AttrInit', \
							; 'R_IMPDRV_AttrSetCoreMemInit', \
							; 'R_IMPDRV_Start', \
							; 'R_IMPDRV_Stop', \
							; 'R_IMPDRV_AttrSetCoreMap_v3h2', \
							; 'R_IMPDRV_AttrSetCl', \
							; 'R_IMPDRV_AttrSetIrqMask', \
							; 'R_IMPDRV_SetIrqGroup_v3h2', \
							; 'R_IMPDRV_Execute_v3h2', \
							; 'R_IMPDRV_ResumeExecution', \
							; 'R_IMPDRV_SetPMPolicy', \
							; 'R_IMPDRV_GetPMPolicy', \
							; 'R_IMPDRV_GetVersion', \
							; 'impdrv_api_chk_init_data', \
							; 'impdrv_api_chk_core_info', \
							; 'impdrv_api_chk_instance_num', \
							; 'impdrv_api_cnv_error_code', \
							; 'impdrv_api_cnv_ctrl_handle', \
							; 'impdrv_genctl_init_v3h2', \
							; 'impdrv_genctl_quit_v3h2', \
							; 'impdrv_genctl_start', \
							; 'impdrv_genctl_stop', \
							; 'impdrv_genctl_execute_v3h2', \
							; 'impdrv_genctl_resume_exe', \
							; 'impdrv_genctl_pm_set_policy', \
							; 'impdrv_genctl_pm_get_policy', \
							; 'impdrv_genctl_attr_init', \
							; 'impdrv_genctl_set_mem_init', \
							; 'impdrv_genctl_set_core_map_v3h2', \
							; 'impdrv_genctl_set_cl', \
							; 'impdrv_genctl_set_irq_mask', \
							; 'ut_genctl_set_irq_group_v3h2', \
							; 'impdrv_genctl_chk_core_info', \
							; 'impdrv_genctl_prologue', \
							; 'impdrv_genctl_epilogue', \
							; 'impdrv_cmnctl_init_v3h2', \
							; 'ut_cmnctl_get_corectl_func_v3h2', \
							; 'impdrv_cmnctl_mutex_create', \
							; 'impdrv_cmnctl_mutex_destroy', \
							; 'impdrv_cmnctl_mutex_lock', \
							; 'impdrv_cmnctl_mutex_unlock', \
							; 'impdrv_cmnctl_cnv_int_core_bit', \
							; 'impdrv_osdep_pow_on_imp_top', \
							; 'impdrv_osdep_pow_off_imp_top', \
							; 'impdrv_osdep_register_irq', \
							; 'impdrv_osdep_enable_irq', \
							; 'impdrv_osdep_disable_irq', \
							; 'impdrv_osdep_unregister_irq', \
							; 'impdrv_osdep_write_reg', \
							; 'impdrv_osdep_read_reg', \
							; 'impdrv_osdep_mutex_create', \
							; 'impdrv_osdep_mutex_destroy', \
							; 'impdrv_osdep_mutex_lock', \
							; 'impdrv_osdep_mutex_unlock', \
							; 'impdrv_osdep_dev_open', \
							; 'impdrv_osdep_dev_close', \
							; 'impdrv_osdep_pow_on', \
							; 'impdrv_osdep_pow_off', \
							; 'impdrv_cmnctl_judge_int', \
							; 'impdrv_cmnctl_set_irq_group', \
							; 'ut_cmnctl_get_syncc_val_v3h2', \
							; 'impdrv_cmnctl_fatal_cb', \
							; 'impdrv_cmnctl_chk_core_info', \
							; 'ut_cmnctl_chk_instance_num_v3h2', \
							; 'ut_cmnctl_cnv_int_bit_core_v3h2', \
							; 'ut_cmnctl_execute_no_group_v3h2', \
							; 'ut_cmnctl_execute_group_v3h2', \
							; 'impdrv_osdep_int_handler', \
							; 'impdrv_osdep_chk_core_info', \
							; 'ut_osdep_chk_instance_num_v3h2', \
							; 'impdrv_osdep_get_irq_channel', \
							; 'impdrv_osdep_pow_on_imp', \
							; 'impdrv_osdep_pow_off_imp', \
							; 'impdrv_osdep_pm_set_policy', \
							; 'impdrv_osdep_pm_get_policy', \
							'impdrv_dspctl_dsp_execute', \
							; 'impdrv_dspctl_attr_init', \
							; 'impdrv_dspctl_check_state', \
							; 'impdrv_dspctl_chk_execute_data', \
							; 'impdrv_dspctl_chk_int_data', \
							; 'impdrv_dspctl_conf_reg_check', \
							; 'impdrv_dspctl_dsp_execute_pre', \
							; 'impdrv_dspctl_dsp_foece_standby', \
							; 'impdrv_dspctl_dsp_standby', \
							; 'impdrv_dspctl_get_device_io', \
							; 'impdrv_dspctl_init_core', \
							; 'impdrv_dspctl_init_dsp', \
							; 'impdrv_dspctl_init_start', \
							; 'impdrv_dspctl_int_handler', \
							; 'impdrv_dspctl_is_valid_core', \
						]

; Define type is function pointer
[DATA_TYPE]
ListPointerType 		= [
							'osal_mq_handle_t', \
							'osal_device_handle_t', \ 
							'osal_mutex_handle_t', \
							'osal_thread_handle_t', \
							'impdrv_ctrl_handle_t', \
							'p_impdrv_cbfunc_fatal_t', \
							'st_impdrv_device_handle_t', \
							'p_impdrv_cbfunc_t', \
							'osal_memory_buffer_handle_t', \
						]

[SPECIAL_STRING]
NOT_NULL_VALUE 		= "not null"
NULL_VALUE 			= "null"
NOT_STUB_VALUE 		= "not stub"
NOT_CHANGE_VALUE    = "not change"

###################################################################################################
################################## Test code configuration ########################################
###################################################################################################
[OUTPUT_GENERATION_CONTROL]
;Flag EnableImportData is enable, it will import data from INIT_ADDR_DATA, user need to create key INIT_ADDR_DATA for inialized data.
;Flag EnableTestCode is enable when the user want to generate Test code
;Flag EnableTestData is enable when the user want to generate Test data
EnableImportData = True
EnableTestCode = True
EnableTestData = True
EnableFileGenerate = False

; Key INIT_ADDR_DATA to identify input data from file config if module is used by Semi auto tool.
INIT_ADDR_DATA = {
	"uninit_data"						: [ "uninit_data_st_impdrv_initdata_t"					, ["p_initdata", "p_data"]],
	"init_data"							: [ "init_data_st_impdrv_initdata_t"					, ["p_initdata"]],
	"null_callback_func"				: [ "null_callback_func_st_impdrv_initdata_t"			, ["p_initdata"]],
	"invalid_core_type_dta"				: [ "invalid_core_type_dta_st_impdrv_initdata_t"		, ["p_initdata"]],
	"uninit_handle"						: [ "uninitialized_impdrv_ctrl_handle_t"				, ["handle", "p_handle", "p_impdrv_ctl"]],
	"init_handle"						: [ "initialized_impdrv_ctrl_handle_t"					, ["handle", "p_impdrv_ctl"]],
	"ready_handle"						: [ "ready_impdrv_ctrl_handle_t"						, ["handle", "p_impdrv_ctl"]],
	"exec_handle"						: [	"exec_impdrv_ctrl_handle_t"							, ["handle", "p_handle", "p_impdrv_ctl"]],
	"int_handle"						: [	"int_impdrv_ctrl_handle_t"							, ["handle", "p_handle", "p_impdrv_ctl"]],
	"init_cl_addr"						: [	"init_cl_addr_impdrv_ctrl_handle_t"					, ["handle", "p_impdrv_ctl", "p_impdrv_ctl"]],
	"invalid_mutex_period"				: [	"invalid_mutex_period_impdrv_ctrl_handle_t"			, ["handle"]],
	"invalid_irq_mask"					: [ "invalid_irq_mask_impdrv_ctrl_handle_t"				, ["handle", "p_impdrv_ctl"]],
	"init_dsp_device"					: [ "init_device_dsp_handle"							, ["p_device_io"]],
	"uninit_coretypectl"				: [ "uninitialize_p_coretypectl"						, ["p_coretypectl"], ["NULL", "core_num"]],
	"init_corectl"				    	: [ "initialize_p_corectl"					    		, ["p_corectl"], ["NULL", "core_num"]],
	"uninit_corectl"			    	: [ "uninitialize_p_corectl"				    		, ["p_corectl"], ["NULL", "core_num"]],
	"init_coretypectl"					: [ "initialize_p_coretypectl"							, ["p_coretypectl"], ["NULL", "core_num"]],
	"init_coretypectl_dsp_ext"	    	: [ "initialize_p_coretypectl_dsp_ext"	     			, ["p_coretypectl"], ["NULL", "core_num"]],
	"init_coretypectl_dsp_ext1"	    	: [ "initialize_p_coretypectl_dsp_ext1"	     			, ["p_coretypectl"], ["NULL", "core_num"]],
	"init_coretypectl_dsp_ext2"	    	: [ "initialize_p_coretypectl_dsp_ext2"	     			, ["p_coretypectl"], ["NULL", "core_num"]],
	"init_coretypectl_nullhandle"		: [ "initialize_p_coretypectl_null_handle"				, ["p_coretypectl"], ["NULL", "core_num"]],
	"init_coretypectl_param_off"		: [ "initialize_p_coretypectl_param_off"				, ["p_coretypectl"], ["NULL", "core_num"]],
	"ready_coretypectl_param_off"		: [ "ready_p_coretypectl_param_off"						, ["p_coretypectl"], ["NULL", "core_num"]],
	"ready_coretypectl"					: [ "ready_p_coretypectl"								, ["p_coretypectl"], ["NULL", "core_num"]],
	"ready_corectl_dsp_standby"	    	: [ "ready_p_corectl_dsp_standby"			    		, ["p_corectl"], ["NULL", "core_num"]],
	"ready_corectl_dsp_running"	    	: [ "ready_p_corectl_dsp_running"			    		, ["p_corectl"], ["NULL", "core_num"]],
	"ready_corectl_dsp_not_update_app"	: [ "ready_corectl_dsp_not_update_app"  				, ["p_corectl"], ["NULL", "core_num"]],
	"ready_checksum"					: [ "ready_st_impdrv_commonctl_chk_t"],
	"ready1_handle" 					: [ "ready1_impdrv_ctrl_handle_t" 						, ["handle", "p_impdrv_ctl"]],
	"impdrv_ctl"                    	: [ "impdrv_ctl_st_impdrv_ctl_t"                		, ["p_impdrv_ctl"]],
	"uninit_impdrv_ctl"             	: [ "uninit_impdrv_ctl_st_impdrv_ctl_t"         		, ["p_impdrv_ctl"]],
	"ready_impdrv_ctl"              	: [ "ready_impdrv_ctl_st_impdrv_ctl_t"          		, ["p_impdrv_ctl"]],
	"ready_impdrv_ctl"              	: [ "ready_impdrv_ctl_st_impdrv_ctl_t"          		, ["p_impdrv_ctl"]],
	"state_handle" 				    	: [ "stateinitialized_impdrv_ctrl_handle_t"     		, ["handle", "p_impdrv_ctl"]],
	"notready"            	        	: [ "notreadyimpdrv_ctl_st_impdrv_ctl_t"        		, ["p_impdrv_ctl"]],
	"pfunc" 				        	: [ "pfuncinitialized_impdrv_ctrl_handle_t"     		, ["handle", "p_impdrv_ctl"]],
	"instance" 							: [ "instance_impdrv_ctl_st_impdrv_ctl_t"  				, ["p_impdrv_ctl"]],
	"instance_handle" 					: [ "instancehandle_impdrv_ctl_st_impdrv_ctl_t" 		, ["p_impdrv_ctl"]],
	"state_unhandle" 					: [ "stateuninitialized_impdrv_ctrl_handle_t"   		, ["handle", "p_impdrv_ctl"]],
	"checksum_handle"               	: [ "chkinitialized_impdrv_ctrl_handle_t" 				, ["handle", "p_impdrv_ctl"]],
	"pimpinit"                      	: [ "pimpinit_impdrv_ctl_st_impdrv_ctl_t" 				, ["p_impdrv_ctl"]],
	"pfunc1" 				        	: [ "pfunc1initialized_impdrv_ctrl_handle_t"    		, ["handle", "p_impdrv_ctl"]],
	"pimpinit1"                      	: [ "pimpinit1_impdrv_ctl_st_impdrv_ctl_t" 				, ["p_impdrv_ctl"]],
	#"deviceio"							: [ "deviceioinitialize_p_coretypectl"					, ["p_coretypectl"], ["NULL", "core_num"]],
	"uninit_funcs" 						: ["uninit_funcs_st_impdrv_corectl_func_t" 				, ["p_funcs"]],
	"init_coretypectl_param_on"	    	: [ "initialize_p_coretypectl_param_on"		    		, ["p_coretypectl"], ["NULL", "core_num"]],
	"init_handle1"                  	: [ "initialized_impdrv_ctrl_handle_t1"         		, ["handle", "p_impdrv_ctl"]],
	"null_funcs" 						: ["null_funcs_st_impdrv_corectl_func_t"				, ["p_funcs"]],
	"null2_funcs" 						: ["null2_funcs_st_impdrv_corectl_func_t"				, ["p_funcs"]],
	#"ready_impdrv_ctl_null"			: ["ready_impdrv_ctl_null_st_impdrv_ctl_t"				, ["p_impdrv_ctl"]],
	"init_coretypectl_param_off_null"	: [ "initialize_p_coretypectl_param_off_nullhandle"		, ["p_coretypectl"], ["NULL", "core_num"]],
	"state_instance_handle"         	: [ "stateinitialized_instance_impdrv_ctrl_handle_t"	, ["handle", "p_impdrv_ctl"]],
	"init_instance_handle"		    	: [ "initialized_instance_impdrv_ctrl_handle_t"			, ["handle", "p_handle", "p_impdrv_ctl"]],
	"init_coretypectl_param_off_null1"	: [ "initialize_p_coretypectl_param_off_nullhandle1"	, ["p_coretypectl"], ["NULL", "core_num"]],
	"init_coretypectl_param_off_null2"	: [ "initialize_p_coretypectl_param_off_nullhandle2"	, ["p_coretypectl"], ["NULL", "core_num"]],
	"deinit_dsp_device"					: [ "deinit_device_dsp_handle"							, ["p_device_io"]],
	"set_dsp_cbfunc"					: [ "set_p_corectl_dsp_cbfunc"							, ["p_corectl"]],
	"unset_dsp_cbfunc"					: [ "unset_p_corectl_dsp_cbfunc"						, ["p_corectl"]],
	"uninit_dsp"						: [ "uninit_p_corectl_dsp_execute_pre"					, ["p_corectl"]],
	"init_dsp"							: [ "init_p_corectl_dsp_execute_pre"					, ["p_corectl"]],
	"ready_dsp"							: [ "ready_p_corectl_dsp_execute_pre"					, ["p_corectl"]],
	"exec_dsp"							: [ "exec_p_corectl_dsp_execute_pre"					, ["p_corectl"]],
	"int_dsp"							: [ "int_p_corectl_dsp_execute_pre"						, ["p_corectl"]],
	"invalid_dsp"						: [ "invalid_p_corectl_dsp_execute_pre"					, ["p_corectl"]],
	"valid_dsp_app"						: [ "valid_p_corectl_execute_data_dsp_info"				, ["p_corectl"]],
	"invalid_dsp_app"					: [ "invalid_p_corectl_execute_data_dsp_info"			, ["p_corectl"]],
	"deinit_dsp_device_nth"				: [ "deinit_device_dsp_io_nth"							, ["p_device_io"], [ "0", "index"]],
	"deinit_dsp_device_nth_handle"		: [ "deinit_device_dsp_io_nth_handle"					, ["p_device_io"], [ "0", "index"]],
	"p_coretypectl_dsp_nth_handle"		: [ "p_coretypectl_dsp_nth_handle"						, ["p_coretypectl"], [ "0", "core_num"], [ "0", "state"], [ "0", "index"], [ "false", "null_flag"]],
	"p_coretypectl_dsp_nth_nullhandle"	: [ "p_coretypectl_dsp_nth_nullhandle"					, ["p_coretypectl"], [ "0", "core_num"], [ "0", "state"]],
	"p_corectl_dsp_nth_handle"			: [ "p_corectl_dsp_nth_handle"							, ["p_corectl"], [ "0", "state"], [ "0", "index"], [ "false", "null_flag"]],
	"set_dsp_core_info"					: [ "set_p_corectl_dsp_cbfunc"							, ["uint32_t"]],
	}

[VALIDATOR]
;Key TABLE_VALIDATOR to identify marco Validator following type expected value in PCL.
;For a example, RCvDrvErrorCode is a type in PCL Driver, and convert to marco TEST_VALIDATOR_RETCODE
;With this marco TEST_VALIDATOR_RETCODE, it needs to implement function to check marco in Framework Tool.
TABLE_VALIDATOR_BY_TYPE = {
	'e_impdrv_errorcode_t'  : 'TEST_VALIDATOR_IMPDRV_RETCODE',
	'e_impdrv_pm_policy_t'	: 'TEST_VALIDATOR_IMPDRV_POLICY',
	'e_impdrv_param_t'		: 'TEST_VALIDATOR_IMPDRV_PARAM',
	'e_impdrv_state_t'		: 'TEST_VALIDATOR_IMPDRV_STATE',
	'bool'					: 'TEST_VALIDATOR_BOOLVALUE',
    }

TABLE_VALIDATOR_BY_NAME = {
	'major'					: 'TEST_VALIDATOR_VERSION_MAJOR',
	'minor'					: 'TEST_VALIDATOR_VERSION_MINOR',
	'patch'					: 'TEST_VALIDATOR_VERSION_PATCH',
    }

[COMPARE]
LogPath = 'D:\\Workspace\\rcar-env_xOS2\\build_v3h2\\rcar-xos\\v2.5.0\\sw\\amd64-gnu-windows\\bin\\imp_unit_test_on_target_v4h_log.txt'
Revision = '49da9bf6'
;Please fill your test report sheet
TestReportSheet = "Test_Report"