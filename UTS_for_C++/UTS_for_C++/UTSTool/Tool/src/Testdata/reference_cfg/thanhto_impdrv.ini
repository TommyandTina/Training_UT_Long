; This is the comment
[PATH]
; TODO: Current support is just 1 excel file.
InputPath				=   "C:\\Users\\thanhto\\Desktop\\UT\\IMPDRV\\IMPD_X30_Unit_Test_Specification_svn_local.xlsx"
;InputPath				=   "C:\\Users\\thanhto\\Desktop\\UT\\IMPD_X30_Unit_Test_Specification.xlsx"


; Parent directory/ Base folder
; Ex: ${Workspace}/ut_framework
OutputPath            = "C:\\Users\\thanhto\\Desktop\\UTS Tool\\ut_framework"

;"D:\\IMR\\IMP_UT\\src\\New\\ut_framework"

[TARGET_OF_TESTING]
; Finding sheet contain test data (depend on prj)
TargetModule          = 'imp'
FindByPrefix          = False
Prefix                = ['R_IMPDRV','impdrv']
SheetNameContainData  = [   
                            ; 'impdrv_osdep_pow_on_imp', \      
                            ; 'impdrv_osdep_pm_set_policy',\
                            ; 'impdrv_dspctl_load_ptcm',\
                            ; 'impdrv_dspctl_stop_reg',\
                            ; 'impdrv_dspctl_stop',\
                            ; 'impdrv_dspctl_dsp_start_pre',\
                            ; 'impdrv_dspctl_dsp_start',\
                            ; 'impdrv_dspctl_dsp_update_app',\
                            ; 'impdrv_dspctl_dsp_execute',\
                            ; 'impdrv_dspctl_quit',\
                            ; 'impdrv_genctl_chk_state_init',\
                            ; 'impdrv_genctl_quit',\
							; 'impdrv_dspctl_is_valid_core',\
							; 'impdrv_dspctl_attr_init',\
							; 'impdrv_dspctl_check_state',\
							; 'impdrv_osdep_dsp0_int_handler',\
							; 'impdrv_osdep_dsp1_int_handler',\
							; 'impdrv_osdep_dsp2_int_handler',\
							; 'impdrv_osdep_dsp3_int_handler',\
							; 'impdrv_genctl_dsp_int_handler',\
							; 'impdrv_genctl_set_cl_brk_addr',\
							'impdrv_cmnctl_reg_read32',\
							'impdrv_cmnctl_reg_write32',\
							'impdrv_cmnctl_reg_required',\
                        ]

; ; Define type is function pointer
[DATA_TYPE]
ListPointerType         = [
                           'osal_mq_handle_t', \
                           'osal_device_handle_t', \ 
                           'osal_mutex_handle_t', \
                           'osal_thread_handle_t', \
                           'impdrv_ctrl_handle_t', \
                           'p_impdrv_cbfunc_fatal_t', \
                           'st_impdrv_device_handle_t',\
                       ]

[SPECIAL_STRING]
NOT_NULL_VALUE      = 'not null'
NULL_VALUE          = 'null'
NOT_STUB_VALUE      = 'not stub'
NOT_CHANGE_VALUE    = 'not change'

###################################################################################################
################################## Test code configuration ########################################
###################################################################################################
[OUTPUT_GENERATION_CONTROL]
;Flag EnableImportData is enable, it will import data from INIT_ADDR_DATA, user need to create key INIT_ADDR_DATA for inialized data.
;Flag EnableTestCode is enable when the user want to generate Test code
;Flag EnableTestData is enable when the user want to generate Test data
EnableImportData = True
EnableTestCode = True
EnableTestData = True
EnableFileGenerate = False

; Key INIT_ADDR_DATA to identify input data from file config if module is used by Semi auto tool.
INIT_ADDR_DATA = {
    'init dsp device'               : ['init_device_dsp_handle' , ['p_device_io']],
    'init_funcs'                    : ['init_funcs_st_impdrv_corectl_func_t' , ['p_funcs']],
    'uninit_data'                   : [ 'uninit_data_st_impdrv_initdata_t'          , ['p_initdata', 'p_data']],
    'init_data'                     : [ 'init_data_st_impdrv_initdata_t'            , ['p_initdata']],
    'null_callback_func'            : [ 'null_callback_func_st_impdrv_initdata_t'   , ['p_initdata']],
    'invalid_core_type_dta'         : [ 'invalid_core_type_dta_st_impdrv_initdata_t', ['p_initdata']],
    'uninit_handle'                 : [ 'uninitialized_impdrv_ctrl_handle_t'        , ['handle', 'p_handle', 'p_impdrv_ctl']],
    'init_handle'                   : [ 'initialized_impdrv_ctrl_handle_t'          , ['handle', 'p_impdrv_ctl']],
    'ready_handle'                  : [ 'ready_impdrv_ctrl_handle_t'                , ['handle', 'p_impdrv_ctl']],
    'exec_handle'                   : [ 'exec_impdrv_ctrl_handle_t'                 , ['handle', 'p_handle', 'p_impdrv_ctl', 'irq_arg']],
    'int_handle'                    : [ 'int_impdrv_ctrl_handle_t'                  , ['handle', 'p_handle', 'p_impdrv_ctl']],
    'init_cl_addr'                  : [ 'init_cl_addr_impdrv_ctrl_handle_t'         , ['handle', 'p_impdrv_ctl', 'p_impdrv_ctl']],
    'invalid_mutex_period'          : [ 'invalid_mutex_period_impdrv_ctrl_handle_t' , ['handle']],
    'invalid_irq_mask'              : [ 'invalid_irq_mask_impdrv_ctrl_handle_t'     , ['handle', 'p_impdrv_ctl']],
    'uninit_coretypectl'            : [ 'uninitialize_p_coretypectl'                , ['p_coretypectl'], ["NULL", 'core_num']],
    'init_corectl'                  : [ 'initialize_p_corectl'                      , ['p_corectl'], ["NULL", 'core_num']],
    'uninit_corectl'                : [ 'uninitialize_p_corectl'                    , ['p_corectl'], ["NULL", 'core_num']],
    'init_coretypectl'              : [ 'initialize_p_coretypectl'                  , ['p_coretypectl'], ["NULL", 'core_num']],
    'init_coretypectl_dsp_ext'      : [ 'initialize_p_coretypectl_dsp_ext'          , ['p_coretypectl'], ["NULL", 'core_num']],
    'init_coretypectl_nullhandle'   : [ 'initialize_p_coretypectl_null_handle'      , ['p_coretypectl'], ["NULL", 'core_num']],
    'init_coretypectl_param_off'    : [ 'initialize_p_coretypectl_param_off'        , ['p_coretypectl'], ["NULL", 'core_num']],
    'ready_coretypectl_param_off'   : [ 'ready_p_coretypectl_param_off'             , ['p_coretypectl'], ["NULL", 'core_num']],
    'ready_coretypectl'             : [ 'ready_p_coretypectl'                       , ['p_coretypectl'], ["NULL", 'core_num']],
    'ready_corectl_dsp_standby'     : [ 'ready_p_corectl_dsp_standby'               , ['p_corectl'], ["NULL", 'core_num']],
    'ready_corectl_dsp_running'     : [ 'ready_p_corectl_dsp_running'               , ['p_corectl'], ["NULL", 'core_num']],
    'ready_checksum'                : [ 'ready_st_impdrv_commonctl_chk_t'           ],
    'ready1_handle'                 : [ 'ready1_impdrv_ctrl_handle_t'               , ['handle', 'p_impdrv_ctl']],
    'impdrv_ctl'                    : [ 'impdrv_ctl_st_impdrv_ctl_t'                , ['p_impdrv_ctl']],
    'uninit_impdrv_ctl'             : [ 'uninit_impdrv_ctl_st_impdrv_ctl_t'         , ['p_impdrv_ctl']],
    'ready_impdrv_ctl'              : [ 'ready_impdrv_ctl_st_impdrv_ctl_t'          , ['p_impdrv_ctl']],
    'ready_impdrv_ctl'              : [ 'ready_impdrv_ctl_st_impdrv_ctl_t'          , ['p_impdrv_ctl']],
    'state_handle'                  : [ 'stateinitialized_impdrv_ctrl_handle_t'     , ['handle', 'p_impdrv_ctl']],
    'notready'                      : [ 'notreadyimpdrv_ctl_st_impdrv_ctl_t'        , ['p_impdrv_ctl']],
    'pfunc'                         : [ 'pfuncinitialized_impdrv_ctrl_handle_t'     , ['handle', 'p_impdrv_ctl']],
    'instance'                      : [ 'instance_impdrv_ctl_st_impdrv_ctl_t'       , ['p_impdrv_ctl']],
    'instance_handle'               : [ 'instancehandle_impdrv_ctl_st_impdrv_ctl_t' , ['p_impdrv_ctl']],
    'state_unhandle'                : [ 'stateuninitialized_impdrv_ctrl_handle_t'   , ['handle', 'p_impdrv_ctl']],
    'checksum_handle'               : [ 'chkinitialized_impdrv_ctrl_handle_t' ,     ['handle', 'p_impdrv_ctl']],
    'pimpinit'                      : [ 'pimpinit_impdrv_ctl_st_impdrv_ctl_t' ,     ['p_impdrv_ctl']],
    'pfunc1'                        : [ 'pfunc1initialized_impdrv_ctrl_handle_t'     , ['handle', 'p_impdrv_ctl']],
    'pimpinit1'                      : [ 'pimpinit1_impdrv_ctl_st_impdrv_ctl_t' ,   ['p_impdrv_ctl']],
    #'deviceio'                     : [ 'deviceioinitialize_p_coretypectl'          , ['p_coretypectl'], ["NULL", 'core_num']],
    'uninit_funcs'                  : ['uninit_funcs_st_impdrv_corectl_func_t'      , ['p_funcs']],
    'init_coretypectl_param_on'     : [ 'initialize_p_coretypectl_param_on'         , ['p_coretypectl'], ["NULL", 'core_num']],
    'init_handle1'                  : [ 'initialized_impdrv_ctrl_handle_t1'         , ['handle', 'p_impdrv_ctl']],
    'null_funcs'                    : ['null_funcs_st_impdrv_corectl_func_t' , ['p_funcs']],
    'null2_funcs'                   : ['null2_funcs_st_impdrv_corectl_func_t' , ['p_funcs']],
    #'ready_impdrv_ctl_null'            : ['ready_impdrv_ctl_null_st_impdrv_ctl_t', ['p_impdrv_ctl']],
    'init_coretypectl_param_off_null'   : [ 'initialize_p_coretypectl_param_off_nullhandle'     , ['p_coretypectl'], ["NULL", 'core_num']],
    'state_instance_handle'         : [ 'stateinitialized_instance_impdrv_ctrl_handle_t' , ['handle', 'p_impdrv_ctl']],
    'init_instance_handle'          : [ 'initialized_instance_impdrv_ctrl_handle_t', ['handle', 'p_handle', 'p_impdrv_ctl']],
    'init_coretypectl_param_off_null1'  : [ 'initialize_p_coretypectl_param_off_nullhandle1'        , ['p_coretypectl'], ["NULL", 'core_num']],
    'init_coretypectl_param_off_null2'  : [ 'initialize_p_coretypectl_param_off_nullhandle2'        , ['p_coretypectl'], ["NULL", 'core_num']],
	"uninit_dsp"                    : [ "uninit_p_corectl_dsp_execute_pre"          , ["p_corectl"]],
    "init_dsp"                      : [ "init_p_corectl_dsp_execute_pre"            , ["p_corectl"]],
    "ready_dsp"                     : [ "ready_p_corectl_dsp_execute_pre"           , ["p_corectl"]],
    "exec_dsp"                      : [ "exec_p_corectl_dsp_execute_pre"            , ["p_corectl"]],
    "int_dsp"                       : [ "int_p_corectl_dsp_execute_pre"             , ["p_corectl"]],
    "invalid_dsp"                   : [ "invalid_p_corectl_dsp_execute_pre"         , ["p_corectl"]],

    }

[VALIDATOR]
;Key TABLE_VALIDATOR to identify marco Validator following type expected value in PCL.
;For a example, RCvDrvErrorCode is a type in PCL Driver, and convert to marco TEST_VALIDATOR_RETCODE
;With this marco TEST_VALIDATOR_RETCODE, it needs to implement function to check marco in Framework Tool.
TABLE_VALIDATOR_BY_TYPE = {
    'e_impdrv_errorcode_t'  : 'TEST_VALIDATOR_IMPDRV_RETCODE',
    'e_impdrv_pm_policy_t'  : 'TEST_VALIDATOR_IMPDRV_POLICY',
    'e_impdrv_param_t'      : 'TEST_VALIDATOR_IMPDRV_PARAM',
    'e_impdrv_state_t'      : 'TEST_VALIDATOR_IMPDRV_STATE', 
    }

TABLE_VALIDATOR_BY_NAME = {
    'major'                 : 'TEST_VALIDATOR_VERSION_MAJOR',
    'minor'                 : 'TEST_VALIDATOR_VERSION_MINOR',
    'patch'                 : 'TEST_VALIDATOR_VERSION_PATCH',
    }

[COMPARE]
; LogPath = 'D:\\IMP_setup\\IMP\\Input\\UT_Env\\rcar-env\\renesas\\driver\\soc\\platform\\imp\\test\\unit_test\\application\\ut_framework_IMP\\v3h2log.txt'
LogPath = "C:\\Users\\tamcotran\\Desktop\\test\\log.txt"
Revision = 'e31fefbd_v3h2_linux'
;Please fill your test report sheet
TestReportSheet = "Test_Report"
