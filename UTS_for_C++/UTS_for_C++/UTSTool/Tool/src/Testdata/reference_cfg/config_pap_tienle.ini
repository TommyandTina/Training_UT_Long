; This is the comment
[PATH]
; TODO: Current support is just 1 excel file.
; Parent directory/ Base folder
; Ex: ${Workspace}/ut_framework
InputPath				= "C:\\Workspace\\Project\\SVN\\ss2_imp_xos3\\trunk\\xOS3.0_IMPPAPDSP_common\\06_Unit_Test\\01_Test_Specification\\03_PAP\\PAP_X30_Unit_Test_Specification_local.xlsx"
OutputPath            = "C:\\Workspace\\Project\\SVN\\ss2_imp_xos3\\trunk\\xOS3.0_IMPPAPDSP_common\\06_Unit_Test\\01_Test_Specification\\03_PAP\\ut_pap"
[TARGET_OF_TESTING]
; Finding sheet contain test data (depend on prj)
TargetModule          = 'pap'
FindByPrefix          = False
Prefix                = ['R_PAPDRV', 'papdrv']
SheetNameContainData  = [	
							'R_IMPFW_GetPmPolicy', \		
						]

; Define type is function pointer
[DATA_TYPE]
ListPointerType 		= [
							'papdrv_ctrl_handle_t', \
							'osal_mq_handle_t','osal_device_handle_t', \
							'osal_mutex_handle_t', 'osal_thread_handle_t', \
							'osal_memory_buffer_handle_t',\
						]

[SPECIAL_STRING]
NOT_NULL_VALUE 		= 'not null'
NULL_VALUE 			= 'null'
NOT_STUB_VALUE 		= 'not stub'
NOT_CHANGE_VALUE    = 'not change'

###################################################################################################
################################## Test code configuration ########################################
###################################################################################################
[OUTPUT_GENERATION_CONTROL]
;Flag EnableImportData is enable, it will import data from INIT_ADDR_DATA, user need to create key INIT_ADDR_DATA for inialized data.
;Flag EnableTestCode is enable when the user want to generate Test code
;Flag EnableTestData is enable when the user want to generate Test data
EnableImportData = True
EnableTestCode = True
EnableTestData = True
EnableFileGenerate = True

; Key INIT_ADDR_DATA to identify input data from file config if module is used by Semi auto tool.
INIT_ADDR_DATA = {
	; "init attribute"        			: [	"init_R_IMPFW_Attribute"	        	, ["attrhandle"], [ "0", "g_attr_core_info"] ],    
	}

[VALIDATOR]
;Key TABLE_VALIDATOR to identify marco Validator following type expected value in PCL.
;For a example, RCvDrvErrorCode is a type in PCL Driver, and convert to marco TEST_VALIDATOR_RETCODE
;With this marco TEST_VALIDATOR_RETCODE, it needs to implement function to check marco in Framework Tool.
TABLE_VALIDATOR_BY_TYPE = {
	"st_papdrv_version_t"			: "TEST_VALIDATOR_ADDR",
	"e_papdrv_return_t" 		    : "TEST_VALIDATOR_PAPDRV_RETCODE",
	"e_papdrv_state_type_t" 	    : "TEST_VALIDATOR_PAPDRV_STATE",
	"papdrv_ctrl_handle_t"			: "TEST_VALIDATOR_ADDR",
	"osal_thread_handle_t"			: "TEST_VALIDATOR_ADDR",
	"osal_mq_handle_t"				: "TEST_VALIDATOR_ADDR",
	"osal_milli_sec_t"				: "TEST_VALIDATOR_I32VALUE",
	"osal_mutex_handle_t"			: "TEST_VALIDATOR_ADDR",
	"osal_msg_handle_t"				: "TEST_VALIDATOR_ADDR",
	"osal_thread_handle_t"			: "TEST_VALIDATOR_ADDR",
	"bool"							: "TEST_VALIDATOR_BOOLVALUE",
	"int32_t"						: "TEST_VALIDATOR_I32VALUE",
	"int64_t"						: "TEST_VALIDATOR_I64VALUE",
	"uint32_t"						: "TEST_VALIDATOR_U32VALUE",
	"uint64_t"						: "TEST_VALIDATOR_U64VALUE",
	"size_t"						: "TEST_VALIDATOR_I32VALUE",
    }
TABLE_VALIDATOR_BY_NAME = {
	"state"          : "TEST_VALIDATOR_PAPDRV_STATE",
    }

[COMPARE]
LogPath = ''
Revision = ''
;Please fill your test report sheet
TestReportSheet = "Test_Report"